cscope 15 $HOME/webviz/WebViz-1/app/views/shared -q 0000002763 0000834238
	@/home/gopikannan/Downloads/nano-RK/src/drivers/include/nrk_driver_list.h

29 
	#ADC_DEV_MANAGER
 0

	)

30 
	#FIREFLY_SENSOR_BASIC
 1

	)

31 
	#IMEC_EEG_MANAGER
 2

	)

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_1/include/audio.h

27 #i‚de‡
AUDIO_H


28 
	#AUDIO_H


	)

30 
	#AUDIO_BUFS
 4

	)

31 
	#MAX_AUDIO_BUF
 20

	)

33 
uöt8_t
 
	gaudio_buf„rs
[
AUDIO_BUFS
][
MAX_AUDIO_BUF
];

34 
uöt8_t
 
	gaudio_˙t
[
AUDIO_BUFS
];

35 
uöt8_t
 
	gaudio_ödex
;

37 
	#MIC_PIN
 3

	)

39 
audio_ßm∂e
(
uöt8_t
 
°©e
,uöt8_à
›t
,uöt8_à*
buff
,uöt8_à
size
);

40 
audio_°¨t
();

41 
audio_öô
();

42 
uöt8_t
 
audio_swôch_buf„rs
();

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_1/include/dev_adc.h

27 
	~<°dio.h
>

29 
	#GET_ADC_STATE
 2 + 
STATUS


	)

31 
dñay
();

32 
uöt8_t
 
dev_m™agî_adc
(uöt8_à
°©e
,uöt8_à
›t
,uöt8_à* 
buf„r
,uöt8_à
size
);

33 
uöt16_t
 
gë_adc_vÆ
();

36 
öô_adc
();

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_1/source/adc_dev_manager.c

27 
	~<ƒk_drivî_li°.h
>

28 
	~<dev_adc.h
>

29 
	~<ö˛ude.h
>

30 
	~<°dio.h
>

31 
	~<ulib.h
>

32 
	~<ƒk_îr‹.h
>

34 
uöt8_t
 
	$dev_m™agî_adc
(
uöt8_t
 
°©e
,uöt8_à
›t
,uöt8_à*
buf„r
,uöt8_à
size
)

36 
uöt8_t
 
cou¡
=0;

38 
°©e
)

40 
INIT_STATE
:

41 
	`öô_adc
();

44 
OPEN_STATE
: {

45 
›t
){

46 
READ_STATE
:

49 
WRITE_STATE
:

52 
RW_STATE
:

56 
	`ƒk_kî√l_îr‹_add
(
NRK_DEVICE_DRIVER
,0);

60 
READ_STATE
:

61 
cou¡
=0;cou¡<
size
;count++)

64 
uöt16_t
 
vÆ
=
	`gë_adc_vÆ
();

65 
buf„r
[
cou¡
]=
vÆ
 >>2 & 0xFF;

67  
cou¡
;

68 
CLOSE_STATE
:

72 
GET_ADC_STATE
:

76 
	`ƒk_kî√l_îr‹_add
(
NRK_DEVICE_DRIVER
,0);

79 
	}
}

81 
	$öô_adc
()

84 
DDRA
 = 0x80;

85 
	`ADC_INIT
 ();

86 
	`ADC_ENABLE
 ();

87 
	`ADC_SET_CHANNEL
 (0);

88 
	}
}

90 
uöt16_t
 
	$gë_adc_vÆ
()

92 
uöt16_t
 
adc_vÆ
;

93 
	`ADC_SAMPLE_SINGLE
();

94 
	`dñay
();

95 
	`ADC_GET_SAMPLE_10
(
adc_vÆ
);

96  
adc_vÆ
;

97 
	}
}

98 
	$dñay
()

100 vﬁ©ûê
uöt8_t
 
x
,
a
;

101 
x
=0;x<100;x++)

102 
a
=
x
;

103 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_1/source/audio.c

27 
	~<ö˛ude.h
>

28 
	~<ulib.h
>

29 
	~<audio.h
>

30 
	~<avr/öãºu±.h
>

31 
	~<ƒk_cfg.h
>

34 
	$audio_öô
()

36 
uöt8_t
 
i
;

38 
DDRA
 = 0x80;

39 
	`ADC_INIT
 ();

40 
	`ADC_ENABLE
 ();

41 
	`ADC_SET_CHANNEL
 (
MIC_PIN
);

42 
audio_ödex
=0;

43 
i
=0; i<
AUDIO_BUFS
; i++ )

45 
audio_˙t
[
i
]=0;

47 
	`¥ötf
( "Audio init\r" );

48 
	}
}

51 
	$audio_°¨t
()

60 
	`ADC_SET_CHANNEL
 (
MIC_PIN
);

61 
	`ADC_SAMPLE_SINGLE
 ();

62 
	`¥ötf
( "Audio Started\r" );

63 
	}
}

65 
uöt8_t
 
	$audio_swôch_buf„rs
()

67 
uöt8_t
 
¥ev_ödex
;

68 
	`DISABLE_GLOBAL_INT
();

69 
¥ev_ödex
=
audio_ödex
;

70 
audio_ödex
++;

71 if(
audio_ödex
>=
AUDIO_BUFS
)áudio_index=0;

72 
audio_˙t
[
audio_ödex
]=0;

73 
	`ENABLE_GLOBAL_INT
();

74  
¥ev_ödex
;

75 
	}
}

78 
	$audio_ßm∂e
(
uöt8_t
 
°©e
,uöt8_à
›t
,uöt8_à*
buff
,uöt8_à
size
)

80 
uöt16_t
 
ßm∂e
;

83 
	`ADC_SET_CHANNEL
 (
MIC_PIN
);

84 
	`ADC_SAMPLE_SINGLE
 ();

85 
	`ADC_GET_SAMPLE_10
 (
ßm∂e
);

87 
ßm∂e
=sample>>2;

88 
ßm∂e
=sample&0xFF;

89 if(
audio_˙t
[
audio_ödex
]<
MAX_AUDIO_BUF
)

91 
audio_buf„rs
[
audio_ödex
][
audio_˙t
[audio_ödex]]=
ßm∂e
;

92 
audio_˙t
[
audio_ödex
]++;

97 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_2/include/adc_driver.h

28 
	~<°dio.h
>

31 
	#ADC_CHAN
 1

	)

34 
	#CHAN_0
 0

	)

35 
	#CHAN_1
 1

	)

36 
	#CHAN_2
 2

	)

37 
	#CHAN_3
 3

	)

38 
	#CHAN_4
 4

	)

39 
	#CHAN_5
 5

	)

40 
	#CHAN_6
 6

	)

41 
	#CHAN_7
 7

	)

43 
dñay
();

44 
uöt8_t
 
dev_m™agî_adc
(uöt8_à
°©e
,uöt8_à
›t
,uöt8_à* 
buf„r
,uöt8_à
size
);

45 
uöt16_t
 
gë_adc_vÆ
();

48 
öô_adc
();

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_2/include/ff_basic_sensor.h

28 
	~<°dio.h
>

31 
	#SENSOR_SELECT
 1

	)

34 
	#BAT
 0

	)

35 
	#LIGHT
 1

	)

36 
	#ACC_X
 2

	)

37 
	#AUDIO
 3

	)

38 
	#TEMP
 4

	)

39 
	#ACC_Y
 5

	)

40 
	#ACC_Z
 6

	)

41 
	#AUDIO_P2P
 7

	)

42 
	#ACC_P2P
 8

	)

45 
	#PWR_CTRL_MASK
 0x80

	)

48 
dñay
();

49 
uöt8_t
 
dev_m™agî_ff_£ns‹s
(uöt8_à
°©e
,uöt8_à
›t
,uöt8_à* 
buf„r
,uöt8_à
size
);

50 
uöt16_t
 
gë_adc_vÆ
();

53 
öô_adc
();

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_2/source/adc_driver.c

28 
	~<ƒk_drivî_li°.h
>

29 
	~<ƒk_drivî.h
>

30 
	~<adc_drivî.h
>

31 
	~<ö˛ude.h
>

32 
	~<°dio.h
>

33 
	~<ulib.h
>

34 
	~<ƒk_îr‹.h
>

35 
	~<ƒk.h
>

36 
	~<°döt.h
>

38 
	#ADC_SETUP_DELAY
 500

	)

40 
uöt8_t
 
	gch™√l
;

42 
	#ADC_INIT
() \

44 
ADCSRA
 = 
	`BM
(
ADPS0
Ë| BM(
ADPS1
); \

45 
ADMUX
 = 
	`BM
(
REFS0
); \

46 } 0)

	)

48 
	#ADC_SET_CHANNEL
(
ch™√l
Ëdÿ{ 
ADMUX
 = (ADMUX & ~0x1FË| (ch™√l); } 0)

	)

51 
	#ADC_ENABLE
(Ëdÿ{ 
ADCSRA
 |
	`BM
(
ADEN
); } 0)

	)

52 
	#ADC_DISABLE
(Ëdÿ{ 
ADCSRA
 &~
	`BM
(
ADEN
); } 0)

	)

54 
	#ADC_SAMPLE_SINGLE
() \

56 
ADCSRA
 |
	`BM
(
ADSC
); \

57 !(
ADCSRA
 & 0x10)); \

58 } 0)

	)

61 
	#ADC_GET_SAMPLE_10
(
x
) \

63 
x
 = 
ADCL
; \

64 
x
 |
ADCH
 << 8; \

65 } 0)

	)

67 
	#ADC_GET_SAMPLE_8
(
x
) \

69 
x
 = ((
uöt8_t
Ë
ADCL
) >> 2; \

70 
x
 |((
öt8_t
Ë
ADCH
) << 6; \

71 } 0)

	)

73 
uöt8_t
 
	$dev_m™agî_adc
(
uöt8_t
 
a˘i⁄
,uöt8_à
›t
,uöt8_à*
buf„r
,uöt8_à
size
)

75 
uöt8_t
 
cou¡
=0;

77 
uöt8_t
 
key
=
›t
;

78 
uöt8_t
 
vÆue
=
size
;

79 
uöt16_t
 
vÆ
;

81 
a˘i⁄
)

83 
INIT
:

84 
	`öô_adc
();

87 
OPEN
:

88 if(
›t
&
READ_FLAG
)

90  
NRK_OK
;

92 if(
›t
&
WRITE_FLAG
)

94  
NRK_ERROR
;

96 if(
›t
&
APPEND_FLAG
)

98  
NRK_ERROR
;

100 if(
›t
&(
READ_FLAG
|
WRITE_FLAG
|
APPEND_FLAG
)==0)

101  
NRK_ERROR
;

102  
NRK_OK
;

106 
READ
:

108 
vÆ
=
	`gë_adc_vÆ
();

109 
buf„r
[
cou¡
]=
vÆ
 & 0xFF;

110 
cou¡
++;

111 
buf„r
[
cou¡
]=(
vÆ
>>8) & 0xFF;

112 
cou¡
++;

113  
cou¡
;

115 
CLOSE
:

116  
NRK_OK
;

118 
GET_STATUS
:

120 if(
key
==
ADC_CHAN
Ë 
ch™√l
;

121  
NRK_ERROR
;

123 
SET_STATUS
:

125 if(
key
==
ADC_CHAN
)

127 
ch™√l
=
vÆue
;

128 
	`ADC_SET_CHANNEL
 (
ch™√l
);

129  
NRK_OK
;

131  
NRK_ERROR
;

133 
	`ƒk_kî√l_îr‹_add
(
NRK_DEVICE_DRIVER
,0);

136 
	}
}

138 
	$öô_adc
()

141 
	`ADC_INIT
 ();

142 
	`ADC_ENABLE
 ();

143 
ch™√l
=0;

144 
	`ADC_SET_CHANNEL
 (0);

145 
	}
}

147 
uöt16_t
 
	$gë_adc_vÆ
()

149 
uöt16_t
 
adc_vÆ
;

150 
	`ADC_SAMPLE_SINGLE
();

151 
	`dñay
();

152 
	`ADC_GET_SAMPLE_10
(
adc_vÆ
);

153  
adc_vÆ
;

154 
	}
}

155 
	$dñay
()

157 
	`ƒk_•ö_waô_us
(
ADC_SETUP_DELAY
);

158 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_2/source/ff_basic_sensor.c

28 
	~<ƒk_drivî_li°.h
>

29 
	~<ƒk_drivî.h
>

30 
	~<ff_basic_£ns‹.h
>

31 
	~<ö˛ude.h
>

32 
	~<°dio.h
>

33 
	~<ulib.h
>

34 
	~<ƒk_îr‹.h
>

35 
	~<ƒk.h
>

36 
	~<°döt.h
>

37 
	~<basic_rf.h
>

38 
	~<ƒk_timî.h
>

40 
	#ADC_STARTUP_DELAY
 1000

	)

41 
	#ADC_SETUP_DELAY
 200

	)

43 
uöt8_t
 
	gch™√l
;

44 
uöt8_t
 
	gis_›í
;

47 
	#ADC_INIT
() \

49 
ADCSRA
 = 
	`BM
(
ADPS0
Ë| BM(
ADPS1
); \

50 
ADMUX
 = 
	`BM
(
REFS0
); \

51 } 0)

	)

53 
	#ADC_VREF_VCC
() \

55 
ADMUX
 &~(
	`BM
(
REFS1
)); \

56 
ADMUX
 |
	`BM
(
REFS0
); \

57 } 0)

	)

60 
	#ADC_VREF_1_1
() \

62 
ADMUX
 &~(
	`BM
(
REFS0
)); \

63 
ADMUX
 |
	`BM
(
REFS1
); \

64 } 0)

	)

67 
	#ADC_VREF_2_56
() \

69 
ADMUX
 |
	`BM
(
REFS1
Ë| BM(
REFS0
); \

70 } 0)

	)

72 
	#ADC_SET_CHANNEL
(
ch™√l
Ëdÿ{ 
ADMUX
 &~0x1F; ADMUX |(ADMUX & ~0x1FË| (ch™√l); } 0)

	)

75 
	#ADC_ENABLE
(Ëdÿ{ 
ADCSRA
 |
	`BM
(
ADEN
); } 0)

	)

76 
	#ADC_DISABLE
(Ëdÿ{ 
ADCSRA
 &~
	`BM
(
ADEN
); } 0)

	)

78 
	#ADC_SAMPLE_SINGLE
() \

80 
ADCSRA
 |
	`BM
(
ADSC
); \

81 !(
ADCSRA
 & 0x10)); \

82 } 0)

	)

85 
	#ADC_GET_SAMPLE_10
(
x
) \

87 
x
 = 
ADCL
; \

88 
x
 |
ADCH
 << 8; \

89 } 0)

	)

91 
	#ADC_GET_SAMPLE_8
(
x
) \

93 
x
 = ((
uöt8_t
Ë
ADCL
) >> 2; \

94 
x
 |((
öt8_t
Ë
ADCH
) << 6; \

95 } 0)

	)

97 
uöt16_t
 
ªad_vﬁège_°©us
();

98 
uöt8_t
 
	$dev_m™agî_ff_£ns‹s
(
uöt8_t
 
a˘i⁄
,uöt8_à
›t
,uöt8_à*
buf„r
,uöt8_à
size
)

100 
uöt8_t
 
cou¡
=0;

102 
uöt8_t
 
key
=
›t
;

103 
uöt8_t
 
vÆue
=
size
;

105 
a˘i⁄
)

107 
INIT
:

109 
DDRF
 = 
PWR_CTRL_MASK
;

110 
PORTF
 |
PWR_CTRL_MASK
;

111 
	`öô_adc
();

112 
is_›í
=0;

115 
OPEN
:

116 if(
is_›í
==1Ë 
NRK_ERROR
;

117 
is_›í
=1;

118 if(
›t
&
READ_FLAG
)

121 
PORTF
 &~(
PWR_CTRL_MASK
);

122 
ch™√l
=0;

123 
	`ADC_SET_CHANNEL
 (0);

124 
	`ƒk_•ö_waô_us
(
ADC_STARTUP_DELAY
);

125  
NRK_OK
;

127 if(
›t
&
WRITE_FLAG
)

129  
NRK_ERROR
;

131 if(
›t
&
APPEND_FLAG
)

133  
NRK_ERROR
;

135 if(((
›t
)&(
READ_FLAG
|
WRITE_FLAG
|
APPEND_FLAG
))==0)

136  
NRK_ERROR
;

137  
NRK_OK
;

141 
READ
:

142 
cou¡
=0;

143 if(
size
!=1 && size!=2)  0;

144 if(
ch™√l
!=
BAT
 && channel<7)

147 
uöt16_t
 
vÆ
=
	`gë_adc_vÆ
();

149 if(
size
==2)

151 
buf„r
[
cou¡
]=
vÆ
 & 0xFF;

152 
cou¡
++;

153 
buf„r
[
cou¡
]=(
vÆ
>>8) & 0xFF;

156 if(
size
==1)

158 
buf„r
[
cou¡
]=(
vÆ
>>2) & 0xFF;

162 } if(
ch™√l
==
BAT
)

164 
uöt16_t
 
tmp
;

165 
tmp
=
	`ªad_vﬁège_°©us
();

166 if(
size
==2)

168 
buf„r
[
cou¡
]=
tmp
 & 0xFF;

169 
cou¡
++;

170 
buf„r
[
cou¡
]=(
tmp
>>8) & 0xFF;

172 if(
size
==1)

174 
buf„r
[
cou¡
]=(
tmp
>>2) & 0xFF;

176 }if(
ch™√l
==
AUDIO_P2P
)

180 
uöt16_t
 
vÆ
,
mö
, 
max
;

181 
uöt8_t
 
i
;

182 
max
=0;

183 
mö
=1025;

184 
i
=0; i<64; i++ )

186 
vÆ
=
	`gë_adc_vÆ
();

187 if(
vÆ
<
mö
)min=val;

188 if(
vÆ
>
max
)max=val;

190 
	`ƒk_•ö_waô_us
(125);

192 
vÆ
=
max
-
mö
;

193 if(
size
==2)

195 
buf„r
[
cou¡
]=
vÆ
 & 0xFF;

196 
cou¡
++;

197 
buf„r
[
cou¡
]=(
vÆ
>>8) & 0xFF;

200 if(
size
==1)

202 
buf„r
[
cou¡
]=(
vÆ
>>2) & 0xFF;

207 
cou¡
++;

208  
cou¡
;

210 
CLOSE
:

212 
PORTF
 |
PWR_CTRL_MASK
;

213 
is_›í
=0;

214  
NRK_OK
;

216 
GET_STATUS
:

218 if(
key
==
SENSOR_SELECT
Ë 
ch™√l
;

219  
NRK_ERROR
;

221 
SET_STATUS
:

223 if(
key
==
SENSOR_SELECT
)

226 if(
vÆue
==
AUDIO_P2P
)

228 
ch™√l
=
vÆue
;

230 
	`ADC_VREF_VCC
();

231 
	`ADC_SET_CHANNEL
 (
AUDIO
);

232 
	`ƒk_•ö_waô_us
(
ADC_SETUP_DELAY
);

233  
NRK_OK
;

237 if(
vÆue
>7)

239 
	`_ƒk_î∫o_£t
(1);

240  
NRK_ERROR
;

242 
ch™√l
=
vÆue
;

243 if(
ch™√l
==
LIGHT
)

244 
	`ADC_VREF_VCC
();

246 
	`ADC_VREF_2_56
();

247 
	`ADC_SET_CHANNEL
 (
ch™√l
);

248 
	`ƒk_•ö_waô_us
(
ADC_SETUP_DELAY
);

249  
NRK_OK
;

252  
NRK_ERROR
;

254 
	`ƒk_kî√l_îr‹_add
(
NRK_DEVICE_DRIVER
,0);

257 
	}
}

267 
uöt16_t
 
	$ªad_vﬁège_°©us
()

269 vﬁ©ûê
uöt16_t
 
vÆ
;

270 
uöt8_t
 
check
,
Àvñ
;

271 
ƒk_£m_t
 *
ødio_£m
;

273 
ødio_£m

	`rf_gë_£m
();

276 if(
ødio_£m
!=
NULL
)

277 
	`ƒk_£m_≥nd
 (
ødio_£m
);

280 
	`SET_VREG_ACTIVE
();

283 
Àvñ
=0;

284 
Àvñ
<0x1F)

286 
vÆ
=0x0020 | 
Àvñ
;

287 
	`FASTSPI_SETREG
(
CC2420_BATTMON
, 
vÆ
);

288 
	`ƒk_•ö_waô_us
(2);

289 
	`FASTSPI_GETREG
(
CC2420_BATTMON
, 
vÆ
);

290 if(
vÆ
&0x0040) ;

291 
Àvñ
++;

293 if(
ødio_£m
!=
NULL
)

294 
	`ƒk_£m_po°
(
ødio_£m
);

295 if(
Àvñ
==0)

297 
vÆ
=
	`gë_adc_vÆ
();

299 if(
vÆ
>174) val-=174;

300 if(
vÆ
<330) val=330;

302 
vÆ
=(9000-(
Àvñ
*125)) / 27;

304  
vÆ
;

305 
	}
}

309 
	$öô_adc
()

312 
	`ADC_INIT
 ();

313 
	`ADC_ENABLE
 ();

314 
ch™√l
=0;

315 
	`ADC_SET_CHANNEL
 (0);

316 
	}
}

318 
uöt16_t
 
	$gë_adc_vÆ
()

320 
uöt16_t
 
adc_vÆ
;

321 
	`ADC_SAMPLE_SINGLE
();

322 
	`dñay
();

323 
	`ADC_GET_SAMPLE_10
(
adc_vÆ
);

324  
adc_vÆ
;

325 
	}
}

326 
	$dñay
()

328 
	`ƒk_•ö_waô_us
(
ADC_SETUP_DELAY
);

329 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/imec/include/adc_driver.h

28 
	~<°dio.h
>

31 
	#ADC_CHAN
 1

	)

34 
	#CHAN_0
 0

	)

35 
	#CHAN_1
 1

	)

36 
	#CHAN_2
 2

	)

37 
	#CHAN_3
 3

	)

38 
	#CHAN_4
 4

	)

39 
	#CHAN_5
 5

	)

40 
	#CHAN_6
 6

	)

41 
	#CHAN_7
 7

	)

43 
dñay
();

44 
uöt8_t
 
dev_m™agî_adc
(uöt8_à
°©e
,uöt8_à
›t
,uöt8_à* 
buf„r
,uöt8_à
size
);

45 
uöt16_t
 
gë_adc_vÆ
();

48 
öô_adc
();

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/imec/include/eeg_driver.h

26 
	~<°dio.h
>

29 
	#EEG_CHAN
 1

	)

30 
	#EEG_GAIN
 2

	)

31 
	#ECG_GAIN
 3

	)

34 
	#CHAN_1
 1

35 
	#CHAN_2
 2

36 
	#CHAN_3
 3

	)

37 
	#CHAN_4
 4

	)

38 
	#CHAN_5
 5

	)

39 
	#CHAN_6
 6

	)

40 
	#CHAN_7
 7

	)

41 
	#CHAN_8
 8

	)

42 
	#CHAN_9
 9

	)

43 
	#CHAN_10
 10

	)

44 
	#CHAN_11
 11

	)

45 
	#CHAN_12
 12

	)

46 
	#CHAN_13
 13

	)

47 
	#CHAN_14
 14

	)

48 
	#CHAN_15
 15

	)

49 
	#CHAN_16
 16

	)

50 
	#CHAN_17
 17

	)

51 
	#CHAN_18
 18

	)

52 
	#CHAN_19
 19

	)

53 
	#CHAN_20
 20

	)

54 
	#CHAN_21
 21

	)

55 
	#CHAN_22
 22

	)

56 
	#CHAN_23
 23

	)

57 
	#CHAN_24
 24

	)

58 
	#CHAN_25
 25

	)

60 
uöt8_t
 
dev_m™agî_ìg
(uöt8_à
°©e
,uöt8_à
›t
,uöt8_à* 
buf„r
,uöt8_à
size
);

61 
uöt16_t
 
gë_ìg_vÆ
();

64 
öô_ìg
();

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/imec/source/adc_driver.c

29 
	~<ƒk_drivî_li°.h
>

30 
	~<ƒk_drivî.h
>

31 
	~<adc_drivî.h
>

32 
	~<ö˛ude.h
>

33 
	~<°dio.h
>

34 
	~<ulib.h
>

35 
	~<ƒk_îr‹.h
>

36 
	~<ƒk.h
>

37 
	~<°döt.h
>

39 
	#ADC_SETUP_DELAY
 500

	)

41 
uöt8_t
 
	gadc_ch™√l
;

43 
	#ADC_INIT
() \

45 
ADC12CTL1
 = 0; \

46 
ADC12MCTL0
 = 
SREF_1
; \

47 } 0)

	)

49 
	#ADC_SET_CHANNEL
(
ch™√l
) \

51 
ADC12MCTL0
 = (ADC12MCTL0 & 0xf0Ë| ((
ch™√l
) & 0x0f); \

52 } 0)

	)

54 
	#ADC_ENABLE
() \

56 
ADC12CTL0
 = 
ADC12ON
|
REFON
|
REF2_5V
; \

57 } 0)

	)

59 
	#ADC_DISABLE
() \

61 
ADC12CTL0
 &~
ENC
; \

62 
ADC12CTL0
 = 0; \

63 } 0)

	)

65 
	#ADC_SAMPLE_SINGLE
() \

67 
ADC12CTL0
 |
ADC12SC
 + 
ENC
; \

68 
	`dñay
(); \

69 
ADC12CTL0
 &~
ADC12SC
; \

70 
ADC12CTL1
 & 
ADC12BUSY
); \

71 
ADC12CTL0
 &~
ENC
; \

72 } 0)

	)

75 
	#ADC_GET_SAMPLE_12
(
x
) \

77 (
x
Ë
ADC12MEM0
; \

78 } 0)

	)

80 
uöt8_t
 
	$dev_m™agî_adc
(
uöt8_t
 
a˘i⁄
,uöt8_à
›t
,uöt8_à*
buf„r
,uöt8_à
size
)

82 
uöt8_t
 
cou¡
=0;

84 
uöt8_t
 
key
=
›t
;

85 
uöt8_t
 
vÆue
=
size
;

86 
uöt16_t
 
vÆ
;

88 
a˘i⁄
)

90 
INIT
:

91 
	`öô_adc
();

92  
NRK_OK
;

94 
OPEN
:

95 if(
›t
&
READ_FLAG
)

97  
NRK_OK
;

99 if(
›t
&
WRITE_FLAG
)

101  
NRK_ERROR
;

103 if(
›t
&
APPEND_FLAG
)

105  
NRK_ERROR
;

107 if(
›t
&(
READ_FLAG
|
WRITE_FLAG
|
APPEND_FLAG
)==0)

108  
NRK_ERROR
;

109  
NRK_OK
;

111 
READ
:

113 
vÆ
=
	`gë_adc_vÆ
();

114 
buf„r
[
cou¡
]=
vÆ
 & 0xFF;

115 
cou¡
++;

116 
buf„r
[
cou¡
]=(
vÆ
>>8) & 0xFF;

117 
cou¡
++;

118  
cou¡
;

120 
CLOSE
:

121  
NRK_OK
;

123 
GET_STATUS
:

125 if(
key
==
ADC_CHAN
Ë 
adc_ch™√l
;

126  
NRK_ERROR
;

128 
SET_STATUS
:

130 if(
key
==
ADC_CHAN
)

132 
adc_ch™√l
=
vÆue
;

133 
	`ADC_SET_CHANNEL
 (
adc_ch™√l
);

134  
NRK_OK
;

136  
NRK_ERROR
;

138 
	`ƒk_kî√l_îr‹_add
(
NRK_DEVICE_DRIVER
,0);

141 
	}
}

143 
	$öô_adc
()

145 
	`ADC_INIT
 ();

146 
adc_ch™√l
 = 0;

147 
	`ADC_SET_CHANNEL
(
adc_ch™√l
);

148 
	`ADC_ENABLE
 ();

149 
	}
}

151 
uöt16_t
 
	$gë_adc_vÆ
()

153 
uöt16_t
 
adc_vÆ
;

154 
	`ADC_SAMPLE_SINGLE
();

155 
	`dñay
();

156 
	`ADC_GET_SAMPLE_12
(
adc_vÆ
);

157  
adc_vÆ
;

158 
	}
}

159 
	$dñay
()

161 
	`ƒk_•ö_waô_us
(
ADC_SETUP_DELAY
);

162 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/drivers/platform/imec/source/eeg_driver.c

27 
	~<ƒk_drivî_li°.h
>

28 
	~<ƒk_drivî.h
>

29 
	~<adc_drivî.h
>

30 
	~<ìg_drivî.h
>

31 
	~<ö˛ude.h
>

32 
	~<°dio.h
>

33 
	~<ulib.h
>

34 
	~<ƒk_îr‹.h
>

35 
	~<ƒk.h
>

36 
	~<°döt.h
>

38 
uöt8_t
 
	gìg_ch™√l
;

39 
uöt8_t
 
	gìg_gaö
;

40 
uöt8_t
 
	gecg_gaö
;

41 
öt8_t
 
	gìg_adc_fd
;

43 
	#EEG_INIT
()\

45 
	`ƒk_gpio_˛r
(
UP_RESET
);\

46 
	`ƒk_gpio_£t
(
UP_RESET
);\

47 
	`ƒk_gpio_˛r
(
UP_RESET
);\

48 } 0);

	)

50 
	#EEG_SET_CHANNEL
(
ch™√l
)\

52 } 0);

	)

54 
	#EEG_SET_GAIN
(
gaö
)\

56 
	`ƒk_gpio_˛r
(
UP_A0_EEG
);\

57 
	`ƒk_gpio_˛r
(
UP_A1_EEG
);\

58 
	`ƒk_gpio_˛r
(
UP_A2_EEG
);\

59 if(
gaö
&0x01Ë
	`ƒk_gpio_£t
(
UP_A0_EEG
);\

60 if(
gaö
&0x02Ë
	`ƒk_gpio_£t
(
UP_A1_EEG
);\

61 if(
gaö
&0x04Ë
	`ƒk_gpio_£t
(
UP_A2_EEG
);\

62 } 0)

	)

64 
	#ECG_SET_GAIN
(
gaö
)\

66 
	`ƒk_gpio_˛r
(
UP_A0_ECG
);\

67 
	`ƒk_gpio_˛r
(
UP_A1_ECG
);\

68 
	`ƒk_gpio_˛r
(
UP_A2_ECG
);\

69 if(
gaö
&0x01Ë
	`ƒk_gpio_£t
(
UP_A0_ECG
);\

70 if(
gaö
&0x02Ë
	`ƒk_gpio_£t
(
UP_A1_ECG
);\

71 if(
gaö
&0x04Ë
	`ƒk_gpio_£t
(
UP_A2_ECG
);\

72 } 0)

	)

74 
	#EEG_ENABLE
()\

76 
	`ƒk_gpio_£t
(
ENABLE1
);\

77 } 0)

	)

79 
	#EEG_DISABLE
()\

81 
	`ƒk_gpio_˛r
(
ENABLE1
);\

82 } 0)

	)

84 
uöt8_t
 
	$dev_m™agî_ìg
(
uöt8_t
 
a˘i⁄
,uöt8_à
›t
,uöt8_à*
buf„r
,uöt8_à
size
)

86 
uöt8_t
 
cou¡
=0;

88 
uöt8_t
 
key
=
›t
;

89 
uöt8_t
 
vÆue
=
size
;

90 
uöt16_t
 
vÆ
;

92 
a˘i⁄
)

94 
INIT
:

95 
	`öô_ìg
();

98 
OPEN
:

99 if(
›t
&
READ_FLAG
)

101 
ìg_adc_fd
=
	`ƒk_›í
(
ADC_DEV_MANAGER
,
READ
);

102 if(
ìg_adc_fd
==
NRK_ERROR
) {

103 
	`ƒk_k¥ötf
( "FailedÅo open ADC driver for EEG\r\n");

104  
NRK_ERROR
;

106 
vÆ
=
	`ƒk_£t_°©us
(
ìg_adc_fd
,
ADC_CHAN
,0);

107 if(
vÆ
==
NRK_ERROR
Ë
	`ƒk_k¥ötf
( "FailedÅo set ADC status\r\n");

108  
NRK_OK
;

110 if(
›t
&
WRITE_FLAG
)

112  
NRK_ERROR
;

114 if(
›t
&
APPEND_FLAG
)

116  
NRK_ERROR
;

118 if((
›t
&(
READ_FLAG
|
WRITE_FLAG
|
APPEND_FLAG
))==0)

119  
NRK_ERROR
;

120  
NRK_OK
;

122 
READ
:

124 
vÆ
=
	`gë_ìg_vÆ
();

125 
buf„r
[
cou¡
]=
vÆ
 & 0xff;

126 
cou¡
++;

127 
buf„r
[
cou¡
]=(
vÆ
>>8) & 0xff;

128 
cou¡
++;

129  
cou¡
;

131 
CLOSE
:

132 
	`EEG_DISABLE
();

133  
NRK_OK
;

135 
GET_STATUS
:

137 if(
key
==
EEG_CHAN
)

138  
ìg_ch™√l
;

139  
NRK_ERROR
;

141 
SET_STATUS
:

143 
key
)

145 
EEG_CHAN
:

146 
ìg_ch™√l
 = 
vÆue
;

147 
	`EEG_SET_CHANNEL
(
ìg_ch™√l
);

148  
NRK_OK
;

150 
EEG_GAIN
:

151 
ìg_gaö
 = 
vÆue
;

152 
	`EEG_SET_GAIN
(
ìg_gaö
);

153  
NRK_OK
;

155 
ECG_GAIN
:

156 
ecg_gaö
 = 
vÆue
;

157 
	`ECG_SET_GAIN
(
ecg_gaö
);

158  
NRK_OK
;

161  
NRK_ERROR
;

165 
	`ƒk_kî√l_îr‹_add
(
NRK_DEVICE_DRIVER
,0);

168 
	}
}

170 
	$öô_ìg
()

172 
	`EEG_INIT
();

173 
ìg_ch™√l
 = 0;

174 
	`EEG_SET_CHANNEL
(
ìg_ch™√l
);

175 
	`EEG_ENABLE
();

176 
	}
}

178 
uöt16_t
 
	$gë_ìg_vÆ
()

180 
uöt8_t
 
ìg_vÆ
[2];

181 
uöt8_t
 
ªtvÆ
;

182 
ªtvÆ
=
	`ƒk_ªad
(
ìg_adc_fd
,&
ìg_vÆ
,2);

183 if(
ªtvÆ
==
NRK_ERROR
Ë
	`ƒk_k¥ötf
("FailedÅoÑead ADC for EEG\r\n");

184 
	`¥ötf
("gë_ìg_vÆ: %d\r\n", 
ìg_vÆ
);

185  
ìg_vÆ
;

186 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_cpu.c

28 
	~<ö˛ude.h
>

29 
	~<ƒk.h
>

30 
	~<avr/¶ìp.h
>

31 
	~<ƒk_°ack_check.h
>

32 
	~<ƒk_cfg.h
>

33 
	~<ƒk_îr‹.h
>

61 
	#BUILD_DATE
 "D©e: " 
__DATE__
 "\n"

	)

63 
	$ƒk_b©ãry_ßve
()

65 #ifde‡
NRK_BATTERY_SAVE


66 
	`_ƒk_°›_os_timî
();

67 
	`_ƒk_£t_√xt_wakeup
(250);

68 
	`ƒk_Àd_˛r
(0);

69 
	`ƒk_Àd_£t
(1);

70 
	`ƒk_Àd_˛r
(2);

71 
	`ƒk_Àd_˛r
(3);

72 
	`SET_VREG_INACTIVE
();

73 
	`ƒk_¶ìp
();

75 
	}
}

77 
	$ƒk_èsk_£t_íåy_fun˘i⁄
–
ƒk_èsk_ty≥
 *
èsk
, *
func
 )

79 
èsk
->èsk=
func
;

80 
	}
}

83 
	$ƒk_¶ìp
()

86 
	`£t_¶ìp_mode
 (
SLEEP_MODE_PWR_SAVE
);

87 
	`¶ìp_mode
 ();

89 
	}
}

91 
	$ƒk_idÀ
()

94 
	`£t_¶ìp_mode
–
SLEEP_MODE_IDLE
);

95 
	`¶ìp_mode
 ();

97 
	}
}

98 *
ƒk_èsk_°k_öô
 ((*
èsk
)(), *
±os
, *
pbos
)

100 
uöt16_t
 *
	g°k
 ;

101 
uöt8_t
 *
	g°kc
;

103 
	g°k
 = (*)
pbos
;

104 
	g°kc
 = (*)
°k
;

105 *
	g°kc
 = 
STK_CANARY_VAL
;

106 
	g°k
 = (*)
±os
;

118 --
	g°k
;

119 
	g°kc
 = (*)
°k
;

120 *
	g°kc
++ = ()(()(
èsk
)/ 256);

121 *
	g°kc
 = ()(()(
èsk
)%256);

123 *(--
	g°k
) = 0;

124 *(--
	g°k
) = 0;

125 *(--
	g°k
) = 0;

126 *(--
	g°k
) = 0;

127 *(--
	g°k
) = 0;

128 *(--
	g°k
) = 0;

129 *(--
	g°k
) = 0;

130 *(--
	g°k
) = 0;

132 *(--
	g°k
) = 0;

133 *(--
	g°k
) = 0;

134 *(--
	g°k
) = 0;

135 *(--
	g°k
) = 0;

136 *(--
	g°k
) = 0;

137 *(--
	g°k
) = 0;

138 *(--
	g°k
) = 0;

139 *(--
	g°k
) = 0;

140 *(--
	g°k
) = 0;

143  ((*)
	g°k
);

146 
	$ƒk_èsk_£t_°k
–
ƒk_èsk_ty≥
 *
èsk
, 
NRK_STK
 
°k_ba£
[], 
uöt16_t
 
°k_size
 )

149 if(
°k_size
<32Ë
	`ƒk_îr‹_add
(
NRK_STACK_TOO_SMALL
);

150 
èsk
->
Ptos
 = (*Ë&
°k_ba£
[
°k_size
-1];

151 
èsk
->
Pbos
 = (*Ë&
°k_ba£
[0];

153 
	}
}

157 
ölöe
 
	$ƒk_°ack_poöãr_ª°‹e
()

159 *
°kc
;

161 #ifde‡
KERNEL_STK_ARRAY


162 
°kc
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

164 
°kc
 = 
NRK_KERNEL_STK_TOP
;

166 *
°kc
++ = (
uöt16_t
)((uöt16_t)
_ƒk_timî_tick
>>8);

167 *
°kc
 = (
uöt16_t
)((uöt16_t)
_ƒk_timî_tick
&0xFF);

168 
	}
}

170 
ölöe
 
	$ƒk_°ack_poöãr_öô
()

172 *
°kc
;

173 #ifde‡
KERNEL_STK_ARRAY


174 
°kc
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

175 
ƒk_kî√l_°k
[0]=
STK_CANARY_VAL
;

176 
ƒk_kî√l_°k_±r
 = &
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

178 
°kc
 = 
NRK_KERNEL_STK_TOP
-
NRK_KERNEL_STACKSIZE
;

179 *
°kc
 = 
STK_CANARY_VAL
;

180 
°kc
 = 
NRK_KERNEL_STK_TOP
;

181 
ƒk_kî√l_°k_±r
 = 
NRK_KERNEL_STK_TOP
;

183 *
°kc
++ = (
uöt16_t
)((uöt16_t)
_ƒk_timî_tick
>>8);

184 *
°kc
 = (
uöt16_t
)((uöt16_t)
_ƒk_timî_tick
&0xFF);

186 
	}
}

190 
	$ƒk_èrgë_°¨t
()

193 
	`_ƒk_£tup_timî
();

194 
	`ƒk_öt_íabÀ
();

196 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_ext_int.c

26 
	~<ö˛ude.h
>

27 
	~<avr/öãºu±.h
>

28 
	~<ulib.h
>

29 
	~<ƒk_ext_öt.h
>

30 
	~<ƒk_îr‹.h
>

31 
	~<ƒk_cfg.h
>

34 
öt8_t
 
	$ƒk_ext_öt_íabÀ
(
uöt8_t
 
pö
 )

37  
NRK_ERROR
;

38 
	}
}

40 
öt8_t
 
	$ƒk_ext_öt_dißbÀ
(
uöt8_t
 
pö
 )

43  
NRK_ERROR
;

44 
	}
}

48 
öt8_t
 
	$ƒk_ext_öt_c⁄figuª
(
uöt8_t
 
pö
, uöt8_à
mode
, *
ˇŒback_func
)

62  
NRK_ERROR
;

63 
	}
}

67 
	$SIGNAL
(
INT0_ve˘
) {

70 
	`ƒk_kî√l_îr‹_add
(
NRK_SEG_FAULT
,0);

72 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_status.c

27 
	~<ö˛ude.h
>

28 
	~<ƒk_°©us.h
>

30 
uöt8_t
 
	$_ƒk_°¨tup_ok
()

34 if((vﬁ©ûe)
TCCR0
!=0)  0;

36 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_timer.c

28 
	~<ö˛ude.h
>

29 
	~<avr/öãºu±.h
>

30 
	~<ulib.h
>

31 
	~<ƒk_timî.h
>

32 
	~<ƒk_îr‹.h
>

33 
	~<ƒk_cfg.h
>

35 
	$ƒk_•ö_waô_us
(
uöt16_t
 
timeout
)

40 
	`NOP
();

41 
	`NOP
();

42 
	`NOP
();

43 
	`NOP
();

44 } --
timeout
);

46 
	}
}

49 
	$_ƒk_£tup_timî
() {

50 
öt32_t
 
ãmp
=0;

51 
_ƒk_¥ev_timî_vÆ
=254;

54 
ASSR
 = 
	`BM
(
AS0
);

55 
OCR0
 = 
_ƒk_¥ev_timî_vÆ
;

56 
TIFR
 = 
	`BM
(
OCF0
Ë| BM(
TOV0
);

59 
TCCR0
 = 
	`BM
(
WGM01
Ë| BM(
CS01
Ë| BM(
CS00
);

60 
SFIOR
 |
TSM
;

63 
TIFR
 = 
	`BM
(
OCF0
Ë| BM(
TOV0
);

65 
TCCR0
 = 
	`BM
(
WGM01
Ë| BM(
CS01
Ë| BM(
CS00
);

67 
SFIOR
 |
TSM
;

71 
TCCR1A
=0;

72 
TCCR1B
=
	`BM
(
CS10
);

73 
TCNT1
=0;

74 
SFIOR
 |
	`BM
(
PSR321
);

76 
	`_ƒk_os_timî_ª£t
();

77 
	`_ƒk_os_timî_°¨t
();

78 
_ƒk_time_åiggî
=0;

79 
	}
}

81 
	$_ƒk_high_•ìd_timî_°›
()

83 
TCCR1B
=0;

84 
	}
}

86 
	$_ƒk_high_•ìd_timî_°¨t
()

88 
TCCR1B
=
	`BM
(
CS10
);

89 
	}
}

92 
	$_ƒk_high_•ìd_timî_ª£t
()

95 
SFIOR
 |
	`BM
(
PSR321
);

96 
TCNT1
=0;

98 
	}
}

105 
	$ƒk_high_•ìd_timî_waô
–
uöt16_t
 
°¨t
, uöt16_à
ticks
 )

107 
uöt32_t
 
tmp
;

108 if(
°¨t
>65400) start=0;

109 
tmp
=(
uöt32_t
)
°¨t
+(uöt32_t)
ticks
;

110 if(
tmp
>65536)

112 
tmp
-=65536;

113 do{}
	`_ƒk_high_•ìd_timî_gë
()>
°¨t
);

116 
ticks
=
tmp
;

117 do{}
	`_ƒk_high_•ìd_timî_gë
()<
ticks
);

118 
	}
}

120 
ölöe
 
uöt16_t
 
	$_ƒk_high_•ìd_timî_gë
()

122 vﬁ©ûê
uöt16_t
 
tmp
;

124 
tmp
=
TCNT1
;

126  
tmp
;

127 
	}
}

129 
	$_ƒk_os_timî_£t
(
uöt8_t
 
v
)

131 
TCNT0
=
v
;

132 
	}
}

135 
	$_ƒk_os_timî_°›
()

137 
TCCR0
 = 0;

138 
TIMSK
 &~
	`BM
(
OCIE0
) ;

139 
TIMSK
 &~
	`BM
(
TOIE0
) ;

141 
	}
}

143 
	$_ƒk_os_timî_°¨t
()

145 
TCCR0
 = 
	`BM
(
WGM01
Ë| BM(
CS01
Ë| BM(
CS00
);

146 
TIMSK
 = TIMSK| 
	`BM
(
OCIE0
Ë| BM(
TOIE0
) ;

147 
	}
}

149 
ölöe
 
	$_ƒk_os_timî_ª£t
()

152 
SFIOR
 |
	`BM
(
PSR0
);

153 
TCNT0
 = 0;

154 
_ƒk_time_åiggî
=0;

155 
_ƒk_¥ev_timî_vÆ
=0;

156 
	}
}

159 
uöt8_t
 
	$_ƒk_gë_√xt_wakeup
()

161  
OCR0
+1;

162 
	}
}

164 
	$_ƒk_£t_√xt_wakeup
(
uöt8_t
 
nw
)

166 
OCR0
 = 
nw
-1;

167 
	}
}

171 
ölöe
 
uöt8_t
 
	$_ƒk_os_timî_gë
()

173  
TCNT0
;

174 
	}
}

179 
	$SIGNAL
(
__ve˘‹_deÁu…
) {

180 
	`ƒk_kî√l_îr‹_add
(
NRK_SEG_FAULT
,0);

181 
	}
}

184 
	$SIG_OVERFLOW0
–Ë
	`__©åibuã__
 ( ( 
sig«l
,
«ked
 ));

185 
	$SIG_OVERFLOW0
() {

186 #ifde‡
NRK_KERNEL_TEST


187 
	`ƒk_kî√l_îr‹_add
(
NRK_TIMER_OVERFLOW
,0);

190 
	}
}

193 
	$SIG_OUTPUT_COMPARE0
–Ë
	`__©åibuã__
 ( ( 
sig«l
,
«ked
 ));

194 
	$SIG_OUTPUT_COMPARE0
() {

195 
asm
 volatile (

248 
	}
}

281 
öt8_t
 
	$ƒk_timî_öt_°›
(
uöt8_t
 
timî
 )

283 if(
timî
==
NRK_APP_TIMER_0
)

285 
TIMSK
 &~(
	`BM
(
OCIE2
));

287  
NRK_ERROR
;

288 
	}
}

290 
öt8_t
 
	$ƒk_timî_öt_ª£t
(
uöt8_t
 
timî
 )

292 if(
timî
==
NRK_APP_TIMER_0
)

294 
TCNT2
=0;

295  
NRK_OK
;

297  
NRK_ERROR
;

298 
	}
}

300 
uöt16_t
 
	$ƒk_timî_öt_ªad
(
uöt8_t
 
timî
 )

302 if(
timî
==
NRK_APP_TIMER_0
)

304  
TCNT2
;

308 
	}
}

310 
öt8_t
 
	$ƒk_timî_öt_°¨t
(
uöt8_t
 
timî
)

312 if(
timî
==
NRK_APP_TIMER_0
)

314 
TIMSK
 |
	`BM
(
OCIE2
);

315  
NRK_OK
;

317  
NRK_ERROR
;

318 
	}
}

320 
öt8_t
 
	$ƒk_timî_öt_c⁄figuª
(
uöt8_t
 
timî
, 
uöt16_t
 
¥esˇÀr
, uöt16_à
com∑ª_vÆue
, *
ˇŒback_func
)

322 if(
timî
==
NRK_APP_TIMER_0
)

324 if(
¥esˇÀr
>0 &&ÖªsˇÀr<6 ) 
≠p_timî0_¥esˇÀ
=prescaler;

325 
TCCR2
 = 
	`BM
(
WGM32
);

326 
OCR2
 = (
com∑ª_vÆue
 & 0xFF );

327 
≠p_timî0_ˇŒback
=
ˇŒback_func
;

328 if(
≠p_timî0_¥esˇÀ
==1Ë
TCCR2
 |
	`BM
(
CS30
);

330 if(
≠p_timî0_¥esˇÀ
==2Ë
TCCR2
 |
	`BM
(
CS31
);

332 if(
≠p_timî0_¥esˇÀ
==3Ë
TCCR2
 |
	`BM
(
CS31
Ë| BM(
CS30
);

334 if(
≠p_timî0_¥esˇÀ
==4Ë
TCCR2
 |
	`BM
(
CS32
) ;

336 if(
≠p_timî0_¥esˇÀ
==5Ë
TCCR2
 |
	`BM
(
CS32
Ë| BM(
CS30
);

338  
NRK_OK
;

341  
NRK_ERROR
;

342 
	}
}

345 
	$SIGNAL
(
TIMER2_COMP_ve˘
) {

346 if(
≠p_timî0_ˇŒback
!=
NULL
Ë
	`≠p_timî0_ˇŒback
();

348 
	`ƒk_kî√l_îr‹_add
(
NRK_SEG_FAULT
,0);

350 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_watchdog.c

26 
	~<ö˛ude.h
>

27 
	~<ƒk_w©chdog.h
>

28 
	~<ƒk_îr‹.h
>

29 
	~<avr/wdt.h
>

31 
	$ƒk_w©chdog_dißbÀ
()

33 
	`ƒk_öt_dißbÀ
();

34 
	`ƒk_w©chdog_ª£t
();

35 
MCUSR
 &~(1<<
WDRF
);

36 
WDTCR
 |(1<<
WDCE
Ë| (1<<
WDE
);

37 
WDTCR
 = 0;

38 
	`ƒk_öt_íabÀ
();

39 
	}
}

41 
	$ƒk_w©chdog_íabÀ
()

45 
	`ƒk_öt_dißbÀ
();

46 
MCUSR
 &~(1<<
WDRF
);

47 
	`ƒk_w©chdog_ª£t
();

48 
WDTCR
 |(1<<
WDCE
Ë| (1<<
WDE
);

49 
WDTCR
 = (1<<
WDE
Ë| (1<<
WDP2
Ë| (1<<
WDP1
Ë| (1<<
WDP0
);

50 
	`ƒk_öt_íabÀ
();

52 
	}
}

54 
öt8_t
 
	$ƒk_w©chdog_check
()

57 if((
MCUSR
 & (1<<
WDRF
))==0Ë 
NRK_OK
;

58  
NRK_ERROR
;

59 
	}
}

61 
ölöe
 
	$ƒk_w©chdog_ª£t
()

63 
	`wdt_ª£t
();

65 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_cpu.c

28 
	~<ö˛ude.h
>

29 
	~<ƒk.h
>

30 
	~<avr/¶ìp.h
>

31 
	~<ƒk_°ack_check.h
>

32 
	~<ƒk.h
>

33 
	~<ƒk_èsk.h
>

34 
	~<ƒk_defs.h
>

35 
	~<ƒk_cfg.h
>

36 
	~<ƒk_timî.h
>

37 
	~<ƒk_îr‹.h
>

39 
	#BUILD_DATE
 "D©e: " 
__DATE__
 "\n"

	)

67 
	$ƒk_b©ãry_ßve
()

69 #ifde‡
NRK_BATTERY_SAVE


70 
	`_ƒk_°›_os_timî
();

71 
	`_ƒk_£t_√xt_wakeup
(250);

72 
	`ƒk_Àd_˛r
(0);

73 
	`ƒk_Àd_£t
(1);

74 
	`ƒk_Àd_˛r
(2);

75 
	`ƒk_Àd_˛r
(3);

76 
	`SET_VREG_INACTIVE
();

77 
	`ƒk_¶ìp
();

79 
	}
}

81 
	$ƒk_¶ìp
()

84 
	`£t_¶ìp_mode
 (
SLEEP_MODE_PWR_SAVE
);

85 
	`¶ìp_mode
 ();

87 
	}
}

89 
	$ƒk_idÀ
()

92 
	`£t_¶ìp_mode
–
SLEEP_MODE_IDLE
);

93 
	`¶ìp_mode
 ();

95 
	}
}

97 
	$ƒk_èsk_£t_íåy_fun˘i⁄
–
ƒk_èsk_ty≥
 *
èsk
, *
func
 )

99 
èsk
->èsk=
func
;

100 
	}
}

102 
	$ƒk_èsk_£t_°k
–
ƒk_èsk_ty≥
 *
èsk
, 
NRK_STK
 
°k_ba£
[], 
uöt16_t
 
°k_size
 )

105 if(
°k_size
<32Ë
	`ƒk_îr‹_add
(
NRK_STACK_TOO_SMALL
);

106 
èsk
->
Ptos
 = (*Ë&
°k_ba£
[
°k_size
-1];

107 
èsk
->
Pbos
 = (*Ë&
°k_ba£
[0];

109 
	}
}

111 *
ƒk_èsk_°k_öô
 ((*
èsk
)(), *
±os
, *
pbos
)

113 
uöt16_t
 *
	g°k
 ;

114 
uöt8_t
 *
	g°kc
;

116 
	g°k
 = (*)
pbos
;

117 
	g°kc
 = (*)
°k
;

118 *
	g°kc
 = 
STK_CANARY_VAL
;

119 
	g°k
 = (*)
±os
;

131 --
	g°k
;

132 
	g°kc
 = (*)
°k
;

133 *
	g°kc
++ = ()(()(
èsk
)/ 256);

134 *
	g°kc
 = ()(()(
èsk
)%256);

136 *(--
	g°k
) = 0;

137 *(--
	g°k
) = 0;

138 *(--
	g°k
) = 0;

139 *(--
	g°k
) = 0;

140 *(--
	g°k
) = 0;

141 *(--
	g°k
) = 0;

142 *(--
	g°k
) = 0;

143 *(--
	g°k
) = 0;

145 *(--
	g°k
) = 0;

146 *(--
	g°k
) = 0;

147 *(--
	g°k
) = 0;

148 *(--
	g°k
) = 0;

149 *(--
	g°k
) = 0;

150 *(--
	g°k
) = 0;

151 *(--
	g°k
) = 0;

152 *(--
	g°k
) = 0;

153 *(--
	g°k
) = 0;

156  ((*)
	g°k
);

159 
ölöe
 
	$ƒk_°ack_poöãr_öô
()

161 *
°kc
;

162 #ifde‡
KERNEL_STK_ARRAY


163 
°kc
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

164 
ƒk_kî√l_°k
[0]=
STK_CANARY_VAL
;

165 
ƒk_kî√l_°k_±r
 = &
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

167 
°kc
 = (*)(
NRK_KERNEL_STK_TOP
-
NRK_KERNEL_STACKSIZE
);

168 *
°kc
 = 
STK_CANARY_VAL
;

169 
°kc
 = (*)
NRK_KERNEL_STK_TOP
;

170 
ƒk_kî√l_°k_±r
 = (*)
NRK_KERNEL_STK_TOP
;

172 *
°kc
++ = (
uöt16_t
)((uöt16_t)
_ƒk_timî_tick
>>8);

173 *
°kc
 = (
uöt16_t
)((uöt16_t)
_ƒk_timî_tick
&0xFF);

175 
	}
}

178 
ölöe
 
	$ƒk_°ack_poöãr_ª°‹e
()

180 *
°kc
;

182 #ifde‡
KERNEL_STK_ARRAY


183 
°kc
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

185 
°kc
 = (*)
NRK_KERNEL_STK_TOP
;

187 *
°kc
++ = (
uöt16_t
)((uöt16_t)
_ƒk_timî_tick
>>8);

188 *
°kc
 = (
uöt16_t
)((uöt16_t)
_ƒk_timî_tick
&0xFF);

189 
	}
}

192 
	$ƒk_èrgë_°¨t
()

195 
	`_ƒk_£tup_timî
();

196 
	`ƒk_öt_íabÀ
();

198 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_ext_int.c

26 
	~<ö˛ude.h
>

27 
	~<avr/öãºu±.h
>

28 
	~<ulib.h
>

29 
	~<ƒk_ext_öt.h
>

30 
	~<ƒk_îr‹.h
>

31 
	~<ƒk_cfg.h
>

34 
öt8_t
 
	$ƒk_ext_öt_íabÀ
(
uöt8_t
 
pö
 )

36 if(
pö
==
NRK_EXT_INT_0
Ë{ 
EIMSK
 |
	`BM
(
INT0
);  
NRK_OK
; }

37 if(
pö
==
NRK_EXT_INT_1
Ë{ 
EIMSK
 |
	`BM
(
INT1
);  
NRK_OK
; }

38 if(
pö
==
NRK_EXT_INT_2
Ë{ 
EIMSK
 |
	`BM
(
INT2
);  
NRK_OK
; }

39 if(
pö
==
NRK_PC_INT_0
 ) { 
PCMSK0
 |
	`BM
(
PCINT0
);  
NRK_OK
; }

40 if(
pö
==
NRK_PC_INT_1
 ) { 
PCMSK0
 |
	`BM
(
PCINT1
);  
NRK_OK
; }

41 if(
pö
==
NRK_PC_INT_2
 ) { 
PCMSK0
 |
	`BM
(
PCINT2
);  
NRK_OK
; }

42 if(
pö
==
NRK_PC_INT_3
 ) { 
PCMSK0
 |
	`BM
(
PCINT3
);  
NRK_OK
; }

43 if(
pö
==
NRK_PC_INT_4
 ) { 
PCMSK0
 |
	`BM
(
PCINT4
);  
NRK_OK
; }

44 if(
pö
==
NRK_PC_INT_5
 ) { 
PCMSK0
 |
	`BM
(
PCINT5
);  
NRK_OK
; }

45 if(
pö
==
NRK_PC_INT_6
 ) { 
PCMSK0
 |
	`BM
(
PCINT6
);  
NRK_OK
; }

46 if(
pö
==
NRK_PC_INT_7
 ) { 
PCMSK0
 |
	`BM
(
PCINT7
);  
NRK_OK
; }

47  
NRK_ERROR
;

48 
	}
}

50 
öt8_t
 
	$ƒk_ext_öt_dißbÀ
(
uöt8_t
 
pö
 )

52 if(
pö
==
NRK_EXT_INT_0
Ë{ 
EIMSK
 &~
	`BM
(
INT0
);  
NRK_OK
; }

53 if(
pö
==
NRK_EXT_INT_1
Ë{ 
EIMSK
 &~
	`BM
(
INT1
);  
NRK_OK
; }

54 if(
pö
==
NRK_EXT_INT_2
Ë{ 
EIMSK
 &~
	`BM
(
INT1
);  
NRK_OK
; }

55 if(
pö
==
NRK_PC_INT_0
 ) { 
PCMSK0
 &~
	`BM
(
PCINT0
);  
NRK_OK
; }

56 if(
pö
==
NRK_PC_INT_1
 ) { 
PCMSK0
 &~
	`BM
(
PCINT1
);  
NRK_OK
; }

57 if(
pö
==
NRK_PC_INT_2
 ) { 
PCMSK0
 &~
	`BM
(
PCINT2
);  
NRK_OK
; }

58 if(
pö
==
NRK_PC_INT_3
 ) { 
PCMSK0
 &~
	`BM
(
PCINT3
);  
NRK_OK
; }

59 if(
pö
==
NRK_PC_INT_4
 ) { 
PCMSK0
 &~
	`BM
(
PCINT4
);  
NRK_OK
; }

60 if(
pö
==
NRK_PC_INT_5
 ) { 
PCMSK0
 &~
	`BM
(
PCINT5
);  
NRK_OK
; }

61 if(
pö
==
NRK_PC_INT_6
 ) { 
PCMSK0
 &~
	`BM
(
PCINT6
);  
NRK_OK
; }

62 if(
pö
==
NRK_PC_INT_7
 ) { 
PCMSK0
 &~
	`BM
(
PCINT7
);  
NRK_OK
; }

63  
NRK_ERROR
;

64 
	}
}

68 
öt8_t
 
	$ƒk_ext_öt_c⁄figuª
(
uöt8_t
 
pö
, uöt8_à
mode
, *
ˇŒback_func
)

70 if(
pö
==
NRK_EXT_INT_0
)

72 
ext_öt0_ˇŒback
=
ˇŒback_func
;

73 if(
mode
==
NRK_LOW_TRIGGER
Ë
EICRA
 &~(
	`BM
(
ISC01
Ë| BM(
ISC00
));

74 if(
mode
==
NRK_LEVEL_TRIGGER
)

75 { 
EICRA
 &(~
	`BM
(
ISC01
)); EICRA |BM(
ISC00
); }

76 if(
mode
==
NRK_FALLING_EDGE
)

77 { 
EICRA
 |
	`BM
(
ISC01
); EICRA &(~BM(
ISC00
)); }

78 if(
mode
==
NRK_RISING_EDGE
Ë
EICRA
 |
	`BM
(
ISC01
Ë| BM(
ISC00
);

79  
NRK_OK
;

81 if(
pö
==
NRK_EXT_INT_1
)

83 
ext_öt1_ˇŒback
=
ˇŒback_func
;

84 if(
mode
==
NRK_LOW_TRIGGER
Ë
EICRA
 &~(
	`BM
(
ISC11
Ë| BM(
ISC10
));

85 if(
mode
==
NRK_LEVEL_TRIGGER
)

86 { 
EICRA
 &(~
	`BM
(
ISC11
)); EICRA |BM(
ISC10
); }

87 if(
mode
==
NRK_FALLING_EDGE
)

88 { 
EICRA
 |
	`BM
(
ISC11
); EICRA &(~BM(
ISC10
)); }

89 if(
mode
==
NRK_RISING_EDGE
Ë
EICRA
 |
	`BM
(
ISC11
Ë| BM(
ISC10
);

90  
NRK_OK
;

92 if(
pö
==
NRK_EXT_INT_2
)

94 
ext_öt1_ˇŒback
=
ˇŒback_func
;

95 if(
mode
==
NRK_LOW_TRIGGER
Ë
EICRA
 &~(
	`BM
(
ISC21
Ë| BM(
ISC20
));

96 if(
mode
==
NRK_LEVEL_TRIGGER
)

97 { 
EICRA
 &(~
	`BM
(
ISC21
)); EICRA |BM(
ISC20
); }

98 if(
mode
==
NRK_FALLING_EDGE
)

99 { 
EICRA
 |
	`BM
(
ISC21
); EICRA &(~BM(
ISC20
)); }

100 if(
mode
==
NRK_RISING_EDGE
Ë
EICRA
 |
	`BM
(
ISC21
Ë| BM(
ISC20
);

101  
NRK_OK
;

106 if(
pö
==
NRK_PC_INT_0
 ||Öö==
NRK_PC_INT_1
 ||Öö==
NRK_PC_INT_2
 ||Öö==
NRK_PC_INT_3
 ||Öö==
NRK_PC_INT_4
 ||Öö==
NRK_PC_INT_5
 ||Öö==
NRK_PC_INT_6
 ||Öö==
NRK_PC_INT_7
){

107 
PCICR
 |
	`BM
(
PCIE0
);

108 
pc_öt0_ˇŒback
=
ˇŒback_func
;

109  
NRK_OK
;

111  
NRK_ERROR
;

112 
	}
}

115 
	$SIGNAL
(
PCINT0_ve˘
) {

116 if(
pc_öt0_ˇŒback
!=
NULL
Ë
	`pc_öt0_ˇŒback
();

118 
	`ƒk_kî√l_îr‹_add
(
NRK_SEG_FAULT
,0);

120 
	}
}

123 
	$SIGNAL
(
INT0_ve˘
) {

124 if(
ext_öt0_ˇŒback
!=
NULL
Ë
	`ext_öt0_ˇŒback
();

126 
	`ƒk_kî√l_îr‹_add
(
NRK_SEG_FAULT
,0);

128 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_status.c

27 
	~<ö˛ude.h
>

28 
	~<ƒk_°©us.h
>

30 
uöt8_t
 
	$_ƒk_°¨tup_ok
()

34 if((vﬁ©ûê
uöt8_t
)
TCCR2A
!=0)  0;

36 
	}
}

38 
ölöe
 
	$upd©e_w©chdog
()

42 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_timer.c

26 
	~<ö˛ude.h
>

27 
	~<avr/öãºu±.h
>

28 
	~<ulib.h
>

29 
	~<ƒk_timî.h
>

30 
	~<ƒk_îr‹.h
>

31 
	~<ƒk_cfg.h
>

33 
	$ƒk_•ö_waô_us
(
uöt16_t
 
timeout
)

38 
	`NOP
();

39 
	`NOP
();

40 
	`NOP
();

41 
	`NOP
();

42 } --
timeout
);

44 
	}
}

47 
	$_ƒk_£tup_timî
() {

48 
_ƒk_¥ev_timî_vÆ
=254;

51 
ASSR
 = 
	`BM
(
AS2
);

52 
OCR2A
 = 
_ƒk_¥ev_timî_vÆ
;

53 
TIFR2
 = 
	`BM
(
OCF2A
Ë| BM(
TOV2
);

54 
TCCR2A
 = 
	`BM
(
WGM21
);

55 
TCCR2B
 = 
	`BM
(
CS21
Ë| BM(
CS20
);

56 
GTCCR
 |
	`BM
(
PSRASY
);

58 
TIFR2
 = 
	`BM
(
OCF2A
Ë| BM(
TOV2
);

60 
TCCR0A
 = 
	`BM
(
WGM01
Ë| BM(
CS01
Ë| BM(
CS00
);

63 
GTCCR
 |
	`BM
(
PSRASY
);

67 
TCCR1A
=0;

68 
TCCR1B
=
	`BM
(
CS10
);

69 
TCNT1
=0;

70 
GTCCR
 |
	`BM
(
PSRASY
);

71 
GTCCR
 |
	`BM
(
PSRSYNC
);

73 
	`_ƒk_os_timî_ª£t
();

74 
	`_ƒk_os_timî_°¨t
();

75 
_ƒk_time_åiggî
=0;

76 
	}
}

78 
	$_ƒk_high_•ìd_timî_°›
()

80 
TCCR1B
=0;

81 
	}
}

83 
	$_ƒk_high_•ìd_timî_°¨t
()

85 
TCCR1B
=
	`BM
(
CS10
);

86 
	}
}

89 
	$_ƒk_high_•ìd_timî_ª£t
()

93 
GTCCR
 |
	`BM
(
PSRSYNC
);

94 
TCNT1
=0;

96 
	}
}

103 
	$ƒk_high_•ìd_timî_waô
–
uöt16_t
 
°¨t
, uöt16_à
ticks
 )

105 
uöt32_t
 
tmp
;

106 if(
°¨t
>65400) start=0;

107 
tmp
=(
uöt32_t
)
°¨t
+(uöt32_t)
ticks
;

108 if(
tmp
>65536)

110 
tmp
-=65536;

111 do{}
	`_ƒk_high_•ìd_timî_gë
()>
°¨t
);

114 
ticks
=
tmp
;

115 do{}
	`_ƒk_high_•ìd_timî_gë
()<
ticks
);

116 
	}
}

118 
ölöe
 
uöt16_t
 
	$_ƒk_high_•ìd_timî_gë
()

120 vﬁ©ûê
uöt16_t
 
tmp
;

122 
tmp
=
TCNT1
;

124  
tmp
;

125 
	}
}

127 
ölöe
 
	$_ƒk_os_timî_°›
()

129 
TCCR2B
=0;

130 
TIMSK2
 &~
	`BM
(
OCIE2A
) ;

131 
TIMSK2
 &~
	`BM
(
TOIE2
) ;

132 
	}
}

134 
ölöe
 
	$_ƒk_os_timî_£t
(
uöt8_t
 
v
)

136 
TCNT2
=
v
;

137 
	}
}

139 
ölöe
 
	$_ƒk_os_timî_°¨t
()

143 
TIMSK2
 |
	`BM
(
OCIE2A
Ë| BM(
TOIE2
) ;

144 
TCCR2B
 = 
	`BM
(
CS21
Ë| BM(
CS20
);

145 
	}
}

147 
ölöe
 
	$_ƒk_os_timî_ª£t
()

150 
GTCCR
 |
	`BM
(
PSRASY
);

151 
TCNT2
 = 0;

152 
_ƒk_time_åiggî
=0;

153 
_ƒk_¥ev_timî_vÆ
=0;

154 
	}
}

157 
uöt8_t
 
	$_ƒk_gë_√xt_wakeup
()

159  (
uöt8_t
)(
OCR2A
+1);

160 
	}
}

162 
	$_ƒk_£t_√xt_wakeup
(
uöt8_t
 
nw
)

164 
OCR2A
 = 
nw
-1;

165 
	}
}

167 
öt8_t
 
	$ƒk_timî_öt_°›
(
uöt8_t
 
timî
 )

169 if(
timî
==
NRK_APP_TIMER_0
)

171 
TIMSK3
 = 0;

173  
NRK_ERROR
;

174 
	}
}

176 
öt8_t
 
	$ƒk_timî_öt_ª£t
(
uöt8_t
 
timî
 )

178 if(
timî
==
NRK_APP_TIMER_0
)

180 
TCNT3
=0;

181  
NRK_OK
;

183  
NRK_ERROR
;

184 
	}
}

186 
uöt16_t
 
	$ƒk_timî_öt_ªad
(
uöt8_t
 
timî
 )

188 if(
timî
==
NRK_APP_TIMER_0
)

190  
TCNT3
;

194 
	}
}

196 
öt8_t
 
	$ƒk_timî_öt_°¨t
(
uöt8_t
 
timî
)

198 if(
timî
==
NRK_APP_TIMER_0
)

200 
TIMSK3
 = 
	`BM
(
OCIE3A
);

201  
NRK_OK
;

203  
NRK_ERROR
;

204 
	}
}

206 
öt8_t
 
	$ƒk_timî_öt_c⁄figuª
(
uöt8_t
 
timî
, 
uöt16_t
 
¥esˇÀr
, uöt16_à
com∑ª_vÆue
, *
ˇŒback_func
)

208 if(
timî
==
NRK_APP_TIMER_0
)

210 if(
¥esˇÀr
>0 &&ÖªsˇÀr<6 ) 
≠p_timî0_¥esˇÀ
=prescaler;

211 
TCCR3A
 = 0;

212 
TCCR3B
 = 
	`BM
(
WGM32
);

213 
OCR3AH
 = (
com∑ª_vÆue
 >> 8) & 0xFF;

214 
OCR3AL
 = (
com∑ª_vÆue
 & 0xFF );

215 
≠p_timî0_ˇŒback
=
ˇŒback_func
;

216 if(
≠p_timî0_¥esˇÀ
==1Ë
TCCR3B
 |
	`BM
(
CS30
);

218 if(
≠p_timî0_¥esˇÀ
==2Ë
TCCR3B
 |
	`BM
(
CS31
);

220 if(
≠p_timî0_¥esˇÀ
==3Ë
TCCR3B
 |
	`BM
(
CS31
Ë| BM(
CS30
);

222 if(
≠p_timî0_¥esˇÀ
==4Ë
TCCR3B
 |
	`BM
(
CS32
) ;

224 if(
≠p_timî0_¥esˇÀ
==5Ë
TCCR3B
 |
	`BM
(
CS32
Ë| BM(
CS30
);

226  
NRK_OK
;

229  
NRK_ERROR
;

230 
	}
}

233 
ölöe
 
uöt8_t
 
	$_ƒk_os_timî_gë
()

235  (vﬁ©ûê
uöt8_t
)
TCNT2
;

236 
	}
}

241 
	$SIGNAL
(
__ve˘‹_deÁu…
) {

242 
	`ƒk_kî√l_îr‹_add
(
NRK_SEG_FAULT
,0);

244 
	}
}

246 
	$TIMER2_OVF_ve˘
–Ë
	`__©åibuã__
 ( ( 
sig«l
,
«ked
 ));

247 
	$TIMER2_OVF_ve˘
() {

248 #ifde‡
NRK_KERNEL_TEST


249 
	`ƒk_kî√l_îr‹_add
(
NRK_TIMER_OVERFLOW
,0);

253 
	}
}

257 
	$TIMER2_COMPA_ve˘
–Ë
	`__©åibuã__
 ( ( 
sig«l
,
«ked
 ));

258 
	$TIMER2_COMPA_ve˘
() {

259 
asm
 volatile (

309 
	}
}

312 
	$SIGNAL
(
TIMER3_COMPA_ve˘
) {

313 if(
≠p_timî0_ˇŒback
!=
NULL
Ë
	`≠p_timî0_ˇŒback
();

315 
	`ƒk_kî√l_îr‹_add
(
NRK_SEG_FAULT
,0);

317 
	}
}

322 
	$SIGNAL
(
SIG_OUTPUT_COMPARE1A
) {

325 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_watchdog.c

26 
	~<ö˛ude.h
>

27 
	~<ƒk_w©chdog.h
>

28 
	~<ƒk_îr‹.h
>

29 
	~<ƒk.h
>

30 
	~<avr/wdt.h
>

32 
	$ƒk_w©chdog_dißbÀ
()

34 
	`ƒk_öt_dißbÀ
();

35 
	`ƒk_w©chdog_ª£t
();

36 
MCUSR
 &~(1<<
WDRF
);

37 
WDTCSR
 |(1<<
WDCE
Ë| (1<<
WDE
);

38 
WDTCSR
 = 0;

39 
	`ƒk_öt_íabÀ
();

40 
	}
}

42 
	$ƒk_w©chdog_íabÀ
()

46 
	`ƒk_öt_dißbÀ
();

47 
MCUSR
 &~(1<<
WDRF
);

48 
	`ƒk_w©chdog_ª£t
();

49 
WDTCSR
 |(1<<
WDCE
Ë| (1<<
WDE
);

50 
WDTCSR
 = (1<<
WDE
Ë| (1<<
WDP2
Ë| (1<<
WDP0
);

51 
	`ƒk_öt_íabÀ
();

53 
	}
}

55 
öt8_t
 
	$ƒk_w©chdog_check
()

58 if((
MCUSR
 & (1<<
WDRF
))==0Ë 
NRK_OK
;

59  
NRK_ERROR
;

60 
	}
}

62 
ölöe
 
	$ƒk_w©chdog_ª£t
()

64 
	`wdt_ª£t
();

66 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega32/nrk_status.c

27 
	~<ö˛ude.h
>

28 
	~<ƒk_°©us.h
>

30 
uöt8_t
 
	$_ƒk_°¨tup_ok
()

34 if((vﬁ©ûe)
TCCR1B
!=0)  0;

36 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega32/nrk_timer.c

26 
	~<ö˛ude.h
>

27 
	~<°dio.h
>

28 
	~<avr/öãºu±.h
>

29 
	~<ulib.h
>

30 
	~<ƒk_timî.h
>

31 
	~<ƒk_drivî.h
>

32 
	~<ƒk_îr‹.h
>

33 
	~<ƒk_cfg.h
>

35 
	$ƒk_•ö_waô_us
(
uöt16_t
 
timeout
)

40 
	`NOP
();

41 
	`NOP
();

42 
	`NOP
();

43 
	`NOP
();

44 } --
timeout
);

46 
	}
}

49 
	$_ƒk_£tup_timî
() {

59 
TIFR
 = 
	`BM
 (
OCF1A
Ë| BM (
ICF1
);

60 
TIMSK
 = 
	`BM
 (
OCIE1A
);

61 
TCCR1A
 = 
TCCR1B
 = 
	`BM
 (
WGM12
Ë| BM (
CS12
);

62 
SFIOR
 |
PSR10
;

63 
TCNT1
 = 0;

64 
_ƒk_time_åiggî
=0;

72 
	}
}

74 
	$_ƒk_°›_os_timî
()

76 
TIMSK
 &~
	`BM
(
OCIE1A
) ;

78 
	}
}

80 
	$_ƒk_°¨t_os_timî
()

83 
TIMSK
 |
	`BM
(
OCIE1A
) ;

85 
	}
}

87 
uöt8_t
 
	$_ƒk_gë_√xt_wakeup
()

89  (
OCR1A
/33)+1;

90 
	}
}

92 
	$_ƒk_£t_√xt_wakeup
(
uöt8_t
 
nw
)

94 
OCR1A
 = (
nw
*33)-1;

95 
	}
}

97 
	$_ƒk_ª£t_os_timî
()

99 
SFIOR
 |
PSR2
;

100 
SFIOR
 |
PSR10
;

101 
TCNT1
 = 0;

102 
_ƒk_time_åiggî
=0;

103 
_ƒk_¥ev_timî_vÆ
=0;

104 
	}
}

106 
uöt8_t
 
	$_ƒk_gë_os_timî
()

108  (((
uöt16_t
)
TCNT1
)/(uint16_t)33);

109 
	}
}

111 
	$_ƒk_°›_high_•ìd_timî
()

113 
	}
}

115 
	$_ƒk_°¨t_high_•ìd_timî
()

117 
	}
}

120 
	$_ƒk_ª£t_high_•ìd_timî
()

122 
	}
}

124 
uöt16_t
 
	$_ƒk_gë_high_•ìd_timî
()

127 
	}
}

132 
	$SIGNAL
(
__ve˘‹_deÁu…
) {

134 
	`ƒk_kî√l_îr‹_add
(
NRK_SEG_FAULT
,0);

136 
	}
}

138 #ifde‡
NRK_MAX_DRIVER_CNT


139 
	$SIGNAL
(
SIG_OUTPUT_COMPARE0
)

141 
	`ƒk_high_‰eq_drivî_scheduÀr
();

144 
	}
}

148 
	$SIGNAL
(
SIG_OVERFLOW0
) {

150 
	`ƒk_kî√l_îr‹_add
(
NRK_TIMER_OVERFLOW
,0);

157 
	}
}

159 
	$SIGNAL
(
SIG_OUTPUT_COMPARE1A
) {

174 
	`_ƒk_timî_su•íd_èsk
();

176 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_cpu.h

28 #i‚de‡
__NRK_CPU_H


29 
	#__NRK_CPU_H


	)

32 
	~<ƒk_cfg.h
>

39 
ƒk_èrgë_°¨t
();

42 
ƒk_öt_dißbÀ
();

43 
ƒk_öt_íabÀ
();

45 
ƒk_w©chdog_dißbÀ
();

46 
ƒk_b©ãry_ßve
();

48 
ƒk_¶ìp
();

49 
ƒk_idÀ
();

50 
ölöe
 
ƒk_°ack_poöãr_ª°‹e
();

51 
ölöe
 
ƒk_°ack_poöãr_öô
();

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_ext_int.h

27 #i‚de‡
NRK_EXT_INT_H


28 
	#NRK_EXT_INT_H


	)

30 
	#NRK_EXT_INT_0
 0

	)

31 
	#NRK_EXT_INT_1
 1

	)

32 
	#NRK_EXT_INT_2
 2

	)

34 
	#NRK_PC_INT_0
 3

	)

35 
	#NRK_PC_INT_1
 4

	)

36 
	#NRK_PC_INT_2
 5

	)

37 
	#NRK_PC_INT_3
 6

	)

38 
	#NRK_PC_INT_4
 7

	)

39 
	#NRK_PC_INT_5
 8

	)

40 
	#NRK_PC_INT_6
 9

	)

41 
	#NRK_PC_INT_7
 10

	)

43 
	#NRK_LOW_TRIGGER
 0

	)

44 
	#NRK_LEVEL_TRIGGER
 1

	)

45 
	#NRK_FALLING_EDGE
 2

	)

46 
	#NRK_RISING_EDGE
 3

	)

48 (*
ext_öt0_ˇŒback
)();

49 (*
ext_öt1_ˇŒback
)();

50 (*
ext_öt2_ˇŒback
)();

51 (*
pc_öt0_ˇŒback
)();

54 
öt8_t
 
	`ƒk_ext_öt_íabÀ
(
uöt8_t
 
pö
 );

55 
öt8_t
 
	`ƒk_ext_öt_dißbÀ
(
uöt8_t
 
pö
 );

56 
öt8_t
 
	`ƒk_ext_öt_c⁄figuª
(
uöt8_t
 
pö
, uöt8_à
mode
, *
ˇŒback_func
);

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_status.h

27 #i‚de‡
NRK_STATUS_H


28 
	#NRK_STATUS_H


	)

31 
uöt8_t
 
_ƒk_°¨tup_ok
();

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_timer.h

27 #i‚de‡
NRK_TIMER_H


28 
	#NRK_TIMER_H


	)

30 
	#NRK_APP_TIMER_0
 0

	)

33 
VFPTR
 
	mpFunc
;

34 
öt32_t
 
	mtimeout
;

35 
uöt16_t
 
	m√xtTimî
;

36 
uöt16_t
 
	m¥evTimî
;

37 
boﬁ
 
	ma˘ive
;

38 } 
	tMAC_TIMER_INFO
;

40 
uöt16_t
 
	g_ƒk_¥ev_timî_vÆ
;

41 
uöt16_t
 
	g_ƒk_time_åiggî
;

43 (*
≠p_timî0_ˇŒback
)();

44 
uöt8_t
 
≠p_timî0_¥esˇÀ
;

47 
öt8_t
 
	`ƒk_timî_öt_ª£t
(
uöt8_t
 
timî
 );

48 
uöt16_t
 
	`ƒk_timî_öt_ªad
(
uöt8_t
 
timî
 );

49 
öt8_t
 
	`ƒk_timî_öt_°›
(
uöt8_t
 
timî
 );

50 
öt8_t
 
	`ƒk_timî_öt_°¨t
(
uöt8_t
 
timî
 );

51 
öt8_t
 
	`ƒk_timî_öt_c⁄figuª
(
uöt8_t
 
timî
, 
uöt16_t
 
¥esˇÀr
, uöt16_à
com∑ª_vÆue
, *
ˇŒback_func
);

53 
ölöe
 
	`ƒk_high_•ìd_timî_waô
–
uöt16_t
 
°¨t
, uöt16_à
ticks
 );

54 
ölöe
 
	`_ƒk_high_•ìd_timî_°›
();

55 
ölöe
 
	`_ƒk_high_•ìd_timî_°¨t
();

56 
ölöe
 
	`_ƒk_high_•ìd_timî_ª£t
();

57 
ölöe
 
uöt16_t
 
	`_ƒk_high_•ìd_timî_gë
();

59 
ölöe
 
	`_ƒk_os_timî_ª£t
();

60 
ölöe
 
	`_ƒk_os_timî_£t
(
uöt8_t
 
v
);

61 
ölöe
 
	`_ƒk_os_timî_°›
();

62 
ölöe
 
	`_ƒk_os_timî_°¨t
();

63 
ölöe
 
uöt16_t
 
	`_ƒk_os_timî_gë
();

66 
	`_ƒk_timî_su•íd_èsk
();

68 
	`ƒk_•ö_waô_us
(
uöt16_t
 
timeout
);

71 
	`_ƒk_£tup_timî
();

72 
	`_ƒk_£t_√xt_wakeup
(
uöt16_t
 
nw
);

73 
uöt16_t
 
	`_ƒk_gë_√xt_wakeup
();

75 
	`_ƒk_°¨t_os_timî
();

76 
ölöe
 
	`_ƒk_ª£t_os_timî
();

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_watchdog.h

27 #i‚de‡
NRK_WATCHDOG_H


28 
	#NRK_WATCHDOG_H


	)

31 
ƒk_w©chdog_dißbÀ
();

32 
ƒk_w©chdog_íabÀ
();

33 
ölöe
 
ƒk_w©chdog_ª£t
();

34 
öt8_t
 
ƒk_w©chdog_check
();

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_cpu.c

28 
	~<ö˛ude.h
>

29 
	~<ƒk.h
>

30 
	~<ƒk_°ack_check.h
>

31 
	~<ƒk.h
>

32 
	~<ƒk_èsk.h
>

33 
	~<ƒk_defs.h
>

34 
	~<ƒk_cfg.h
>

35 
	~<ƒk_îr‹.h
>

37 
	#BUILD_DATE
 "D©e: " 
__DATE__
 "\n"

	)

66 
	$ƒk_b©ãry_ßve
()

80 
	}
}

82 
	$ƒk_¶ìp
()

88 
	}
}

90 
	$ƒk_idÀ
()

96 
	}
}

98 
	$ƒk_èsk_£t_íåy_fun˘i⁄
–
ƒk_èsk_ty≥
 *
èsk
, *
func
 )

101 
èsk
->èsk = (*)
	`SWAP_BYTES
(
func
);

102 
	}
}

104 
	$ƒk_èsk_£t_°k
–
ƒk_èsk_ty≥
 *
èsk
, 
NRK_STK
 
°k_ba£
[], 
uöt16_t
 
°k_size
 )

106 * 
addr
;

107 if(
°k_size
<32Ë
	`ƒk_îr‹_add
(
NRK_STACK_TOO_SMALL
);

110 
addr
=&(
°k_ba£
[
°k_size
-2]);

112 
èsk
->
Ptos
 = 
addr
;

113 
addr
=&(
°k_ba£
[0]);

115 
èsk
->
Pbos
 = 
addr
;

118 
	}
}

121 *
ƒk_èsk_°k_öô
 ((*
èsk
)(), *
±os
, *
pbos
)

123 
uöt16_t
 *
	g°k
 ;

124 
uöt8_t
 *
	g°kc
;

126 
	g°k
 = (*)
pbos
;

127 
	g°kc
 = (*)
°k
;

128 *
	g°kc
 = 
STK_CANARY_VAL
;

129 
	g°k
 = (*)
±os
;

148 --
	g°k
;

149 *
	g°k
 = 
SWAP_BYTES
(
èsk
);

151 *(--
	g°k
) = 0x8;

152 *(--
	g°k
) = 0;

153 *(--
	g°k
) = 0;

154 *(--
	g°k
) = 0;

155 *(--
	g°k
) = 0;

156 *(--
	g°k
) = 0;

157 *(--
	g°k
) = 0;

158 *(--
	g°k
) = 0;

160 *(--
	g°k
) = 0;

161 *(--
	g°k
) = 0;

162 *(--
	g°k
) = 0;

163 *(--
	g°k
) = 0;

164 *(--
	g°k
) = 0;

171  ((*)
	g°k
);

174 
ölöe
 
	$ƒk_°ack_poöãr_öô
()

176 
uöt16_t
 *
°kc
;

177 #ifde‡
KERNEL_STK_ARRAY


178 
°kc
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

179 
ƒk_kî√l_°k
[0]=
STK_CANARY_VAL
;

180 
ƒk_kî√l_°k_±r
 = &
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

182 
°kc
 = (
uöt16_t
*)(
NRK_KERNEL_STK_TOP
-
NRK_KERNEL_STACKSIZE
);

183 *
°kc
 = 
STK_CANARY_VAL
;

184 
°kc
 = (
uöt16_t
*)
NRK_KERNEL_STK_TOP
;

185 
ƒk_kî√l_°k_±r
 = (
uöt16_t
*)
NRK_KERNEL_STK_TOP
;

192 *
°kc
 = (
uöt16_t
)
_ƒk_timî_tick
;

194 
	}
}

197 
ölöe
 
	$ƒk_°ack_poöãr_ª°‹e
()

200 
uöt16_t
 *
°kc
;

202 #ifde‡
KERNEL_STK_ARRAY


203 
°kc
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

205 
°kc
 = 
NRK_KERNEL_STK_TOP
;

210 *
°kc
 = 
_ƒk_timî_tick
;

211 
	}
}

214 
	$ƒk_èrgë_°¨t
()

217 
	`_ƒk_£tup_timî
();

220 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_ext_int.c

26 
	~<ö˛ude.h
>

27 
	~<avr/öãºu±.h
>

28 
	~<ulib.h
>

29 
	~<ƒk_ext_öt.h
>

30 
	~<ƒk_îr‹.h
>

31 
	~<ƒk_cfg.h
>

34 
öt8_t
 
	$ƒk_ext_öt_íabÀ
(
uöt8_t
 
pö
 )

36  
NRK_ERROR
;

37 
	}
}

39 
öt8_t
 
	$ƒk_ext_öt_dißbÀ
(
uöt8_t
 
pö
 )

41  
NRK_ERROR
;

42 
	}
}

46 
öt8_t
 
	$ƒk_ext_öt_c⁄figuª
(
uöt8_t
 
pö
, uöt8_à
mode
, *
ˇŒback_func
)

60  
NRK_ERROR
;

61 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_status.c

32 
	~<ö˛ude.h
>

33 
	~<ƒk_°©us.h
>

35 
uöt8_t
 
	$_ƒk_°¨tup_ok
()

41 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_timer.c

32 
	~<ö˛ude.h
>

34 
	~<sig«l.h
>

35 
	~<ulib.h
>

36 
	~<ƒk_timî.h
>

37 
	~<ƒk_îr‹.h
>

41 
	$ƒk_•ö_waô_us
(
uöt16_t
 
timeout
)

44 
	}
}

47 
	$_ƒk_£tup_timî
()

49 
_ƒk_¥ev_timî_vÆ
 = 254;

50 
BCSCTL1
 |(
DIVA1
 | 
DIVA0
);

51 
TACTL
 |(
TASSEL0
);

52 
TACTL
 |(
ID1
);

56 
TACCR0
 = 
_ƒk_¥ev_timî_vÆ
;

57 
TACCTL0
 |(
CCIE
);

59 
TACTL
 &(~
TAIFG
);

60 
TACCTL0
 &(~
CCIFG
);

61 
TACTL
 |(
TACLR
);

63 
	`_ƒk_ª£t_os_timî
();

64 
	`_ƒk_°¨t_os_timî
();

65 
_ƒk_time_åiggî
 = 0;

67 
	}
}

69 
	$_ƒk_high_•ìd_timî_°›
()

72 
	}
}

74 
	$_ƒk_high_•ìd_timî_°¨t
()

77 
	}
}

80 
	$_ƒk_high_•ìd_timî_ª£t
()

83 
	}
}

90 
	$ƒk_high_•ìd_timî_waô
–
uöt16_t
 
°¨t
, uöt16_à
ticks
 )

93 
	}
}

95 
ölöe
 
uöt16_t
 
	$_ƒk_high_•ìd_timî_gë
()

99 
	}
}

101 
	$_ƒk_°›_os_timî
()

103 
TACTL
 &(~(
MC1
 | 
MC0
));

104 
	}
}

106 
	$_ƒk_°¨t_os_timî
()

108 
TAR
 = 0;

109 
TACTL
 |(
MC0
);

110 
	}
}

112 
ölöe
 
	$_ƒk_ª£t_os_timî
()

114 
TAR
 = 0;

115 
_ƒk_time_åiggî
 = 0;

116 
_ƒk_¥ev_timî_vÆ
 = 0;

117 
	}
}

120 
uöt8_t
 
	$_ƒk_gë_√xt_wakeup
()

122  
TACCR0
+1;

123 
	}
}

125 
	$_ƒk_£t_√xt_wakeup
(
uöt8_t
 
nw
)

127 
TACCR0
 = 
nw
 - 1;

128 
	}
}

130 
ölöe
 
uöt8_t
 
	$_ƒk_os_timî_gë
()

132  
TACCR0
;

133 
	}
}

135 
	$öãºu±
(
TIMERA0_VECTOR
Ë
	$timî
 () {

136 
	`_ƒk_timî_su•íd_èsk
();

137 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_watchdog.c

26 
	~<ö˛ude.h
>

27 
	~<ƒk_w©chdog.h
>

28 
	~<ƒk_îr‹.h
>

30 
	$ƒk_w©chdog_dißbÀ
()

32 
	}
}

34 
	$ƒk_w©chdog_íabÀ
()

36 
	}
}

38 
öt8_t
 
	$ƒk_w©chdog_check
()

40 
	}
}

42 
ölöe
 
	$ƒk_w©chdog_ª£t
()

44 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_cpu.c

28 
	~<ö˛ude.h
>

29 
	~<ƒk.h
>

30 
	~<ƒk_°ack_check.h
>

31 
	~<ƒk.h
>

32 
	~<ƒk_èsk.h
>

33 
	~<ƒk_defs.h
>

34 
	~<ƒk_cfg.h
>

35 
	~<ƒk_timî.h
>

36 
	~<ƒk_îr‹.h
>

38 
	#BUILD_DATE
 "D©e: " 
__DATE__
 "\n"

	)

67 
	$ƒk_b©ãry_ßve
()

81 
	}
}

83 
	$ƒk_¶ìp
()

89 
	}
}

91 
	$ƒk_idÀ
()

97 
	}
}

99 
	$ƒk_èsk_£t_íåy_fun˘i⁄
–
ƒk_èsk_ty≥
 *
èsk
, *
func
 )

101 
èsk
->èsk = 
func
;

102 
	}
}

105 
	$ƒk_èsk_£t_°k
–
ƒk_èsk_ty≥
 *
èsk
, 
NRK_STK
 
°k_ba£
[], 
uöt16_t
 
°k_size
 )

107 * 
addr
;

108 if(
°k_size
<32Ë
	`ƒk_îr‹_add
(
NRK_STACK_TOO_SMALL
);

110 
addr
=&(
°k_ba£
[
°k_size
-2]);

111 
èsk
->
Ptos
 = 
addr
;

112 
addr
=&(
°k_ba£
[0]);

113 
èsk
->
Pbos
 = 
addr
;

114 
	}
}

116 *
ƒk_èsk_°k_öô
 ((*
èsk
)(), *
±os
, *
pbos
)

118 
uöt16_t
 *
	g°k
 ;

119 
uöt8_t
 *
	g°kc
;

121 
	g°k
 = (*)
pbos
;

122 
	g°kc
 = (*)
°k
;

123 *
	g°kc
 = 
STK_CANARY_VAL
;

124 
	g°k
 = (*)
±os
;

126 --
	g°k
;

127 *
	g°k
 = 
èsk
;

128 *(--
	g°k
Ë
GIE
;

129 *(--
	g°k
) = 0;

130 *(--
	g°k
) = 0;

131 *(--
	g°k
) = 0;

132 *(--
	g°k
) = 0;

133 *(--
	g°k
) = 0;

134 *(--
	g°k
) = 0;

135 *(--
	g°k
) = 0;

137 *(--
	g°k
) = 0;

138 *(--
	g°k
) = 0;

139 *(--
	g°k
) = 0;

140 *(--
	g°k
) = 0;

141 *(--
	g°k
) = 0;

143  ((*)
	g°k
);

146 
ölöe
 
	$ƒk_°ack_poöãr_öô
()

148 
uöt16_t
 *
°k
;

149 
uöt8_t
 *
°kc
;

150 #ifde‡
KERNEL_STK_ARRAY


151 
°k
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

152 
ƒk_kî√l_°k
[0]=
STK_CANARY_VAL
;

153 
ƒk_kî√l_°k_±r
 = &
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

155 
°k
 = (
uöt16_t
*)
NRK_KERNEL_STK_TOP
;

156 
°kc
 = (*)(
NRK_KERNEL_STK_TOP
-
NRK_KERNEL_STACKSIZE
);

157 *
°kc
 = 
STK_CANARY_VAL
;

158 
ƒk_kî√l_°k_±r
 = (
uöt16_t
*)
NRK_KERNEL_STK_TOP
;

161 *
°k
 = (
uöt16_t
)
_ƒk_timî_tick
;

162 
	}
}

165 
ölöe
 
	$ƒk_°ack_poöãr_ª°‹e
()

168 
uöt16_t
 *
°kc
;

170 #ifde‡
KERNEL_STK_ARRAY


171 
°kc
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

173 
°kc
 = (
uöt16_t
*)
NRK_KERNEL_STK_TOP
;

175 *
°kc
 = (
uöt16_t
)
_ƒk_timî_tick
;

176 
	}
}

179 
	$ƒk_èrgë_°¨t
()

182 
	`_ƒk_£tup_timî
();

183 
	`ƒk_öt_íabÀ
();

185 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_ext_int.c

26 
	~<ö˛ude.h
>

27 
	~<avr/öãºu±.h
>

28 
	~<ulib.h
>

29 
	~<ƒk_ext_öt.h
>

30 
	~<ƒk_îr‹.h
>

31 
	~<ƒk_cfg.h
>

34 
öt8_t
 
	$ƒk_ext_öt_íabÀ
(
uöt8_t
 
pö
 )

36  
NRK_ERROR
;

37 
	}
}

39 
öt8_t
 
	$ƒk_ext_öt_dißbÀ
(
uöt8_t
 
pö
 )

41  
NRK_ERROR
;

42 
	}
}

46 
öt8_t
 
	$ƒk_ext_öt_c⁄figuª
(
uöt8_t
 
pö
, uöt8_à
mode
, *
ˇŒback_func
)

60  
NRK_ERROR
;

61 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_status.c

32 
	~<ö˛ude.h
>

33 
	~<ƒk_°©us.h
>

35 
uöt8_t
 
	$_ƒk_°¨tup_ok
()

41 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_timer.c

32 
	~<ö˛ude.h
>

34 
	~<sig«l.h
>

35 
	~<ulib.h
>

36 
	~<ƒk_scheduÀr.h
>

37 
	~<ƒk_timî.h
>

38 
	~<ƒk_îr‹.h
>

40 
	$ƒk_•ö_waô_us
(
uöt16_t
 
timeout
)

44 
	`NOP
();

45 
	`NOP
();

46 
	`NOP
();

47 
	`NOP
();

48 } --
timeout
);

49 
	}
}

51 
	$_ƒk_£tup_timî
()

53 
_ƒk_¥ev_timî_vÆ
 = 
MAX_SCHED_WAKEUP_TIME
 - 1;

54 
BCSCTL1
 |
DIVA_DIV8
;

55 
TACTL
 = 
TASSEL_1
+
MC_0
+
ID_2
;

56 
TACCR0
 = 
_ƒk_¥ev_timî_vÆ
;

57 
TACCTL0
 &~
CCIFG
;

58 
TACCTL0
 |
CCIE
;

60 
	`_ƒk_ª£t_os_timî
();

61 
	`_ƒk_°¨t_os_timî
();

62 
_ƒk_time_åiggî
 = 0;

63 
	}
}

65 
	$_ƒk_high_•ìd_timî_°›
()

68 
	}
}

70 
	$_ƒk_high_•ìd_timî_°¨t
()

73 
	}
}

76 
	$_ƒk_high_•ìd_timî_ª£t
()

79 
	}
}

86 
	$ƒk_high_•ìd_timî_waô
–
uöt16_t
 
°¨t
, uöt16_à
ticks
 )

89 
	}
}

91 
ölöe
 
uöt16_t
 
	$_ƒk_high_•ìd_timî_gë
()

95 
	}
}

97 
	$_ƒk_°›_os_timî
()

99 
TACTL
 &(~(
MC1
 | 
MC0
));

100 
	}
}

102 
	$_ƒk_°¨t_os_timî
()

104 
TAR
 = 0;

105 
TACTL
 |
MC_1
;

106 
	}
}

108 
ölöe
 
	$_ƒk_ª£t_os_timî
()

110 
TAR
 = 0;

111 
_ƒk_time_åiggî
 = 0;

113 
	}
}

116 
uöt16_t
 
	$_ƒk_gë_√xt_wakeup
()

118  
TACCR0
+1;

119 
	}
}

121 
	$_ƒk_£t_√xt_wakeup
(
uöt16_t
 
nw
)

123 
TACCR0
 = 
nw
 - 1;

124 
TACCTL0
 &~
CCIFG
;

125 
TACCTL0
 |
CCIE
;

126 
TAR
 = 0;

127 
	}
}

129 
ölöe
 
uöt16_t
 
	$_ƒk_os_timî_gë
()

135 
uöt16_t
 
t0
;

136 
uöt16_t
 
t1
=
TAR
;

137 dÿ{ 
t0
=
t1
;Å1=
TAR
; } Å0 !=Å1 );

138  
t1
;

139 
	}
}

141 
	$öãºu±
(
TIMERA0_VECTOR
Ë
	$timî
 () {

142 
	`_ƒk_timî_su•íd_èsk
();

143 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_watchdog.c

26 
	~<ö˛ude.h
>

27 
	~<ƒk_w©chdog.h
>

28 
	~<ƒk_îr‹.h
>

30 
	$ƒk_w©chdog_dißbÀ
()

32 
	}
}

34 
	$ƒk_w©chdog_íabÀ
()

36 
	}
}

38 
öt8_t
 
	$ƒk_w©chdog_check
()

40 
	}
}

42 
ölöe
 
	$ƒk_w©chdog_ª£t
()

44 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_cpu.c

28 
	~<ö˛ude.h
>

29 
	~<ƒk.h
>

30 
	~<ƒk_°ack_check.h
>

31 
	~<ƒk.h
>

32 
	~<ƒk_èsk.h
>

33 
	~<ƒk_defs.h
>

34 
	~<ƒk_cfg.h
>

35 
	~<ƒk_timî.h
>

36 
	~<ƒk_îr‹.h
>

38 
	#BUILD_DATE
 "D©e: " 
__DATE__
 "\n"

	)

67 
	$ƒk_b©ãry_ßve
()

81 
	}
}

83 
	$ƒk_¶ìp
()

89 
	}
}

91 
	$ƒk_idÀ
()

97 
	}
}

99 
	$ƒk_èsk_£t_íåy_fun˘i⁄
–
ƒk_èsk_ty≥
 *
èsk
, *
func
 )

102 
èsk
->èsk = (*)
	`SWAP_BYTES
(
func
);

103 
	}
}

105 
	$ƒk_èsk_£t_°k
–
ƒk_èsk_ty≥
 *
èsk
, 
NRK_STK
 
°k_ba£
[], 
uöt16_t
 
°k_size
 )

107 * 
addr
;

108 if(
°k_size
<32Ë
	`ƒk_îr‹_add
(
NRK_STACK_TOO_SMALL
);

111 
addr
=&(
°k_ba£
[
°k_size
-2]);

113 
èsk
->
Ptos
 = 
addr
;

114 
addr
=&(
°k_ba£
[0]);

116 
èsk
->
Pbos
 = 
addr
;

119 
	}
}

122 *
ƒk_èsk_°k_öô
 ((*
èsk
)(), *
±os
, *
pbos
)

124 
uöt16_t
 *
	g°k
 ;

125 
uöt8_t
 *
	g°kc
;

127 
	g°k
 = (*)
pbos
;

128 
	g°kc
 = (*)
°k
;

129 *
	g°kc
 = 
STK_CANARY_VAL
;

130 
	g°k
 = (*)
±os
;

149 --
	g°k
;

150 *
	g°k
 = 
SWAP_BYTES
(
èsk
);

152 *(--
	g°k
) = 0x8;

153 *(--
	g°k
) = 0;

154 *(--
	g°k
) = 0;

155 *(--
	g°k
) = 0;

156 *(--
	g°k
) = 0;

157 *(--
	g°k
) = 0;

158 *(--
	g°k
) = 0;

159 *(--
	g°k
) = 0;

161 *(--
	g°k
) = 0;

162 *(--
	g°k
) = 0;

163 *(--
	g°k
) = 0;

164 *(--
	g°k
) = 0;

165 *(--
	g°k
) = 0;

172  ((*)
	g°k
);

175 
ölöe
 
	$ƒk_°ack_poöãr_öô
()

177 
uöt16_t
 *
°kc
;

178 #ifde‡
KERNEL_STK_ARRAY


179 
°kc
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

180 
ƒk_kî√l_°k
[0]=
STK_CANARY_VAL
;

181 
ƒk_kî√l_°k_±r
 = &
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

183 
°kc
 = (
uöt16_t
*)(
NRK_KERNEL_STK_TOP
-
NRK_KERNEL_STACKSIZE
);

184 *
°kc
 = 
STK_CANARY_VAL
;

185 
°kc
 = (
uöt16_t
*)
NRK_KERNEL_STK_TOP
;

186 
ƒk_kî√l_°k_±r
 = (
uöt16_t
*)
NRK_KERNEL_STK_TOP
;

193 *
°kc
 = (
uöt16_t
)
_ƒk_timî_tick
;

195 
	}
}

198 
ölöe
 
	$ƒk_°ack_poöãr_ª°‹e
()

201 
uöt16_t
 *
°kc
;

203 #ifde‡
KERNEL_STK_ARRAY


204 
°kc
 = (
uöt16_t
*)&
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
-1];

206 
°kc
 = 
NRK_KERNEL_STK_TOP
;

211 *
°kc
 = 
_ƒk_timî_tick
;

212 
	}
}

215 
	$ƒk_èrgë_°¨t
()

218 
	`_ƒk_£tup_timî
();

221 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_ext_int.c

26 
	~<ö˛ude.h
>

28 
	~<ulib.h
>

29 
	~<ƒk_ext_öt.h
>

30 
	~<ƒk_îr‹.h
>

31 
	~<ƒk_cfg.h
>

34 
öt8_t
 
	$ƒk_ext_öt_íabÀ
(
uöt8_t
 
pö
 )

36  
NRK_ERROR
;

37 
	}
}

39 
öt8_t
 
	$ƒk_ext_öt_dißbÀ
(
uöt8_t
 
pö
 )

41  
NRK_ERROR
;

42 
	}
}

46 
öt8_t
 
	$ƒk_ext_öt_c⁄figuª
(
uöt8_t
 
pö
, uöt8_à
mode
, *
ˇŒback_func
)

60  
NRK_ERROR
;

61 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_status.c

32 
	~<ö˛ude.h
>

33 
	~<ƒk_°©us.h
>

35 
uöt8_t
 
	$_ƒk_°¨tup_ok
()

41 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_timer.c

32 
	~<ö˛ude.h
>

34 
	~<sig«l.h
>

35 
	~<ulib.h
>

36 
	~<ƒk_timî.h
>

37 
	~<ƒk_îr‹.h
>

41 
	$ƒk_•ö_waô_us
(
uöt16_t
 
timeout
)

44 
	}
}

47 
	$_ƒk_£tup_timî
()

49 
_ƒk_¥ev_timî_vÆ
 = 254;

51 
FLL_CTL1
 = (
FLL_DIV1
 | 
FLL_DIV0
);

53 
TACTL
 |(
TACLR
);

55 
TACTL
 |(
TASSEL0
);

56 
TACTL
 |(
ID1
);

60 
TACCR0
 = 
_ƒk_¥ev_timî_vÆ
;

63 
TACCTL0
 |(
CCIE
);

65 
TACTL
 &(~
TAIFG
);

66 
TACCTL0
 &(~
CCIFG
);

69 
	`_ƒk_ª£t_os_timî
();

70 
	`_ƒk_°¨t_os_timî
();

71 
_ƒk_time_åiggî
 = 0;

73 
	}
}

75 
ölöe
 
	$_ƒk_high_•ìd_timî_°›
()

78 
	}
}

80 
ölöe
 
	$_ƒk_high_•ìd_timî_°¨t
()

83 
	}
}

86 
ölöe
 
	$_ƒk_high_•ìd_timî_ª£t
()

89 
	}
}

96 
ölöe
 
	$ƒk_high_•ìd_timî_waô
–
uöt16_t
 
°¨t
, uöt16_à
ticks
 )

99 
	}
}

101 
ölöe
 
uöt16_t
 
	$_ƒk_high_•ìd_timî_gë
()

104 
	}
}

106 
	$_ƒk_°›_os_timî
()

108 
TACTL
 &(~(
MC1
 | 
MC0
));

109 
	}
}

111 
	$_ƒk_°¨t_os_timî
()

113 
TAR
 = 0;

114 
TACTL
 |(
MC0
);

115 
	}
}

117 
ölöe
 
	$_ƒk_ª£t_os_timî
()

119 
TAR
 = 0;

120 
_ƒk_time_åiggî
 = 0;

121 
_ƒk_¥ev_timî_vÆ
 = 0;

122 
	}
}

125 
uöt8_t
 
	$_ƒk_gë_√xt_wakeup
()

127  
TACCR0
+1;

128 
	}
}

130 
	$_ƒk_£t_√xt_wakeup
(
uöt8_t
 
nw
)

132 
TACCR0
 = 
nw
 - 1;

133 
	}
}

135 
ölöe
 
uöt8_t
 
	$_ƒk_os_timî_gë
()

137  
TACCR0
;

138 
	}
}

139 
	$öãºu±
(
TIMERA0_VECTOR
Ë
	$timî
 () {

140 
	`_ƒk_timî_su•íd_èsk
();

142 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_watchdog.c

26 
	~<ö˛ude.h
>

27 
	~<ƒk_w©chdog.h
>

28 
	~<ƒk_îr‹.h
>

30 
	$ƒk_w©chdog_dißbÀ
()

32 
	}
}

34 
	$ƒk_w©chdog_íabÀ
()

36 
	}
}

38 
öt8_t
 
	$ƒk_w©chdog_check
()

41 
	}
}

43 
ölöe
 
	$ƒk_w©chdog_ª£t
()

45 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk.h

28 #i‚de‡
__ƒk_h


29 
	#__ƒk_h


	)

31 
	#NRK_KERNEL_STK_TOP
 (
RAMEND
-1)

	)

33 
	#NRK_VERSION
 101

	)

36 
	~<ƒk_˝u.h
>

37 
	~<ƒk_cfg.h
>

38 
	~<ƒk_time.h
>

39 
	~<ƒk_èsk.h
>

40 
	~<ƒk_evíts.h
>

42 #i‚de‡ 
FALSE


43 
	#FALSE
 0

	)

46 #i‚de‡ 
TRUE


47 
	#TRUE
 1

	)

55 
ƒk_öô
();

56 
ƒk_°¨t
();

58 
ƒk_hÆt
();

59 
ölöe
 
ƒk_öt_dißbÀ
();

60 
ölöe
 
ƒk_öt_íabÀ
();

61 
_ƒk_timî_tick
();

62 
ƒk_èsk_£t_°k
–
ƒk_èsk_ty≥
 *
èsk
, 
NRK_STK
 
°k_ba£
[], 
uöt16_t
 
°k_size
 );

63 
ƒk_èsk_£t_íåy_fun˘i⁄
–
ƒk_èsk_ty≥
 *
èsk
, *
func
);

65 *
ƒk_èsk_°k_öô
((*)(), *, *);

67 
NRK_STK
 
	gƒk_idÀ_èsk_°k
[
NRK_TASK_IDLE_STK_SIZE
];

68 #ifde‡
KERNEL_STK_ARRAY


69 
NRK_STK
 
	gƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
];

71 
NRK_STK
 *
	gƒk_kî√l_°k_±r
;

74 
öt8_t
 
ƒk_TCB_öô
(
ƒk_èsk_ty≥
 *, 
NRK_STK
 *, NRK_STK *, 
uöt16_t
 , *, uint16_t);

79 
NRK_TCB
 
ƒk_èsk_TCB
[
NRK_MAX_TASKS
];

83 
ƒk_sig_t
 
ƒk_wakeup_sig«l
;

86 
ƒk_queue
 
_ƒk_ªadyQ
[
NRK_MAX_TASKS
+1];

87 
ƒk_queue
 *
_‰ì_node
,*
_hód_node
,*
•‹ad±r
;

94 
uöt8_t
 
ƒk_cur_èsk_¥io
;

95 
NRK_TCB
 *
ƒk_cur_èsk_TCB
;

97 
uöt8_t
 
ƒk_high_ªady_¥io
;

98 
NRK_TCB
 *
ƒk_high_ªady_TCB
;

102 
uöt8_t
 
_ƒk_ªsour˚_˙t
;

103 
uöt8_t
 
ƒk_ªsour˚_li°
[
NRK_MAX_RESOURCE_CNT
];

104 
uöt8_t
 
ƒk_ªsour˚_¥io_li°
[
NRK_MAX_RESOURCE_CNT
];

112 
ƒk_time_t
 
ƒk_sy°em_time
;

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_defs.h

29 #i‚de‡
NRK_DEFS_H


30 
	#NRK_DEFS_H


	)

32 
	~<ƒk.h
>

34 
	#SWAP_BYTES
(
x
)\

35 ((((
uöt16_t
)
x
)<<8)|((((uöt16_t)x)>>8)&0xff))

	)

37 #i‚de‡
NRK_MAX_RESOURCE_CNT


38 
	#NRK_MAX_RESOURCE_CNT
 0

	)

41 #ifde‡
NRK_KERNEL_TEST


42 
uöt8_t
 
	gƒk_max_¶ìp_wakeup_time
;

45 #i‚de‡
NRK_IDLE_TASK_ID


46 
	#NRK_IDLE_TASK_ID
 0

	)

49 
NRK_TCB
 
	gƒk_èsk_TCB
[
NRK_MAX_TASKS
];

51 
ƒk_queue
 
	g_ƒk_ªadyQ
[
NRK_MAX_TASKS
+1];

52 
ƒk_queue
 *
	g_‰ì_node
,*
	g_hód_node
,*
	g•‹ad±r
;

55 
ƒk_sig_t
 
	gƒk_wakeup_sig«l
;

59 
uöt8_t
 
	gƒk_cur_èsk_¥io
 ;

60 
NRK_TCB
 *
	gƒk_cur_èsk_TCB
;

62 
uöt8_t
 
	gƒk_high_ªady_¥io
;

63 
NRK_TCB
 *
	gƒk_high_ªady_TCB
;

68 
uöt8_t
 
	g_ƒk_ªsour˚_˙t
;

72 
ƒk_£m_t
 
	gƒk_£m_li°
[
NRK_MAX_RESOURCE_CNT
];

74 
ƒk_time_t
 
	gƒk_sy°em_time
;

76 
NRK_STK
 
ƒk_idÀ_èsk_°k
[
NRK_TASK_IDLE_STK_SIZE
];

77 #ifde‡
KERNEL_STK_ARRAY


78 
NRK_STK
 
ƒk_kî√l_°k
[
NRK_KERNEL_STACKSIZE
];

80 
NRK_STK
 *
ƒk_kî√l_°k_±r
;

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_driver.h

28 #i‚de‡
NRK_DRIVER_H


29 
	#NRK_DRIVER_H


	)

31 
	~<°döt.h
>

34 
	#WAS_OPEN
 1

	)

35 
	#WAS_NOT_OPEN
 0

	)

39 
	#INIT
 0

	)

40 
	#OPEN
 1

	)

41 
	#CLOSE
 2

	)

42 
	#GET_STATUS
 3

	)

43 
	#SET_STATUS
 4

	)

44 
	#READ
 5

	)

45 
	#WRITE
 6

	)

48 
	#READ_FLAG
 1

	)

49 
	#WRITE_FLAG
 2

	)

50 
	#APPEND_FLAG
 4

	)

53 
	sƒk_drivî


55 
öt8_t
 
	mdev_id
;

57 
öt8_t
 
	mac˚ss_¥iv
;

59 
öt8_t
 (*
devi˚m™agî
)(
uöt8_t
 
	m°©e
,uöt8_à
	m›t
,uöt8_t*
	mbuf
,uöt8_à
	msize
);

62 } 
	tNRKDrivî
;

65 
öt8_t
 
ƒk_ªgi°î_drivî
(*
devi˚m™agî
,
uöt8_t
 
drivî_«me
);

66 
öt8_t
 
ƒk_›í
(
uöt8_t
 
dev_id
,uöt8_à
›t
);

67 
öt8_t
 
ƒk_ªad
(
uöt8_t
 
dev_fd
,uöt8_à*
buf„r
,uöt8_à
size
);

68 
öt8_t
 
ƒk_wrôe
(
uöt8_t
 
dev_fd
,uöt8_à*
buf„r
, uöt8_à
size
);

69 
öt8_t
 
ƒk_˛o£
(
uöt8_t
 
dev_fd
);

70 
öt8_t
 
ƒk_£t_°©us
(
uöt8_t
 
dev_fd
,uöt8_à
key
,uöt8_à
vÆue
);

71 
öt8_t
 
ƒk_gë_°©us
(
uöt8_t
 
dev_fd
,uöt8_à
key
);

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_error.h

27 #i‚de‡
NRK_ERROR_H


28 
	#NRK_ERROR_H


	)

30 
	~<ö˛ude.h
>

31 
	~<ulib.h
>

33 
	#NRK_OK
 1

	)

34 
	#NRK_ERROR
 (-1)

	)

36 
	#NRK_UNKOWN
 0

	)

37 
	#NRK_STACK_OVERFLOW
 1

	)

38 
	#NRK_RESERVE_ERROR
 2

	)

39 
	#NRK_RESERVE_VIOLATED
 3

	)

40 
	#NRK_WAKEUP_MISSED
 4

	)

41 
	#NRK_DUP_TASK_ID
 5

	)

42 
	#NRK_BAD_STARTUP
 6

	)

43 
	#NRK_EXTRA_TASK
 7

	)

44 
	#NRK_STACK_SMASH
 8

	)

45 
	#NRK_LOW_VOLTAGE
 9

	)

46 
	#NRK_SEG_FAULT
 10

	)

47 
	#NRK_TIMER_OVERFLOW
 11

	)

48 
	#NRK_DEVICE_DRIVER
 12

	)

49 
	#NRK_UNIMPLEMENTED
 13

	)

50 
	#NRK_SIGNAL_CREATE_ERROR
 14

	)

51 
	#NRK_SEMAPHORE_CREATE_ERROR
 15

	)

52 
	#NRK_WATCHDOG_ERROR
 16

	)

53 
	#NRK_STACK_TOO_SMALL
 17

	)

54 
	#NRK_INVALID_STACK_POINTER
 18

	)

55 
	#NRK_NUM_ERRORS
 19

	)

56 
uöt8_t
 
	tNRK_ERRNO
;

58 
uöt8_t
 
	gîr‹_èsk
;

59 
uöt8_t
 
	gîr‹_num
;

61 
uöt8_t
 
ƒk_î∫o_gë
();

62 
_ƒk_î∫o_£t
(
NRK_ERRNO
 
îr‹_code
);

63 
ƒk_kî√l_îr‹_add
(
uöt8_t
 
n
,uöt8_à
èsk
);

64 
ƒk_îr‹_add
(
uöt8_t
 
îr‹_num
);

65 
öt8_t
 
ƒk_îr‹_¥öt
();

66 
uöt8_t
 
ƒk_îr‹_gë
(uöt8_à*
èsk_id
, uöt8_à*
code
);

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_events.h

28 #i‚de‡
NRK_EVENTS_H


29 
	#NRK_EVENTS_H


	)

31 
	~<ƒk_time.h
>

33 
	#SIG
(
x
Ë((
uöt32_t
)1)<<
	)
x

35 
öt8_t
 
	tƒk_sig_t
;

36 
uöt32_t
 
	tƒk_sig_mask_t
;

39 
	s£m≠h‹e_ty≥
 {

40 
öt8_t
 
	mcou¡
;

41 
öt8_t
 
	mªsour˚_˚ûög
;

42 
öt8_t
 
	mvÆue
;

43 } 
	tƒk_£m_t
;

46 
uöt32_t
 
	g_ƒk_sig«l_li°
;

48 
uöt32_t
 
ƒk_sig«l_gë_ªgi°îed_mask
();

49 
öt8_t
 
ƒk_sig«l_dñëe
(
ƒk_sig_t
 
sig_id
);

50 
öt8_t
 
ƒk_sig«l_uƒegi°î
(öt8_à
sig_id
);

51 
öt8_t
 
ƒk_sig«l_ªgi°î
(öt8_à
sig_id
);

52 
öt8_t
 
ƒk_sig«l_¸óã
();

54 
öt8_t
 
ƒk_evít_sig«l
(öt8_à
evít_num
);

55 
uöt32_t
 
ƒk_evít_waô
(uöt32_à
evít_num
);

57 
ƒk_£m_t
* 
ƒk_£m_¸óã
(
uöt8_t
 
cou¡
,uöt8_à
˚ûög_¥io
);

59 
öt8_t
 
ƒk_£m_dñëe
(
ƒk_£m_t
 *
ª§c
);

60 
öt8_t
 
ƒk_gë_ªsour˚_ödex
(
ƒk_£m_t
 *
ª§c
);

61 
öt8_t
 
ƒk_£m_po°
(
ƒk_£m_t
 *
r§c
);

62 
öt8_t
 
ƒk_£m_≥nd
(
ƒk_£m_t
 *
r§c
 );

63 
öt8_t
 
ƒk_£m_quîy
(
ƒk_£m_t
 *
r§c
 );

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_idle_task.h

28 #i‚de‡
NRK_IDLE_TASK_H


29 
	#NRK_IDLE_TASK_H


	)

31 
	~<ö˛ude.h
>

32 
	~<ulib.h
>

33 
	~<ƒk.h
>

35 
ƒk_idÀ_èsk
();

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_includes.h

28 #i‚de‡
__ö˛udes_h


29 
	#__ö˛udes_h


	)

32 
	~<ƒk_˝u.h
>

33 
	~<ƒk_cfg.h
>

34 
	~<ƒk.h
>

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_reserve.h

27 #i‚de‡
NRK_RESERVE_H


28 
	#NRK_RESERVE_H


	)

30 
	~<ƒk_cfg.h
>

32 #ifde‡
NRK_MAX_RESERVES


34 
_ƒk_ª£rve_öô
();

36 
öt8_t
 
ƒk_ª£rve_¸óã
();

37 
öt8_t
 
ƒk_ª£rve_dñëe
(
uöt8_t
 
ª£rve_id
);

39 
uöt8_t
 
ƒk_ª£rve_gë
(uöt8_à
ª£rve_id
);

41 
öt8_t
 
ƒk_ª£rve_£t
(
uöt8_t
 
id
, 
ƒk_time_t
 *
≥riod
,
öt16_t
 
ac˚ss_cou¡
,*
îrh™dÀr
);

43 
öt8_t
 
ƒk_ª£rve_c⁄sume
(
uöt8_t
 
ª£rve_id
);

45 
_ƒk_ª£rve_upd©e
(
uöt8_t
 
ª£rve_id
);

48 
	sƒk_ª£rve


50 
uöt32_t
 
	m≥riod_ticks
;

51 
uöt32_t
 
	m£t_time
;

52 
uöt32_t
 
	mcur_time
;

53 
öt16_t
 
	m£t_ac˚ss
;

54 
öt16_t
 
	mcur_ac˚ss
;

55 
öt8_t
 
	ma˘ive
;

56 (*
	mîr‹
)();

57 }
	tƒk_ª£rve
;

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_scheduler.h

28 #i‚de‡
_NRK_SCHEDULER_h


29 
	#_NRK_SCHEDULER_h


	)

32 
	~<ƒk_˝u.h
>

33 
	~<ƒk_cfg.h
>

34 
	~<ƒk.h
>

35 
	~<ƒk_time.h
>

37 
	#MAX_SCHED_WAKEUP_TIME
 250

	)

39 
uöt8_t
 
	g_ƒk_˝u_°©e
;

41 
_ƒk_scheduÀr
();

43 
uöt16_t
 
	g√xt_√xt_wakeup
;

44 
uöt16_t
 
_ƒk_gë_√xt_√xt_wakeup
();

47 
ƒk_°¨t_high_ªady_èsk
();

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_stack_check.h

27 #i‚de‡
NRK_STACK_CHECK_H


28 
	#NRK_STACK_CHECK_H


	)

30 
	~<ö˛ude.h
>

32 
	#STK_CANARY_VAL
 0x55

	)

35 
dump_°ack_öfo
();

36 
ölöe
 
ƒk_°ack_check
();

37 
öt8_t
 
ƒk_°ack_check_pid
(öt8_à
pid
);

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_stats.h

1 #i‚de‡
NRK_STATS_H


2 
	#NRK_STATS_H


	)

3 
	~<ƒk_cfg.h
>

4 
	~<ƒk_time.h
>

6 #ifde‡
NRK_STATS_TRACKER


7 
	sèsk_°©
 {

8 
uöt32_t
 
	mtŸÆ_ticks
;

9 
uöt32_t
 
	mmö_exec_ticks
;

10 
uöt32_t
 
	mmax_exec_ticks
;

11 
uöt32_t
 
	mœ°_exec_ticks
;

12 
uöt32_t
 
	msw≠≥d_ö
;

13 
uöt32_t
 
	mcur_ticks
;

14 
uöt32_t
 
	m¥ìm±ed
;

15 
uöt8_t
 
	mviﬁ©i⁄s
;

16 
uöt8_t
 
	movîÊow
;

17 } 
	tƒk_èsk_°©_t
;

19 
ƒk_èsk_°©_t
 
	gcur_èsk_°©s
[
NRK_MAX_TASKS
];

21 
ƒk_time_t
 
	g_ƒk_°©s_¶ìp_time
;

23 
ƒk_°©s_ª£t
();

24 
_ƒk_°©s_¶ìp
(
uöt8_t
 
t
);

25 
_ƒk_°©s_add_viﬁ©i⁄
(
uöt8_t
 
èsk_id
);

26 
_ƒk_°©s_èsk_°¨t
(
uöt8_t
 
èsk_id
);

27 
_ƒk_°©s_èsk_¥ìm±ed
(
uöt8_t
 
èsk_id
, uöt8_à
ticks
);

28 
_ƒk_°©s_èsk_su•íd
(
uöt8_t
 
èsk_id
, uöt8_à
ticks
);

29 
ƒk_°©s_di•œy_Æl
();

30 
ƒk_°©s_di•œy_pid
(
uöt8_t
 
pid
);

31 
öt8_t
 
ƒk_°©s_gë
(
uöt8_t
 
pid
, 
ƒk_èsk_°©_t
 *
t
);

32 
ƒk_°©s_gë_dìp_¶ìp
(
ƒk_time_t
 *
t
);

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_task.h

29 #i‚de‡
_NRK_TASK_h


30 
	#_NRK_TASK_h


	)

33 
	~<ƒk_˝u.h
>

34 
	~<ƒk_cfg.h
>

35 
	~<ƒk.h
>

36 
	~<ƒk_time.h
>

39 
	#TIME_PAD
 2

	)

41 
uöt16_t
 
	tEvítMaskTy≥
;

42 
EvítMaskTy≥
* 
	tEvítMaskRefTy≥
;

49 
	sos_tcb
 {

50 
NRK_STK
 *
	mOSTaskStkPå
;

51 
NRK_STK
 *
	mOSTCBStkBŸtom
;

54 
boﬁ
 
	mñev©ed_¥io_Êag
;

55 
boﬁ
 
	msu•íd_Êag
;

56 
boﬁ
 
	mnw_Êag
;

57 
uöt8_t
 
	mevít_su•íd
;

58 
öt8_t
 
	mèsk_ID
;

59 
uöt8_t
 
	mèsk_°©e
;

60 
uöt8_t
 
	mèsk_¥io
;

61 
uöt8_t
 
	mèsk_¥io_˚û
;

62 
uöt8_t
 
	mî∫o
;

63 
uöt32_t
 
	mªgi°îed_sig«l_mask
;

64 
uöt32_t
 
	ma˘ive_sig«l_mask
;

67 
uöt16_t
 
	m√xt_wakeup
;

68 
uöt16_t
 
	m√xt_≥riod
;

69 
uöt16_t
 
	m˝u_ªmaöög
;

70 
uöt16_t
 
	m≥riod
;

71 
uöt16_t
 
	m˝u_ª£rve
;

72 
uöt16_t
 
	mnum_≥riods
;

73 
öt8_t
 
	mty≥
;

74 
uöt32_t
 
	m¨rivÆ_time
;

77 } 
	tNRK_TCB
;

90 
	sèsk_ty≥
 {

92 
öt8_t
 
	mèsk_ID
;

93 *
	mPtos
;

94 *
	mPbos
;

95 (*
	mèsk
)();

96 
boﬁ
 
	mFú°A˘iv©i⁄
;

97 
uöt8_t
 
	m¥io
;

98 
uöt8_t
 
	mTy≥
;

99 
uöt8_t
 
	mSchTy≥
;

100 
ƒk_time_t
 
	m≥riod
;

101 
ƒk_time_t
 
	m˝u_ª£rve
;

102 
ƒk_time_t
 
	moff£t
;

104 } 
	tƒk_èsk_ty≥
;

113 
öt8_t
 
	tƒk_°©us_t
;

121 
ƒk_°©us_t
 
ƒk_ãrmö©e_èsk
();

122 
ƒk_°©us_t
 
ƒk_a˘iv©e_èsk
(
ƒk_èsk_ty≥
 *);

123 
ƒk_°©us_t
 
Task
();

124 
ƒk_°©us_t
 
ScheduÀ
();

126 
_ƒk_scheduÀr
();

128 
uöt8_t
 
ƒk_gë_pid
();

129 
öt8_t
 
ƒk_waô_u¡û_√xt_≥riod
();

130 
öt8_t
 
ƒk_waô_u¡û_√xt_n_≥riods
(
uöt16_t
 
p
);

131 
öt8_t
 
ƒk_waô_u¡û
(
ƒk_time_t
 
t
);

132 
öt8_t
 
ƒk_waô
(
ƒk_time_t
 
t
);

133 
öt8_t
 
ƒk_waô_u¡û_ticks
(
uöt16_t
 
ticks
);

134 
öt8_t
 
ƒk_waô_ticks
(
uöt16_t
 
ticks
);

135 
öt8_t
 
ƒk_waô_u¡û_nw
();

136 
öt8_t
 
ƒk_£t_√xt_wakeup
(
ƒk_time_t
 
t
);

138 
uöt16_t
 
_ƒk_time_to_ticks
(
ƒk_time_t
 
t
);

139 
uöt32_t
 
_ƒk_time_to_ticks_l⁄g
(
ƒk_time_t
 
t
);

140 
ƒk_time_t
 
_ƒk_ticks_to_time
(
uöt32_t
 
ticks
);

143 
	#RUNNING
 0

	)

144 
	#WAITING
 1

	)

145 
	#READY
 2

	)

146 
	#SUSPENDED
 3

	)

147 
	#FINISHED
 4

	)

148 
	#EVENT_SUSPENDED
 5

	)

149 
	#SPORAD_READY
 6

	)

151 
	#SIG_EVENT_SUSPENDED
 1

	)

152 
	#RSRC_EVENT_SUSPENDED
 2

	)

154 
	#NONPREEMPTIVE
 0

	)

155 
	#PREEMPTIVE
 1

	)

157 
	#INVALID_TASK
 0

	)

158 
	#BASIC_TASK
 1

	)

159 
	#IDLE_TASK
 2

	)

160 
	#TBS_SPORADIC_TASK
 3

	)

162 
	#TCB_EMPTY_PRIO
 99

	)

163 
	#RES_FREE
 99

	)

173 
	snode
 {

174 
uöt8_t
 
	mèsk_ID
;

175 
node
 *
	mPªv
;

176 
node
 *
	mNext
;

177 } 
	tƒk_queue
;

179 
ƒk_ªm_‰om_ªadyQ
(
öt8_t
 
èsk_ID
);

180 
uöt8_t
 
ƒk_gë_high_ªady_èsk_ID
();

181 
ƒk_add_to_ªadyQ
(
öt8_t
 
èsk_ID
);

182 
ƒk_add_to_ªadyQ_Bef‹e
(
öt8_t
 
èsk_ID
);

183 
ƒk_¥öt_ªadyQ
();

	@/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_time.h

29 #i‚de‡
NRK_TIME_H


30 
	#NRK_TIME_H


	)

32 
	~<ö˛ude.h
>

33 
	~<ulib.h
>

34 
	~<ƒk_∂©f‹m_time.h
>

36 
	#NANOS_PER_SEC
 1000000000

	)

37 
	#US_PER_SEC
 1000000

	)

38 
	#NANOS_PER_MS
 1000000

	)

39 
	#NANOS_PER_US
 1000

	)

49 
uöt32_t
 
	m£cs
;

50 
uöt32_t
 
	m«no_£cs
;

51 } 
	tƒk_time_t
;

53 
ƒk_time_gë
(
ƒk_time_t
 *
t
);

54 
ƒk_time_£t
(
uöt32_t
 
£cs
, uöt32_à
«no_£cs
);

55 
uöt16_t
 
_ƒk_time_to_ticks
(
ƒk_time_t
 
t
);

56 
uöt32_t
 
_ƒk_time_to_ticks_l⁄g
(
ƒk_time_t
 
t
);

57 
uöt8_t
 
ƒk_time_sub
(
ƒk_time_t
 *
ªsu…
,ƒk_time_à
high
,Çrk_time_à
low
);

58 
uöt8_t
 
ƒk_time_add
(
ƒk_time_t
 *
ªsu…
,ƒk_time_à
a
,Çrk_time_à
b
);

59 
ölöe
 
ƒk_time_com∑˘_«nos
(
ƒk_time_t
 *
t
);

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk.c

28 
	~<°dio.h
>

29 
	~<ƒk_ö˛udes.h
>

30 
	~<ulib.h
>

31 
	~<ƒk.h
>

32 
	~<ƒk_èsk.h
>

33 
	~<ƒk_idÀ_èsk.h
>

34 
	~<ƒk_defs.h
>

35 
	~<ƒk_˝u.h
>

36 
	~<ƒk_scheduÀr.h
>

37 
	~<ƒk_îr‹.h
>

38 
	~<ƒk_evíts.h
>

39 
	~<ƒk_°ack_check.h
>

40 
	~<ƒk_°©us.h
>

41 
	~<ƒk_w©chdog.h
>

42 
	~<ƒk_ª£rve.h
>

43 
	~<ƒk_cfg.h
>

44 
	~<ƒk_°©s.h
>

46 
ölöe
 
	$ƒk_öt_dißbÀ
() {

47 
	`DISABLE_GLOBAL_INT
();

48 
	}
};

50 
ölöe
 
	$ƒk_öt_íabÀ
() {

51 
	`ENABLE_GLOBAL_INT
();

52 
	}
};

54 
uöt8_t
 
	gƒk_èsk_öô_˙t
 = 0;

57 
	$ƒk_hÆt
()

59 
	`ƒk_öt_dißbÀ
();

61 
	}
}

70 
	$ƒk_öô
()

73 
uöt8_t
 
i
,
j
;

74 
uöt8_t
 *
°k
;

75 *
°kc
;

77 
ƒk_èsk_ty≥
 
IdÀTask
;

78 
ƒk_wakeup_sig«l
 = 
	`ƒk_sig«l_¸óã
();

79 if(
ƒk_wakeup_sig«l
==
NRK_ERROR
Ë
	`ƒk_kî√l_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
,0);

81 if(
	`_ƒk_°¨tup_ok
()==0Ë
	`ƒk_kî√l_îr‹_add
(
NRK_BAD_STARTUP
,0);

82 #ifde‡
NRK_STARTUP_VOLTAGE_CHECK


83 if(
	`ƒk_vﬁège_°©us
()==0Ë
	`ƒk_kî√l_îr‹_add
(
NRK_LOW_VOLTAGE
,0);

86 #ifde‡
NRK_REBOOT_ON_ERROR


87 #i‚de‡
NRK_WATCHDOG


90 
	`ƒk_k¥ötf
–
	`PSTR
("KERNEL CONFIG CONFLICT: NRK_REBOOT_ON_ERRORÇeeds watchdog!\r\n") );

91 
i
 = 0; i < 100; i++)

92 
	`ƒk_•ö_waô_us
 (1000);

97 #ifde‡
NRK_WATCHDOG


98 if(
	`ƒk_w©chdog_check
()==
NRK_ERROR
)

100 
	`ƒk_w©chdog_dißbÀ
();

101 
	`ƒk_kî√l_îr‹_add
(
NRK_WATCHDOG_ERROR
,0);

103 
	`ƒk_w©chdog_íabÀ
();

108 
ƒk_cur_èsk_¥io
 = 0;

109 
ƒk_cur_èsk_TCB
 = 
NULL
;

111 
ƒk_high_ªady_TCB
 = 
NULL
;

112 
ƒk_high_ªady_¥io
 = 0;

114 #ifde‡
NRK_STATS_TRACKER


115 
	`ƒk_°©s_ª£t
();

118 #ifde‡
NRK_MAX_RESERVES


120 
	`_ƒk_ª£rve_öô
();

123 
_ƒk_ªsour˚_˙t
=0;

125 
i
=0;i<
NRK_MAX_RESOURCE_CNT
;i++)

127 
ƒk_£m_li°
[
i
].
cou¡
=-1;

128 
ƒk_£m_li°
[
i
].
vÆue
=-1;

129 
ƒk_£m_li°
[
i
].
ªsour˚_˚ûög
=-1;

137 
i
0; i<
NRK_MAX_TASKS
; i++)

139 
ƒk_èsk_TCB
[
i
].
èsk_¥io
 = 
TCB_EMPTY_PRIO
;

140 
ƒk_èsk_TCB
[
i
].
èsk_ID
 = -1;

145 
i
=0;i<
NRK_MAX_TASKS
;i++)

147 
_ƒk_ªadyQ
[
i
].
Next
 = &_nrk_readyQ[i+1];

148 
_ƒk_ªadyQ
[
i
+1].
Pªv
 = &_nrk_readyQ[i];

151 
_ƒk_ªadyQ
[0].
Pªv
 = 
NULL
;

152 
_ƒk_ªadyQ
[
NRK_MAX_TASKS
].
Next
 = 
NULL
;

153 
_hód_node
 = 
NULL
;

154 
_‰ì_node
 = &
_ƒk_ªadyQ
[0];

156 
	`ƒk_èsk_£t_íåy_fun˘i⁄
–&
IdÀTask
, 
ƒk_idÀ_èsk
);

157 
	`ƒk_èsk_£t_°k
–&
IdÀTask
, 
ƒk_idÀ_èsk_°k
, 
NRK_TASK_IDLE_STK_SIZE
);

160 
°kc
 = (*)
ƒk_idÀ_èsk_°k
[0];

161 *
°kc
=
STK_CANARY_VAL
;

162 
IdÀTask
.
èsk_ID
 = 
NRK_IDLE_TASK_ID
;

163 
IdÀTask
.
¥io
 = 0;

164 
IdÀTask
.
off£t
.
£cs
 = 0;

165 
IdÀTask
.
off£t
.
«no_£cs
 = 0;

166 
IdÀTask
.
Fú°A˘iv©i⁄
 = 
TRUE
;

167 
IdÀTask
.
Ty≥
 = 
IDLE_TASK
;

168 
IdÀTask
.
SchTy≥
 = 
PREEMPTIVE
;

169 
	`ƒk_a˘iv©e_èsk
(&
IdÀTask
);

170 
	}
}

172 
	$ƒk_°¨t
 ()

174 
öt8_t
 
èsk_ID
;

175 
uöt8_t
 
i
,
j
;

176 
TBS_≥r˚¡
;

177 
uöt32_t
 
utûiz©i⁄
;

183 
i
=0; i<
NRK_MAX_TASKS
; i++ )

185 
èsk_ID
 = 
ƒk_èsk_TCB
[
i
].task_ID;

187 if(
èsk_ID
!=-1)

189 
j
=0; j<
NRK_MAX_TASKS
; j++ )

191 if(
i
!=
j
 && 
èsk_ID
==
ƒk_èsk_TCB
[j].task_ID)

193 
	`ƒk_kî√l_îr‹_add
(
NRK_DUP_TASK_ID
,
èsk_ID
);

199 
èsk_ID
 = 
	`ƒk_gë_high_ªady_èsk_ID
();

200 
ƒk_high_ªady_¥io
 = 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_¥io
;

201 
ƒk_high_ªady_TCB
 = 
ƒk_cur_èsk_TCB
 = &
ƒk_èsk_TCB
[
èsk_ID
];

202 
ƒk_cur_èsk_¥io
 = 
ƒk_high_ªady_¥io
;

203 
TBS_≥r˚¡
 = 100-
utûiz©i⁄
;

204 
	`¥ötf
("\¿TBS = %d",
TBS_≥r˚¡
);

205 
	`ƒk_°ack_poöãr_ª°‹e
();

207 
	`ƒk_èrgë_°¨t
();

208 
	`ƒk_°ack_poöãr_öô
();

209 
	`ƒk_°¨t_high_ªady_èsk
();

213 
	}
}

215 
öt8_t
 
	$ƒk_TCB_öô
 (
ƒk_èsk_ty≥
 *
Task
, 
NRK_STK
 *
±os
, NRK_STK *
pbos
, 
uöt16_t
 
°k_size
, *
≥xt
, uöt16_à
›t
)

217 
öt8_t
 
èsk_ID
;

220 if(
Task
->
Ty≥
!=
IDLE_TASK
)

221 
Task
->
èsk_ID
=
ƒk_èsk_öô_˙t
;

222 
Task
->
èsk_ID
=
NRK_IDLE_TASK_ID
;

224 
èsk_ID
 = 
Task
->task_ID;

226 if(
ƒk_èsk_öô_˙t
>=
NRK_MAX_TASKS
Ë
	`ƒk_kî√l_îr‹_add
(
NRK_EXTRA_TASK
,0);

227 if(
Task
->
Ty≥
!=
IDLE_TASK
Ë
ƒk_èsk_öô_˙t
++;

228 if(
ƒk_èsk_öô_˙t
==
NRK_IDLE_TASK_ID
)Çrk_task_init_cnt++;

230 
ƒk_èsk_TCB
[
èsk_ID
].
OSTaskStkPå
 = 
±os
;

231 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_¥io
 = 
Task
->
¥io
;

232 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
 = 
SUSPENDED
;

234 
ƒk_èsk_TCB
[
èsk_ID
].task_ID =Åask_ID;

235 
ƒk_èsk_TCB
[
èsk_ID
].
su•íd_Êag
 = 0;

236 
ƒk_èsk_TCB
[
èsk_ID
].
≥riod

	`_ƒk_time_to_ticks
–
Task
->period );

237 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup

	`_ƒk_time_to_ticks
–
Task
->
off£t
);

238 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
ƒk_èsk_TCB[èsk_ID].
≥riod
+ƒk_èsk_TCB[èsk_ID].
√xt_wakeup
;

239 
ƒk_èsk_TCB
[
èsk_ID
].
˝u_ª£rve

	`_ƒk_time_to_ticks
(
Task
->cpu_reserve);

240 
ƒk_èsk_TCB
[
èsk_ID
].
˝u_ªmaöög
 =Çrk_èsk_TCB[èsk_ID].
˝u_ª£rve
;

241 
ƒk_èsk_TCB
[
èsk_ID
].
num_≥riods
 = 1;

242 
ƒk_èsk_TCB
[
èsk_ID
].
OSTCBStkBŸtom
 = 
pbos
;

243 
ƒk_èsk_TCB
[
èsk_ID
].
ty≥
 = 
Task
->
Ty≥
;

244 
ƒk_èsk_TCB
[
èsk_ID
].
î∫o

NRK_OK
;

246  
NRK_OK
;

247 
	}
}

255 
	$_ƒk_timî_tick
()

260 
	`_ƒk_scheduÀr
();

263 
	}
}

265 
uöt16_t
 
	$ƒk_vîsi⁄
 ()

267  (
NRK_VERSION
);

268 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_driver.c

27 
	~<ƒk_cfg.h
>

29 #ifde‡ 
NRK_MAX_DRIVER_CNT


31 
	~<ƒk.h
>

32 
	~<ƒk_evíts.h
>

33 
	~<ƒk_èsk.h
>

34 
	~<ƒk_îr‹.h
>

35 
	~<ƒk_scheduÀr.h
>

36 
	~<ö˛ude.h
>

37 
	~<ulib.h
>

38 
	~<ƒk_timî.h
>

39 
	~<ƒk_time.h
>

40 
	~<ƒk_˝u.h
>

41 
	~<ƒk_drivî.h
>

42 
	~<ƒk_drivî_li°.h
>

45 
NRKDrivî
 
	gƒk_drivîs
[
NRK_MAX_DRIVER_CNT
];

46 
uöt8_t
 
	gƒk_drivî_öô
[
NRK_MAX_DRIVER_CNT
];

48 
öt8_t
 
	g_ƒk_drivî_cou¡
;

59 
öt8_t
 
	$ƒk_ªgi°î_drivî
(*
devi˚m™agî
,
uöt8_t
 
dev_ödex
)

61 if(
_ƒk_drivî_cou¡
<
NRK_MAX_DRIVER_CNT
)

63 
ƒk_drivîs
[
_ƒk_drivî_cou¡
].
dev_id
=
dev_ödex
;

64 
ƒk_drivîs
[
_ƒk_drivî_cou¡
].
devi˚m™agî
=(*)devicemanager;

65 
_ƒk_drivî_cou¡
++;

66  
NRK_OK
;

69  
NRK_ERROR
;

70 
	}
}

73 
öt8_t
 
	$ƒk_›í
(
uöt8_t
 
dev_ödex
,uöt8_à
›t
)

75 
uöt8_t
 
˙t
;

78 
˙t
=0;˙t<
_ƒk_drivî_cou¡
;cnt++)

80 if(
ƒk_drivîs
[
˙t
].
dev_id
==
dev_ödex
)

82 if(
ƒk_drivî_öô
[
˙t
]==
WAS_NOT_OPEN
)

85 
ƒk_drivî_öô
[
˙t
]=
WAS_OPEN
;

86 
ƒk_drivîs
[
˙t
].
	`devi˚m™agî
(
INIT
,
›t
,
NULL
,0);

88 
ƒk_drivîs
[
˙t
].
	`devi˚m™agî
(
OPEN
,
›t
,
NULL
,0);

89  
˙t
;

93  
NRK_ERROR
;

94 
	}
}

96 
öt8_t
 
	$ƒk_˛o£
(
uöt8_t
 
dev_fd
)

98 
uöt8_t
 
îr‹
;

100 if(
dev_fd
>
_ƒk_drivî_cou¡
)

102 
	`_ƒk_î∫o_£t
(1);

103  
NRK_ERROR
;

106 
îr‹
=
ƒk_drivîs
[
dev_fd
].
	`devi˚m™agî
(
CLOSE
,0,
NULL
,0);

112  
îr‹
;

113 
	}
}

116 
öt8_t
 
	$ƒk_wrôe
(
uöt8_t
 
dev_fd
,uöt8_à*
buf„r
, uöt8_à
size
)

118 if(
dev_fd
>
_ƒk_drivî_cou¡
)

120 
	`_ƒk_î∫o_£t
(1);

121  
NRK_ERROR
;

124  
ƒk_drivîs
[
dev_fd
].
	`devi˚m™agî
(
WRITE
,0,
buf„r
,
size
);

126 
	}
}

128 
öt8_t
 
	$ƒk_ªad
(
uöt8_t
 
dev_fd
,uöt8_à*
buf„r
,uöt8_à
size
)

130 if(
dev_fd
>
_ƒk_drivî_cou¡
)

132 
	`_ƒk_î∫o_£t
(1);

133  
NRK_ERROR
;

136  
ƒk_drivîs
[
dev_fd
].
	`devi˚m™agî
(
READ
,0,
buf„r
,
size
);

138 
	}
}

140 
öt8_t
 
	$ƒk_£t_°©us
(
uöt8_t
 
dev_fd
,uöt8_à
key
,uöt8_à
vÆue
)

142 if(
dev_fd
<0 || dev_fd>
_ƒk_drivî_cou¡
)

144 
	`_ƒk_î∫o_£t
(1);

145  
NRK_ERROR
;

147  
ƒk_drivîs
[
dev_fd
].
	`devi˚m™agî
(
SET_STATUS
,
key
,
NULL
,
vÆue
);

148 
	}
}

150 
öt8_t
 
	$ƒk_gë_°©us
(
uöt8_t
 
dev_fd
,uöt8_à
key
)

152 if(
dev_fd
>
_ƒk_drivî_cou¡
)

154 
	`_ƒk_î∫o_£t
(1);

155  
NRK_ERROR
;

158  
ƒk_drivîs
[
dev_fd
].
	`devi˚m™agî
(
GET_STATUS
,
key
,
NULL
,0);

159 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_error.c

28 
	~<ƒk_îr‹.h
>

29 
	~<°dio.h
>

30 
	~<ƒk.h
>

31 
	~<ƒk_èsk.h
>

32 
	~<ƒk_cfg.h
>

33 
	~<ƒk_timî.h
>

35 
	$_ƒk_î∫o_£t
 (
NRK_ERRNO
 
îr‹_code
)

37 
ƒk_cur_èsk_TCB
->
î∫o
 = 
îr‹_code
;

38 
	}
}

40 
uöt8_t
 
	$ƒk_î∫o_gë
 ()

42  
ƒk_cur_èsk_TCB
->
î∫o
;

43 
	}
}

45 
	$ƒk_îr‹_add
 (
uöt8_t
 
n
)

47 
îr‹_num
 = 
n
;

48 
îr‹_èsk
 = 
ƒk_cur_èsk_TCB
->
èsk_ID
;

50 #ifde‡
NRK_REPORT_ERRORS


51 
	`ƒk_îr‹_¥öt
 ();

54 
	}
}

56 
	$ƒk_kî√l_îr‹_add
 (
uöt8_t
 
n
, uöt8_à
èsk
)

58 
îr‹_num
 = 
n
;

59 
îr‹_èsk
 = 
èsk
;

61 #ifde‡
NRK_REPORT_ERRORS


62 
	`ƒk_îr‹_¥öt
 ();

65 
	}
}

68 
uöt8_t
 
	$ƒk_îr‹_gë
 (
uöt8_t
 * 
èsk_id
, uöt8_à* 
code
)

70 i‡(
îr‹_num
 == 0)

72 *
code
 = 
îr‹_num
;

73 *
èsk_id
 = 
îr‹_èsk
;

75 
	}
}

77 
öt8_t
 
	$ƒk_îr‹_¥öt
 ()

79 
öt8_t
 
t
;

80 i‡(
îr‹_num
 == 0)

84 #ifde‡
NRK_HALT_ON_ERROR


85 
	`ƒk_öt_dißbÀ
 ();

86 #ifde‡
NRK_WATCHDOG


87 
	`ƒk_w©chdog_dißbÀ
();

91 #i‚de‡
NRK_REBOOT_ON_ERROR


92 
	`ƒk_öt_dißbÀ
 ();

96 #ifde‡
NRK_HALT_AND_LOOP_ON_ERROR


97 
	`ƒk_öt_dißbÀ
 ();

98 #ifde‡
NRK_WATCHDOG


99 
	`ƒk_w©chdog_dißbÀ
();

107 
	`ƒk_k¥ötf
 (
	`PSTR
 ("*NRK ERROR("));

108 #ifde‡
PRINTF


109 
	`¥ötf
 ("%d", 
îr‹_èsk
);

111 
	`ƒk_k¥ötf
 (
	`PSTR
 ("): "));

112 i‡(
îr‹_num
 > 
NRK_NUM_ERRORS
)

113 
îr‹_num
 = 
NRK_UNKOWN
;

114 
îr‹_num
)

116 
NRK_STACK_TOO_SMALL
:

117 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Stack wasÇot definedásÜargeÉnough!"));

119 
NRK_STACK_OVERFLOW
:

121 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Task Stack Overflow"));

123 
NRK_INVALID_STACK_POINTER
:

124 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Invalid Stack Pointer"));

126 
NRK_RESERVE_ERROR
:

128 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Reserve Error in Scheduler"));

130 
NRK_RESERVE_VIOLATED
:

131 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Task Reserve Violated"));

133 
NRK_WAKEUP_MISSED
:

134 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Scheduler Missed Wakeup"));

136 
NRK_DUP_TASK_ID
:

137 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Duplicated Task ID"));

139 
NRK_BAD_STARTUP
:

140 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Unexpected Restart"));

142 
NRK_STACK_SMASH
:

144 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Idle or Kernel Stack Overflow"));

146 
NRK_EXTRA_TASK
:

147 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Extra Task started, isÇrk_cfg.h ok?"));

149 
NRK_LOW_VOLTAGE
:

150 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Low Voltage"));

152 
NRK_SEG_FAULT
:

153 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Unhandled Interrupt Vector"));

155 
NRK_TIMER_OVERFLOW
:

157 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Timer Overflow"));

159 
NRK_WATCHDOG_ERROR
:

160 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Watchdog Restart"));

162 
NRK_DEVICE_DRIVER
:

163 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Device Driver Error"));

165 
NRK_UNIMPLEMENTED
:

166 
	`ƒk_k¥ötf
 (
	`PSTR
 ("Kernel functionÇot implemented"));

168 
NRK_SIGNAL_CREATE_ERROR
:

169 
	`ƒk_k¥ötf
 (
	`PSTR
 ("FailedÅo create Signal"));

171 
NRK_SEMAPHORE_CREATE_ERROR
:

172 
	`ƒk_k¥ötf
 (
	`PSTR
 ("FailedÅo create Semaphore"));

175 
	`ƒk_k¥ötf
 (
	`PSTR
 ("UNKOWN"));

177 
	`putch¨
 ('\r');

178 
	`putch¨
 ('\n');

180 #ifde‡
NRK_REBOOT_ON_ERROR


182 if(
îr‹_num
!=
NRK_WATCHDOG_ERROR
)

184 
	`ƒk_w©chdog_íabÀ
();

185 
	`ƒk_öt_dißbÀ
();

191 #ifde‡
NRK_HALT_AND_LOOP_ON_ERROR


192 
	`ƒk_Àd_£t
 (2);

193 
	`ƒk_Àd_˛r
 (3);

194 
t
 = 0;Å < 100;Å++)

195 
	`ƒk_•ö_waô_us
 (1000);

196 
	`ƒk_Àd_£t
 (3);

197 
	`ƒk_Àd_˛r
 (2);

198 
t
 = 0;Å < 100;Å++)

199 
	`ƒk_•ö_waô_us
 (1000);

204 #ifde‡
NRK_HALT_ON_ERROR


207 
	`ƒk_Àd_£t
 (2);

208 
	`ƒk_Àd_˛r
 (3);

209 
t
 = 0;Å < 100;Å++)

210 
	`ƒk_•ö_waô_us
 (1000);

211 
	`ƒk_Àd_£t
 (3);

212 
	`ƒk_Àd_˛r
 (2);

213 
t
 = 0;Å < 100;Å++)

214 
	`ƒk_•ö_waô_us
 (1000);

218 
îr‹_num
 = 0;

219  
t
;

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_events.c

27 
	~<ƒk.h
>

28 
	~<ƒk_evíts.h
>

29 
	~<ƒk_èsk.h
>

30 
	~<ƒk_îr‹.h
>

31 
	~<ƒk_scheduÀr.h
>

32 
	~<ö˛ude.h
>

33 
	~<ulib.h
>

34 
	~<ƒk_timî.h
>

35 
	~<ƒk_time.h
>

36 
	~<ƒk_cfg.h
>

37 
	~<ƒk_˝u.h
>

38 
	~<ƒk_defs.h
>

40 
öt8_t
 
	$ƒk_sig«l_¸óã
()

42 
uöt8_t
 
i
=0;

43 
i
=0;i<32;i++)

45 if–!(
_ƒk_sig«l_li°
 & 
	`SIG
(
i
)))

47 
_ƒk_sig«l_li°
|=
	`SIG
(
i
);

48  
i
;

51  
NRK_ERROR
;

54 
	}
}

56 
uöt32_t
 
	$ƒk_sig«l_gë_ªgi°îed_mask
()

58  
ƒk_cur_èsk_TCB
->
ªgi°îed_sig«l_mask
;

59 
	}
}

62 
öt8_t
 
	$ƒk_sig«l_dñëe
(
ƒk_sig_t
 
sig_id
)

64 
uöt8_t
 
èsk_ID
;

65 
uöt32_t
 
sig_mask
;

67 
sig_mask
=
	`SIG
(
sig_id
);

69 if–(
sig_mask
 & 
_ƒk_sig«l_li°
)==0Ë 
NRK_ERROR
;

71 
	`ƒk_öt_dißbÀ
();

72 
èsk_ID
=0;Åask_ID < 
NRK_MAX_TASKS
;Åask_ID++){

73 if(
ƒk_èsk_TCB
[
èsk_ID
].task_ID==-1) ;

77 if(
ƒk_èsk_TCB
[
èsk_ID
].
ªgi°îed_sig«l_mask
==
sig_mask
)

80 
ƒk_èsk_TCB
[
èsk_ID
].
a˘ive_sig«l_mask
=0;

81 
ƒk_èsk_TCB
[
èsk_ID
].
evít_su•íd
=0;

82 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
=
SUSPENDED
;

84 
ƒk_èsk_TCB
[
èsk_ID
].
ªgi°îed_sig«l_mask
&=~
sig_mask
;

85 
ƒk_èsk_TCB
[
èsk_ID
].
a˘ive_sig«l_mask
&=~
sig_mask
;

89 
_ƒk_sig«l_li°
&=~
	`SIG
(
sig_id
);

90 
	`ƒk_öt_íabÀ
();

92  
NRK_OK
;

93 
	}
}

96 
öt8_t
 
	$ƒk_sig«l_uƒegi°î
(
öt8_t
 
sig_id
)

98 
uöt32_t
 
sig_mask
;

100 
sig_mask
=
	`SIG
(
sig_id
);

102 if(
ƒk_cur_èsk_TCB
->
ªgi°îed_sig«l_mask
 & 
sig_mask
)

104 
ƒk_cur_èsk_TCB
->
ªgi°îed_sig«l_mask
&=~(
sig_mask
);

105 
ƒk_cur_èsk_TCB
->
a˘ive_sig«l_mask
&=~(
sig_mask
);

108  
NRK_ERROR
;

109  
NRK_OK
;

110 
	}
}

112 
öt8_t
 
	$ƒk_sig«l_ªgi°î
(
öt8_t
 
sig_id
)

116 if(
	`SIG
(
sig_id
Ë& 
_ƒk_sig«l_li°
 )

118 
ƒk_cur_èsk_TCB
->
ªgi°îed_sig«l_mask
|=
	`SIG
(
sig_id
);

119  
NRK_OK
;

122  
NRK_ERROR
;

123 
	}
}

125 
öt8_t
 
	$ƒk_evít_sig«l
(
öt8_t
 
sig_id
)

128 
uöt8_t
 
èsk_ID
;

129 
uöt8_t
 
evít_occuªd
=0;

130 
uöt32_t
 
sig_mask
;

132 
sig_mask
=
	`SIG
(
sig_id
);

135 if((
sig_mask
 & 
_ƒk_sig«l_li°
)==0 ) { 
	`_ƒk_î∫o_£t
(1);  
NRK_ERROR
;}

138 
	`ƒk_öt_dißbÀ
();

139 
èsk_ID
=0;Åask_ID < 
NRK_MAX_TASKS
;Åask_ID++){

145 if(
ƒk_èsk_TCB
[
èsk_ID
].
evít_su•íd
==
SIG_EVENT_SUSPENDED
)

146 if((
ƒk_èsk_TCB
[
èsk_ID
].
a˘ive_sig«l_mask
 & 
sig_mask
))

148 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
=
SUSPENDED
;

149 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
=0;

150 
ƒk_èsk_TCB
[
èsk_ID
].
evít_su•íd
=0;

153 
ƒk_èsk_TCB
[
èsk_ID
].
a˘ive_sig«l_mask
=
sig_mask
;

154 
evít_occuªd
=1;

157 if(
ƒk_èsk_TCB
[
èsk_ID
].
evít_su•íd
==
RSRC_EVENT_SUSPENDED
)

158 if((
ƒk_èsk_TCB
[
èsk_ID
].
a˘ive_sig«l_mask
 =
sig_mask
))

160 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
=
SUSPENDED
;

161 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
=0;

162 
ƒk_èsk_TCB
[
èsk_ID
].
evít_su•íd
=0;

165 
ƒk_èsk_TCB
[
èsk_ID
].
a˘ive_sig«l_mask
=0;

166 
evít_occuªd
=1;

171 
	`ƒk_öt_íabÀ
();

172 if(
evít_occuªd
)

174  
NRK_OK
;

177 
	`_ƒk_î∫o_£t
(2);

178  
NRK_ERROR
;

179 
	}
}

182 
uöt32_t
 
	$ƒk_evít_waô
(
uöt32_t
 
evít_mask
)

186 if(
evít_mask
 & 
ƒk_cur_èsk_TCB
->
ªgi°îed_sig«l_mask
)

188 
ƒk_cur_èsk_TCB
->
a˘ive_sig«l_mask
=
evít_mask
;

189 
ƒk_cur_èsk_TCB
->
evít_su•íd
=
SIG_EVENT_SUSPENDED
;

196 if(
evít_mask
 & 
	`SIG
(
ƒk_wakeup_sig«l
))

197 
	`ƒk_waô_u¡û_nw
();

199 
	`ƒk_waô_u¡û_ticks
(0);

201  ( (
ƒk_cur_èsk_TCB
->
a˘ive_sig«l_mask
));

202 
	}
}

204 
öt8_t
 
	$ƒk_£m_quîy
(
ƒk_£m_t
 *
r§c
 )

206 
öt8_t
 
id
;

207 
id
=
	`ƒk_gë_ªsour˚_ödex
(
r§c
);

208 if(
id
==-1Ë{ 
	`_ƒk_î∫o_£t
(1);  
NRK_ERROR
;}

209 if(
id
==
NRK_MAX_RESOURCE_CNT
Ë{ 
	`_ƒk_î∫o_£t
(2);  
NRK_ERROR
; }

211 (
ƒk_£m_li°
[
id
].
vÆue
);

212 
	}
}

216 
öt8_t
 
	$ƒk_£m_≥nd
(
ƒk_£m_t
 *
r§c
 )

218 
öt8_t
 
id
;

219 
id
=
	`ƒk_gë_ªsour˚_ödex
(
r§c
);

220 if(
id
==-1Ë{ 
	`_ƒk_î∫o_£t
(1);  
NRK_ERROR
;}

221 if(
id
==
NRK_MAX_RESOURCE_CNT
Ë{ 
	`_ƒk_î∫o_£t
(2);  
NRK_ERROR
; }

223 
	`ƒk_öt_dißbÀ
();

224 if(
ƒk_£m_li°
[
id
].
vÆue
==0)

226 
ƒk_cur_èsk_TCB
->
evít_su•íd
|=
RSRC_EVENT_SUSPENDED
;

227 
ƒk_cur_èsk_TCB
->
a˘ive_sig«l_mask
=
id
;

229 
	`ƒk_öt_íabÀ
();

230 
	`ƒk_waô_u¡û_ticks
(0);

233 
ƒk_£m_li°
[
id
].
vÆue
--;

234 
ƒk_cur_èsk_TCB
->
èsk_¥io_˚û
=
ƒk_£m_li°
[
id
].
ªsour˚_˚ûög
;

235 
ƒk_cur_èsk_TCB
->
ñev©ed_¥io_Êag
=1;

236 
	`ƒk_öt_íabÀ
();

238  
NRK_OK
;

239 
	}
}

243 
öt8_t
 
	$ƒk_£m_po°
(
ƒk_£m_t
 *
r§c
)

245 
öt8_t
 
id
=
	`ƒk_gë_ªsour˚_ödex
(
r§c
);

246 
öt8_t
 
èsk_ID
;

247 if(
id
==-1Ë{ 
	`_ƒk_î∫o_£t
(1);  
NRK_ERROR
;}

248 if(
id
==
NRK_MAX_RESOURCE_CNT
Ë{ 
	`_ƒk_î∫o_£t
(2);  
NRK_ERROR
; }

250 if(
ƒk_£m_li°
[
id
].
vÆue
<ƒk_£m_li°[id].
cou¡
)

253 
	`ƒk_öt_dißbÀ
();

255 
ƒk_£m_li°
[
id
].
vÆue
++;

256 
ƒk_cur_èsk_TCB
->
ñev©ed_¥io_Êag
=0;

258 
èsk_ID
=0;Åask_ID < 
NRK_MAX_TASKS
;Åask_ID++){

259 if(
ƒk_èsk_TCB
[
èsk_ID
].
evít_su•íd
==
RSRC_EVENT_SUSPENDED
)

260 if((
ƒk_èsk_TCB
[
èsk_ID
].
a˘ive_sig«l_mask
 =
id
))

262 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
=
SUSPENDED
;

263 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
=0;

264 
ƒk_èsk_TCB
[
èsk_ID
].
evít_su•íd
=0;

265 
ƒk_èsk_TCB
[
èsk_ID
].
a˘ive_sig«l_mask
=0;

269 
	`ƒk_öt_íabÀ
();

272  
NRK_OK
;

273 
	}
}

275 
öt8_t
 
	$ƒk_£m_dñëe
(
ƒk_£m_t
 *
r§c
)

277 
öt8_t
 
id
=
	`ƒk_gë_ªsour˚_ödex
(
r§c
);

278 
öt8_t
 
èsk_ID
;

279 if(
id
==-1Ë{ 
	`_ƒk_î∫o_£t
(1);  
NRK_ERROR
;}

280 if(
id
==
NRK_MAX_RESOURCE_CNT
Ë{ 
	`_ƒk_î∫o_£t
(2);  
NRK_ERROR
; }

282 
ƒk_£m_li°
[
id
].
cou¡
=-1;

283 
ƒk_£m_li°
[
id
].
vÆue
=-1;

284 
ƒk_£m_li°
[
id
].
ªsour˚_˚ûög
=-1;

285 
_ƒk_ªsour˚_˙t
--;

286  
NRK_OK
;

287 
	}
}

289 
ƒk_£m_t
* 
	$ƒk_£m_¸óã
(
uöt8_t
 
cou¡
,uöt8_à
˚ûög_¥io
)

291 
uöt8_t
 
i
;

292 if(
_ƒk_ªsour˚_˙t
>=(
NRK_MAX_RESOURCE_CNT
-1))

293  
NULL
;

294 
i
=0; i<
NRK_MAX_RESOURCE_CNT
; i++ )

296 if(
ƒk_£m_li°
[
i
].
cou¡
==-1) ;

299 
ƒk_£m_li°
[
i
].
vÆue
=
cou¡
;

300 
ƒk_£m_li°
[
i
].
cou¡
=count;

301 
ƒk_£m_li°
[
i
].
ªsour˚_˚ûög
=
˚ûög_¥io
;

302 
_ƒk_ªsour˚_˙t
++;

303  &
ƒk_£m_li°
[
i
];

304 
	}
}

306 
öt8_t
 
	$ƒk_gë_ªsour˚_ödex
(
ƒk_£m_t
 *
ª§c
)

308 
öt8_t
 
id
;

309 
id
=0;id<
NRK_MAX_RESOURCE_CNT
;id++)

310 if((
ƒk_£m_t
 *)(&
ƒk_£m_li°
[
id
])==“rk_£m_t*)
ª§c
)

311  
id
;

312  
NRK_ERROR
;

313 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_idle_task.c

26 
	~<ƒk.h
>

27 
	~<ƒk_idÀ_èsk.h
>

28 
	~<ƒk_˝u.h
>

29 
	~<ƒk_cfg.h
>

30 
	~<ƒk_°ack_check.h
>

31 
	~<ƒk_îr‹.h
>

32 
	~<ƒk_timî.h
>

33 
	~<ƒk_∂©f‹m_time.h
>

34 
	~<ƒk_scheduÀr.h
>

35 
	~<°dio.h
>

37 
	$ƒk_idÀ_èsk
()

39 vﬁ©ûê*
°kc
;

42 
	`ƒk_°ack_check
();

44 if(
	`_ƒk_gë_√xt_wakeup
()<=
NRK_SLEEP_WAKEUP_TIME
)

46 
_ƒk_˝u_°©e
=1;

47 
	`ƒk_idÀ
();

50 #i‚de‡
NRK_NO_POWER_DOWN


52 
	`ƒk_•ö_waô_us
(10);

53 
_ƒk_˝u_°©e
=2;

54 
	`ƒk_¶ìp
();

56 
	`ƒk_idÀ
();

60 #ifde‡
NRK_STACK_CHECK


61 if(
ƒk_idÀ_èsk_°k
[0]!=
STK_CANARY_VAL
Ë
	`ƒk_îr‹_add
(
NRK_STACK_SMASH
);

62 #ifde‡
KERNEL_STK_ARRAY


63 if(
ƒk_kî√l_°k
[0]!=
STK_CANARY_VAL
Ë
	`ƒk_îr‹_add
(
NRK_STACK_SMASH
);

65 
°kc
=(*)(
NRK_KERNEL_STK_TOP
-
NRK_KERNEL_STACKSIZE
);

66 if(*
°kc
!=
STK_CANARY_VAL
) {

67 
	`ƒk_îr‹_add
(
NRK_STACK_SMASH
);

72 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_reserve.c

27 
	~<ƒk_cfg.h
>

29 #ifde‡
NRK_MAX_RESERVES


31 
	~<ƒk_time.h
>

32 
	~<ƒk.h
>

33 
	~<ƒk_îr‹.h
>

34 
	~<ƒk_ª£rve.h
>

36 
ƒk_ª£rve
 
	g_ƒk_ª£rve
[
NRK_MAX_RESERVES
];

42 
	$_ƒk_ª£rve_öô
 ()

44 
uöt8_t
 
i
;

46 
i
 = 0; i < 
NRK_MAX_RESERVES
; i++)

47 
_ƒk_ª£rve
[
i
].
a˘ive
 = -1;

48 
	}
}

52 
öt8_t
 
	$ƒk_ª£rve_¸óã
 ()

54 
öt8_t
 
i
;

55 
i
 = 0; i < 
NRK_MAX_RESERVES
; i++) {

56 i‡(
_ƒk_ª£rve
[
i
].
a˘ive
 == -1) {

58 
_ƒk_ª£rve
[
i
].
a˘ive
 = 1;

59  
i
;

63  
NRK_ERROR
;

64 
	}
}

68 
öt8_t
 
	$ƒk_ª£rve_dñëe
 (
uöt8_t
 
ª£rve_id
)

70 
öt8_t
 
i
;

71 i‡(
ª£rve_id
 >0 &&Ñe£rve_id < 
NRK_MAX_RESERVES
) {

72 i‡(
_ƒk_ª£rve
[
i
].
a˘ive
 == 1) {

73 
_ƒk_ª£rve
[
i
].
a˘ive
 = 0;

74  
NRK_OK
;

77  
NRK_ERROR
;

78 
	}
}

83 
uöt8_t
 
	$ƒk_ª£rve_gë
 (
uöt8_t
 
ª£rve_id
)

86 i‡(
ª£rve_id
 >
NRK_MAX_RESERVES
) {

87 
	`_ƒk_î∫o_£t
 (1);

90 i‡(
_ƒk_ª£rve
[
ª£rve_id
].
a˘ive
 == -1) {

92 
	`_ƒk_î∫o_£t
 (2);

96 
	`_ƒk_ª£rve_upd©e
 (
ª£rve_id
);

98 i‡(
_ƒk_ª£rve
[
ª£rve_id
].
cur_ac˚ss
 >

99 
_ƒk_ª£rve
[
ª£rve_id
].
£t_ac˚ss
)

101  (
_ƒk_ª£rve
[
ª£rve_id
].
£t_ac˚ss
 -

102 
_ƒk_ª£rve
[
ª£rve_id
].
cur_ac˚ss
);

103 
	}
}

105 
	$_ƒk_ª£rve_upd©e
 (
uöt8_t
 
ª£rve_id
)

107 
ƒk_time_t
 
t
;

109 
	`ƒk_öt_dißbÀ
 ();

110 
	`ƒk_time_gë
 (&
t
);

112 
_ƒk_ª£rve
[
ª£rve_id
].
cur_time
 = (
öt32_t
Ë
	`_ƒk_time_to_ticks_l⁄g
 (
t
);

113 i‡(
_ƒk_ª£rve
[
ª£rve_id
].
cur_time
 >_ƒk_ª£rve[ª£rve_id].
£t_time
) {

115 
_ƒk_ª£rve
[
ª£rve_id
].
£t_time
 =

116 
_ƒk_ª£rve
[
ª£rve_id
].
cur_time
 +

117 
_ƒk_ª£rve
[
ª£rve_id
].
≥riod_ticks
;

118 
_ƒk_ª£rve
[
ª£rve_id
].
cur_ac˚ss
 = 0;

120 
	`ƒk_öt_íabÀ
 ();

122 
	}
}

124 
öt8_t
 
	$ƒk_ª£rve_c⁄sume
 (
uöt8_t
 
ª£rve_id
)

127 i‡(
ª£rve_id
 >
NRK_MAX_RESERVES
) {

128 
	`_ƒk_î∫o_£t
 (1);

129  
NRK_ERROR
;

131 i‡(
_ƒk_ª£rve
[
ª£rve_id
].
a˘ive
 == -1) {

132 
	`_ƒk_î∫o_£t
 (2);

133  
NRK_ERROR
;

136 
	`_ƒk_ª£rve_upd©e
 (
ª£rve_id
);

138 i‡((
_ƒk_ª£rve
[
ª£rve_id
].
£t_ac˚ss
 <=

139 
_ƒk_ª£rve
[
ª£rve_id
].
cur_ac˚ss
)) {

141 
	`ƒk_öt_íabÀ
 ();

142 i‡(
_ƒk_ª£rve
[
ª£rve_id
].
îr‹
 !
NULL
)

143 
_ƒk_ª£rve
[
ª£rve_id
].
	`îr‹
 ();

144  
NRK_ERROR
;

148 
_ƒk_ª£rve
[
ª£rve_id
].
cur_ac˚ss
++;

152  
NRK_OK
;

153 
	}
}

155 
öt8_t
 
	$ƒk_ª£rve_£t
 (
uöt8_t
 
id
, 
ƒk_time_t
 * 
≥riod
, 
öt16_t
 
ac˚ss_cou¡
,

156 *
îrh™dÀr
)

158 
ƒk_time_t
 
tmp_time
;

160 i‡(
id
 >
NRK_MAX_RESERVES
)

161  
NRK_ERROR
;

162 i‡(
_ƒk_ª£rve
[
id
].
a˘ive
 == -1)

163  
NRK_ERROR
;

165 
tmp_time
.
£cs
 = 
≥riod
->secs;

166 
tmp_time
.
«no_£cs
 = 
≥riod
->nano_secs;

167 
_ƒk_ª£rve
[
id
].
≥riod_ticks
 = 
	`_ƒk_time_to_ticks_l⁄g
 (
tmp_time
);

168 
_ƒk_ª£rve
[
id
].
£t_ac˚ss
 = 
ac˚ss_cou¡
;

169 
_ƒk_ª£rve
[
id
].
cur_ac˚ss
 = 0;

171 
	`ƒk_time_gë
 (&
tmp_time
);

172 
_ƒk_ª£rve
[
id
].
cur_time
 = (
uöt32_t
Ë
	`_ƒk_time_to_ticks_l⁄g
 (
tmp_time
);

173 
_ƒk_ª£rve
[
id
].
£t_time
 =

174 
_ƒk_ª£rve
[
id
].
cur_time
 + _ƒk_ª£rve[id].
≥riod_ticks
;

175 
_ƒk_ª£rve
[
id
].
îr‹
 = (*Ë
îrh™dÀr
;

177  
NRK_OK
;

178 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_scheduler.c

28 
	~<ƒk.h
>

29 
	~<ƒk_èsk.h
>

30 
	~<ƒk_defs.h
>

31 
	~<ƒk_îr‹.h
>

32 
	~<ƒk_evíts.h
>

33 
	~<ƒk_scheduÀr.h
>

34 
	~<ö˛ude.h
>

35 
	~<ulib.h
>

36 
	~<ƒk_timî.h
>

37 
	~<ƒk_time.h
>

38 
	~<°dlib.h
>

39 
	~<ƒk_cfg.h
>

40 
	~<ƒk_˝u.h
>

41 
	~<ƒk_w©chdog.h
>

42 
	~<ƒk_∂©f‹m_time.h
>

43 
	~<ƒk_°©s.h
>

47 
	#CONTEXT_SWAP_TIME_BOUND
 750

	)

49 
	gTBS_≥r˚¡
 = 0;

52 
	$ƒk_add_to_•‹adQ
 (
öt8_t
 
èsk_ID
)

54 
ƒk_queue
 *
NextNode
;

55 
ƒk_queue
 *
CurNode
;

59 i‡(
_‰ì_node
 =
NULL
) {

63 
NextNode
 = 
•‹ad±r
;

64 
CurNode
 = 
_‰ì_node
;

66 i‡(
•‹ad±r
 !
NULL
) {

68 
NextNode
 !
NULL
) {

69 i‡(
ƒk_èsk_TCB
[
NextNode
->
èsk_ID
].
√xt_≥riod
 >

70 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
)

72 
NextNode
 = NextNode->
Next
;

81 
CurNode
->
èsk_ID
 =Åask_ID;

82 
_‰ì_node
 = _‰ì_node->
Next
;

84 i‡(
NextNode
 =
•‹ad±r
) {

86 i‡(
•‹ad±r
 !
NULL
) {

87 
CurNode
->
Next
 = 
•‹ad±r
;

88 
CurNode
->
Pªv
 = 
NULL
;

89 
•‹ad±r
->
Pªv
 = 
CurNode
;

92 
CurNode
->
Next
 = 
NULL
;

93 
CurNode
->
Pªv
 = 
NULL
;

94 
_‰ì_node
->
Pªv
 = 
CurNode
;

96 
•‹ad±r
 = 
CurNode
;

100 i‡(
NextNode
 !
_‰ì_node
) {

103 
CurNode
->
Pªv
 = 
NextNode
->Prev;

104 
CurNode
->
Next
 = 
NextNode
;

105 (
NextNode
->
Pªv
)->
Next
 = 
CurNode
;

106 
NextNode
->
Pªv
 = 
CurNode
;

109 
	}
}

111 
	$ƒk_ªm_‰om_•‹adQ
 (
öt8_t
 
èsk_ID
)

114 
ƒk_queue
 *
CurNode
;

116 i‡(
•‹ad±r
 =
NULL
)

119 
CurNode
 = 
•‹ad±r
;

121 i‡(
•‹ad±r
->
èsk_ID
 ==Åask_ID) {

123 
•‹ad±r
 = sp‹ad±r->
Next
;

124 
•‹ad±r
->
Pªv
 = 
NULL
;

127 (
CurNode
 !
NULL
Ë&& (CurNode->
èsk_ID
 !=Åask_ID))

128 
CurNode
 = CurNode->
Next
;

129 i‡(
CurNode
 =
NULL
)

133 (
CurNode
->
Pªv
)->
Next
 = CurNode->Next;

134 i‡(
CurNode
->
Next
 !
NULL
)

135 (
CurNode
->
Next
)->
Pªv
 = CurNode->Prev;

140 i‡(
_‰ì_node
 =
NULL
) {

141 
_‰ì_node
 = 
CurNode
;

142 
_‰ì_node
->
Next
 = 
NULL
;

145 
CurNode
->
Next
 = 
_‰ì_node
;

146 
_‰ì_node
->
Pªv
 = 
CurNode
;

147 
_‰ì_node
 = 
CurNode
;

149 
_‰ì_node
->
Pªv
 = 
NULL
;

150 
	}
}

152 
öt16_t
 
	$max
(
öt16_t
 
a
, i¡16_à
b
){

153 if(
a
<=
b
)

154  
b
;

156  
a
;

157 
	}
}

160 
ölöe
 
	$_ƒk_scheduÀr
()

162 
öt8_t
 
èsk_ID
;

163 
uöt16_t
 
√xt_wake
;

164 
uöt16_t
 
°¨t_time_°amp
;

165 
uöt32_t
 
es
 = 0,
ds
 = 0;

166 
ªady•‹adicÊag
 = 0;

167 
ƒk_queue
* 
ãmp
;

168 
ƒk_time_t
 
t
;

172 #i‚de‡
NRK_NO_BOUNDED_CONTEXT_SWAP


173 
	`_ƒk_high_•ìd_timî_ª£t
();

174 
°¨t_time_°amp
=
	`_ƒk_high_•ìd_timî_gë
();

178 
√xt_wake
=60000;

180 #ifde‡
NRK_WATCHDOG


181 
	`ƒk_w©chdog_ª£t
();

185 #ifde‡
NRK_KERNEL_TEST


186 if(
_ƒk_˝u_°©e
 && 
	`_ƒk_os_timî_gë
()>
ƒk_max_¶ìp_wakeup_time
)

187 
ƒk_max_¶ìp_wakeup_time
=
	`_ƒk_os_timî_gë
();

192 
ƒk_sy°em_time
.
«no_£cs
+=((
uöt32_t
)
_ƒk_¥ev_timî_vÆ
*
NANOS_PER_TICK
);

193 
ƒk_sy°em_time
.
«no_£cs
-=“rk_sy°em_time.«no_£cs%(
uöt32_t
)
NANOS_PER_TICK
);

195 #ifde‡
NRK_STATS_TRACKER


196 if(
ƒk_cur_èsk_TCB
->
èsk_ID
==
NRK_IDLE_TASK_ID
)

198 if(
_ƒk_˝u_°©e
==2Ë
	`_ƒk_°©s_¶ìp
(
_ƒk_¥ev_timî_vÆ
);

199 
	`_ƒk_°©s_èsk_¥ìm±ed
(
ƒk_cur_èsk_TCB
->
èsk_ID
, 
_ƒk_¥ev_timî_vÆ
);

201 
	`_ƒk_°©s_èsk_su•íd
(
ƒk_cur_èsk_TCB
->
èsk_ID
, 0);

205 if(
ƒk_cur_èsk_TCB
->
su•íd_Êag
==1) {

206 
	`_ƒk_°©s_èsk_su•íd
(
ƒk_cur_èsk_TCB
->
èsk_ID
, 
_ƒk_¥ev_timî_vÆ
);

209 
	`_ƒk_°©s_èsk_¥ìm±ed
(
ƒk_cur_èsk_TCB
->
èsk_ID
, 
_ƒk_¥ev_timî_vÆ
);

214 
ƒk_sy°em_time
.
«no_£cs
>=
NANOS_PER_SEC
)

216 
ƒk_sy°em_time
.
«no_£cs
-=
NANOS_PER_SEC
;

217 
ƒk_sy°em_time
.
£cs
++;

218 
ƒk_sy°em_time
.
«no_£cs
-=“rk_sy°em_time.«no_£cs%(
uöt32_t
)
NANOS_PER_TICK
);

223 if(
ƒk_cur_èsk_TCB
->
su•íd_Êag
==1 &&Çrk_cur_èsk_TCB->
èsk_°©e
!=
FINISHED
)

227 if(
ƒk_cur_èsk_TCB
->
evít_su•íd
==
RSRC_EVENT_SUSPENDED
)

228 
ƒk_cur_èsk_TCB
->
èsk_°©e
 = 
EVENT_SUSPENDED
;

229 if–
ƒk_cur_èsk_TCB
->
evít_su•íd
>0 &&Çrk_cur_èsk_TCB->
nw_Êag
==0)

230 
ƒk_cur_èsk_TCB
->
èsk_°©e
 = 
EVENT_SUSPENDED
;

231 if–
ƒk_cur_èsk_TCB
->
evít_su•íd
>0 &&Çrk_cur_èsk_TCB->
nw_Êag
==1)

232 
ƒk_cur_èsk_TCB
->
èsk_°©e
 = 
SUSPENDED
;

235 
ƒk_cur_èsk_TCB
->
èsk_°©e
 = 
SUSPENDED
;

236 
ƒk_cur_èsk_TCB
->
evít_su•íd
=0;

237 
ƒk_cur_èsk_TCB
->
nw_Êag
=0;

239 
	`ƒk_ªm_‰om_ªadyQ
(
ƒk_cur_èsk_TCB
->
èsk_ID
);

247 if(
ƒk_cur_èsk_TCB
->
˝u_ª£rve
!=0 &&Çrk_cur_èsk_TCB->
èsk_ID
!=
NRK_IDLE_TASK_ID
 &&Çrk_cur_èsk_TCB->
èsk_°©e
!=
FINISHED
 )

249 if(
ƒk_cur_èsk_TCB
->
˝u_ªmaöög
<
_ƒk_¥ev_timî_vÆ
)

251 #ifde‡
NRK_STATS_TRACKER


252 
	`_ƒk_°©s_add_viﬁ©i⁄
(
ƒk_cur_èsk_TCB
->
èsk_ID
);

255 
	`ƒk_kî√l_îr‹_add
(
NRK_RESERVE_ERROR
,
ƒk_cur_èsk_TCB
->
èsk_ID
);

256 
ƒk_cur_èsk_TCB
->
˝u_ªmaöög
=0;

258 
ƒk_cur_èsk_TCB
->
˝u_ªmaöög
-=
_ƒk_¥ev_timî_vÆ
;

260 
èsk_ID

ƒk_cur_èsk_TCB
->task_ID;

262 i‡(
ƒk_cur_èsk_TCB
->
˝u_ªmaöög
 ==0 ) {

263 #ifde‡
NRK_STATS_TRACKER


264 
	`_ƒk_°©s_add_viﬁ©i⁄
(
ƒk_cur_èsk_TCB
->
èsk_ID
);

266 
	`ƒk_Àd_toggÀ
(
RED_LED
);

267 
	`ƒk_kî√l_îr‹_add
(
NRK_RESERVE_VIOLATED
,
èsk_ID
);

268 
ƒk_cur_èsk_TCB
->
èsk_°©e
 = 
SUSPENDED
;

269 
	`ƒk_ªm_‰om_ªadyQ
(
èsk_ID
);

277 
èsk_ID
=0;Åask_ID < 
NRK_MAX_TASKS
;Åask_ID++){

278 if(
ƒk_èsk_TCB
[
èsk_ID
].task_ID==-1) ;

279 
ƒk_èsk_TCB
[
èsk_ID
].
su•íd_Êag
=0;

280 if–
ƒk_èsk_TCB
[
èsk_ID
].èsk_ID!=
NRK_IDLE_TASK_ID
 &&Çrk_èsk_TCB[èsk_ID].
èsk_°©e
!=
FINISHED
 )

282 if–
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
 >
_ƒk_¥ev_timî_vÆ
 ) {

283 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
-=
_ƒk_¥ev_timî_vÆ
;

286 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
=0;

292 if–
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
 >
_ƒk_¥ev_timî_vÆ
 ) {

293 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
-=
_ƒk_¥ev_timî_vÆ
;

296 if(
ƒk_èsk_TCB
[
èsk_ID
].
≥riod
>
_ƒk_¥ev_timî_vÆ
)

297 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
ƒk_èsk_TCB[èsk_ID].
≥riod
-
_ƒk_¥ev_timî_vÆ
;

299 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod

_ƒk_¥ev_timî_vÆ
 %Çrk_èsk_TCB[èsk_ID].
≥riod
;

301 if(
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
==0) {

302 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
Úrk_èsk_TCB[èsk_ID].
≥riod
;

305 if(
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
 =
READY
 &&Çrk_èsk_TCB[èsk_ID].
ty≥
 =
TBS_SPORADIC_TASK
)

306 
ªady•‹adicÊag
 = 1;

309 i‡(
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
 =
SUSPENDED
 ) {

312 i‡(
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
 == 0) {

314 if(
ƒk_èsk_TCB
[
èsk_ID
].
evít_su•íd
>0 &&Çrk_èsk_TCB[èsk_ID].
nw_Êag
==1Ëƒk_èsk_TCB[èsk_ID].
a˘ive_sig«l_mask
=
	`SIG
(
ƒk_wakeup_sig«l
);

316 
ƒk_èsk_TCB
[
èsk_ID
].
evít_su•íd
=0;

317 
ƒk_èsk_TCB
[
èsk_ID
].
nw_Êag
=0;

318 
ƒk_èsk_TCB
[
èsk_ID
].
su•íd_Êag
=0;

326  if(
ƒk_èsk_TCB
[
èsk_ID
].
num_≥riods
==1)

328 
ƒk_èsk_TCB
[
èsk_ID
].
˝u_ªmaöög
 =Çrk_èsk_TCB[èsk_ID].
˝u_ª£rve
;

329 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
 = 
READY
;

330 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
 =Çrk_èsk_TCB[èsk_ID].
√xt_≥riod
;

331 
	`ƒk_add_to_ªadyQ
(
èsk_ID
);

334 
ƒk_èsk_TCB
[
èsk_ID
].
˝u_ªmaöög
 =Çrk_èsk_TCB[èsk_ID].
˝u_ª£rve
;

337 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
 = (ƒk_èsk_TCB[èsk_ID].
≥riod
*“rk_èsk_TCB[èsk_ID].
num_≥riods
-1));

338 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
 = (ƒk_èsk_TCB[èsk_ID].
≥riod
*“rk_èsk_TCB[èsk_ID].
num_≥riods
-1));

339 
ƒk_èsk_TCB
[
èsk_ID
].
num_≥riods
=1;

345 if(
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
!=0 &&

346 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
<
√xt_wake
)

349 
√xt_wake
=
ƒk_èsk_TCB
[
èsk_ID
].
√xt_wakeup
;

354 
ãmp
 = 
•‹ad±r
;

355 
ãmp
!=
NULL
 && 
ªady•‹adicÊag
!=1){

356 
èsk_ID
 = 
ãmp
->task_ID;

357 if((
ƒk_èsk_TCB
[
èsk_ID
].
≥riod
+“rk_èsk_TCB[èsk_ID].
¨rivÆ_time
)Ë>(
	`max
(
ds
,“rk_èsk_TCB[èsk_ID].¨rivÆ_time)Ë+ (ƒk_èsk_TCB[èsk_ID].
˝u_ª£rve
 * 100)/
TBS_≥r˚¡
)){

358 
es
 = 
ƒk_èsk_TCB
[
èsk_ID
].
˝u_ª£rve
;

359 
ds
 = 
	`max
(ds,(
ƒk_èsk_TCB
[
èsk_ID
].
¨rivÆ_time
)Ë+ (
es
 *100)/
TBS_≥r˚¡
;

360 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
 = 
READY
;

361 
ƒk_èsk_TCB
[
èsk_ID
].
˝u_ªmaöög
 =Çrk_èsk_TCB[èsk_ID].
˝u_ª£rve
;

362 
	`ƒk_ªm_‰om_•‹adQ
(
èsk_ID
);

363 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
 = 
ds
-
	`_ƒk_time_to_ticks
(
ƒk_sy°em_time
);

364 
	`ƒk_add_to_ªadyQ
(
èsk_ID
);

368 
	`ƒk_Àd_toggÀ
(
BLUE_LED
);

369 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_°©e
 = 
FINISHED
;

370 
	`ƒk_ªm_‰om_•‹adQ
(
èsk_ID
);

372 
ãmp
 =Åemp->
Next
;

375 #ifde‡
NRK_STATS_TRACKER


376 
	`_ƒk_°©s_èsk_°¨t
(
ƒk_cur_èsk_TCB
->
èsk_ID
);

378 
èsk_ID
 = 
	`ƒk_gë_high_ªady_èsk_ID
();

379 
ƒk_high_ªady_¥io
 = 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_¥io
;

380 
ƒk_high_ªady_TCB
 = &
ƒk_èsk_TCB
[
èsk_ID
];

388 if(
èsk_ID
!=
NRK_IDLE_TASK_ID
)

391 if(
ƒk_èsk_TCB
[
èsk_ID
].
˝u_ª£rve
!=0 &&Çrk_èsk_TCB[èsk_ID].
˝u_ªmaöög
<
MAX_SCHED_WAKEUP_TIME
)

393 if(
√xt_wake
>
ƒk_èsk_TCB
[
èsk_ID
].
˝u_ªmaöög
)

394 
√xt_wake
=
ƒk_èsk_TCB
[
èsk_ID
].
˝u_ªmaöög
;

398 if(
√xt_wake
>
MAX_SCHED_WAKEUP_TIME
) {

399 
√xt_wake
=
MAX_SCHED_WAKEUP_TIME
;

410 if(
√xt_wake
>
NRK_SLEEP_WAKEUP_TIME
)

412 if(
√xt_wake
-
NRK_SLEEP_WAKEUP_TIME
<
MAX_SCHED_WAKEUP_TIME
)

414 if(
√xt_wake
-
NRK_SLEEP_WAKEUP_TIME
<NRK_SLEEP_WAKEUP_TIME){

415 
√xt_wake
=
NRK_SLEEP_WAKEUP_TIME
-1;

418 
√xt_wake
Úext_wake-
NRK_SLEEP_WAKEUP_TIME
;

420 } if(
√xt_wake
>
NRK_SLEEP_WAKEUP_TIME
+
MAX_SCHED_WAKEUP_TIME
){

421 
√xt_wake
=
MAX_SCHED_WAKEUP_TIME
;

423 
√xt_wake
=
MAX_SCHED_WAKEUP_TIME
-
NRK_SLEEP_WAKEUP_TIME
;

445 
ƒk_cur_èsk_¥io
 = 
ƒk_high_ªady_¥io
;

446 
ƒk_cur_èsk_TCB
 = 
ƒk_high_ªady_TCB
;

448 #ifde‡
NRK_KERNEL_TEST


449 if(
ƒk_high_ªady_TCB
==
NULL
)

451 
	`ƒk_k¥ötf
–
	`PSTR
( "KERNEL TEST: BAD TCB!\r\n" ));

454 
_ƒk_¥ev_timî_vÆ
=
√xt_wake
;

456 if(
	`_ƒk_os_timî_gë
()>=
√xt_wake
)

462 #ifde‡
NRK_KERNEL_TEST


464 if(!(
èsk_ID
==
NRK_IDLE_TASK_ID
 && 
_ƒk_˝u_°©e
==2))

465 
	`ƒk_kî√l_îr‹_add
(
NRK_WAKEUP_MISSED
,
èsk_ID
);

470 
√xt_wake
=
	`_ƒk_os_timî_gë
()+2;

471 
_ƒk_¥ev_timî_vÆ
=
√xt_wake
;

474 if(
èsk_ID
!=
NRK_IDLE_TASK_ID
) {

475 
_ƒk_˝u_°©e
=0;

478 
	`_ƒk_£t_√xt_wakeup
(
√xt_wake
);

480 #i‚de‡
NRK_NO_BOUNDED_CONTEXT_SWAP


482 
	`ƒk_high_•ìd_timî_waô
(
°¨t_time_°amp
,
CONTEXT_SWAP_TIME_BOUND
);

484 
	`ƒk_°ack_poöãr_ª°‹e
();

487 
	`ƒk_°¨t_high_ªady_èsk
();

488 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_stack_check.c

27 
	~<ƒk.h
>

28 
	~<ƒk_îr‹.h
>

29 
	~<ƒk_°ack_check.h
>

30 
	~<°dio.h
>

32 
	$dump_°ack_öfo
()

34 *
°k
;

35 *
°kc
;

36 
uöt8_t
 
i
;

38 
	`ƒk_k¥ötf
–
	`PSTR
("\r\nSTACK DUMP\r\n"));

40 #ifde‡
PRINTF


41 
	`¥ötf
–"cur: %d ",
ƒk_cur_èsk_TCB
->
èsk_ID
);

42 
°k
(*)
ƒk_cur_èsk_TCB
->
OSTCBStkBŸtom
;

43 
°kc
 = (*)
°k
;

44 
	`¥ötf
–"bŸtom = %x ",(
uöt16_t
)
°kc
 );

45 
	`¥ötf
–"ˇ«ry = %x ",*
°kc
 );

46 
°k
(*)
ƒk_cur_èsk_TCB
->
OSTaskStkPå
;

47 
°kc
 = (*)
°k
;

48 
	`¥ötf
–"°k = %x ",(
uöt16_t
)
°kc
 );

49 
	`¥ötf
–"tcbádd∏%x\r\n",(
uöt16_t
)
ƒk_cur_èsk_TCB
);

51 
i
=0; i<
NRK_MAX_TASKS
; i++ )

53 
°k
(*)
ƒk_èsk_TCB
[
i
].
OSTCBStkBŸtom
;

54 
°kc
 = (*)
°k
;

55 
	`¥ötf
–"%d: bŸtom = %x ",
i
,(
uöt16_t
)
°kc
 );

56 
	`¥ötf
–"ˇ«ry = %x ",*
°kc
 );

57 
°k
(*)
ƒk_èsk_TCB
[
i
].
OSTaskStkPå
;

58 
°kc
 = (*)
°k
;

59 
	`¥ötf
–"°k = %x ",(
uöt16_t
)
°kc
 );

60 
	`¥ötf
–"tcbádd∏%x\r\n",(
uöt16_t
)&
ƒk_èsk_TCB
[
i
]);

64 
	}
}

73 
	$ƒk_°ack_check
()

75 #ifde‡
NRK_STACK_CHECK


77 *
°k
 ;

78 *
°kc
;

80 
°k
 = (*)
ƒk_cur_èsk_TCB
->
OSTCBStkBŸtom
;

81 
°kc
 = (*)
°k
;

82 if(*
°kc
 !
STK_CANARY_VAL
) {

84 #ifde‡
NRK_REPORT_ERRORS


85 
	`dump_°ack_öfo
();

87 
	`ƒk_îr‹_add
–
NRK_STACK_OVERFLOW
 );

88 *
°kc
=
STK_CANARY_VAL
;

91 
°k
 = (*)
ƒk_cur_èsk_TCB
->
OSTaskStkPå
;

92 
°kc
 = (*)
°k
;

93 if(
°kc
 > (*)
RAMEND
 ) {

94 #ifde‡
NRK_REPORT_ERRORS


95 
	`dump_°ack_öfo
();

97 
	`ƒk_îr‹_add
–
NRK_INVALID_STACK_POINTER
);

100 
	}
}

102 
öt8_t
 
	$ƒk_°ack_check_pid
(
öt8_t
 
pid
)

104 #ifde‡
NRK_STACK_CHECK


106 *
°k
 ;

107 *
°kc
;

109 
°k
 = (*)
ƒk_èsk_TCB
[
pid
].
OSTCBStkBŸtom
;

110 
°kc
 = (*)
°k
;

111 if(*
°kc
 !
STK_CANARY_VAL
) {

112 *
°kc
=
STK_CANARY_VAL
;

113  
NRK_ERROR
;

115 
°k
 = (*)
ƒk_èsk_TCB
[
pid
].
OSTaskStkPå
;

116 
°kc
 = (*)
°k
;

117 if(
°kc
 > (*)
RAMEND
 ) {

118 
	`ƒk_îr‹_add
–
NRK_INVALID_STACK_POINTER
);

119  
NRK_ERROR
;

122  
NRK_OK
;

123 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_stats.c

1 
	~<ƒk.h
>

2 
	~<ƒk_°©s.h
>

3 
	~<ƒk_time.h
>

4 
	~<ƒk_defs.h
>

5 
	~<ƒk_îr‹.h
>

6 
	~<°dio.h
>

8 #ifde‡
NRK_STATS_TRACKER


9 
	$ƒk_°©s_ª£t
()

11 
uöt8_t
 
i
;

13 
_ƒk_°©s_¶ìp_time
.
£cs
=0;

14 
_ƒk_°©s_¶ìp_time
.
«no_£cs
=0;

15 
i
=0; i<
NRK_MAX_TASKS
; i++ )

17 
cur_èsk_°©s
[
i
].
tŸÆ_ticks
=0;

18 
cur_èsk_°©s
[
i
].
max_exec_ticks
=0;

19 
cur_èsk_°©s
[
i
].
mö_exec_ticks
=0;

20 
cur_èsk_°©s
[
i
].
œ°_exec_ticks
=0;

21 
cur_èsk_°©s
[
i
].
sw≠≥d_ö
=0;

22 
cur_èsk_°©s
[
i
].
¥ìm±ed
=0;

23 
cur_èsk_°©s
[
i
].
viﬁ©i⁄s
=0;

24 
cur_èsk_°©s
[
i
].
ovîÊow
=0;

27 
	}
}

30 
	$_ƒk_°©s_¶ìp
(
uöt8_t
 
t
)

33 
_ƒk_°©s_¶ìp_time
.
«no_£cs
+=
t
*
NANOS_PER_TICK
;

34 
	`ƒk_time_com∑˘_«nos
(&
_ƒk_°©s_¶ìp_time
);

35 
	}
}

37 
	$ƒk_°©s_gë_dìp_¶ìp
(
ƒk_time_t
 *
t
)

39 
t
->
£cs
=
_ƒk_°©s_¶ìp_time
.secs;

40 
t
->
«no_£cs
=
_ƒk_°©s_¶ìp_time
.nano_secs;

41 
	}
}

43 
	$_ƒk_°©s_add_viﬁ©i⁄
(
uöt8_t
 
èsk_id
)

46 
cur_èsk_°©s
[
èsk_id
].
viﬁ©i⁄s
++;

47 if(
cur_èsk_°©s
[
èsk_id
].
viﬁ©i⁄s
==255Ëcur_èsk_°©s[èsk_id].
ovîÊow
=1;

48 
	}
}

52 
	$_ƒk_°©s_èsk_°¨t
(
uöt8_t
 
èsk_id
)

55 
cur_èsk_°©s
[
èsk_id
].
cur_ticks
=0;

56 
cur_èsk_°©s
[
èsk_id
].
sw≠≥d_ö
++;

57 if(
cur_èsk_°©s
[
èsk_id
].
sw≠≥d_ö
==255Ëcur_èsk_°©s[èsk_id].
ovîÊow
=1;

58 
	}
}

61 
	$_ƒk_°©s_èsk_¥ìm±ed
(
uöt8_t
 
èsk_id
, uöt8_à
ticks
)

64 
cur_èsk_°©s
[
èsk_id
].
¥ìm±ed
++;

65 
cur_èsk_°©s
[
èsk_id
].
cur_ticks
+=
ticks
;

66 
cur_èsk_°©s
[
èsk_id
].
tŸÆ_ticks
+=
ticks
;

67 
	}
}

69 
	$_ƒk_°©s_èsk_su•íd
(
uöt8_t
 
èsk_id
, uöt8_à
ticks
)

71 if–
cur_èsk_°©s
[
èsk_id
].
ovîÊow
==1) ;

72 
cur_èsk_°©s
[
èsk_id
].
œ°_exec_ticks
 = cur_èsk_°©s[èsk_id].
cur_ticks
+
ticks
;

73 
cur_èsk_°©s
[
èsk_id
].
tŸÆ_ticks
+=
ticks
;

75 if(
cur_èsk_°©s
[
èsk_id
].
mö_exec_ticks
==0 || cur_èsk_°©s[èsk_id].
œ°_exec_ticks
<cur_task_stats[task_id].min_exec_ticks)

76 
cur_èsk_°©s
[
èsk_id
].
mö_exec_ticks
=cur_èsk_°©s[èsk_id].
œ°_exec_ticks
;

78 if(
cur_èsk_°©s
[
èsk_id
].
œ°_exec_ticks
>cur_èsk_°©s[èsk_id].
max_exec_ticks
)

79 
cur_èsk_°©s
[
èsk_id
].
max_exec_ticks
=cur_èsk_°©s[èsk_id].
œ°_exec_ticks
;

81 
	}
}

83 
	$ƒk_°©s_di•œy_pid
(
uöt8_t
 
pid
)

85 
ƒk_time_t
 
t
;

87 
	`ƒk_k¥ötf
–
	`PSTR
( " Task ID: "));

88 
	`¥ötf
–"%d",
pid
 );

89 if(
pid
==
NRK_IDLE_TASK_ID
)

91 
	`ƒk_k¥ötf
–
	`PSTR
( "\r\n Total System Uptime: "));

92 
	`ƒk_time_gë
(&
t
);

93 
	`¥ötf
–"%lu sec†%lu ms", 
t
.
£cs
,Å.
«no_£cs
/
NANOS_PER_MS
 );

94 
	`ƒk_k¥ötf
–
	`PSTR
( "\r\n Idle Task Deep Sleep Time: "));

97 
	`¥ötf
–"%lu sec†%lu ms", 
_ƒk_°©s_¶ìp_time
.
£cs
, _ƒk_°©s_¶ìp_time.
«no_£cs
/
NANOS_PER_MS
);

99 
	`ƒk_k¥ötf
–
	`PSTR
( "\r\n Total CPU: "));

100 
t
=
	`_ƒk_ticks_to_time
(
cur_èsk_°©s
[
pid
].
tŸÆ_ticks
);

101 
	`¥ötf
–"%lu sec†%lu ms", 
t
.
£cs
,Å.
«no_£cs
/
NANOS_PER_MS
 );

102 
	`ƒk_k¥ötf
–
	`PSTR
( "\r\n Time [Min,Last,Max]: "));

103 
t
=
	`_ƒk_ticks_to_time
(
cur_èsk_°©s
[
pid
].
mö_exec_ticks
);

104 
	`¥ötf
–"%lu sec†%lu ms, ", 
t
.
£cs
,Å.
«no_£cs
/
NANOS_PER_MS
 );

105 
t
=
	`_ƒk_ticks_to_time
(
cur_èsk_°©s
[
pid
].
œ°_exec_ticks
);

106 
	`¥ötf
–"%lu sec†%lu ms, ", 
t
.
£cs
,Å.
«no_£cs
/
NANOS_PER_MS
 );

107 
t
=
	`_ƒk_ticks_to_time
(
cur_èsk_°©s
[
pid
].
max_exec_ticks
);

108 
	`¥ötf
–"%lu sec†%lu ms", 
t
.
£cs
,Å.
«no_£cs
/
NANOS_PER_MS
 );

109 
	`ƒk_k¥ötf
–
	`PSTR
( "\r\n Swap-ins: "));

110 
	`¥ötf
–"%lu",
cur_èsk_°©s
[
pid
].
sw≠≥d_ö
 );

111 
	`ƒk_k¥ötf
–
	`PSTR
( "\r\n Preemptions: "));

112 
	`¥ötf
–"%lu",
cur_èsk_°©s
[
pid
].
¥ìm±ed
);

113 
	`ƒk_k¥ötf
–
	`PSTR
( "\r\n Kernel Violations: "));

114 
	`¥ötf
–"%u",
cur_èsk_°©s
[
pid
].
viﬁ©i⁄s
);

115 
	`ƒk_k¥ötf
–
	`PSTR
( "\r\n Overflow Error Status: "));

116 
	`¥ötf
–"%u",
cur_èsk_°©s
[
pid
].
ovîÊow
);

117 
	`ƒk_k¥ötf
–
	`PSTR
("\r\n") );

118 
	}
}

120 
	$ƒk_°©s_di•œy_Æl
()

122 
uöt8_t
 
i
;

123 
	`ƒk_k¥ötf
–
	`PSTR
( "\r\nNano-RK Task Statistics:\r\n" ));

125 
i
=0; i<
NRK_MAX_TASKS
; i++ )

126 
	`ƒk_°©s_di•œy_pid
(
i
);

127 
	}
}

129 
öt8_t
 
	$ƒk_°©s_gë
(
uöt8_t
 
pid
, 
ƒk_èsk_°©_t
 *
t
)

131 if(
pid
>=
NRK_MAX_TASKS
Ë 
NRK_ERROR
;

133 
t
->
tŸÆ_ticks
=
cur_èsk_°©s
[
pid
].total_ticks;

134 
t
->
mö_exec_ticks
=
cur_èsk_°©s
[
pid
].min_exec_ticks;

135 
t
->
max_exec_ticks
=
cur_èsk_°©s
[
pid
].max_exec_ticks;

136 
t
->
œ°_exec_ticks
=
cur_èsk_°©s
[
pid
].last_exec_ticks;

137 
t
->
sw≠≥d_ö
=
cur_èsk_°©s
[
pid
].swapped_in;

138 
t
->
cur_ticks
=
cur_èsk_°©s
[
pid
].cur_ticks;

139 
t
->
¥ìm±ed
=
cur_èsk_°©s
[
pid
].preempted;

140 
t
->
viﬁ©i⁄s
=
cur_èsk_°©s
[
pid
].violations;

141 
t
->
ovîÊow
=
cur_èsk_°©s
[
pid
].overflow;

143  
NRK_OK
;

144 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_task.c

28 
	~<ƒk.h
>

29 
	~<ƒk_èsk.h
>

30 
	~<ö˛ude.h
>

31 
	~<ulib.h
>

32 
	~<ƒk_timî.h
>

33 
	~<ƒk_scheduÀr.h
>

34 
	~<ƒk_îr‹.h
>

35 
	~<ƒk_°ack_check.h
>

36 
	~<°dlib.h
>

38 
	#EDF


	)

39 
	#TBS


	)

41 
uöt32_t
 
	gutûiz©i⁄
 = 0;

42 
ölöe
 
_ƒk_waô_f‹_scheduÀr
 ();

44 
uöt8_t
 
	$ƒk_gë_high_ªady_èsk_ID
 ()

46  (
_hód_node
->
èsk_ID
);

47 
	}
}

49 
	$ƒk_¥öt_ªadyQ
 ()

51 
ƒk_queue
 *
±r
;

52 
±r
 = 
_hód_node
;

54 
±r
 !
NULL
) {

55 
	`¥ötf
 ("%d ", 
±r
->
èsk_ID
);

56 
±r
 =Öå->
Next
;

59 
	}
}

62 
	$ƒk_add_to_ªadyQ
 (
öt8_t
 
èsk_ID
)

64 
ƒk_queue
 *
NextNode
;

65 
ƒk_queue
 *
CurNode
;

69 i‡(
_‰ì_node
 =
NULL
) {

73 
NextNode
 = 
_hód_node
;

74 
CurNode
 = 
_‰ì_node
;

76 i‡(
_hód_node
 !
NULL
) {

78 
NextNode
 !
NULL
) {

79 #ifde‡
EDF


80 i‡(
ƒk_èsk_TCB
[
NextNode
->
èsk_ID
].
√xt_≥riod
 >

81 
ƒk_èsk_TCB
[
èsk_ID
].
√xt_≥riod
)

85 i‡(
ƒk_èsk_TCB
[
NextNode
->
èsk_ID
].
ñev©ed_¥io_Êag
)

86 i‡(
ƒk_èsk_TCB
[
NextNode
->
èsk_ID
].
èsk_¥io_˚û
 <

87 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_¥io
)

89 i‡(
ƒk_èsk_TCB
[
èsk_ID
].
ñev©ed_¥io_Êag
)

90 i‡(
ƒk_èsk_TCB
[
NextNode
->
èsk_ID
].
èsk_¥io
 <

91 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_¥io_˚û
)

93 i‡(
ƒk_èsk_TCB
[
NextNode
->
èsk_ID
].
èsk_¥io
 <

94 
ƒk_èsk_TCB
[
èsk_ID
].
èsk_¥io
)

97 
NextNode
 = NextNode->
Next
;

107 
CurNode
->
èsk_ID
 =Åask_ID;

108 
_‰ì_node
 = _‰ì_node->
Next
;

110 i‡(
NextNode
 =
_hód_node
) {

112 i‡(
_hód_node
 !
NULL
) {

113 
CurNode
->
Next
 = 
_hód_node
;

114 
CurNode
->
Pªv
 = 
NULL
;

115 
_hód_node
->
Pªv
 = 
CurNode
;

118 
CurNode
->
Next
 = 
NULL
;

119 
CurNode
->
Pªv
 = 
NULL
;

120 
_‰ì_node
->
Pªv
 = 
CurNode
;

122 
_hód_node
 = 
CurNode
;

126 i‡(
NextNode
 !
_‰ì_node
) {

129 
CurNode
->
Pªv
 = 
NextNode
->Prev;

130 
CurNode
->
Next
 = 
NextNode
;

131 (
NextNode
->
Pªv
)->
Next
 = 
CurNode
;

132 
NextNode
->
Pªv
 = 
CurNode
;

136 
CurNode
->
Next
 = 
NULL
;

137 
CurNode
->
Pªv
 = 
_‰ì_node
->Prev;

138 
_‰ì_node
->
Pªv
 = 
CurNode
;

141 
	}
}

144 
	$ƒk_ªm_‰om_ªadyQ
 (
öt8_t
 
èsk_ID
)

147 
ƒk_queue
 *
CurNode
;

149 i‡(
_hód_node
 =
NULL
)

152 
CurNode
 = 
_hód_node
;

154 i‡(
_hód_node
->
èsk_ID
 ==Åask_ID) {

156 
_hód_node
 = _hód_node->
Next
;

157 
_hód_node
->
Pªv
 = 
NULL
;

160 (
CurNode
 !
NULL
Ë&& (CurNode->
èsk_ID
 !=Åask_ID))

161 
CurNode
 = CurNode->
Next
;

162 i‡(
CurNode
 =
NULL
)

166 (
CurNode
->
Pªv
)->
Next
 = CurNode->Next;

167 i‡(
CurNode
->
Next
 !
NULL
)

168 (
CurNode
->
Next
)->
Pªv
 = CurNode->Prev;

173 i‡(
_‰ì_node
 =
NULL
) {

174 
_‰ì_node
 = 
CurNode
;

175 
_‰ì_node
->
Next
 = 
NULL
;

178 
CurNode
->
Next
 = 
_‰ì_node
;

179 
_‰ì_node
->
Pªv
 = 
CurNode
;

180 
_‰ì_node
 = 
CurNode
;

182 
_‰ì_node
->
Pªv
 = 
NULL
;

183 
	}
}

185 #ifde‡
TBS


186 
ƒk_°©us_t
 
	$ƒk_a˘iv©e_tbs
 (
ƒk_èsk_ty≥
 * 
Task
)

188 
uöt8_t
 
πy≥
;

189 *
t›OfSèckPå
;

190 
ƒk_queue
 *
ãmp
;

192 
t›OfSèckPå
 =

193 (*Ë
	`ƒk_èsk_°k_öô
 (
Task
->
èsk
, Task->
Ptos
, Task->
Pbos
);

195 i‡(
Task
->
Fú°A˘iv©i⁄
 =
TRUE
) {

196 
πy≥
 = 
	`ƒk_TCB_öô
 (
Task
, 
t›OfSèckPå
, Task->
Pbos
, 0, (*) 0, 0);

197 
Task
->
Fú°A˘iv©i⁄
 = 
FALSE
;

204 
ƒk_èsk_TCB
[
Task
->
èsk_ID
].
OSTaskStkPå
 = (
NRK_STK
 *Ë
t›OfSèckPå
;

210 
ƒk_èsk_TCB
[
Task
->
èsk_ID
].
√xt_wakeup
 = 0;

211 
ƒk_èsk_TCB
[
Task
->
èsk_ID
].
¨rivÆ_time
 = 
	`_ƒk_time_to_ticks
(
ƒk_sy°em_time
);

212 
ƒk_èsk_TCB
[
Task
->
èsk_ID
].
√xt_≥riod
 = (ƒk_èsk_TCB[Task->èsk_ID].
¨rivÆ_time
Ë+Çrk_èsk_TCB[Task->èsk_ID].
≥riod
;

213 
ƒk_èsk_TCB
[
Task
->
èsk_ID
].
èsk_°©e
 = 
SPORAD_READY
;

214 
	`ƒk_add_to_•‹adQ
(
Task
->
èsk_ID
);

218  
NRK_OK
;

219 
	}
}

222 
ƒk_°©us_t
 
	$ƒk_a˘iv©e_èsk
 (
ƒk_èsk_ty≥
 * 
Task
)

224 
uöt8_t
 
πy≥
;

225 *
t›OfSèckPå
;

226 
cou¡
 = 0;

227 
ãmp
 = 0;

228 
uöt32_t
 
a
,
b
;

230 #ifde‡
TBS


231 if((
Task
->
Ty≥
!=
IDLE_TASK
Ë&& (Task->Ty≥ !
TBS_SPORADIC_TASK
)) {

232 
cou¡
 ++;

233 
ãmp
 = 
utûiz©i⁄
;

234 
a
 = 
	`_ƒk_time_to_ticks_l⁄g
(
Task
->
˝u_ª£rve
) * 100;

235 
b
 = 
	`_ƒk_time_to_ticks
(
Task
->
≥riod
);

236 
a
 = (
uöt32_t
)◊/
b
);

237 
b
=
a
;

240 
utûiz©i⁄
 +
b
;

243 
	`¥ötf
("\¿utûiz©i⁄ = %d",
utûiz©i⁄
);

253 
t›OfSèckPå
 =

254 (*Ë
	`ƒk_èsk_°k_öô
 (
Task
->
èsk
, Task->
Ptos
, Task->
Pbos
);

257 i‡(
Task
->
Fú°A˘iv©i⁄
 =
TRUE
) {

258 
πy≥
 = 
	`ƒk_TCB_öô
 (
Task
, 
t›OfSèckPå
, Task->
Pbos
, 0, (*) 0, 0);

259 
Task
->
Fú°A˘iv©i⁄
 = 
FALSE
;

262 i‡(
ƒk_èsk_TCB
[
Task
->
èsk_ID
].
èsk_°©e
 !
SUSPENDED
)

263  
NRK_ERROR
;

266 
ƒk_èsk_TCB
[
Task
->
èsk_ID
].
OSTaskStkPå
 = (
NRK_STK
 *Ë
t›OfSèckPå
;

280 i‡(
ƒk_èsk_TCB
[
Task
->
èsk_ID
].
√xt_wakeup
 == 0) {

281 
ƒk_èsk_TCB
[
Task
->
èsk_ID
].
èsk_°©e
 = 
READY
;

282 
	`ƒk_add_to_ªadyQ
 (
Task
->
èsk_ID
);

285  
NRK_OK
;

286 
	}
}

290 
ƒk_°©us_t
 
	$ƒk_ãrmö©e_èsk
 ()

292 
	`ƒk_ªm_‰om_ªadyQ
 (
ƒk_cur_èsk_TCB
->
èsk_ID
);

293 
ƒk_cur_èsk_TCB
->
èsk_°©e
 = 
FINISHED
;

296 
	`ƒk_waô_u¡û_√xt_≥riod
 ();

297  
NRK_OK
;

298 
	}
}

300 
öt8_t
 
	$ƒk_waô_u¡û_√xt_≥riod
 ()

302 
uöt16_t
 
timî
;

304 
	`ƒk_°ack_check
 ();

306 
	`ƒk_öt_dißbÀ
 ();

307 
ƒk_cur_èsk_TCB
->
num_≥riods
 = 1;

308 
ƒk_cur_èsk_TCB
->
su•íd_Êag
 = 1;

309 
timî
 = 
	`_ƒk_os_timî_gë
 ();

313 i‡(
timî
 < (
MAX_SCHED_WAKEUP_TIME
 - 
TIME_PAD
))

314 i‡((
timî
 + 
TIME_PAD
Ë<
	`_ƒk_gë_√xt_wakeup
 ()) {

315 
timî
 +
TIME_PAD
;

316 
_ƒk_¥ev_timî_vÆ
 = 
timî
;

317 
	`_ƒk_£t_√xt_wakeup
 (
timî
);

320 
	`ƒk_öt_íabÀ
 ();

321 
	`_ƒk_waô_f‹_scheduÀr
 ();

322  
NRK_OK
;

323 
	}
}

325 
öt8_t
 
	$ƒk_waô_u¡û_√xt_n_≥riods
 (
uöt16_t
 
p
)

327 
uöt16_t
 
timî
;

329 
	`ƒk_°ack_check
 ();

331 i‡(
p
 == 0)

332 
p
 = 1;

334 
	`ƒk_öt_dißbÀ
 ();

335 
ƒk_cur_èsk_TCB
->
su•íd_Êag
 = 1;

336 
ƒk_cur_èsk_TCB
->
num_≥riods
 = 
p
;

337 
timî
 = 
	`_ƒk_os_timî_gë
 ();

342 i‡(
timî
 < (
MAX_SCHED_WAKEUP_TIME
 - 
TIME_PAD
))

343 i‡((
timî
 + 
TIME_PAD
Ë<
	`_ƒk_gë_√xt_wakeup
 ()) {

344 
timî
 +
TIME_PAD
;

345 
_ƒk_¥ev_timî_vÆ
 = 
timî
;

346 
	`_ƒk_£t_√xt_wakeup
 (
timî
);

349 
	`ƒk_öt_íabÀ
 ();

350 
	`_ƒk_waô_f‹_scheduÀr
 ();

351  
NRK_OK
;

352 
	}
}

364 
öt8_t
 
	$ƒk_waô_ticks
 (
uöt16_t
 
ticks
)

366 
uöt16_t
 
timî
;

367 
	`ƒk_öt_dißbÀ
 ();

368 
ƒk_cur_èsk_TCB
->
su•íd_Êag
 = 1;

369 
timî
 = 
	`_ƒk_os_timî_gë
 ();

370 
ƒk_cur_èsk_TCB
->
√xt_wakeup
 = 
ticks
 + 
timî
;

372 i‡(
timî
 < 
MAX_SCHED_WAKEUP_TIME
 - 
TIME_PAD
)

373 i‡((
timî
 + 
TIME_PAD
Ë<
	`_ƒk_gë_√xt_wakeup
 ()) {

374 
timî
 +
TIME_PAD
;

375 
_ƒk_¥ev_timî_vÆ
 = 
timî
;

376 
	`_ƒk_£t_√xt_wakeup
 (
timî
);

379 
	`ƒk_öt_íabÀ
 ();

381 
	`_ƒk_waô_f‹_scheduÀr
 ();

382  
NRK_OK
;

383 
	}
}

395 
öt8_t
 
	$ƒk_waô_u¡û_ticks
 (
uöt16_t
 
ticks
)

397 
uöt16_t
 
timî
;

398 
	`ƒk_öt_dißbÀ
 ();

399 
ƒk_cur_èsk_TCB
->
su•íd_Êag
 = 1;

400 
ƒk_cur_èsk_TCB
->
√xt_wakeup
 = 
ticks
;

401 
timî
 = 
	`_ƒk_os_timî_gë
 ();

403 i‡(
timî
 < 
MAX_SCHED_WAKEUP_TIME
 - 
TIME_PAD
)

404 i‡((
timî
 + 
TIME_PAD
Ë<
	`_ƒk_gë_√xt_wakeup
 ()) {

405 
timî
 +
TIME_PAD
;

406 
_ƒk_¥ev_timî_vÆ
 = 
timî
;

407 
	`_ƒk_£t_√xt_wakeup
 (
timî
);

410 
	`ƒk_öt_íabÀ
 ();

412 
	`_ƒk_waô_f‹_scheduÀr
 ();

413  
NRK_OK
;

414 
	}
}

416 
öt8_t
 
	$ƒk_£t_√xt_wakeup
 (
ƒk_time_t
 
t
)

418 
uöt16_t
 
timî
;

419 
uöt16_t
 
nw
;

420 
	`ƒk_öt_dißbÀ
 ();

421 
timî
 = 
	`_ƒk_os_timî_gë
 ();

422 
nw
 = 
	`_ƒk_time_to_ticks
 (
t
);

423 i‡(
nw
 <
TIME_PAD
)

424  
NRK_ERROR
;

425 
ƒk_cur_èsk_TCB
->
√xt_wakeup
 = 
nw
 + 
timî
;

435 
	`ƒk_öt_íabÀ
 ();

437  
NRK_OK
;

438 
	}
}

450 
öt8_t
 
	$ƒk_waô_u¡û_nw
 ()

452 
uöt16_t
 
timî
;

453 
	`ƒk_öt_dißbÀ
 ();

454 
ƒk_cur_èsk_TCB
->
su•íd_Êag
 = 1;

455 
ƒk_cur_èsk_TCB
->
nw_Êag
 = 1;

456 
timî
 = 
	`_ƒk_os_timî_gë
 ();

458 i‡(
timî
 < 
MAX_SCHED_WAKEUP_TIME
 - 
TIME_PAD
)

459 i‡((
timî
 + 
TIME_PAD
Ë<
	`_ƒk_gë_√xt_wakeup
 ()) {

460 
timî
 +
TIME_PAD
;

461 
_ƒk_¥ev_timî_vÆ
 = 
timî
;

462 
	`_ƒk_£t_√xt_wakeup
 (
timî
);

465 
	`ƒk_öt_íabÀ
 ();

467 
	`_ƒk_waô_f‹_scheduÀr
 ();

468  
NRK_OK
;

469 
	}
}

472 
öt8_t
 
	$ƒk_waô
 (
ƒk_time_t
 
t
)

474 
uöt16_t
 
timî
;

475 
uöt16_t
 
nw
;

477 
	`ƒk_°ack_check
 ();

479 
	`ƒk_öt_dißbÀ
 ();

480 
ƒk_cur_èsk_TCB
->
su•íd_Êag
 = 1;

481 
ƒk_cur_èsk_TCB
->
num_≥riods
 = 1;

482 
timî
 = 
	`_ƒk_os_timî_gë
 ();

485 
nw
 = 
	`_ƒk_time_to_ticks
 (
t
);

487 
ƒk_cur_èsk_TCB
->
√xt_wakeup
 = 
nw
 + 
timî
;

489 i‡(
timî
 < (
MAX_SCHED_WAKEUP_TIME
 - 
TIME_PAD
))

490 i‡((
timî
 + 
TIME_PAD
Ë<
	`_ƒk_gë_√xt_wakeup
 ()) {

491 
timî
 +
TIME_PAD
;

492 
_ƒk_¥ev_timî_vÆ
 = 
timî
;

493 
	`_ƒk_£t_√xt_wakeup
 (
timî
);

495 
	`ƒk_öt_íabÀ
 ();

497 
	`_ƒk_waô_f‹_scheduÀr
 ();

498  
NRK_OK
;

499 
	}
}

501 
ölöe
 
	$_ƒk_waô_f‹_scheduÀr
 ()

505 
	`ƒk_idÀ
 ();

506 } (vﬁ©ûê
uöt8_t
Ë
ƒk_cur_èsk_TCB
->
su•íd_Êag
 == 1);

508 
	}
}

510 
öt8_t
 
	$ƒk_waô_u¡û
 (
ƒk_time_t
 
t
)

512 
ƒk_time_t
 
˘
;

513 
uöt8_t
 
v
;

515 
	`ƒk_time_gë
 (&
˘
);

517 
v
 = 
	`ƒk_time_sub
 (&
t
,Å, 
˘
);

518 i‡(
v
 == 0)

519  
NRK_ERROR
;

525 
	`ƒk_waô
 (
t
);

527  
NRK_OK
;

528 
	}
}

530 
uöt8_t
 
	$ƒk_gë_pid
 ()

532  
ƒk_cur_èsk_TCB
->
èsk_ID
;

533 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_time.c

40 
	~<ƒk.h
>

41 
	~<ƒk_timî.h
>

43 
	$ƒk_time_gë
(
ƒk_time_t
 *
t
)

45 
t
->
£cs
=
ƒk_sy°em_time
.secs;

46 
t
->
«no_£cs
=
ƒk_sy°em_time
.nano_secs;

48 
t
->
«no_£cs
+=((
uöt32_t
)
	`_ƒk_os_timî_gë
()*(uöt32_t)
NANOS_PER_TICK
);

49 
t
->
«no_£cs
>=(
uöt32_t
)
NANOS_PER_SEC
)

51 
t
->
«no_£cs
-=(
uöt32_t
)
NANOS_PER_SEC
;

52 
t
->
£cs
++;

54 
	}
}

60 
uöt8_t
 
	$ƒk_time_sub
(
ƒk_time_t
 *
ªsu…
,ƒk_time_à
high
,Çrk_time_à
low
)

62 if(
high
.
£cs
<
low
.secs)  0;;

63 if(
low
.
£cs
==
high
.secs)

65 if((
uöt32_t
)
low
.
«no_£cs
>(uöt32_t)
high
.nano_secs)  0;

66 
ªsu…
->
«no_£cs
=(
uöt32_t
)
high
.«no_£cs-(uöt32_t)
low
.nano_secs;

67 
ªsu…
->
£cs
=0;

70 if(
low
.
«no_£cs
 > 
high
.nano_secs)

72 
high
.
£cs
--;

73 
high
.
«no_£cs
+=(
uöt32_t
)
NANOS_PER_SEC
;

74 
ªsu…
->
£cs
=
high
.£cs-
low
.secs;

75 
ªsu…
->
«no_£cs
=
high
.«no_£cs-
low
.nano_secs;

79 
ªsu…
->
£cs
=
high
.£cs-
low
.secs;

80 
ªsu…
->
«no_£cs
=
high
.«no_£cs-
low
.nano_secs;

82 
	}
}

88 
uöt8_t
 
	$ƒk_time_add
(
ƒk_time_t
 *
ªsu…
,ƒk_time_à
a
,Çrk_time_à
b
)

90 
ªsu…
->
£cs
=
a
.£cs+
b
.secs;

91 
ªsu…
->
«no_£cs
=
a
.«no_£cs+
b
.nano_secs;

92 
	`ƒk_time_com∑˘_«nos
(
ªsu…
);

94 
	}
}

104 
ölöe
 
	$ƒk_time_com∑˘_«nos
(
ƒk_time_t
 *
t
)

106 
t
->
«no_£cs
>=
NANOS_PER_SEC
)

108 
t
->
«no_£cs
-=
NANOS_PER_SEC
;

109 
t
->
£cs
++;

111 
	}
}

113 
	$ƒk_time_£t
(
uöt32_t
 
£cs
, uöt32_à
«no_£cs
)

115 
ƒk_sy°em_time
.
£cs
=secs;

116 
ƒk_sy°em_time
.
«no_£cs
=nano_secs;

117 
	}
}

119 
uöt16_t
 
	$_ƒk_time_to_ticks
(
ƒk_time_t
 
t
)

121 
uöt16_t
 
ticks
;

122 
uöt16_t
 
tmp
;

125 if(
t
.
£cs
>=1)

127 
t
.
«no_£cs
+=
NANOS_PER_SEC
;

128 
t
.
£cs
--;

129 
ticks
=
t
.
«no_£cs
/(
uöt32_t
)
NANOS_PER_TICK
;

130 
ticks
+=
t
.
£cs
*
TICKS_PER_SEC
;

133 
ticks
=
t
.
«no_£cs
/(
uöt32_t
)
NANOS_PER_TICK
;

136 
tmp
=
ticks
;

137 
tmp
>
TICKS_PER_SEC
)tmp-=TICKS_PER_SEC;

138 
t
.
£cs
=
tmp
*
NANOS_PER_TICK
;

140 if(
t
.
«no_£cs
>t.
£cs
+(
NANOS_PER_TICK
/2))
ticks
++;

144  
ticks
;

145 
	}
}

147 
ƒk_time_t
 
	$_ƒk_ticks_to_time
(
uöt32_t
 
ticks
)

149 
ƒk_time_t
 
t
;

151 
t
.
£cs
=
ticks
/
TICKS_PER_SEC
;

152 
t
.
«no_£cs
=(
ticks
%
TICKS_PER_SEC
)*
NANOS_PER_TICK
;

154  
t
;

155 
	}
}

157 
uöt32_t
 
	$_ƒk_time_to_ticks_l⁄g
(
ƒk_time_t
 
t
)

159 
uöt32_t
 
ticks
;

160 
uöt32_t
 
tmp
;

162 if(
t
.
£cs
>=1)

164 
t
.
«no_£cs
+=
NANOS_PER_SEC
;

165 
t
.
£cs
--;

166 
ticks
=
t
.
«no_£cs
/(
uöt32_t
)
NANOS_PER_TICK
;

167 
ticks
+=
t
.
£cs
*
TICKS_PER_SEC
;

170 
ticks
=
t
.
«no_£cs
/(
uöt32_t
)
NANOS_PER_TICK
;

173 
tmp
=
ticks
;

174 
tmp
>
TICKS_PER_SEC
)tmp-=TICKS_PER_SEC;

175 
t
.
£cs
=
tmp
*
NANOS_PER_TICK
;

177 if(
t
.
«no_£cs
>t.
£cs
+(
NANOS_PER_TICK
/2))
ticks
++;

181  
ticks
;

182 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/bmac/bmac.c

28 
	~<ö˛ude.h
>

29 
	~<ulib.h
>

30 
	~<°dlib.h
>

31 
	~<avr/¶ìp.h
>

32 
	~<avr/wdt.h
>

33 
	~<avr/ì¥om.h
>

34 
	~<°dio.h
>

35 
	~<avr/öãºu±.h
>

36 
	~<ƒk.h
>

37 
	~<ƒk_evíts.h
>

38 
	~<ƒk_timî.h
>

39 
	~<ƒk_îr‹.h
>

40 
	~<bmac.h
>

44 
uöt8_t
 
	gtx_d©a_ªady
;

45 
uöt8_t
 
	grx_buf_em±y
;

46 
uöt8_t
 
	gbmac_ru¬ög
;

47 
uöt8_t
 
	gpkt_gŸ_ack
;

48 
uöt8_t
 
	gg_ch™
;

49 
uöt8_t
 
	gis_íabÀd
;

51 
ƒk_time_t
 
	g_bmac_check_≥riod
;

56 
RF_RX_INFO
 *
	$rf_rx_ˇŒback
 (
RF_RX_INFO
 * 
pRRI
)

59  
pRRI
;

60 
	}
}

62 
öt8_t
 
	$bmac_í¸y±i⁄_£t_˘r_cou¡î
(
uöt8_t
 *
cou¡î
, uöt8_à
Àn
)

64 if(
Àn
!=4 )  
NRK_ERROR
;

65 
	`rf_£curôy_£t_˘r_cou¡î
(
cou¡î
);

66  
NRK_OK
;

67 
	}
}

69 
öt8_t
 
	$bmac_tx_ª£rve_£t
–
ƒk_time_t
 *
≥riod
, 
uöt16_t
 
pkts
 )

72 #ifde‡
NRK_MAX_RESERVES


74 if(
tx_ª£rve
==-1Ëtx_ª£rve=
	`ƒk_ª£rve_¸óã
();

75 if(
tx_ª£rve
>=0)

76  
	`ƒk_ª£rve_£t
(
tx_ª£rve
, 
≥riod
,
pkts
,
NULL
);

77  
NRK_ERROR
;

79  
NRK_ERROR
;

81 
	}
}

83 
uöt16_t
 
	$bmac_tx_ª£rve_gë
()

85 #ifde‡
NRK_MAX_RESERVES


86 if(
tx_ª£rve
>=0)

87  
	`ƒk_ª£rve_gë
(
tx_ª£rve
);

92 
	}
}

95 
öt8_t
 
	$bmac_auto_ack_dißbÀ
()

97 
	`rf_auto_ack_dißbÀ
();

98  
NRK_OK
;

99 
	}
}

101 
öt8_t
 
	$bmac_auto_ack_íabÀ
()

103 
	`rf_auto_ack_íabÀ
();

104  
NRK_OK
;

105 
	}
}

107 
öt8_t
 
	$bmac_addr_decode_dißbÀ
()

109 
	`rf_addr_decode_dißbÀ
();

110  
NRK_OK
;

111 
	}
}

113 
öt8_t
 
	$bmac_addr_decode_íabÀ
()

115 
	`rf_addr_decode_íabÀ
();

116  
NRK_OK
;

117 
	}
}

119 
öt8_t
 
	$bmac_addr_decode_£t_my_mac
(
uöt16_t
 
my_mac
)

121 
	`rf_addr_decode_£t_my_mac
(
my_mac
);

122  
NRK_OK
;

123 
	}
}

125 
öt8_t
 
	$bmac_addr_decode_de°_mac
(
uöt16_t
 
de°
)

127 
bmac_rfTxInfo
.
de°Addr
=
de°
;

128  
NRK_OK
;

129 
	}
}

131 
öt8_t
 
	$bmac_rx_pkt_is_í¸y±ed
()

133  
	`rf_£curôy_œ°_pkt_°©us
();

134 
	}
}

136 
öt8_t
 
	$bmac_í¸y±i⁄_£t_key
(
uöt8_t
 *
key
, uöt8_à
Àn
)

138 if(
Àn
!=16Ë 
NRK_ERROR
;

139 
	`rf_£curôy_£t_key
(
key
);

140  
NRK_OK
;

141 
	}
}

143 
öt8_t
 
	$bmac_í¸y±i⁄_íabÀ
()

145 
	`rf_£curôy_íabÀ
();

146  
NRK_OK
;

147 
	}
}

149 
öt8_t
 
	$bmac_í¸y±i⁄_dißbÀ
()

151 
	`rf_£curôy_dißbÀ
();

152  
NRK_OK
;

153 
	}
}

156 
öt8_t
 
	$bmac_£t_rf_powî
(
uöt8_t
 
powî
)

158 if(
powî
>31Ë 
NRK_ERROR
;

159 
	`rf_tx_powî
(
powî
);

160  
NRK_OK
;

161 
	}
}

163 
	$bmac_£t_cˇ_a˘ive
(
uöt8_t
 
a˘ive
)

165 
cˇ_a˘ive
=
a˘ive
;

166 
	}
}

168 
öt8_t
 
	$bmac_£t_cˇ_thªsh
(
öt8_t
 
thªsh
)

170 
	`rf_£t_cˇ_thªsh
(
thªsh
);

171  
NRK_OK
;

172 
	}
}

174 
öt8_t
 
	$bmac_£t_ch™√l
(
uöt8_t
 
ch™
)

176 if(
ch™
>26Ë 
NRK_ERROR
;

177 
g_ch™
=
ch™
;

178 
	`rf_öô
 (&
bmac_rfRxInfo
, 
ch™
, 0xFFFF, 0x00000);

179  
NRK_OK
;

180 
	}
}

183 
öt8_t
 
	$bmac_waô_u¡û_rx_pkt
()

185 
ƒk_sig_mask_t
 
evít
;

187 
	`ƒk_sig«l_ªgi°î
(
bmac_rx_pkt_sig«l
);

188 
evít
=
	`ƒk_evít_waô
 (
	`SIG
(
bmac_rx_pkt_sig«l
));

191 if((
evít
 & 
	`SIG
(
bmac_rx_pkt_sig«l
)Ë=0 )  
NRK_ERROR
;

192  
NRK_OK
;

193 
	}
}

195 
öt8_t
 
	$bmac_rx_pkt_£t_buf„r
(
uöt8_t
 *
buf
, uöt8_à
size
)

197 if(
buf
==
NULL
Ë 
NRK_ERROR
;

198 
bmac_rfRxInfo
.
pPaylﬂd
 = 
buf
;

199 
bmac_rfRxInfo
.
max_Àngth
 = 
size
;

200 
rx_buf_em±y
=1;

201  
NRK_OK
;

202 
	}
}

204 
öt8_t
 
	$bmac_öô
 (
uöt8_t
 
ch™
)

206 
tx_ª£rve
=-1;

207 
cˇ_a˘ive
=
åue
;

208 
_bmac_check_≥riod
.
£cs
=0;

209 
_bmac_check_≥riod
.
«no_£cs
=
BMAC_DEFAULT_CHECK_RATE_MS
*
NANOS_PER_MS
;

210 
bmac_rx_pkt_sig«l
=
	`ƒk_sig«l_¸óã
();

211 if(
bmac_rx_pkt_sig«l
==
NRK_ERROR
)

213 
	`ƒk_k¥ötf
(
	`PSTR
("BMAC ERROR: creatingÑx signal failed\r\n"));

214 
	`ƒk_kî√l_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
,
ƒk_cur_èsk_TCB
->
èsk_ID
);

215  
NRK_ERROR
;

217 
bmac_tx_pkt_d⁄e_sig«l
=
	`ƒk_sig«l_¸óã
();

218 if(
bmac_tx_pkt_d⁄e_sig«l
==
NRK_ERROR
)

220 
	`ƒk_k¥ötf
(
	`PSTR
("BMAC ERROR: creatingÅx signal failed\r\n"));

221 
	`ƒk_kî√l_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
,
ƒk_cur_èsk_TCB
->
èsk_ID
);

222  
NRK_ERROR
;

224 
bmac_íabÀ_sig«l
=
	`ƒk_sig«l_¸óã
();

225 if(
bmac_íabÀ_sig«l
==
NRK_ERROR
)

227 
	`ƒk_k¥ötf
(
	`PSTR
("BMAC ERROR: creatingÉnable signal failed\r\n"));

228 
	`ƒk_kî√l_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
,
ƒk_cur_èsk_TCB
->
èsk_ID
);

229  
NRK_ERROR
;

233 
tx_d©a_ªady
=0;

235 
rx_buf_em±y
=0;

236 
bmac_rfRxInfo
.
pPaylﬂd
 = 
NULL
;

237 
bmac_rfRxInfo
.
max_Àngth
 = 0;

240 
	`rf_öô
 (&
bmac_rfRxInfo
, 
ch™
, 0xffff, 0);

241 
g_ch™
=
ch™
;

243 
	`FASTSPI_SETREG
(
CC2420_RSSI
, 0xE580);

244 
	`FASTSPI_SETREG
(
CC2420_TXCTRL
, 0x80FF);

245 
	`FASTSPI_SETREG
(
CC2420_RXCTRL1
, 0x0A56);

247 
	`rf_£t_cˇ_thªsh
(-45);

248 
bmac_ru¬ög
=1;

249 
is_íabÀd
=1;

250  
NRK_OK
;

251 
	}
}

253 
öt8_t
 
	$bmac_tx_pkt_n⁄blockög
(
uöt8_t
 *
buf
, uöt8_à
Àn
)

255 if(
tx_d©a_ªady
==1Ë 
NRK_ERROR
;

256 
tx_d©a_ªady
=1;

257 
bmac_rfTxInfo
.
pPaylﬂd
=
buf
;

258 
bmac_rfTxInfo
.
Àngth
=
Àn
;

259  
NRK_OK
;

260 
	}
}

262 
ƒk_sig_t
 
	$bmac_gë_rx_pkt_sig«l
()

264 
	`ƒk_sig«l_ªgi°î
(
bmac_rx_pkt_sig«l
);

265 (
bmac_rx_pkt_sig«l
);

266 
	}
}

268 
ƒk_sig_t
 
	$bmac_gë_tx_d⁄e_sig«l
()

270 
	`ƒk_sig«l_ªgi°î
(
bmac_tx_pkt_d⁄e_sig«l
);

271 (
bmac_tx_pkt_d⁄e_sig«l
);

272 
	}
}

275 
öt8_t
 
	$bmac_tx_pkt
(
uöt8_t
 *
buf
, uöt8_à
Àn
)

277 
uöt32_t
 
mask
;

278 if(
tx_d©a_ªady
==1Ë 
NRK_ERROR
;

280 #ifde‡
NRK_MAX_RESERVES


281 if(
tx_ª£rve
!=-1)

283 if–
	`ƒk_ª£rve_c⁄sume
(
tx_ª£rve
)==
NRK_ERROR
 )  NRK_ERROR;

286 
	`ƒk_sig«l_ªgi°î
(
bmac_tx_pkt_d⁄e_sig«l
);

287 
tx_d©a_ªady
=1;

288 
bmac_rfTxInfo
.
pPaylﬂd
=
buf
;

289 
bmac_rfTxInfo
.
Àngth
=
Àn
;

290 #ifde‡
DEBUG


291 
	`ƒk_k¥ötf
–
	`PSTR
("Waiting forÅx done signal\r\n"));

293 
mask
=
	`ƒk_evít_waô
 (
	`SIG
(
bmac_tx_pkt_d⁄e_sig«l
));

294 if(
pkt_gŸ_ack
Ë 
NRK_OK
;

295  
NRK_ERROR
;

296 
	}
}

299 
uöt8_t
 *
	$bmac_rx_pkt_gë
(
uöt8_t
 *
Àn
, 
öt8_t
 *
rssi
)

302 if(
	`bmac_rx_pkt_ªady
()==0)

304 *
Àn
=0;

305 *
rssi
=0;

306  
NULL
;

308 *
Àn
=
bmac_rfRxInfo
.
Àngth
;

309 *
rssi
=
bmac_rfRxInfo
.rssi;

310  
bmac_rfRxInfo
.
pPaylﬂd
;

311 
	}
}

313 
öt8_t
 
	$bmac_rx_pkt_ªady
()

315  (!
rx_buf_em±y
);

316 
	}
}

318 
öt8_t
 
	$bmac_rx_pkt_ªÀa£
()

320 
rx_buf_em±y
=1;

321  
NRK_OK
;

322 
	}
}

324 
	$bmac_dißbÀ
()

326 
is_íabÀd
=0;

327 
	}
}

329 
	$bmac_íabÀ
()

331 
is_íabÀd
=1;

332 
	`ƒk_evít_sig«l
 (
bmac_íabÀ_sig«l
);

333 
	}
}

336 
	$bmac_nw_èsk
 ()

338 
öt8_t
 
v
;

339 
uöt8_t
 
backoff
;

340 
ƒk_sig_mask_t
 
evít
;

342 
	`bmac_°¨ãd
()==0Ë
	`ƒk_waô_u¡û_√xt_≥riod
();

345 
	`ƒk_sig«l_ªgi°î
(
bmac_íabÀ_sig«l
);

347 
backoff
=0;

350 if(
is_íabÀd
 ) {

351 
v
=1;

352 if(
rx_buf_em±y
==1Ë
v
=
	`_bmac_ch™√l_check
();

353 if(
v
==0)

355 if(
	`_bmac_rx
()==1)

356 
	`ƒk_evít_sig«l
 (
bmac_rx_pkt_sig«l
);

359 if(
tx_d©a_ªady
==1)

361 
	`_bmac_tx
();

363 
	`ƒk_waô
(
_bmac_check_≥riod
);

365 
evít
=0;

367 
evít
=
	`ƒk_evít_waô
 (
	`SIG
(
bmac_íabÀ_sig«l
));

368 } (
evít
 & 
	`SIG
(
bmac_íabÀ_sig«l
))==0);

373 
	}
}

376 
öt8_t
 
	$bmac_£t_rx_check_øã
(
ƒk_time_t
 
≥riod
)

378 if(
≥riod
.
£cs
==0 &&Öîiod.
«no_£cs
 < 
BMAC_MIN_CHECK_RATE_MS
*
NANOS_PER_MS
)

379  
NRK_ERROR
;

380 
_bmac_check_≥riod
.
£cs
=
≥riod
.secs;

381 
_bmac_check_≥riod
.
«no_£cs
=
≥riod
.nano_secs;

382  
NRK_OK
;

383 
	}
}

385 
öt8_t
 
	$bmac_°¨ãd
()

387  
bmac_ru¬ög
;

388 
	}
}

390 
öt8_t
 
	$_bmac_ch™√l_check
()

392 
öt8_t
 
vÆ
;

393 
	`rf_pﬁlög_rx_⁄
();

394 
	`ƒk_•ö_waô_us
(250);

395 
vÆ
=
CCA_IS_1
;

396 
	`rf_rx_off
();

397  
vÆ
;

399 
	}
}

401 
öt8_t
 
	$_bmac_rx
()

403 
öt8_t
 
n
;

404 
uöt8_t
 
˙t
;

406 
	`rf_£t_rx
 (&
bmac_rfRxInfo
, 
g_ch™
);

407 
	`rf_pﬁlög_rx_⁄
 ();

408 
˙t
=0;

409 (
n
 = 
	`rf_rx_check_fif›
()) == 0)

411 
˙t
++;

412 
	`ƒk_waô
(
_bmac_check_≥riod
);

414 if(
˙t
>3) {

415 #ifde‡
DEBUG


416 
	`¥ötf
–"rxÅimeouà1 %d\r\n",
˙t
 );

418 
	`rf_rx_off
();

422 i‡(
n
 != 0) {

423 
n
 = 0;

425 
˙t
=0;

426 (
n
 = 
	`rf_pﬁlög_rx_∑ckë
 ()) == 0) {

427 
˙t
++;

428 
	`ƒk_•ö_waô_us
(100);

429 i‡(
˙t
 > 50) {

430 #ifde‡
DEBUG


431 
	`¥ötf
( "rxÅimeout 2\r\n" );

433 
	`rf_rx_off
();

438 
	`rf_rx_off
();

439 i‡(
n
 == 1) {

441 
rx_buf_em±y
=0;

442 #ifde‡
DEBUG


443 
	`¥ötf
–"BMAC: SNR%d [",
bmac_rfRxInfo
.
rssi
 );

444 
uöt8_t
 
i
=0; i<
bmac_rfRxInfo
.
Àngth
; i++ )

445 
	`¥ötf
–"%c", 
bmac_rfRxInfo
.
pPaylﬂd
[
i
]);

446 
	`¥ötf
( "]\r\n" );

451 #ifde‡
DEBUG


452 
	`¥ötf
( "CRC failed!\r\n" );

459 
	}
}

462 
öt8_t
 
	$_bmac_tx
()

464 
uöt8_t
 
v
,
backoff
, 
backoff_cou¡
;

465 
uöt16_t
 
b
;

467 #ifde‡
DEBUG


468 
	`ƒk_k¥ötf
–
	`PSTR
("_bmac_tx()\r\n"));

470 if(
cˇ_a˘ive
)

474 
b
=
	`_ƒk_time_to_ticks
(
_bmac_check_≥riod
);

475 
b
=b/((
	`ønd
()%10)+1);

477 
	`ƒk_waô_u¡û_ticks
(
b
);

480 
backoff_cou¡
=1;

482 
v
=
	`_bmac_ch™√l_check
();

483 if(
v
==1) ;

485 
backoff
=
	`ønd
()%(
	`_b_pow
(
backoff_cou¡
));

486 #ifde‡
DEBUG


487 
	`¥ötf
–"backof‡%d\r\n",
backoff
 );

490 
	`ƒk_waô_u¡û_√xt_n_≥riods
(
backoff
);

491 
backoff_cou¡
++;

492 if(
backoff_cou¡
>6) backoff_count=6;

493 
b
=
	`_ƒk_time_to_ticks
(
_bmac_check_≥riod
);

494 
b
=b/((
	`ønd
()%10)+1);

496 
	`ƒk_waô_u¡û_ticks
(
b
);

499 } 
v
==0);

502 
	`rf_ã°_mode
();

503 
	`rf_ˇºõr_⁄
();

504 
	`ƒk_waô
(
_bmac_check_≥riod
);

506 
	`rf_ˇºõr_off
();

507 
	`rf_d©a_mode
();

509 
	`rf_rx_off
();

510 
pkt_gŸ_ack
=
	`rf_tx_∑ckë
 (&
bmac_rfTxInfo
);

511 
	`rf_rx_off
();

512 
tx_d©a_ªady
=0;

513 
	`ƒk_evít_sig«l
 (
bmac_tx_pkt_d⁄e_sig«l
);

514  
NRK_OK
;

515 
	}
}

517 
uöt8_t
 
	$_b_pow
(
uöt8_t
 
ö
)

519 
uöt8_t
 
i
;

520 
uöt8_t
 
ªsu…
;

521 if(
ö
<=1)  1;

522 if(
ö
>7) in=6;

523 
ªsu…
=1;

524 
i
=0; i<
ö
; i++ )

525 
ªsu…
=result*2;

526  
ªsu…
;

527 
	}
}

530 
	$bmac_èsk_c⁄fig
 ()

532 
	`ƒk_èsk_£t_íåy_fun˘i⁄
–&
bmac_èsk
, 
bmac_nw_èsk
);

533 
	`ƒk_èsk_£t_°k
–&
bmac_èsk
, 
bmac_èsk_°ack
, 
BMAC_STACK_SIZE
);

534 
bmac_èsk
.
¥io
 = 
BMAC_TASK_PRIORITY
;

535 
bmac_èsk
.
Fú°A˘iv©i⁄
 = 
TRUE
;

536 
bmac_èsk
.
Ty≥
 = 
BASIC_TASK
;

537 
bmac_èsk
.
SchTy≥
 = 
PREEMPTIVE
;

538 
bmac_èsk
.
≥riod
.
£cs
 = 0;

539 
bmac_èsk
.
≥riod
.
«no_£cs
 = 
BMAC_MIN_CHECK_RATE_MS
 * 
NANOS_PER_MS
;

540 
bmac_èsk
.
˝u_ª£rve
.
£cs
 = 10;

541 
bmac_èsk
.
˝u_ª£rve
.
«no_£cs
 = 0;

542 
bmac_èsk
.
off£t
.
£cs
 = 0;

543 
bmac_èsk
.
off£t
.
«no_£cs
 = 0;

544 #ifde‡
DEBUG


545 
	`¥ötf
( "bmacáctivate\r\n" );

547 
	`ƒk_a˘iv©e_èsk
 (&
bmac_èsk
);

548 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/bmac/bmac.h

27 #i‚de‡
_BMAC_H


28 
	#_BMAC_H


	)

29 
	~<ö˛ude.h
>

30 
	~<basic_rf.h
>

31 
	~<ƒk.h
>

60 
	#BMAC_STACK_SIZE
 128

	)

61 
	#BMAC_MIN_CHECK_RATE_MS
 20

	)

62 
	#BMAC_DEFAULT_CHECK_RATE_MS
 100

	)

63 
	#BMAC_TASK_PRIORITY
 20

	)

70 
öt8_t
 
bmac_í¸y±i⁄_£t_key
(
uöt8_t
 *
key
, uöt8_à
Àn
);

71 
öt8_t
 
bmac_í¸y±i⁄_íabÀ
();

72 
öt8_t
 
bmac_í¸y±i⁄_£t_˘r_cou¡î
(
uöt8_t
 *
cou¡î
, uöt8_à
Àn
);

73 
öt8_t
 
bmac_í¸y±i⁄_dißbÀ
();

74 
öt8_t
 
bmac_rx_pkt_is_í¸y±ed
();

76 
öt8_t
 
bmac_auto_ack_dißbÀ
();

77 
öt8_t
 
bmac_auto_ack_íabÀ
();

78 
öt8_t
 
bmac_addr_decode_dißbÀ
();

79 
öt8_t
 
bmac_addr_decode_íabÀ
();

80 
öt8_t
 
bmac_addr_decode_£t_my_mac
(
uöt16_t
 
my_mac
);

81 
öt8_t
 
bmac_addr_decode_de°_mac
(
uöt16_t
 
de°
);

83 
öt8_t
 
	gtx_ª£rve
;

84 
öt8_t
 
bmac_tx_ª£rve_£t
–
ƒk_time_t
 *
≥riod
, 
uöt16_t
 
pkts
 );

85 
uöt16_t
 
bmac_tx_ª£rve_gë
();

87 
ƒk_èsk_ty≥
 
	gbmac_èsk
;

88 
NRK_STK
 
	gbmac_èsk_°ack
[
BMAC_STACK_SIZE
];

89 
uöt8_t
 
	gcˇ_a˘ive
;

91 
ƒk_sig_t
 
	gbmac_rx_pkt_sig«l
;

92 
ƒk_sig_t
 
	gbmac_tx_pkt_d⁄e_sig«l
;

93 
ƒk_sig_t
 
	gbmac_íabÀ_sig«l
;

95 
RF_RX_INFO
 
	gbmac_rfRxInfo
;

96 
RF_TX_INFO
 
	gbmac_rfTxInfo
;

98 
bmac_íabÀ
();

99 
bmac_dißbÀ
();

101 
öt8_t
 
bmac_£t_rx_check_øã
(
ƒk_time_t
 
≥riod
);

102 
bmac_èsk_c⁄fig
 ();

103 
öt8_t
 
bmac_£t_ch™√l
(
uöt8_t
 
ch™
);

104 
öt8_t
 
bmac_£t_rf_powî
(
uöt8_t
 
powî
);

105 
öt8_t
 
bmac_tx_pkt
(
uöt8_t
 *
buf
, uöt8_à
Àn
);

106 
uöt8_t
 
_b_pow
(uöt8_à
ö
);

107 
ƒk_sig_t
 
bmac_gë_tx_d⁄e_sig«l
();

108 
ƒk_sig_t
 
bmac_gë_rx_pkt_sig«l
();

109 
öt8_t
 
bmac_tx_pkt_n⁄blockög
(
uöt8_t
 *
buf
, uöt8_à
Àn
);

111 
bmac_£t_cˇ_a˘ive
(
uöt8_t
 
a˘ive
);

112 
öt8_t
 
bmac_£t_cˇ_thªsh
(öt8_à
thªsh
);

113 
uöt8_t
 *
bmac_rx_pkt_gë
(uöt8_à*
Àn
, 
öt8_t
 *
rssi
);

114 
öt8_t
 
bmac_rx_pkt_ªady
();

115 
öt8_t
 
bmac_rx_pkt_ªÀa£
();

116 
öt8_t
 
bmac_waô_u¡û_rx_pkt
();

118 
öt8_t
 
bmac_°¨ãd
();

119 
öt8_t
 
bmac_öô
(
uöt8_t
 
ch™
);

121 
öt8_t
 
_bmac_ch™√l_check
();

122 
öt8_t
 
_bmac_rx
();

123 
öt8_t
 
_bmac_tx
();

124 
öt8_t
 
bmac_rx_pkt_£t_buf„r
(
uöt8_t
 *
buf
, uöt8_à
size
);

	@/home/gopikannan/Downloads/nano-RK/src/net/dsr/dsr.c

26 
	~<d§.h
>

27 
DSR_PKT_INFO
 
	grxtx_pkt
;

28 
DSR_PKT_INFO
 
	gutû_pkt
;

29 
ƒk_time_t
 
	gd§_timeout_timî
;

30 
uöt8_t
 
	gd§_§c_rouã_èbÀ
[
MAX_MAC_ADDR
];

31 
uöt8_t
 
	gd§_§c_rouã_∑th
[
MAX_ROUTE
][
MAX_PATH_LEN
];

32 
uöt8_t
 
	gd§_§c_l⁄g_h›
[
MAX_ROUTE
];

33 
uöt8_t
 
	gd§_rouã_‰eq
[
MAX_ROUTE
];

34 
uöt8_t
 
	gd§_utû_de°
;

35 
uöt8_t
 
	gd§_utû_rouã
[
MAX_ROUTE
];

37 
uöt8_t
 
	g_NW_LAYER_REL_TIME
;

38 
uöt8_t
 
	g_DSR_OP_MODE
;

39 
uöt8_t
 
	g_nw_rouã_˙t
;

40 
uöt8_t
 
	g_cuº_h›_˙t
;

42 
uöt8_t
 
	$d§_add_∑th
(
uöt8_t
 *
∑th
)

44 
uöt8_t
 
i
;

45 
uöt8_t
 
u£d
;

46 
uöt8_t
 
Àa°
;

47 
uöt8_t
 
ﬁdmac
;

48 
Àa°
=0;

49 if(
_nw_rouã_˙t
!=
MAX_ROUTE
)

51 
i
=0;i<
_nw_rouã_˙t
;i++)

53 
d§_§c_rouã_∑th
[
_nw_rouã_˙t
][
i
]=
∑th
[i];

54 
d§_§c_rouã_èbÀ
[
∑th
[
i
]]=
_nw_rouã_˙t
;

56 
_nw_rouã_˙t
++;

57  (
_nw_rouã_˙t
-1);

61 
i
=0;i<
MAX_ROUTE
;i++)

62 if(
d§_rouã_‰eq
[
i
] <=
Àa°
)

63 
u£d
=
i
;

64 
i
=0;i<
MAX_ROUTE
;i++)

66 
ﬁdmac
=
d§_§c_rouã_∑th
[
u£d
][
i
];

67 
d§_§c_rouã_èbÀ
[
ﬁdmac
]=0;

68 
d§_§c_rouã_èbÀ
[
∑th
[
i
]]=
u£d
;

69 
d§_§c_rouã_∑th
[
u£d
][
i
]=
∑th
[i];

71  
u£d
;

74 
	}
}

76 
uöt8_t
 
	$d§_bridge_èbÀ
(
uöt8_t
 
bef‹e
,uöt8_à
a·î
)

80 
d§_§c_l⁄g_h›
[
a·î
]=
bef‹e
;

84 
	}
}

85 
uöt8_t
 * 
	$d§_gë_∑th
(
uöt8_t
 
mac
)

87 
uöt8_t
 
∑th_addr
;

88 
∑th_addr
=
d§_§c_rouã_èbÀ
[
mac
];

89 if(
∑th_addr
!=0)

91  
d§_§c_rouã_∑th
[
∑th_addr
];

93  
NULL
;

94 
	}
}

95 
uöt8_t
 
	$d§_∑th_exi°
(
uöt8_t
 
mac
)

97 
uöt8_t
 
∑th_addr
;

98 
∑th_addr
=
d§_§c_rouã_èbÀ
[
mac
];

99  
∑th_addr
;

100 
	}
}

101 
uöt8_t
 
	$d§_ªque°_∑th
()

103 
utû_pkt
.
ty≥
=
ROUTE_REQUEST
;

104 
utû_pkt
.
Àn
=
_cuº_h›_˙t
;

105 
utû_pkt
.
§c_˙t
=0;

106 
utû_pkt
.
§c_rouã
=&
d§_utû_de°
;

107 
utû_pkt
.
∑ylﬂd
=
d§_utû_rouã
;

109 
	`bmac_tx_∑ckë
((
uöt8_t
 *)&
utû_pkt
,(
DSR_PKT_INFO
)+
MAX_ROUTE
+1);

111 
	}
}

113 
	$_d§_tx_∑ckë
(
uöt8_t
 
de°
,uöt8_t* 
∑ylﬂd
,uöt8_à
Àn
)

116 
uöt8_t
 
∑th_addr
;

117 
∑th_addr
=
d§_§c_rouã_èbÀ
[
de°
];

118 
rxtx_pkt
.
§c_˙t
=0;

119 
rxtx_pkt
.
Àn
=len;

120 
rxtx_pkt
.
§c_rouã
=
d§_§c_rouã_∑th
[
∑th_addr
];

121 
rxtx_pkt
.
∑ylﬂd
=payload;

122 
rxtx_pkt
.
ty≥
=
DATA_PACKET
;

123 
i
=0;i<
MAX_ROUTE
;i++)

124 if(
d§_§c_rouã_∑th
[
∑th_addr
][
i
]==
de°
)

125 
rxtx_pkt
.
de°_˙t
=
i
;

126 
	`bmac_tx_∑ckë
((
uöt8_t
 *)&
rxtx_pkt
,
Àn
+(
DSR_PKT_INFO
));

127 
	}
}

128 
	$d§_øã_adju°
(
uöt8_t
 
ö¸ó£
)

130 if(!
ö¸ó£
)

132 
d§_timeout_timî
.
«no_£cs
=
NANOS_PER_MS
 * 500;

133 
d§_timeout_timî
.
£cs
=0;

134 
_cuº_h›_˙t
=1;

135 
	`ƒk_£t_èsk_timeout
(
d§_timeout_timî
);

139 if(
_cuº_h›_˙t
%2==0)

140 
d§_timeout_timî
.
«no_£cs
+=(2*d§_timeout_timî.«no_£cs)*–
_cuº_h›_˙t
-1 );

142 
d§_timeout_timî
.
«no_£cs
+=(2*dsr_timeout_timer.nano_secs);

143 
	`ƒk_£t_èsk_timeout
(
d§_timeout_timî
);

146 
	}
}

148 
	$d§_tx_∑ckë
(
uöt8_t
 
de°
,uöt8_t*
∑ylﬂd
,uöt8_à
Àn
)

150 
RF_RX_INFO
 *
pkt
;

151 
DSR_PKT_INFO
 *
d§_pkt
;

152 
uöt8_t
 
§c_rouã
[
MAX_PATH_LEN
];

153 
öt8_t
 
i
;

154 
uöt8_t
 
j
;

155 
uöt8_t
 
rssi
;

156 
uöt32_t
 
mask
;

157 if(
	`d§_∑th_exi°
(
de°
))

159 
	`_d§_tx_∑ckë
(
de°
,
∑ylﬂd
,
Àn
);

160 
	`ƒk_evít_sig«l
(
	`SIG
(
EVENT_DSR_PKT_TX
));

165 
d§_utû_de°
=
de°
;

166 
	`¥ötf
("path doesn'tÉxist\r\n");

167 !
	`d§_∑th_exi°
(
de°
)||
_cuº_h›_˙t
!=
DSR_MAX_HOP_COUNT
)

169 
	`d§_ªque°_∑th
(
de°
);

170 
mask
=
	`ƒk_evít_waô
(
	`SIG
(
BMAC_RX_PKT_EVENT
)|SIG(
TASK_TIMEOUT_EVENT
));

171 if(
mask
==
TASK_TIMEOUT_EVENT
)

173 if(
_cuº_h›_˙t
==
DSR_MAX_HOP_COUNT
)

175 
	`d§_øã_adju°
(0);

176 
	`ƒk_evít_sig«l
(
	`SIG
(
DSR_PACKET_TIMEOUT
));

179 
	`d§_øã_adju°
(1);

183 
pkt
=(
RF_RX_INFO
*)
	`bmac_rx_pkt_gë
(&
Àn
,&
rssi
);

184 
	`¥ötf
("thêwr⁄gÜígthándÑssi(%i,%i)\r\n",
Àn
,
rssi
);

185 if(
pkt
!=
NULL
)

187 
d§_pkt
=(
DSR_PKT_INFO
*)
pkt
->
pPaylﬂd
;

188 if(
d§_pkt
->
ty≥
==
ROUTE_RETURN
)

190 
i
=
d§_pkt
->
§c_˙t
-1;i>=0;i--)

192 
§c_rouã
[
j
]=
d§_pkt
->§c_rouã[
i
];

193 
j
++;

195 
	`d§_add_∑th
(
§c_rouã
);

196 
	`bmac_rx_pkt_ªÀa£
();

197 
	`_d§_tx_∑ckë
(
de°
,
∑ylﬂd
,
Àn
);

198 
	`ƒk_evít_sig«l
(
	`SIG
(
EVENT_DSR_PKT_TX
));

199 
	`d§_øã_adju°
(0);

207 
	}
}

209 
DSR_PKT_INFO
 * 
	$d§_rx_pkt
()

211 
uöt8_t
 
Àn
;

212 
uöt8_t
 
rssi
;

213 
RF_RX_INFO
 *
pkt
;

214 
	`ƒk_evít_waô
(
	`SIG
(
EVENT_DSR_PKT_RX
));

215 
pkt
=(
RF_RX_INFO
*)
	`bmac_rx_pkt_gë
(&
Àn
,&
rssi
);

216 
	`bmac_rx_pkt_ªÀa£
();

217  (
DSR_PKT_INFO
*)
pkt
->
pPaylﬂd
;

219 
	}
}

220 
	$d§_upd©e_˛i°
()

223 
uöt8_t
 
i
;

224 
i
=0;i<
MAX_ROUTE
;i++)

225 
d§_rouã_‰eq
[
i
]=0;

228 
	}
}

229 
	$d§_√tw‹k_èsk
()

231 
uöt32_t
 
mask
;

232 
uöt8_t
 
Àn
;

233 
uöt8_t
 
rssi
;

234 
öt8_t
 
i
;

235 
uöt8_t
 
j
;

236 
RF_RX_INFO
 *
pkt
;

237 
DSR_PKT_INFO
 *
d§_pkt
;

238 
uöt8_t
 
∑th
[
MAX_ROUTE
];

239 
	`¥ötf
("networkÅask started\r\n");

240 
_cuº_h›_˙t
++;

241 
mask
=
	`ƒk_evít_waô
(
	`SIG
(
BMAC_RX_PKT_EVENT
));

242 
	`¥ötf
("inÇwÅask\r\n");

243 
pkt
=(
RF_RX_INFO
*)
	`bmac_rx_pkt_gë
(&
Àn
,&
rssi
);

245 
d§_pkt
=(
DSR_PKT_INFO
*)
pkt
->
pPaylﬂd
;

246 if(
d§_pkt
->
ty≥
==
DATA_PACKET
)

247 if(
d§_pkt
->
§c_rouã
[d§_pkt->
§c_˙t
]==
NODE_ADDR
)

249 if(
d§_pkt
->
de°_˙t
==d§_pkt->
§c_˙t
)

250 
	`ƒk_evít_sig«l
(
	`SIG
(
EVENT_DSR_PKT_RX
));

253 
d§_pkt
->
§c_˙t
++;

254 
	`bmac_tx_∑ckë
(
pkt
->
pPaylﬂd
,pkt->
Àngth
);

257 if(
d§_pkt
->
ty≥
==
ROUTE_REQUEST
)

259 if(
d§_pkt
->
de°_˙t
>0)

261 if(
	`d§_∑th_exi°
(
d§_pkt
->
§c_rouã
[0]))

263 
j
=0;

264 
i
=
d§_pkt
->
§c_˙t
;i>-1;i--)

267 
∑th
[
j
]=
d§_pkt
->
∑ylﬂd
[
i
];

269 
i
=
j
+1;i<
MAX_ROUTE
;i++)

271 
∑th
[
i
]
d§_§c_rouã_∑th
[
d§_§c_rouã_èbÀ
[
d§_pkt
->
§c_rouã
[0]]][i];

272 if(
∑th
[
i
]==
d§_pkt
->
§c_rouã
[0])

275 
d§_pkt
->
§c_rouã
=
∑th
;

276 
d§_pkt
->
ty≥
=
ROUTE_RETURN
;

277 
d§_pkt
->
§c_˙t
=0;

278 
	`bmac_tx_∑ckë
(
pkt
->
pPaylﬂd
,pkt->
Àngth
);

282 
d§_pkt
->
∑ylﬂd
[d§_pkt->
§c_˙t
]=
NODE_ADDR
;

283 
d§_pkt
->
§c_˙t
++;

284 
d§_pkt
->
de°_˙t
--;

285 
d§_pkt
->
ty≥
=
ROUTE_RETURN
;

286 
	`bmac_tx_∑ckë
(
pkt
->
pPaylﬂd
,pkt->
Àngth
+
MAX_ROUTE
+16);

289 if(
d§_pkt
->
ty≥
==
ROUTE_RETURN
)

291 if(
d§_pkt
->
§c_rouã
[d§_pkt->
§c_˙t
]!=
NODE_ADDR
)

293 
d§_pkt
->
§c_˙t
++;

294 
	`bmac_tx_∑ckë
(
pkt
->
pPaylﬂd
,pkt->
Àngth
+
MAX_ROUTE
+16);

299 
	}
}

300 
	$d§_èsk_c⁄fig
()

302 
d§_èsk
.
èsk
 = 
d§_√tw‹k_èsk
;

303 
d§_èsk
.
Ptos
 = (*Ë&
d§_èsk_°ack
[
DSR_STACK_SIZE
-1];

304 
d§_èsk
.
Pbos
 = (*Ë&
d§_èsk_°ack
[0];

305 
d§_èsk
.
¥io
 = 19;

306 
d§_èsk
.
Fú°A˘iv©i⁄
 = 
TRUE
;

307 
d§_èsk
.
Ty≥
 = 
BASIC_TASK
;

308 
d§_èsk
.
SchTy≥
 = 
PREEMPTIVE
;

309 
d§_èsk
.
≥riod
.
£cs
 = 0;

310 
d§_èsk
.
≥riod
.
«no_£cs
 = 175 * 
NANOS_PER_MS
;

311 
d§_èsk
.
˝u_ª£rve
.
£cs
 = 15;

312 
d§_èsk
.
˝u_ª£rve
.
«no_£cs
 = 0;

313 
d§_èsk
.
off£t
.
£cs
 = 0;

314 
d§_èsk
.
off£t
.
«no_£cs
 = 0;

315 
	`¥ötf
( "dsráctivateÅask\r\n" );

316 
	`ƒk_a˘iv©e_èsk
 (&
d§_èsk
);

317 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/dsr/dsr.h

27 #i‚de‡
__DSR_H_


28 
	#__DSR_H_


	)

29 
	~<°dio.h
>

30 
	~<ƒk_cfg.h
>

31 
	~<ƒk_time.h
>

32 
	~<ƒk_evíts.h
>

33 
	~<bmac.h
>

34 
	~<ö˛ude.h
>

36 
	#EVENT_DSR_PKT_RX
 14

	)

37 
	#EVENT_DSR_PKT_TX
 13

	)

38 
	#DSR_PATH_FOUND_EVENT
 12

	)

40 
	#DSR_PACKET_TIMEOUT
 11

	)

41 
	#DSR_MAX_HOP_COUNT
 10

	)

42 
	#MAX_ROUTE
 16

	)

43 
	#MAX_PATH_LEN
 16

	)

44 
	#MAX_MAC_ADDR
 128

	)

45 
	#TABLE_CLEAN_TIME
 10

	)

46 
	#ROUTE_REQUEST
 1

	)

47 
	#ROUTE_RETURN
 2

	)

48 
	#DATA_PACKET
 3

	)

49 
	#DSR_STACK_SIZE
 128

	)

50 
ƒk_èsk_ty≥
 
	gd§_èsk
;

51 
NRK_STK
 
	gd§_èsk_°ack
[
DSR_STACK_SIZE
];

53 
d§_√tw‹k_èsk
();

54 
d§_èsk_c⁄fig
();

55 
uöt8_t
 
d§_add_∑th
(uöt8_à*
rouã
);

56 
uöt8_t
* 
d§_gë_∑th
(uöt8_à
mac
);

58 
d§_øã_adju°
(
uöt8_t
 
ö¸ó£
);

60 
_d§_tx_∑ckë
(
uöt8_t
 
de°
,uöt8_t* 
∑ylﬂd
,uöt8_à
Àn
);

61 
d§_tx_∑ckë
(
uöt8_t
 
de°
,uöt8_t* 
∑ylﬂd
,uöt8_à
Àn
);

62 
uöt8_t
 
d§_ªque°_∑th
();

64 
	sDSR_PKT


66 
uöt8_t
 *
	m§c_rouã
;

67 
uöt8_t
 
	m§c_˙t
;

68 
uöt8_t
 
	mde°_˙t
;

69 
uöt8_t
 
	mty≥
;

70 
uöt8_t
 
	mÀn
;

71 
uöt8_t
 *
	m∑ylﬂd
;

72 }
	tDSR_PKT_INFO
;

73 
DSR_PKT_INFO
 * 
d§_rx_pkt
();

	@/home/gopikannan/Downloads/nano-RK/src/net/neighbor_list/neighbor_list.c

1 
	~"√ighb‹_li°.h
"

2 
	~<ƒk_îr‹.h
>

3 
	~<ƒk_time.h
>

5 
ƒk_time_t
 
	gœ°_time
;

6 
ƒk_time_t
 
	gcuºít_time
;

7 
ƒk_time_t
 
	gñ≠£d_time
;

9 
öt8_t
 
	$√ighb‹_li°_öô
()

11 
uöt8_t
 
i
,
j
;

13 
i
=0; i<
NEIGHBOR_LIST_SIZE
; i++ )

15 
√ighb‹_èbÀ
[
i
].
Êags
=0;

16 
√ighb‹_èbÀ
[
i
].
mac
=0;

17 
√ighb‹_èbÀ
[
i
].
rssi
=0;

18 
√ighb‹_èbÀ
[
i
].
âl
=0;

20 
	`ƒk_time_gë
(&
œ°_time
);

21 
	}
}

23 
öt8_t
 
	$√ighb‹_li°_add
–
uöt16_t
 
mac
, 
öt8_t
 
rssi
, uöt16_à
âl
)

25 
uöt8_t
 
i
;

26 
öt8_t
 
found
;

27 
found
=-1;

28 
	`√ighb‹_li°_âl_upd©e
();

29 
i
=0; i<
NEIGHBOR_LIST_SIZE
; i++ )

31 if(
√ighb‹_èbÀ
[
i
].
mac
==mac)

33 
√ighb‹_èbÀ
[
i
].
mac
=mac;

34 
√ighb‹_èbÀ
[
i
].
âl
=ttl;

35 
√ighb‹_èbÀ
[
i
].
rssi
=rssi;

36 
√ighb‹_èbÀ
[
i
].
Êags
|=
VALID_MASK
;

37  
NRK_OK
;

39 if(
√ighb‹_èbÀ
[
i
].
âl
==0 && 
found
==-1) found=i;

42 if(
found
>=0)

44 
√ighb‹_èbÀ
[
found
].
mac
=mac;

45 
√ighb‹_èbÀ
[
found
].
âl
=ttl;

46 
√ighb‹_èbÀ
[
found
].
rssi
=rssi;

47 
√ighb‹_èbÀ
[
found
].
Êags
|=
VALID_MASK
;

48  
NRK_OK
;

50  
NRK_ERROR
;

52 
	}
}

54 
	$√ighb‹_li°_âl_upd©e
()

56 
uöt8_t
 
i
;

57 
öt8_t
 
v
;

58 
	`ƒk_time_gë
(&
cuºít_time
);

59 
v
=
	`ƒk_time_sub
(&
ñ≠£d_time
, 
cuºít_time
, 
œ°_time
);

60 
œ°_time
.
£cs
=
cuºít_time
.secs;

61 
œ°_time
.
«no_£cs
=
cuºít_time
.nano_secs;

62 if(
v
==
NRK_OK
)

64 
i
=0; i<
NEIGHBOR_LIST_SIZE
; i++ )

66 if(
√ighb‹_èbÀ
[
i
].
âl
!=0)

70 if(
√ighb‹_èbÀ
[
i
].
âl
>
ñ≠£d_time
.
£cs
)

71 
√ighb‹_èbÀ
[
i
].
âl
-=
ñ≠£d_time
.
£cs
;

74 
√ighb‹_èbÀ
[
i
].
Êags
=0;

75 
√ighb‹_èbÀ
[
i
].
âl
=0;

76 
√ighb‹_èbÀ
[
i
].
mac
=0;

77 
√ighb‹_èbÀ
[
i
].
rssi
=0;

82 
	}
}

94 
öt8_t
 
	$√ighb‹_li°_gë_√xt_vÆid_ödex
(
uöt8_t
 
°¨t_ödex
)

96 
uöt8_t
 
i
;

97 if(
°¨t_ödex
>=
NEIGHBOR_LIST_SIZE
 )  
NRK_ERROR
;

98 
i
=
°¨t_ödex
; i<
NEIGHBOR_LIST_SIZE
; i++ )

99 if((
√ighb‹_èbÀ
[
i
].
Êags
 & 
VALID_MASK
) !=0 )

100  
i
;

101  
NRK_ERROR
;

102 
	}
}

104 
uöt16_t
 
	$√ighb‹_li°_gë_mac
(
öt8_t
 
ödex
)

106 if(
ödex
>=
NEIGHBOR_LIST_SIZE
)  0;

107  
√ighb‹_èbÀ
[
ödex
].
mac
;

109 
	}
}

111 
öt8_t
 
	$√ighb‹_li°_gë_rssi
(
öt8_t
 
ödex
)

113 if(
ödex
>=
NEIGHBOR_LIST_SIZE
)  0;

114  
√ighb‹_èbÀ
[
ödex
].
rssi
;

115 
	}
}

117 
uöt16_t
 
	$√ighb‹_li°_gë_âl
(
öt8_t
 
ödex
)

119 if(
ödex
>=
NEIGHBOR_LIST_SIZE
)  0;

120  
√ighb‹_èbÀ
[
ödex
].
âl
;

121 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/neighbor_list/neighbor_list.h

1 #i‚de‡
_NEIGHBOR_LIST_H_


2 
	#_NEIGHBOR_LIST_H_


	)

4 
	~<ƒk.h
>

6 #i‚de‡
NEIGHBOR_LIST_SIZE


8 
	#NEIGHBOR_LIST_SIZE
 5

	)

11 
	#VALID_MASK
 0x01

	)

14 
	s√ighb‹_ty≥
 {

15 
uöt16_t
 
	mmac
;

16 
uöt16_t
 
	mâl
;

17 
öt8_t
 
	mrssi
;

18 
öt8_t
 
	mÊags
;

19 } 
	t√ighb‹_li°_t
;

21 
√ighb‹_li°_t
 
	g√ighb‹_èbÀ
[
NEIGHBOR_LIST_SIZE
];

23 
öt8_t
 
√ighb‹_li°_öô
();

24 
√ighb‹_li°_âl_upd©e
();

25 
öt8_t
 
√ighb‹_li°_add
–
uöt16_t
 
mac
, i¡8_à
rssi
, uöt16_à
âl
);

28 
öt8_t
 
√ighb‹_li°_gë_√xt_vÆid_ödex
(
uöt8_t
 
°¨t_ödex
);

29 
uöt16_t
 
√ighb‹_li°_gë_mac
(
öt8_t
 
ödex
);

30 
öt8_t
 
√ighb‹_li°_gë_rssi
(öt8_à
ödex
);

31 
uöt16_t
 
√ighb‹_li°_gë_âl
(
öt8_t
 
ödex
);

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/BufferManager.c

30 
	~<°döt.h
>

31 
	~<ƒk.h
>

32 
	~<ö˛ude.h
>

33 
	~<ulib.h
>

34 
	~<°dio.h
>

35 
	~<hÆ.h
>

36 
	~<ƒk_îr‹.h
>

38 
	~"Buf„rM™agî.h
"

39 
	~"NWEº‹Codes.h
"

40 
	~"Debug.h
"

44 
P‹t
 
p‹ts
[];

45 
¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *);

48 
¥öt_pkt_hódî
();

52 
Re˚iveBuf„rUDP
 
	grx_buf_udp
[
MAX_RX_QUEUE_SIZE
];

53 
öt8_t
 
	gnum_bufs_‰ì
;

55 
TønsmôBuf„r
 
	gtx_buf
[
MAX_TX_QUEUE_SIZE
];

57 
Re˚iveBuf„rM™agî
 
	grx_buf_mgr
[
NUM_PORTS
];

59 
TønsmôBuf„rM™agî
 
	gtx_buf_mgr
;

61 
uöt32_t
 
	gex˚ssPﬁicySëtögs
;

64 
ƒk_£m_t
 *
	gbm_£m
;

67 
	$öôüli£_nw_∑ckë
(
NW_Packë
 *
pkt
)

69 
öt8_t
 
i
;

71 
pkt
 -> 
§c
 = 0;

72 
pkt
 -> 
de°
 = 0;

73 
pkt
 -> 
âl
 = 0;

74 
pkt
 -> 
ty≥
 = 0xFF;

75 
pkt
 -> 
Àngth
 = 0;

76 
pkt
 -> 
¥io
 = 0;

78 
i
 = 0; i < 
MAX_NETWORK_PAYLOAD
; i++)

79 (
pkt
 -> 
d©a
)[
i
] = 0;

82 
	}
}

85 
ölöe
 
	$íãr_¸
(
ƒk_£m_t
 *
£m
, 
öt8_t
 
‚o
)

87 if–
	`ƒk_£m_≥nd
(
£m
Ë=
NRK_ERROR
 )

89 
‚o
)

93 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on initialise_transport_layer_udp()\r\n"));

97 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_next_available_socket()\r\n"));

101 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on create_socket()\r\n"));

105 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_next_available_port()\r\n"));

109 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on check_port_available()\r\n"));

113 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onássign_port()\r\n"));

117 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑelease_port()\r\n"));

121 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on bind()\r\n"));

125 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_rx_queue_size()\r\n"));

129 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on set_rx_queue_size()\r\n"));

133 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑelease_buffer()\r\n"));

137 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on close_socket()\r\n"));

141 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on is_port_associated()\r\n"));

145 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on send()\r\n"));

149 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on set_timeout()\r\n"));

153 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑeceive()\r\n"));

157 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on check_receive_queue()\r\n"));

161 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on wait_until_send_done()\r\n"));

166 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onádd_neighbor()\r\n"));

170 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on shouldIMultihop()\r\n"));

174 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on multihop()\r\n"));

178 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑoute_addr()\r\n"));

181 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑoute_packet()\r\n"));

185 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on sendToGateway()\r\n"));

189 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖkt_type()\r\n"));

193 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÅl_type()\r\n"));

197 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÇw_ctrl_type()\r\n"));

201 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖrocess_app_pkt()\r\n"));

205 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖrocess_nw_ctrl_pkt()\r\n"));

209 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖrocess_other_pkt()\r\n"));

213 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on build_Msg_Hello()\r\n"));

217 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on build_Msg_NgbList()\r\n"));

221 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÇl_rx_task()\r\n"));

225 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÇl_tx_task()\r\n"));

229 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on create_network_layer_tasks()\r\n"));

233 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on initialise_network_layer()\r\n"));

238 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on initialise_buffer_manager()\r\n"));

242 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on is_excess_policy_valid()\r\n"));

246 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on set_excess_policy()\r\n"));

250 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_excess_policy()\r\n"));

254 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_index_unallocated_rx_buf()\r\n"));

258 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_rx_pq()\r\n"));

262 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_rx_pq()\r\n"));

266 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_rx_fq()\r\n"));

270 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_rx_fq()\r\n"));

274 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_tx_aq()\r\n"));

278 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_tx_aq()\r\n"));

282 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_tx_fq()\r\n"));

286 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_tx_fq()\r\n"));

290 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_in_process_buf_count()\r\n"));

296 
	`ƒk_k¥ötf
(
	`PSTR
("enter_cr(): Unknown functionÇumber\r\n"));

302 
	}
}

305 
ölöe
 
	$Àave_¸
(
ƒk_£m_t
 *
£m
, 
öt8_t
 
‚o
)

307 if–
	`ƒk_£m_po°
(
£m
Ë=
NRK_ERROR
 )

309 
‚o
)

313 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on initialise_transport_layer_udp()\r\n"));

317 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_next_available_socket()\r\n"));

321 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on create_socket()\r\n"));

325 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_next_available_port()\r\n"));

329 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on check_port_available()\r\n"));

333 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onássign_port()\r\n"));

337 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑelease_port()\r\n"));

341 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on bind()\r\n"));

345 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_rx_queue_size()\r\n"));

349 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on set_rx_queue_size()\r\n"));

353 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑelease_buffer()\r\n"));

357 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on close_socket()\r\n"));

361 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on is_port_associated()\r\n"));

365 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on send()\r\n"));

371 
uöt32_t
 
i
;

372 
	`ƒk_öt_dißbÀ
();

373 
i
 = 0; i < 30000000L; i++)

375 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on set_timeout()\r\n"));

376 
	`¥ötf
("%d ", 
	`ƒk_î∫o_gë
());

382 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑeceive()\r\n"));

386 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on check_receive_queue()\r\n"));

390 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on wait_until_send_done()\r\n"));

395 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onádd_neighbor()\r\n"));

399 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on shouldIMultihop()\r\n"));

403 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on multihop()\r\n"));

407 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑoute_addr()\r\n"));

410 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑoute_packet()\r\n"));

414 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on sendToGateway()\r\n"));

418 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖkt_type()\r\n"));

422 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÅl_type()\r\n"));

426 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÇw_ctrl_type()\r\n"));

430 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖrocess_app_pkt()\r\n"));

434 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖrocess_nw_ctrl_pkt()\r\n"));

438 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖrocess_other_pkt()\r\n"));

442 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on build_Msg_Hello()\r\n"));

446 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on build_Msg_NgbList()\r\n"));

450 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÇl_rx_task()\r\n"));

454 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÇl_tx_task()\r\n"));

458 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on create_network_layer_tasks()\r\n"));

462 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on initialise_network_layer()\r\n"));

467 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on initialise_buffer_manager()\r\n"));

471 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on is_excess_policy_valid()\r\n"));

475 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on set_excess_policy()\r\n"));

479 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_excess_policy()\r\n"));

483 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_index_unallocated_rx_buf()\r\n"));

487 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_rx_pq()\r\n"));

491 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_rx_pq()\r\n"));

495 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_rx_fq()\r\n"));

499 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_rx_fq()\r\n"));

503 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_tx_aq()\r\n"));

507 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_tx_aq()\r\n"));

511 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_tx_fq()\r\n"));

515 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_tx_fq()\r\n"));

519 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_in_process_buf_count()\r\n"));

525 
	`ƒk_k¥ötf
(
	`PSTR
("leave_cr(): Unknown functionÇumber\r\n"));

531 
	}
}

533 
	$öôüli£_buf„r_m™agî
()

535 
öt8_t
 
i
;

538 
i
 = 0; i < 
MAX_RX_QUEUE_SIZE
; i++)

540 
rx_buf_udp
[
i
].
°©us
 = 
UNALLOCATED
;

541 
rx_buf_udp
[
i
].
√xt
 = 
NULL
;

543 
num_bufs_‰ì
 = 
MAX_RX_QUEUE_SIZE
;

546 
i
 = 0; i < 
NUM_PORTS
; i++)

548 
rx_buf_mgr
[
i
].
pid
 = 
INVALID_PID
;

549 
rx_buf_mgr
[
i
].
pödex
 = -1;

550 
rx_buf_mgr
[
i
].
hód_fq
 = 
NULL
;

551 
rx_buf_mgr
[
i
].
èû_fq
 = 
NULL
;

552 
rx_buf_mgr
[
i
].
hód_pq
 = 
NULL
;

553 
rx_buf_mgr
[
i
].
èû_pq
 = 
NULL
;

554 
rx_buf_mgr
[
i
].
cou¡TŸÆ
 = 0;

555 
rx_buf_mgr
[
i
].
cou¡Fªe
 = 0;

559 
tx_buf_mgr
.
hód_fq
 = 
NULL
;

560 
tx_buf_mgr
.
èû_fq
 = 
NULL
;

561 
tx_buf_mgr
.
hód_aq
 = 
NULL
;

562 
tx_buf_mgr
.
èû_aq
 = 
NULL
;

563 
tx_buf_mgr
.
cou¡_fq
 = 0;

564 
tx_buf_mgr
.
cou¡_aq
 = 0;

567 
i
 = 0; i < 
MAX_TX_QUEUE_SIZE
; i++)

569 
tx_buf
[
i
].
°©us
 = 
EMPTY
;

570 
tx_buf
[
i
].
√xt
 = 
NULL
;

571 
	`öôüli£_nw_∑ckë
–&(
tx_buf
[
i
].
pkt
) );

572 
	`ö£π_tx_fq
–&(
tx_buf
[
i
]) );

576 
ex˚ssPﬁicySëtögs
 = 0;

578 
bm_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

579 if(
bm_£m
 =
NULL
)

581 
	`ƒk_öt_dißbÀ
();

582 
	`ƒk_Àd_£t
(
RED_LED
);

584 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_buffer_manager(): Error creatingÅhe semaphore\r\n"));

587 if(
DEBUG_BM
 == 2)

589 
	`ƒk_k¥ötf
(
	`PSTR
("InitialÅx buffer\r\n"));

590 
	`¥öt_tx_buf„r
();

594 
	}
}

596 
ölöe
 
	$¥öt_tx_buf„r
()

598 
öt8_t
 
i
;

600 
	`ƒk_k¥ötf
(
	`PSTR
("Transmit Buffer: "));

601 if(
tx_buf_mgr
.
hód_fq
 =
NULL
)

602 
	`¥ötf
("-1 ");

604 
	`¥ötf
("%d ", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
hód_fq
));

606 if(
tx_buf_mgr
.
èû_fq
 =
NULL
)

607 
	`¥ötf
("-1 ");

609 
	`¥ötf
("%d ", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
èû_fq
));

611 if(
tx_buf_mgr
.
hód_aq
 =
NULL
)

612 
	`¥ötf
("-1 ");

614 
	`¥ötf
("%d ", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
hód_aq
));

616 if(
tx_buf_mgr
.
èû_aq
 =
NULL
)

617 
	`¥ötf
("-1\n");

619 
	`¥ötf
("%d\n", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
èû_aq
));

621 
i
 = 0; i < 
MAX_TX_QUEUE_SIZE
; i++)

622 
	`¥öt_pkt
(&(
tx_buf
[
i
].
pkt
));

625 
	}
}

627 
	$¥öt_rx_buf„rs
(
uöt8_t
 
p‹t
)

629 
öt8_t
 
rbm_ödex
;

630 
Re˚iveBuf„rUDP
 *
buf
;

632 
rbm_ödex
 = 
	`p‹t_to_rbm_ödex
(
p‹t
);

634 if(
DEBUG_BM
 == 0)

636 
	`ƒk_k¥ötf
(
	`PSTR
("BM:Ñbm_index = "));

637 
	`¥ötf
("%d\r\n", 
rbm_ödex
);

639 
	`ƒk_k¥ötf
(
	`PSTR
("Port queue:\r\n"));

640 
buf
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

641 
buf
 !
NULL
)

643 
	`¥ötf
("%d ", 
buf
 -> 
§cAddr
);

644 
	`¥öt_£g
–&(
buf
 -> 
£g
) );

649 
	}
}

651 
ölöe
 
öt8_t
 
	$c⁄vît_±r_to_ödex
(
TønsmôBuf„r
 *
±r
)

653 
öt8_t
 
i
;

655 
i
 = 0; i < 
MAX_TX_QUEUE_SIZE
; i++)

656 if(
±r
 =&
tx_buf
[
i
])

659  
i
;

660 
	}
}

662 
ölöe
 
öt8_t
 
	$is_ex˚ss_pﬁicy_vÆid
(
öt8_t
 
¥ef
)

664 
¥ef
)

666 
OVERWRITE
:

667 
DROP
:

668  
TRUE
;

670  
FALSE
;

671 
	}
}

673 
öt8_t
 
	$£t_ex˚ss_pﬁicy
(
öt8_t
 
¥io
, i¡8_à
¥ef
)

675 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
 || 
	`is_ex˚ss_pﬁicy_vÆid
(
¥ef
Ë=
FALSE
)

677 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

678  
NRK_ERROR
;

681 
	`íãr_¸
(
bm_£m
, 39);

683 if(
¥ef
 =
DROP
)

684 
ex˚ssPﬁicySëtögs
 |(
uöt32_t
)1 << 
¥io
;

686 
ex˚ssPﬁicySëtögs
 &~–(
uöt32_t
)1 << 
¥io
 );

688 
	`Àave_¸
(
bm_£m
, 39);

690  
NRK_OK
;

691 
	}
}

693 
öt8_t
 
	$gë_ex˚ss_pﬁicy
(
öt8_t
 
¥io
)

695 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
)

697 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

698  
NRK_ERROR
;

701 
	`íãr_¸
(
bm_£m
, 40);

704 if–((
ex˚ssPﬁicySëtögs
 >> 
¥io
Ë& ((
uöt32_t
)1)) == 0 )

706 
	`Àave_¸
(
bm_£m
, 40);

707  
OVERWRITE
;

710 
	`Àave_¸
(
bm_£m
, 40);

711  
DROP
;

712 
	}
}

714 
öt8_t
 
	$gë_ödex_u«Œoˇãd_rx_buf
()

716 
öt8_t
 
i
;

718 
i
 = 0; i < 
MAX_RX_QUEUE_SIZE
; i++)

719 if(
rx_buf_udp
[
i
].
°©us
 =
UNALLOCATED
)

720  
i
;

722  
NRK_ERROR
;

723 
	}
}

725 
ölöe
 
öt8_t
 
	$p‹t_to_rbm_ödex
(
uöt8_t
 
p‹t
)

727 
öt8_t
 
i
;

729 
i
 = 0; i < 
NUM_PORTS
; i++)

730 if(
rx_buf_mgr
[
i
].
pödex
 != -1)

731 if(
p‹ts
[
rx_buf_mgr
[
i
].
pödex
].
≤o
 =
p‹t
)

732  
i
;

735  
NRK_ERROR
;

736 
	}
}

738 
ölöe
 
öt8_t
 
	$p‹t_to_p‹t_ödex
(
uöt8_t
 
p‹t
)

740 
öt8_t
 
i
;

742 
i
 = 0; i < 
NUM_PORTS
; i++)

743 if(
p‹ts
[
i
].
≤o
 =
p‹t
)

744  
i
;

747  
NRK_ERROR
;

748 
	}
}

750 
	$ö£π_rx_pq
(
Tøn•‹t_Segmít_UDP
 *
£g
, 
öt8_t
 
¥io
, 
uöt16_t
 
addr
, i¡8_à
rssi
)

752 
öt8_t
 
rbm_ödex
;

753 
Re˚iveBuf„rUDP
 *
buf
, *
±r
, *
¥ev
;

755 
rbm_ödex
 = 
	`p‹t_to_rbm_ödex
(
£g
 -> 
de°P‹t
);

757 if(
DEBUG_BM
 == 2)

759 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): DestPort = "));

760 
	`¥ötf
("%d\r\n", 
£g
 -> 
de°P‹t
);

762 
buf
 = 
	`ªmove_rx_fq
(
rbm_ödex
, 
EMPTY
);

765 
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

766 
¥ev
 = 
NULL
;

769 
±r
 !
NULL
)

771 if(
±r
 -> 
¥io
 <Örio)

774 
¥ev
 = 
±r
;

775 
±r
 =Öå -> 
√xt
;

778 if(
DEBUG_BM
 == 2)

780 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): AfterÖtrÜoop\r\n"));

783 if(
buf
 !
NULL
)

785 if(
DEBUG_BM
 == 2)

787 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): There is space\r\n"));

791 
buf
 -> 
£g
 = *seg;

792 
buf
 -> 
°©us
 = 
FULL
;

793 
buf
 -> 
¥io
 =Örio;

794 
buf
 -> 
§cAddr
 = 
addr
;

795 
buf
 -> 
rssi
 =Ñssi;

796 
buf
 -> 
√xt
 = 
±r
;

799 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =
NULL
)

801 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =Ñx_buf_mgr[rbm_ödex].
èû_pq
 = 
buf
;

803 if(
¥ev
 =
NULL
)

804 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 = 
buf
;

807 
¥ev
 -> 
√xt
 = 
buf
;

808 if(
¥ev
 =
rx_buf_mgr
[
rbm_ödex
].
èû_pq
)

809 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 = 
buf
;

813 if(
DEBUG_BM
 == 2)

815 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): BeforeÑeturning (there is space)\r\n"));

826 if(
DEBUG_BM
 == 2)

828 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): No space\r\n"));

832 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =
NULL
)

834 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 != 0)

836 
	`ƒk_öt_dißbÀ
();

837 
	`ƒk_Àd_£t
(
RED_LED
);

839 
	`ƒk_k¥ötf
(
	`PSTR
("insert_rx_pq(): Bug found in implementation of countFree inÑx_buf_mgr\r\n"));

841 if(
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 !
NULL
)

843 
	`ƒk_öt_dißbÀ
();

844 
	`ƒk_Àd_£t
(
RED_LED
);

846 
	`ƒk_k¥ötf
(
	`PSTR
("insert_rx_pq(): Bug found in implementation ofÅail_pq inÑx_buf_mgr\r\n"));

849 if(
DEBUG_BM
 == 2)

851 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): BeforeÑeturning. No space butÖort queueálsoÉmpty\r\n"));

860 if(
DEBUG_BM
 == 2)

862 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Possibility ofÑeplacement\r\n"));

864 if–(
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 <Örio )

868 if(
DEBUG_BM
 == 2)

870 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 1\r\n"));

873 
Re˚iveBuf„rUDP
 *
qå
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

875 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =rx_buf_mgr[rbm_ödex].
èû_pq
)

878 if(
DEBUG_BM
 == 2)

880 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 2\r\n"));

882 
qå
 -> 
£g
 = *seg;

883 
qå
 -> 
¥io
 =Örio;

884 
qå
 -> 
§cAddr
 = 
addr
;

885 
qå
 -> 
rssi
 =Ñssi;

891 if(
DEBUG_BM
 == 2)

893 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Before qtrÜoop\r\n"));

896 
qå
 -> 
√xt
 !
rx_buf_mgr
[
rbm_ödex
].
èû_pq
)

897 
qå
 = qå -> 
√xt
;

899 if(
DEBUG_BM
 == 2)

901 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): After qtrÜoop\r\n"));

905 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
£g
 = *seg;

906 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 =Örio;

907 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
§cAddr
 = 
addr
;

908 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
rssi
 =Ñssi;

911 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
√xt
 = 
±r
;

912 if(
¥ev
 =
NULL
)

913 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =Ñx_buf_mgr[rbm_ödex].
èû_pq
;

915 
¥ev
 -> 
√xt
 = 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
;

917 
qå
 -> 
√xt
 = 
NULL
;

918 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 = 
qå
;

923 if–(
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 ==Örio )

926 if(
DEBUG_BM
 == 2)

928 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 3\r\n"));

931 if–((
ex˚ssPﬁicySëtögs
 >> 
¥io
Ë& ((
uöt32_t
)1)Ë=
OVERWRITE
)

933 if(
DEBUG_BM
 == 2)

935 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 4\r\n"));

938 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
£g
 = *seg;

939 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 =Örio;

940 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
§cAddr
 = 
addr
;

941 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
rssi
 =Ñssi;

947 if(
DEBUG_BM
 == 2)

949 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 5\r\n"));

956 if(
DEBUG_BM
 == 2)

958 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 6\r\n"));

964 if(
DEBUG_BM
 == 2)

966 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 7\r\n"));

969 
	}
}

971 
Re˚iveBuf„rUDP
* 
	$ªmove_rx_pq
(
öt8_t
 
rbm_ödex
)

974 
Re˚iveBuf„rUDP
 *
±r
;

976 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =
NULL
)

978  
NULL
;

981 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =rx_buf_mgr[rbm_ödex].
èû_pq
)

982 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 = 
NULL
;

984 
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

986 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =Ñx_buf_mgr[rbm_ödex].hód_pq -> 
√xt
;

988  
±r
;

989 
	}
}

992 
	$ö£π_rx_fq
(
Re˚iveBuf„rUDP
 *
buf
, 
öt8_t
 
rbm_ödex
, i¡8_à
°©us
)

995 if(
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =
NULL
)

997 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =Ñx_buf_mgr[rbm_ödex].
èû_fq
 = 
buf
;

998 
buf
 -> 
√xt
 = 
NULL
;

1002 
rx_buf_mgr
[
rbm_ödex
].
èû_fq
 -> 
√xt
 = 
buf
;

1003 
buf
 -> 
√xt
 = 
NULL
;

1004 
rx_buf_mgr
[
rbm_ödex
].
èû_fq
 = 
buf
;

1007 if(
°©us
 =
EMPTY
)

1009 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
++;

1010 
buf
 -> 
°©us
 = 
EMPTY
;

1014 
	}
}

1017 
Re˚iveBuf„rUDP
* 
	$ªmove_rx_fq
(
öt8_t
 
rbm_ödex
, i¡8_à
°©us
)

1020 
Re˚iveBuf„rUDP
 *
±r
;

1021 
Re˚iveBuf„rUDP
 *
¥ev
 = 
NULL
;

1023 if(
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =
NULL
)

1024  
NULL
;

1026 
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
;

1027 
±r
 !
NULL
)

1029 if(
°©us
 =
EMPTY
)

1031 if(
±r
 -> 
°©us
 =
EMPTY
)

1034 if(
±r
 -> 
°©us
 =
FULL
)

1036 
¥ev
 = 
±r
;

1037 
±r
 =Öå -> 
√xt
;

1039 if(
±r
 =
NULL
)

1040  
NULL
;

1042 if(
¥ev
 =
NULL
)

1044 if(
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =rx_buf_mgr[rbm_ödex].
èû_fq
)

1045 
rx_buf_mgr
[
rbm_ödex
].
èû_fq
 = 
NULL
;

1047 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =Ñx_buf_mgr[rbm_ödex].hód_fq -> 
√xt
;

1048 if(
°©us
 =
EMPTY
)

1049 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
--;

1050  
±r
;

1054 
¥ev
 -> 
√xt
 = 
±r
 ->Çext;

1055 if(
°©us
 =
EMPTY
)

1056 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
--;

1057  
±r
;

1058 
	}
}

1061 
öt8_t
 
	$ö£π_tx_aq
(
NW_Packë
 *
pkt
)

1063 
TønsmôBuf„r
 *
buf
 = 
	`ªmove_tx_fq
();

1064 
TønsmôBuf„r
 *
±r
;

1065 
TønsmôBuf„r
 *
¥ev
;

1067 if(
buf
 =
NULL
)

1069  
NRK_ERROR
;

1072 if(
tx_buf_mgr
.
hód_aq
 =
NULL
)

1075 
buf
 -> 
pkt
 = *pkt;

1076 
buf
 -> 
°©us
 = 
FULL
;

1077 
buf
 -> 
¥io
 = 
pkt
 ->Örio;

1078 
buf
 -> 
√xt
 = 
NULL
;

1080 
tx_buf_mgr
.
hód_aq
 =Åx_buf_mgr.
èû_aq
 = 
buf
;

1081 
tx_buf_mgr
.
cou¡_aq
++;

1082  
NRK_OK
;

1086 
±r
 = 
tx_buf_mgr
.
hód_aq
;

1087 
¥ev
 = 
NULL
;

1090 
±r
 !
NULL
)

1092 if(
±r
 -> 
¥io
 < 
pkt
 ->Örio)

1095 
¥ev
 = 
±r
;

1096 
±r
 =Öå -> 
√xt
;

1099 
buf
 -> 
pkt
 = *pkt;

1100 
buf
 -> 
°©us
 = 
FULL
;

1101 
buf
 -> 
¥io
 = 
pkt
 ->Örio;

1102 
buf
 -> 
√xt
 = 
±r
;

1104 if(
¥ev
 =
NULL
)

1105 
tx_buf_mgr
.
hód_aq
 = 
buf
;

1108 
¥ev
 -> 
√xt
 = 
buf
;

1109 if(
¥ev
 =
tx_buf_mgr
.
èû_aq
)

1110 
tx_buf_mgr
.
èû_aq
 = 
buf
;

1114 
tx_buf_mgr
.
cou¡_aq
++;

1116  
NRK_OK
;

1117 
	}
}

1120 
TønsmôBuf„r
* 
	$ªmove_tx_aq
()

1124 
TønsmôBuf„r
 *
±r
;

1126 if(
tx_buf_mgr
.
hód_aq
 =
NULL
)

1128  
NULL
;

1131 if(
tx_buf_mgr
.
hód_aq
 =tx_buf_mgr.
èû_aq
)

1132 
tx_buf_mgr
.
èû_aq
 = 
NULL
;

1134 
±r
 = 
tx_buf_mgr
.
hód_aq
;

1136 
tx_buf_mgr
.
hód_aq
 =Åx_buf_mgr.hód_aq -> 
√xt
;

1137 
tx_buf_mgr
.
cou¡_aq
--;

1139  
±r
;

1140 
	}
}

1142 
	$ö£π_tx_fq
(
TønsmôBuf„r
 *
buf
)

1146 if(
tx_buf_mgr
.
hód_fq
 =
NULL
)

1147 
tx_buf_mgr
.
hód_fq
 =Åx_buf_mgr.
èû_fq
 = 
buf
;

1150 
tx_buf_mgr
.
èû_fq
 -> 
√xt
 = 
buf
;

1151 
tx_buf_mgr
.
èû_fq
 = 
buf
;

1153 
buf
 -> 
°©us
 = 
EMPTY
;

1154 
buf
 -> 
√xt
 = 
NULL
;

1155 
	`öôüli£_nw_∑ckë
(&(
buf
 -> 
pkt
));

1156 
tx_buf_mgr
.
cou¡_fq
++;

1159 
	}
}

1162 
TønsmôBuf„r
* 
	$ªmove_tx_fq
()

1165 
TønsmôBuf„r
 *
±r
;

1167 if(
tx_buf_mgr
.
hód_fq
 =
NULL
)

1168  
NULL
;

1170 if(
tx_buf_mgr
.
hód_fq
 =tx_buf_mgr.
èû_fq
)

1171 
tx_buf_mgr
.
èû_fq
 = 
NULL
;

1173 
±r
 = 
tx_buf_mgr
.
hód_fq
;

1175 
tx_buf_mgr
.
hód_fq
 =Åx_buf_mgr.hód_fq -> 
√xt
;

1176 
tx_buf_mgr
.
cou¡_fq
--;

1178  
±r
;

1179 
	}
}

1182 
öt8_t
 
	$gë_ö_¥o˚ss_buf_cou¡
(
öt8_t
 
rbm_ödex
)

1184 
öt8_t
 
cou¡
 = 0;

1186 
Re˚iveBuf„rUDP
 *
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
;

1188 
±r
 !
NULL
)

1190 if(
±r
 -> 
°©us
 =
FULL
)

1191 
cou¡
++;

1193 
±r
 =Öå -> 
√xt
;

1196  
cou¡
;

1197 
	}
}

1199 
öt8_t
 
	$gë_num_bufs_‰ì
()

1201 
öt8_t
 
n
;

1203 
n
 = 
num_bufs_‰ì
;

1205  
n
;

1206 
	}
}

1209 
	$£t_num_bufs_‰ì
(
öt8_t
 
n
)

1211 
num_bufs_‰ì
 = 
n
;

1213 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/BufferManager.h

30 #i‚de‡
_BUFFER_MANAGER_H


31 
	#_BUFFER_MANAGER_H


	)

33 
	~<°döt.h
>

35 
	~"Tøn•‹tLayîUDP.h
"

36 
	~"Nëw‹kLayî.h
"

42 
	#DEBUG_BM
 0

43 

	)

44 
	#DEFAULT_RX_QUEUE_SIZE
 1

45 

	)

47 
	#UNALLOCATED
 1

48 
	#EMPTY
 2

49 
	#FULL
 3

50 

	)

55 
	#OVERWRITE
 0

	)

56 
	#DROP
 1

	)

59 
	#MAX_TASK_PRIORITY
 19

	)

63 
	sRe˚iveBuf„rUDP


65 
Tøn•‹t_Segmít_UDP
 
	m£g
;

66 
öt8_t
 
	m°©us
;

67 
öt8_t
 
	m¥io
;

69 
öt8_t
 
	mrssi
;

70 
uöt16_t
 
	m§cAddr
;

71 
Re˚iveBuf„rUDP
 *
	m√xt
;

72 }
	tRe˚iveBuf„rUDP
;

76 
öt8_t
 
	mpid
;

77 
öt8_t
 
	mpödex
;

78 
Re˚iveBuf„rUDP
 *
	mhód_fq
;

79 
Re˚iveBuf„rUDP
 *
	mèû_fq
;

80 
Re˚iveBuf„rUDP
 *
	mhód_pq
;

81 
Re˚iveBuf„rUDP
 *
	mèû_pq
;

82 
öt8_t
 
	mcou¡TŸÆ
;

83 
öt8_t
 
	mcou¡Fªe
;

84 }
	tRe˚iveBuf„rM™agî
;

86 
	sTønsmôBuf„r


88 
NW_Packë
 
	mpkt
;

89 
öt8_t
 
	m°©us
;

90 
öt8_t
 
	m¥io
;

93 
TønsmôBuf„r
 *
	m√xt
;

94 }
	tTønsmôBuf„r
;

98 
TønsmôBuf„r
 *
	mhód_fq
;

99 
TønsmôBuf„r
 *
	mèû_fq
;

100 
TønsmôBuf„r
 *
	mhód_aq
;

101 
TønsmôBuf„r
 *
	mèû_aq
;

102 
öt8_t
 
	mcou¡_aq
;

103 
öt8_t
 
	mcou¡_fq
;

104 }
	tTønsmôBuf„rM™agî
;

110 
öôüli£_buf„r_m™agî
();

120 
öt8_t
 
is_ex˚ss_pﬁicy_vÆid
(öt8_à
¥ef
);

129 
öt8_t
 
£t_ex˚ss_pﬁicy
(öt8_à
¥io
, i¡8_à
¥ef
);

142 
öt8_t
 
gë_ex˚ss_pﬁicy
(öt8_à
¥io
);

154 
öt8_t
 
gë_ödex_u«Œoˇãd_rx_buf
();

165 
öt8_t
 
p‹t_to_rbm_ödex
(
uöt8_t
 
p‹t
);

174 
öt8_t
 
p‹t_to_p‹t_ödex
(
uöt8_t
 
p‹t
);

183 
ö£π_rx_pq
(
Tøn•‹t_Segmít_UDP
 *
£g
, 
öt8_t
 
¥io
, 
uöt16_t
 
addr
, i¡8_à
rssi
);

197 
Re˚iveBuf„rUDP
* 
ªmove_rx_pq
(
öt8_t
 
rbm_ödex
);

206 
ö£π_rx_fq
(
Re˚iveBuf„rUDP
 *
buf
, 
öt8_t
 
rbm_ödex
, i¡8_à
°©us
);

219 
Re˚iveBuf„rUDP
* 
ªmove_rx_fq
(
öt8_t
 
rbm_ödex
, i¡8_à
°©us
);

230 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
 *
pkt
);

241 
TønsmôBuf„r
* 
ªmove_tx_aq
();

252 
ö£π_tx_fq
(
TønsmôBuf„r
 *
buf
);

261 
TønsmôBuf„r
* 
ªmove_tx_fq
();

271 
öt8_t
 
gë_ö_¥o˚ss_buf_cou¡
(öt8_à
rbm_ödex
);

280 
öt8_t
 
gë_num_bufs_‰ì
();

289 
£t_num_bufs_‰ì
(
öt8_t
 
n
);

298 
¥öt_tx_buf„r
();

307 
öt8_t
 
c⁄vît_±r_to_ödex
(
TønsmôBuf„r
 *
±r
);

308 
¥öt_rx_buf„rs
(
uöt8_t
 
p‹t
);

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Debug.c

27 
	~<ƒk.h
>

28 
	~<ö˛ude.h
>

29 
	~<ulib.h
>

30 
	~<°dio.h
>

31 
	~<avr/¶ìp.h
>

32 
	~<hÆ.h
>

33 
	~<°döt.h
>

35 
	~"Debug.h
"

38 
	$go_öto_∑nic
(*
°r
)

41 
	`ƒk_öt_dißbÀ
();

43 
	`ƒk_Àd_£t
(
RED_LED
);

45 
	`¥ötf
("PANIC: %s. Thi†shouldÇevî h≠≥n\n", 
°r
);

47 
	}
}

49 
	$¥öt_nw_°ack_î∫o
(
öt8_t
 
n
)

51 
n
)

54 
	`ƒk_k¥ötf
(
	`PSTR
("MaximumÇeighborÜimitÑeached\r\n"));

58 
	`ƒk_k¥ötf
(
	`PSTR
("No socket descriptorávailable\r\n"));

62 
	`ƒk_k¥ötf
(
	`PSTR
("Unsupported socketÅype\r\n"));

66 
	`ƒk_k¥ötf
(
	`PSTR
("Port is unavailable\r\n"));

70 
	`ƒk_k¥ötf
(
	`PSTR
("Invalid socket descriptor\r\n"));

74 
	`ƒk_k¥ötf
(
	`PSTR
("Invalid call made\r\n"));

78 
	`ƒk_k¥ötf
(
	`PSTR
("NoÖortsávailable\r\n"));

82 
	`ƒk_k¥ötf
(
	`PSTR
("InvalidárgumentsÖassed\r\n"));

86 
	`ƒk_k¥ötf
(
	`PSTR
("Error in calculatingÉndianness\r\n"));

90 
	`ƒk_k¥ötf
(
	`PSTR
("NoÑeceive buffersávailable\r\n"));

94 
	`ƒk_k¥ötf
(
	`PSTR
("NoÅransmit buffersávailable\r\n"));

98 
	`ƒk_k¥ötf
(
	`PSTR
("SocketÅimeout\r\n"));

102 
	`ƒk_k¥ötf
(
	`PSTR
("Unmapped socket\r\n"));

106 
	`ƒk_k¥ötf
(
	`PSTR
("NoÖortÉlementávailable inÖortárray\r\n"));

110 
	`ƒk_k¥ötf
(
	`PSTR
("NoÑbmÉlementávailable inÑbmárray\r\n"));

114 
	`ƒk_k¥ötf
(
	`PSTR
("UnknownÉrrorÇumberÖassed\r\n"));

119 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Debug.h

27 #i‚de‡
_DEBUG_H


28 
	#_DEBUG_H


	)

31 
go_öto_∑nic
(*
°r
);

41 
¥öt_nw_°ack_î∫o
(
öt8_t
 
n
);

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NWErrorCodes.h

31 #i‚de‡
_NW_ERROR_CODES_H


32 
	#_NW_ERROR_CODES_H


	)

34 
	#MAX_NEIGHBOR_LIMIT_REACHED
 1

	)

35 
	#NO_SOCKET_DESC_AVAILABLE
 2

	)

36 
	#UNSUPPORTED_SOCK_TYPE
 3

	)

37 
	#PORT_UNAVAILABLE
 4

	)

38 
	#INVALID_SOCKET
 5

	)

39 
	#INVALID_CALL
 6

	)

40 
	#NO_PORTS_AVAILABLE
 7

	)

41 
	#INVALID_ARGUMENT
 8

	)

42 
	#ERROR_ENDIAN
 9

	)

43 
	#NO_RX_BUFFERS_AVAILABLE
 10

	)

44 
	#NO_TX_BUFFERS_AVAILABLE
 11

	)

45 
	#SOCKET_TIMEOUT
 12

	)

46 
	#UNMAPPED_SOCKET
 13

	)

47 
	#NO_PORT_ELEMENT_AVAILABLE
 14

	)

48 
	#NO_RBM_ELEMENT_AVAILABLE
 15

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NWStackConfig.c

29 
	~"NWSèckC⁄fig.h
"

30 
	~"NWEº‹Codes.h
"

31 
	~<°döt.h
>

32 
	~<ƒk.h
>

33 
	~<ö˛ude.h
>

34 
	~<ulib.h
>

35 
	~<°dio.h
>

36 
	~<avr/¶ìp.h
>

37 
	~<hÆ.h
>

38 
	~<ƒk_îr‹.h
>

39 
	~<°dlib.h
>

40 
	~<m©h.h
>

42 
	#DEBUG_NWSC
 2

	)

48 
öôüli£_å™•‹t_œyî_udp
();

51 
öt8_t
 
ídü¬ess
();

54 
öôüli£_buf„r_m™agî
();

57 
öôüli£_√tw‹k_œyî
();

60 
go_öto_∑nic
(*);

63 
bmac_èsk_c⁄fig
();

66 
öôüli£_£rül_communiˇti⁄
();

69 
	$ƒk_öô_nw_°ack
()

71 if(
	`ídü¬ess
(Ë=
ERROR_ENDIAN
)

73 
	`ƒk_öt_dißbÀ
();

74 
	`ƒk_Àd_£t
(
RED_LED
);

76 
	`ƒk_k¥ötf
(
	`PSTR
("Error in calculatingÉndianness in init_nw_stack()"));

80 
	`§™d
(
NODE_ADDR
);

82 
	`öôüli£_£rül_communiˇti⁄
();

83 if(
DEBUG_NWSC
 == 2)

84 
	`ƒk_k¥ötf
(
	`PSTR
("Serial communications initalized\r\n"));

86 
	`öôüli£_buf„r_m™agî
();

87 if(
DEBUG_NWSC
 == 2)

88 
	`ƒk_k¥ötf
(
	`PSTR
("Buffer manager initialised\r\n"));

90 
	`öôüli£_å™•‹t_œyî_udp
();

91 if(
DEBUG_NWSC
 == 2)

92 
	`ƒk_k¥ötf
(
	`PSTR
("TransportÜayer initialised\r\n"));

94 
	`bmac_èsk_c⁄fig
();

95 if(
DEBUG_NWSC
 == 2)

96 
	`ƒk_k¥ötf
(
	`PSTR
("LinkÜayer initialised\r\n"));

98 
	`öôüli£_√tw‹k_œyî
();

99 if(
DEBUG_NWSC
 == 2)

100 
	`ƒk_k¥ötf
(
	`PSTR
("NetworkÜayer initialised\r\n"));

103 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NWStackConfig.h

28 #i‚de‡
_NW_STACK_CONFIG_H


29 
	#_NW_STACK_CONFIG_H


	)

31 
	~"NWEº‹Codes.h
"

34 
	#MAX_APP_PAYLOAD
 40

35 
	#MAX_SERIAL_PAYLOAD
 32

36 
	#MAX_GATEWAY_PAYLOAD
 40

37 
	#MAX_RX_QUEUE_SIZE
 8

39 
	#MAX_TX_QUEUE_SIZE
 4

40 
	#DEFAULT_EXCESS_POLICY
 
DROP


41 

	)

44 
	#NUM_PORTS
 4

45 

	)

47 
	#CONNECTED_TO_GATEWAY
 
TRUE


48 
	#MAX_NGBS
 5

49 
	#HELLO_PERIOD
 2

50 
	#MAX_NETWORK_DIAMETER
 20

51 
	#NGB_LIST_PERIOD
 6

52 
	#TIMEOUT_COUNTER
 5

53 
	#MAX_NODES
 5

54 

	)

56 
	#MAX_PRIORITY
 31

	)

57 
	#LOW_PRIORITY
 1

	)

58 
	#NORMAL_PRIORITY
 2

	)

59 
	#HIGH_PRIORITY
 3

	)

62 
ƒk_öô_nw_°ack
();

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NetworkLayer.c

30 
	~"Tøn•‹tLayîUDP.h
"

31 
	~"Nëw‹kLayî.h
"

32 
	~"Buf„rM™agî.h
"

33 
	~"Sîül.h
"

34 
	~"NWEº‹Codes.h
"

35 
	~"Debug.h
"

37 
	~<ƒk.h
>

38 
	~<ö˛ude.h
>

39 
	~<ulib.h
>

40 
	~<°dio.h
>

41 
	~<avr/¶ìp.h
>

42 
	~<hÆ.h
>

43 
	~<bmac.h
>

44 
	~<ƒk_îr‹.h
>

45 
	~<°döt.h
>

46 
	~<°dlib.h
>

50 
ƒk_£m_t
 *
é_£m
;

51 
P‹t
 
p‹ts
[];

53 
öt8_t
 
is_p‹t_assocüãd
(
öt16_t
 
p‹t
);

54 
¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
*);

55 
¥öt_£g
(
Tøn•‹t_Segmít_UDP
*);

58 
ƒk_£m_t
 *
bm_£m
;

59 
Re˚iveBuf„rM™agî
 
rx_buf_mgr
[];

61 
ö£π_rx_pq
(
Tøn•‹t_Segmít_UDP
*, 
öt8_t
, 
uöt16_t
, int8_t);

62 
TønsmôBuf„r
* 
ªmove_tx_aq
();

63 
ö£π_tx_fq
(
TønsmôBuf„r
*);

64 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

65 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

66 
öt8_t
 
p‹t_to_p‹t_ödex
(
uöt8_t
);

67 
¥öt_tx_buf„r
();

71 
∑ck_Msg_NgbLi°
(
uöt8_t
 *, 
Msg_NgbLi°
 *);

72 
∑ck_Msg_Hñlo
(
uöt8_t
 *, 
Msg_Hñlo
 *);

73 
∑ck_NodeToG©ewaySîül_Packë_hódî
(
uöt8_t
 *, 
NodeToG©ewaySîül_Packë
 *);

74 
∑ck_TL_UDP_hódî
(
uöt8_t
 *, 
Tøn•‹t_Segmít_UDP
*);

75 
∑ck_NW_Packë_hódî
(
uöt8_t
 *,
NW_Packë
*);

77 
u≈ack_Msg_NgbLi°
(
Msg_NgbLi°
*, 
uöt8_t
 *);

78 
u≈ack_Msg_Hñlo
(
Msg_Hñlo
 *, 
uöt8_t
 *);

79 
u≈ack_TL_UDP_hódî
(
Tøn•‹t_Segmít_UDP
 *, 
uöt8_t
 *);

80 
u≈ack_NW_Packë_hódî
(
NW_Packë
*, 
uöt8_t
 *);

83 
£ndToSîül
(
uöt8_t
 *, 
öt8_t
);

84 
¥ötBuf„r
(
uöt8_t
 *, 
öt8_t
);

87 
go_öto_∑nic
(*);

90 
öt8_t
 
bmac_tx_∑ckë_íqueue
(
uöt8_t
 *, uint8_t);

93 
Neighb‹Li°
 
	g∆
;

94 
RoutögTabÀ
 
	gπ
[
MAX_NODES
];

96 
uöt8_t
 
	grx_buf
[
RF_BUFFER_SIZE
];

97 
NW_Packë
 
	gpkt_rx
;

99 
uöt8_t
 
	gtx_buf
[
SIZE_NW_PACKET
];

100 
NW_Packë
 
	gpkt_tx
;

102 
uöt8_t
 
	gto_gw_buf
[
SIZE_NODETOGATEWAYSERIAL_PACKET
];

103 
NodeToG©ewaySîül_Packë
 
	g¡g_pkt
;

105 
uöt16_t
 
	gDEFAULT_GATEWAY
;

106 
öt8_t
 
	gROUTING_ALGORITHM
;

107 
öt8_t
 
	gFLOODING_TYPE
;

108 
öt8_t
 
	gP_DISTRIBUTION
;

111 
Tøn•‹t_Segmít_UDP
 
	gudp_£g
;

112 
Msg_Hñlo
 
	gmh
;

113 
Msg_NgbLi°
 
	gm∆i°
;

114 
Neighb‹Li°
 
	g∆i°
;

117 
Msg_Hñlo
 
	gmhe
;

118 
Msg_NgbLi°
 
	gmn
;

119 
Tøn•‹t_Segmít_UDP
 
	g£g
;

121 
Msg_RoutögTabÀ
 
	gmπ
;

125 
ƒk_èsk_ty≥
 
	gNL_RX_TASK
;

126 
NRK_STK
 
	g∆_rx_èsk_°ack
[
NRK_APP_STACKSIZE
];

127 
∆_rx_èsk
();

129 
ƒk_èsk_ty≥
 
	gNL_TX_TASK
;

130 
NRK_STK
 
	g∆_tx_èsk_°ack
[
NRK_APP_STACKSIZE
];

131 
∆_tx_èsk
();

133 
ƒk_£m_t
 *
	g∆_£m
;

136 
ölöe
 
öt8_t
 
	$add_√ighb‹
(
Neighb‹
 
n
)

138 
öt8_t
 
i
;

139 
öt8_t
 
found
 = 
FALSE
;

146 
	`íãr_¸
(
∆_£m
, 19);

147 
i
 = 0; i < 
MAX_NGBS
; i++)

150 if(
∆
.
ngbs
[
i
].
addr
 =
n
.addr)

152 
found
 = 
TRUE
;

154 
∆
.
ngbs
[
i
].
œ°Rï‹t
 = 
TIMEOUT_COUNTER
;

155 
∆
.
ngbs
[
i
].
isNew
 = 
FALSE
;

156 
∆
.
ngbs
[
i
].
rssi
 = 
n
.rssi;

158 if(
∆
.
ngbs
[
i
].
addr
 !
BCAST_ADDR
)

160 
∆
.
ngbs
[
i
].
œ°Rï‹t
--;

161 if(
∆
.
ngbs
[
i
].
œ°Rï‹t
 == 0)

163 
∆
.
ngbs
[
i
].
addr
 = 
BCAST_ADDR
;

164 
∆
.
ngbs
[
i
].
rssi
 = 0;

165 
∆
.
ngbs
[
i
].
isNew
 = 
FALSE
;

166 
∆
.
cou¡
--;

171 if(
found
 =
TRUE
)

173 
	`Àave_¸
(
∆_£m
, 19);

174  
NRK_OK
;

178 if(
∆
.
cou¡
 =
MAX_NGBS
)

180 
	`_ƒk_î∫o_£t
(
MAX_NEIGHBOR_LIMIT_REACHED
);

182 
	`Àave_¸
(
∆_£m
, 19);

183  
NRK_ERROR
;

187 
i
 = 0; i < 
MAX_NGBS
; i++)

189 if(
∆
.
ngbs
[
i
].
addr
 =
BCAST_ADDR
)

191 
n
.
œ°Rï‹t
 = 
TIMEOUT_COUNTER
;

192 
n
.
isNew
 = 
TRUE
;

193 
∆
.
ngbs
[
i
] = 
n
;

194 
∆
.
cou¡
++;

199 if(
i
 =
MAX_NGBS
)

201 
	`ƒk_öt_dißbÀ
();

202 
	`ƒk_Àd_£t
(
RED_LED
);

204 
	`ƒk_k¥ötf
(
	`PSTR
("add_neighbor(): Bug found in implementation of MAX_NGBS\r\n"));

207 
	`Àave_¸
(
∆_£m
, 19);

208  
NRK_OK
;

209 
	}
}

212 
ölöe
 
öt8_t
 
	$shouldIMu…ih›
(
NW_Packë
 *
pkt
)

214 
pkt
 -> 
âl
--;

216 if(
pkt
 -> 
âl
 == 0)

217  
MULTIHOP_NO
;

219  
MULTIHOP_YES
;

220 
	}
}

222 
ölöe
 
	$mu…ih›
(
NW_Packë
 *
pkt
)

224 if–
	`shouldIMu…ih›
(
pkt
Ë=
MULTIHOP_YES
 )

226 
	`íãr_¸
(
bm_£m
, 21);

227 if–
	`ö£π_tx_aq
(
pkt
Ë=
NRK_ERROR
 )

229 
	`ªc‹d_tx_queue_fuŒ
(
pkt
);

231 
	`Àave_¸
(
bm_£m
, 21);

233 if(
DEBUG_NL
 == 2)

235 
	`ƒk_k¥ötf
(
	`PSTR
("NL: multihop(): InsertedÖacket. "));

236 
	`¥öt_tx_buf„r
();

241 
	}
}

243 
ölöe
 
uöt16_t
 
	$rouã_addr
(
uöt16_t
 
addr
)

245 
öt8_t
 
i
;

248 if(
addr
 =
BCAST_ADDR
)

249  
BCAST_ADDR
;

251 
	`íãr_¸
(
∆_£m
, 34);

253 
i
 = 0; i < 
MAX_NODES
; i++)

255 if(
π
[
i
].
de°
 !
BCAST_ADDR
)

256 if(
π
[
i
].
de°
 =
addr
)

258 
	`Àave_¸
(
∆_£m
, 34);

259  
π
[
i
].
√xtH›
;

264 
	`Àave_¸
(
∆_£m
, 34);

265  
BCAST_ADDR
;

266 
	}
}

268 
	$rouã_∑ckë
(
NW_Packë
 *
pkt
)

270 
pkt
 -> 
âl
--;

271 if(
pkt
 -> 
âl
 == 0)

275 
pkt
 -> 
¥evH›
 = 
NODE_ADDR
;

276 
pkt
 -> 
√xtH›
 = 
	`rouã_addr
’kà-> 
de°
);

278 
	`íãr_¸
(
bm_£m
, 23);

279 if–
	`ö£π_tx_aq
(
pkt
Ë=
NRK_ERROR
 )

281 
	`ªc‹d_tx_queue_fuŒ
(
pkt
);

283 
	`Àave_¸
(
bm_£m
, 23);

286 
	}
}

288 
öt8_t
 
	$£ndToG©eway
(
uöt8_t
 *
±r
, 
öt8_t
 
Àn
)

290 
uöt8_t
 
gw_buf
[
SIZE_NODETOGATEWAYSERIAL_PACKET
] = {0};

292 if(
Àn
 <0 ||Üí > 
MAX_SERIAL_PAYLOAD
 || 
±r
 =
NULL
 || 
CONNECTED_TO_GATEWAY
 =
FALSE
)

294 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

295  
NRK_ERROR
;

299 
gw_buf
[0] = 
SERIAL_APPLICATION
;

300 
gw_buf
[1] = 
Àn
;

301 
	`mem˝y
(
gw_buf
 + 
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
, 
±r
, 
Àn
);

303 
	`£ndToSîül
(
gw_buf
, 
SIZE_NODETOGATEWAYSERIAL_PACKET
);

306  
NRK_OK
;

307 
	}
}

309 
ölöe
 
uöt8_t
 
	$pkt_ty≥
(
NW_Packë
 *
pkt
)

311 
pkt
 -> 
ty≥
)

313 
UDP
:

314  
APPLICATION
;

316 
HELLO
:

317 
NGB_LIST
:

318 
ROUTE_CONFIG
:

319  
NW_CONTROL
;

322  
INVALID
;

323 
	}
}

325 
ölöe
 
uöt8_t
 
	$é_ty≥
(
uöt8_t
 
ty≥
)

327 if(
ty≥
 =
UDP
)

328  
UDP
;

330  
INVALID
;

331 
	}
}

333 
ölöe
 
uöt8_t
 
	$nw_˘æ_ty≥
(
uöt8_t
 
ty≥
)

335 
ty≥
)

337 
HELLO
:

338  
HELLO
;

340 
NGB_LIST
:

341  
NGB_LIST
;

343 
ROUTE_CONFIG
:

344  
ROUTE_CONFIG
;

346  
INVALID
;

347 
	}
}

349 
	$¥o˚ss_≠p_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
)

351 
öt8_t
 
ªt
;

353 if(
DEBUG_NL
 >= 1)

355 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Entered\r\n"));

356 
	`ƒk_k¥ötf
(
	`PSTR
("NLÖrocess_app_pkt(): Received from "));

357 
	`¥öt_pkt_hódî
(
pkt
);

367 if(
	`é_ty≥
(
pkt
 -> 
ty≥
Ë=
UDP
)

370 
	`u≈ack_TL_UDP_hódî
(&
udp_£g
, 
pkt
 -> 
d©a
);

372 
	`mem˝y
(
udp_£g
.
d©a
, 
pkt
 -> d©®+ 
SIZE_TRANSPORT_UDP_HEADER
, 
MAX_APP_PAYLOAD
);

375 if(
	`is_p‹t_assocüãd
(
udp_£g
.
de°P‹t
Ë=
TRUE
)

377 
öt8_t
 
p‹t_ödex
;

379 
	`íãr_¸
(
bm_£m
, 28);

380 
	`íãr_¸
(
é_£m
, 28);

383 if(
DEBUG_NL
 == 2)

388 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Before inserting intoÖort queue\r\n"));

390 
	`ö£π_rx_pq
(&
udp_£g
, 
pkt
 -> 
¥io
,Ökà-> 
§c
, 
rssi
);

391 if(
DEBUG_NL
 == 2)

393 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): After inserting intoÖort queue\r\n"));

396 
p‹t_ödex
 = 
	`p‹t_to_p‹t_ödex
(
udp_£g
.
de°P‹t
);

397 if(
p‹t_ödex
 =
NRK_ERROR
)

399 
	`ƒk_öt_dißbÀ
();

400 
	`ƒk_Àd_£t
(
RED_LED
);

402 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

404 
ªt
 = 
	`ƒk_evít_sig«l
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
);

406 if(
ªt
 =
NRK_ERROR
)

408 if(
	`ƒk_î∫o_gë
() == 1)

410 
	`ƒk_öt_dißbÀ
();

411 
	`ƒk_Àd_£t
(
RED_LED
);

413 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Bug detected in implementation ofÖort signals\r\n"));

420 if(
DEBUG_NL
 == 0)

422 
	`ƒk_k¥ötf
(
	`PSTR
("UnassociatedÖort found: "));

423 
	`¥ötf
("%u\n", 
udp_£g
.
de°P‹t
);

426 
	`ªc‹d_u«ssocüãd_sockë_pkt
(
pkt
);

429 
	`Àave_¸
(
é_£m
, 28);

430 
	`Àave_¸
(
bm_£m
, 28);

435 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): UnsupportedÅransportÜayerÅype detected = "));

436 
	`¥ötf
("%d\r\n", 
pkt
 -> 
ty≥
);

439 
	}
}

441 
	$¥o˚ss_nw_˘æ_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
)

443 
öt8_t
 
ªt
;

444 
öt8_t
 
i
;

446 if(
DEBUG_NL
 >= 1)

447 
	`ƒk_k¥ötf
(
	`PSTR
("NL: EnteredÖrocess_nw_ctrl_pkt()\n"));

449  
	`nw_˘æ_ty≥
(
pkt
 -> 
ty≥
) )

451 
HELLO
:

454 
	`u≈ack_Msg_Hñlo
(&
mh
, 
pkt
 -> 
d©a
);

455 
mh
.
n
.
rssi
 =Ñssi;

456 
ªt
 = 
	`add_√ighb‹
(
mh
.
n
);

457 if(
ªt
 =
NRK_ERROR
)

459 
	`ªc‹d_max_ngb_limô_ªached
(
pkt
);

461 if(
DEBUG_NL
 >= 1)

463 
	`ƒk_k¥ötf
(
	`PSTR
("Received HELLO msg from: "));

464 
	`¥ötf
("%d ", 
mh
.
n
.
addr
);

465 
	`ƒk_k¥ötf
(
	`PSTR
("with RSSI = "));

466 
	`¥ötf
("%d\r\n",
mh
.
n
.
rssi
);

471 
NGB_LIST
:

473 if(
pkt
 -> 
§c
 =
NODE_ADDR
)

477 
	`u≈ack_Msg_NgbLi°
(&
m∆i°
, 
pkt
 -> 
d©a
);

478 
∆i°
 = 
m∆i°
.
∆
;

480 if(
DEBUG_NL
 >= 1)

482 
öt8_t
 
i
;

483 
	`¥ötf
("NL: Re˚ived NGB_LIST msg from %d wôh cou¡ = %d\n", 
∆i°
.
my_addr
,Çli°.
cou¡
);

484 
i
 = 0; i < 
MAX_NGBS
; i++)

486 if(
∆i°
.
ngbs
[
i
].
addr
 !
BCAST_ADDR
)

487 
	`¥ötf
("%u, ", 
∆i°
.
ngbs
[
i
].
addr
);

489 
	`¥ötf
("\r\n");

493 
	`rouã_∑ckë
(
pkt
);

495 if(
CONNECTED_TO_GATEWAY
 =
TRUE
)

498 
¡g_pkt
.
ty≥
 = 
SERIAL_NGB_LIST
;

499 
¡g_pkt
.
Àngth
 = 
SIZE_MSG_NGB_LIST
;

501 
	`∑ck_Msg_NgbLi°
(
¡g_pkt
.
d©a
, &
m∆i°
);

504 
	`∑ck_NodeToG©ewaySîül_Packë_hódî
(
to_gw_buf
, &
¡g_pkt
);

506 
	`mem˝y
(
to_gw_buf
 + 
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
, 
¡g_pkt
.
d©a
, 
MAX_SERIAL_PAYLOAD
);

509 if(
DEBUG_NL
 >= 1)

511 
	`ƒk_k¥ötf
(
	`PSTR
("SendingÖacketÅo gateway\r\n"));

513 
	`£ndToSîül
(
to_gw_buf
, 
SIZE_NODETOGATEWAYSERIAL_PACKET
);

518 
ROUTE_CONFIG
:

520 
	`u≈ack_Msg_RoutögTabÀ
(&
mπ
, 
pkt
 -> 
d©a
);

521 
	`íãr_¸
(
∆_£m
, 34);

522 
DEFAULT_GATEWAY
 = 
mπ
.
dg
;

523 
	`Àave_¸
(
∆_£m
, 34);

525 if(
DEBUG_NL
 == 0)

527 
	`ƒk_k¥ötf
(
	`PSTR
("Receivedá ROUTE_CONFIG message\r\n"));

528 
i
 = 0; i < 
MAX_NODES
; i++)

530 
	`¥ötf
("%d -> %d [%d, %d]\r\n", 
mπ
.
node
, mπ.
π
[
i
].
de°
, mπ.π[i].
√xtH›
, mπ.π[i].
co°
);

534 if(
mπ
.
node
 =
NODE_ADDR
)

544 
	`£t_RoutögTabÀ
(&
mπ
);

548 
	`rouã_∑ckë
(
pkt
);

554 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_nw_ctrl_pkt(): UnsupportedÇetwork control messageÑeceived = "));

555 
	`¥ötf
("%u\n", 
pkt
 -> 
ty≥
);

561 
	}
}

563 
	$¥o˚ss_Ÿhî_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
)

566 
	}
}

569 
ölöe
 
	$buûd_Msg_Hñlo
(
Msg_Hñlo
 *
m
)

571 (
m
 -> 
n
).
addr
 = (
uöt16_t
)
NODE_ADDR
;

572 (
m
 -> 
n
).
rssi
 = (m ->Ç).
œ°Rï‹t
 = (m ->Ç).
isNew
 = 0;

575 
pkt_tx
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

576 
pkt_tx
.
de°
 = (
uöt16_t
)
BCAST_ADDR
;

577 
pkt_tx
.
√xtH›
 = (
uöt16_t
)
BCAST_ADDR
;

578 
pkt_tx
.
¥evH›
 = (
uöt16_t
)
NODE_ADDR
;

580 
pkt_tx
.
âl
 = 1;

581 
pkt_tx
.
ty≥
 = (
uöt8_t
)
HELLO
;

582 
pkt_tx
.
Àngth
 = 
SIZE_MSG_HELLO
;

583 
pkt_tx
.
¥io
 = 
NORMAL_PRIORITY
;

585 
	`∑ck_Msg_Hñlo
(
pkt_tx
.
d©a
, 
m
);

587 
	}
}

589 
ölöe
 
	$buûd_Msg_NgbLi°
(
Msg_NgbLi°
 *
m
)

591 
	`íãr_¸
(
∆_£m
, 32);

592 
m
 -> 
∆
 =Çl;

593 
	`Àave_¸
(
∆_£m
, 32);

596 
pkt_tx
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

597 
	`íãr_¸
(
∆_£m
, 25);

598 
pkt_tx
.
de°
 = 
DEFAULT_GATEWAY
;

599 
	`Àave_¸
(
∆_£m
, 25);

600 
pkt_tx
.
√xtH›
 = 
	`rouã_addr
’kt_tx.
de°
);

601 
pkt_tx
.
¥evH›
 = (
uöt16_t
)
NODE_ADDR
;

603 
pkt_tx
.
âl
 = 
MAX_NETWORK_DIAMETER
;

604 
pkt_tx
.
ty≥
 = (
uöt8_t
)
NGB_LIST
;

605 
pkt_tx
.
Àngth
 = 
SIZE_MSG_NGB_LIST
;

606 
pkt_tx
.
¥io
 = 
NORMAL_PRIORITY
;

608 
	`∑ck_Msg_NgbLi°
(
pkt_tx
.
d©a
, 
m
);

611 
	}
}

614 
	$∆_rx_èsk
()

616 
uöt8_t
 
Àn
;

617 
öt8_t
 
rssi
;

618 
uöt8_t
 *
loˇl_rx_buf
;

619 
öt8_t
 
vÆ
;

620 
öt8_t
 
Êag
;

622 
ƒk_time_t
 
°¨t
, 
íd
, 
ñ≠£d
;

624 if(
DEBUG_NL
 >= 1)

626 
	`ƒk_k¥ötf
(
	`PSTR
("NL_RX_TASK PID = "));

627 
	`¥ötf
("%d\r\n",
	`ƒk_gë_pid
());

631 
	`ƒk_time_gë
(&
°¨t
);

632 
íd
.
£cs
 = 
°¨t
.secs;

633 
íd
.
«no_£cs
 = 
°¨t
.nano_secs;

636 
vÆ
 = 
	`bmac_öô
(25);

637 if(
vÆ
 =
NRK_ERROR
)

639 
	`ƒk_öt_dißbÀ
();

640 
	`ƒk_Àd_£t
(
RED_LED
);

642 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned by bmac_init()\r\n"));

646 
vÆ
 = 
	`bmac_rx_pkt_£t_buf„r
(
rx_buf
, 
RF_BUFFER_SIZE
);

647 if(
vÆ
 =
NRK_ERROR
)

649 
	`ƒk_öt_dißbÀ
();

650 
	`ƒk_Àd_£t
(
RED_LED
);

652 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned by bmac_rx_pkt_set_buffer()\r\n"));

659 if(
CONNECTED_TO_GATEWAY
 =
TRUE
)

661 
	`ƒk_time_gë
(&
íd
);

662 
vÆ
 = 
	`ƒk_time_sub
(&
ñ≠£d
, 
íd
, 
°¨t
);

663 
	`ƒk_time_com∑˘_«nos
(&
ñ≠£d
);

664 if(
ñ≠£d
.
£cs
 >
NGB_LIST_PERIOD
)

666 
¡g_pkt
.
ty≥
 = 
SERIAL_NGB_LIST
;

667 
¡g_pkt
.
Àngth
 = 
SIZE_MSG_NGB_LIST
;

668 
	`íãr_¸
(
∆_£m
, 34);

669 
	`∑ck_Msg_NgbLi°
(
¡g_pkt
.
d©a
, &
∆
);

670 
	`Àave_¸
(
∆_£m
, 34);

671 
	`∑ck_NodeToG©ewaySîül_Packë_hódî
(
to_gw_buf
, &
¡g_pkt
);

672 
	`mem˝y
(
to_gw_buf
 + 
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
, 
¡g_pkt
.
d©a
, 
MAX_SERIAL_PAYLOAD
);

673 if(
DEBUG_NL
 == 2)

675 
	`ƒk_k¥ötf
(
	`PSTR
("Sending own NGB_LIST messageÅo gateway\r\n"));

677 
	`£ndToSîül
(
to_gw_buf
, 
SIZE_NODETOGATEWAYSERIAL_PACKET
);

680 
°¨t
.
£cs
 = 
íd
.secs;

681 
°¨t
.
«no_£cs
 = 
íd
.nano_secs;

685 if(
DEBUG_NL
 >= 1)

687 
	`ƒk_k¥ötf
(
	`PSTR
("Waiting forÇextÖkt fromÜinkÜayer\r\n"));

690 
Êag
 = 0;

692 
	`bmac_rx_pkt_ªady
() == 0)

694 
vÆ
 = 
	`bmac_waô_u¡û_rx_pkt
();

695 if(
DEBUG_NL
 == 2)

697 
	`ƒk_k¥ötf
(
	`PSTR
("NL: bmac_wait_until_rx_packet()Ñeturned "));

698 
	`¥ötf
("%d\n", 
vÆ
);

705 
loˇl_rx_buf
 = 
	`bmac_rx_pkt_gë
(&
Àn
,&
rssi
);

706 if(
loˇl_rx_buf
 =
NULL
)

708 
	`ƒk_k¥ötf
(
	`PSTR
("NL: NULLÑeturned by bmac_rx_pkt_get()\r\n"));

711 } 
loˇl_rx_buf
 =
NULL
);

714 if(
Àn
 !
SIZE_NW_PACKET
)

725 if(
DEBUG_NL
 >= 1)

727 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_rx_task(): WrongÜength ofÖacketÑeceived: "));

728 
	`¥ötf
("%d\r\n", 
Àn
);

730 
Êag
 = 1;

733 
	`ƒk_Àd_£t
(
GREEN_LED
);

735 if(
DEBUG_NL
 == 2)

737 
öt8_t
 
i
;

738 
	`ƒk_k¥ötf
(
	`PSTR
("NL: Contents ofÑeceivedÖacketáre\r\n"));

739 
	`¥ötf
("[");

740 
i
 = 0; i < 
Àn
; i++)

741 
	`¥ötf
("%d ", 
loˇl_rx_buf
[
i
]);

742 
	`¥ötf
("]\r\n");

744 if(
Êag
 == 1)

746 
	`bmac_rx_pkt_ªÀa£
();

747 
	`ƒk_Àd_˛r
(
GREEN_LED
);

752 
	`u≈ack_NW_Packë_hódî
(&
pkt_rx
, 
loˇl_rx_buf
);

754 
	`mem˝y
(
pkt_rx
.
d©a
, 
loˇl_rx_buf
 + 
SIZE_NW_PACKET_HEADER
, 
MAX_NETWORK_PAYLOAD
);

756 
	`bmac_rx_pkt_ªÀa£
();

759 if(
	`pkt_ty≥
(&
pkt_rx
Ë=
APPLICATION
)

762 if(
pkt_rx
.
de°
 =
NODE_ADDR
 ||Ökt_rx.de° =
BCAST_ADDR
)

763 
	`¥o˚ss_≠p_pkt
(&
pkt_rx
, 
rssi
);

766 if(
pkt_rx
.
√xtH›
 =
NODE_ADDR
)

768 if(
pkt_rx
.
§c
 =
NODE_ADDR
)

770 
	`ƒk_öt_dißbÀ
();

771 
	`ƒk_Àd_£t
(
RED_LED
);

774 
	`ƒk_k¥ötf
(
	`PSTR
("RoutingÅable corruptedát "));

775 
	`¥ötf
("%d\r\n", 
NODE_ADDR
);

779 
	`rouã_∑ckë
(&
pkt_rx
);

782 if(
pkt_rx
.
√xtH›
 =
BCAST_ADDR
)

783 
	`rouã_∑ckë
(&
pkt_rx
);

789 if(
	`pkt_ty≥
(&
pkt_rx
Ë=
NW_CONTROL
)

792 if(
pkt_rx
.
de°
 =
NODE_ADDR
 ||Ökt_rx.de° =
BCAST_ADDR
)

793 
	`¥o˚ss_nw_˘æ_pkt
(&
pkt_rx
, 
rssi
);

796 if(
pkt_rx
.
√xtH›
 =
NODE_ADDR
)

798 if(
pkt_rx
.
§c
 =
NODE_ADDR
)

800 
	`ƒk_öt_dißbÀ
();

801 
	`ƒk_Àd_£t
(
RED_LED
);

804 
	`ƒk_k¥ötf
(
	`PSTR
("RoutingÅable corruptedát "));

805 
	`¥ötf
("%d\r\n", 
NODE_ADDR
);

809 
	`rouã_∑ckë
(&
pkt_rx
);

812 if(
pkt_rx
.
√xtH›
 =
BCAST_ADDR
)

813 
	`rouã_∑ckë
(&
pkt_rx
);

819 
	`ƒk_k¥ötf
(
	`PSTR
("NL: UnknownÖktÅypeÑeceived = "));

820 
	`¥ötf
("%d\r\n", 
	`pkt_ty≥
(&
pkt_rx
));

824 
	`ƒk_Àd_˛r
(
GREEN_LED
);

828 
	}
}

831 
	$∆_tx_èsk
()

833 
TønsmôBuf„r
 *
±r
 = 
NULL
;

834 
ƒk_sig_t
 
tx_d⁄e_sig«l
;

835 
öt8_t
 
ªt
;

836 
öt8_t
 
p‹t_ödex
;

837 
öt8_t
 
£¡
;

838 
öt8_t
 
isAµliˇti⁄
;

841 
ƒk_time_t
 
timeout
;

842 
ƒk_time_t
 
°¨t
;

843 
ƒk_time_t
 
íd
;

844 
ƒk_time_t
 
ñ≠£d
;

847 !
	`bmac_°¨ãd
()Ë
	`ƒk_waô_u¡û_√xt_≥riod
();

850 
tx_d⁄e_sig«l
 = 
	`bmac_gë_tx_d⁄e_sig«l
();

852 if–
	`ƒk_sig«l_ªgi°î
(
tx_d⁄e_sig«l
Ë=
NRK_ERROR
 )

854 
	`ƒk_öt_dißbÀ
();

855 
	`ƒk_Àd_£t
(
RED_LED
);

857 
	`ƒk_k¥ötf
(
	`PSTR
("NL: Error whileÑegistering forÅhe bmax_tx_done_signal\r\n"));

861 
	`ƒk_time_gë
(&
°¨t
);

862 
íd
.
£cs
 = 
°¨t
.secs;

863 
íd
.
«no_£cs
 = 
°¨t
.nano_secs;

864 
£¡
 = 0;

867 if–
	`bmac_£t_rf_powî
(10Ë=
NRK_ERROR
)

869 
	`ƒk_Àd_£t
(
RED_LED
);

870 
	`ƒk_öt_dißbÀ
();

872 
	`ƒk_k¥ötf
(
	`PSTR
("Error settingÅheÅransmitÖower\r\n"));

876 
isAµliˇti⁄
 = 
FALSE
;

878 
ªt
 = 
	`ƒk_time_sub
(&
ñ≠£d
, 
íd
, 
°¨t
);

879 if(
ªt
 == 0)

881 
	`ƒk_öt_dißbÀ
();

882 
	`ƒk_Àd_£t
(
RED_LED
);

884 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned byÇrk_time_sub\r\n"));

887 
	`ƒk_time_com∑˘_«nos
(&
ñ≠£d
);

889 if(
ñ≠£d
.
£cs
 >
HELLO_PERIOD
)

891 
£¡
++;

892 
	`buûd_Msg_Hñlo
(&
mhe
);

893 if(
DEBUG_NL
 == 2)

895 
	`ƒk_k¥ötf
(
	`PSTR
("After building Msg_Hello,Öacket = "));

896 
	`¥öt_pkt
(&
pkt_tx
);

899 
	`íãr_¸
(
bm_£m
, 34);

900 
ªt
 = 
	`ö£π_tx_aq
(&
pkt_tx
);

901 
	`Àave_¸
(
bm_£m
, 34);

903 if(
DEBUG_NL
 == 2)

905 
	`ƒk_k¥ötf
(
	`PSTR
("build_Msg_Hello() insertedÖacket."));

906 
	`¥öt_tx_buf„r
();

910 if(
ªt
 =
NRK_ERROR
 && 
DEBUG_NL
 == 2)

912 
	`ƒk_k¥ötf
(
	`PSTR
("HELLO msg wasÇot inserted intoÅheÅransmit queue\r\n"));

915 
°¨t
.
£cs
 = 
íd
.secs;

916 
°¨t
.
«no_£cs
 = 
íd
.nano_secs;

919 if(
£¡
 >= 3)

921 
	`buûd_Msg_NgbLi°
(&
mn
);

923 
	`íãr_¸
(
bm_£m
, 34);

924 
ªt
 = 
	`ö£π_tx_aq
(&
pkt_tx
);

925 
	`Àave_¸
(
bm_£m
, 34);

927 if(
DEBUG_NL
 == 2)

929 
	`ƒk_k¥ötf
(
	`PSTR
("build_Msg_NgbList() insertedÖacket."));

930 
	`¥öt_tx_buf„r
();

934 if(
ªt
 =
NRK_ERROR
 && 
DEBUG_NL
 == 2)

936 
	`ƒk_k¥ötf
(
	`PSTR
("NGB_LIST msg wasÇot inserted intoÅheÅransmit queue\r\n"));

939 
£¡
 = 0;

943 if(
	`ønd
() % 2 == 0)

944 
	`cﬁÀ˘_queue_°©i°ics
();

946 
	`íãr_¸
(
bm_£m
, 34);

947 
±r
 = 
	`ªmove_tx_aq
();

948 
	`Àave_¸
(
bm_£m
, 34);

950 if(
±r
 =
NULL
)

952 if(
DEBUG_NL
 == 2)

953 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Transmit queue isÉmpty\r\n"));

956 
	`ƒk_time_gë
(&
íd
);

958 
	`ƒk_waô_u¡û_√xt_≥riod
();

962 if(
DEBUG_NL
 == 2)

964 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): PacketÑemoved. Packet = "));

966 
	`¥öt_pkt
–&(
±r
 -> 
pkt
) );

972 if–(
	`pkt_ty≥
(&(
±r
 -> 
pkt
)Ë=
APPLICATION
Ë&& (’å ->Ökt).
§c
 =
NODE_ADDR
) )

975 
	`u≈ack_TL_UDP_hódî
(&
£g
, (
±r
 -> 
pkt
).
d©a
);

976 
	`mem˝y
(
£g
.
d©a
, (
±r
 -> 
pkt
).d©®+ 
SIZE_TRANSPORT_UDP_HEADER
, 
MAX_APP_PAYLOAD
);

978 if(
DEBUG_NL
 == 2)

980 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): Segment Removed = "));

981 
	`¥öt_£g
(&
£g
);

983 
isAµliˇti⁄
 = 
TRUE
;

987 
	`∑ck_NW_Packë_hódî
(
tx_buf
, &(
±r
 -> 
pkt
));

989 
	`mem˝y
(
tx_buf
 + 
SIZE_NW_PACKET_HEADER
, (
±r
 -> 
pkt
).
d©a
, 
MAX_NETWORK_PAYLOAD
);

991 
	`íãr_¸
(
bm_£m
, 34);

992 
	`ö£π_tx_fq
(
±r
);

993 
	`Àave_¸
(
bm_£m
, 34);

994 if(
DEBUG_NL
 == 2)

996 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): ReleasedÅransmit buffer back into queue\n"));

997 
	`¥öt_tx_buf„r
();

1002 
ªt
 = 
	`bmac_tx_pkt_n⁄blockög
(
tx_buf
, 
SIZE_NW_PACKET
);

1003 if(
ªt
 =
NRK_ERROR
)

1004 if(
	`ƒk_evít_waô
(
	`SIG
(
tx_d⁄e_sig«l
)) == 0)

1006 
	`ƒk_öt_dißbÀ
();

1007 
	`ƒk_Àd_£t
(
RED_LED
);

1009 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned byÇrk_event_wait(tx_done_signal)\r\n"));

1011 }
ªt
 =
NRK_ERROR
);

1014 
timeout
.
£cs
 = 10;

1015 
timeout
.
«no_£cs
 = 0;

1016 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
 )

1018 
	`ƒk_öt_dißbÀ
();

1019 
	`ƒk_Àd_£t
(
RED_LED
);

1021 
	`ƒk_k¥ötf
(
	`PSTR
("NL:nl_tx(): ErrorÑegistering forÇrk_wakeup_signal\r\n"));

1023 if–
	`ƒk_£t_√xt_wakeup
(
timeout
Ë=
NRK_ERROR
)

1025 
	`ƒk_öt_dißbÀ
();

1026 
	`ƒk_Àd_£t
(
RED_LED
);

1028 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx(): ErrorÑeturned byÇrk_set_next_wakeup()\r\n"));

1030 
	`ƒk_Àd_£t
(
BLUE_LED
);

1031 
ªt
 = 
	`ƒk_evít_waô
 (
	`SIG
(
tx_d⁄e_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
));

1032 if(
ªt
 == 0)

1034 
	`ƒk_öt_dißbÀ
();

1035 
	`ƒk_Àd_£t
(
RED_LED
);

1037 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned byÇrk_event_wait(tx_done_signal)\r\n"));

1039 if(
ªt
 & 
	`SIG
(
tx_d⁄e_sig«l
))

1041 if(
isAµliˇti⁄
 =
TRUE
)

1043 
	`íãr_¸
(
é_£m
, 34);

1044 
p‹t_ödex
 = 
	`p‹t_to_p‹t_ödex
(
£g
.
§cP‹t
);

1046 if(
p‹t_ödex
 =
NRK_ERROR
)

1048 
	`ƒk_öt_dißbÀ
();

1049 
	`ƒk_Àd_£t
(
RED_LED
);

1051 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task: Bug detected in implementation ofÖortÉlementárray\r\n"));

1054 if(
	`ƒk_evít_sig«l
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
Ë=
NRK_ERROR
)

1056 if(
	`ƒk_î∫o_gë
() == 1)

1058 
	`ƒk_öt_dißbÀ
();

1059 
	`ƒk_Àd_£t
(
RED_LED
);

1061 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task: Bug detected in creating signals inÖortÉlementárray\r\n"));

1064 
	`Àave_¸
(
é_£m
, 34);

1072 if(
ªt
 & 
	`SIG
(
ƒk_wakeup_sig«l
))

1078 
	`ƒk_k¥ötf
(
	`PSTR
("BMAC didÇotÅransmitÅheÖacket within specifiedÅime\r\n"));

1083 
	`ƒk_öt_dißbÀ
();

1084 
	`ƒk_Àd_£t
(
RED_LED
);

1086 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): Unknown signal caught\r\n"));

1089 
	`ƒk_Àd_˛r
(
BLUE_LED
);

1091 
	`ƒk_time_gë
(&
íd
);

1096 
	}
}

1098 
öt8_t
 
	$£t_routög_Æg‹ôhm
(
öt8_t
 
¥ef
, i¡8_à
ty≥
, i¡8_à
pdi°
)

1100 
¥ef
)

1102 
LINK_STATE
:

1105 
FLOODING
:

1107 
ty≥
)

1109 
TTL_BASED
:

1112 
PROBABILISTIC
:

1114 
pdi°
)

1116 
RANDOM
:

1117 
GAUSSIAN
:

1122 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1123  
NRK_ERROR
;

1131 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1132  
NRK_ERROR
;

1140 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1141  
NRK_ERROR
;

1145 
	`íãr_¸
(
∆_£m
, 19);

1146 
ROUTING_ALGORITHM
 = 
¥ef
;

1147 if(
¥ef
 =
FLOODING
)

1149 
FLOODING_TYPE
 = 
ty≥
;

1150 if(
ty≥
 =
PROBABILISTIC
)

1152 
P_DISTRIBUTION
 = 
pdi°
;

1155 
	`Àave_¸
(
∆_£m
, 19);

1157  
NRK_OK
;

1158 
	}
}

1160 
	$¸óã_√tw‹k_œyî_èsks
()

1162 
NL_RX_TASK
.
èsk
 = 
∆_rx_èsk
;

1163 
NL_RX_TASK
.
Ptos
 = (*Ë&
∆_rx_èsk_°ack
[
NRK_APP_STACKSIZE
 - 1];

1164 
NL_RX_TASK
.
Pbos
 = (*Ë&
∆_rx_èsk_°ack
[0];

1165 
NL_RX_TASK
.
¥io
 = 19;

1166 
NL_RX_TASK
.
Fú°A˘iv©i⁄
 = 
TRUE
;

1167 
NL_RX_TASK
.
Ty≥
 = 
BASIC_TASK
;

1168 
NL_RX_TASK
.
SchTy≥
 = 
PREEMPTIVE
;

1170 
NL_RX_TASK
.
˝u_ª£rve
.
£cs
 = 0;

1171 
NL_RX_TASK
.
˝u_ª£rve
.
«no_£cs
 = 700 * 
NANOS_PER_MS
;

1172 
NL_RX_TASK
.
≥riod
.
£cs
 = 1;

1173 
NL_RX_TASK
.
≥riod
.
«no_£cs
 = 0;

1176 
NL_RX_TASK
.
off£t
.
£cs
 = 0;

1177 
NL_RX_TASK
.
off£t
.
«no_£cs
= 0;

1178 
	`ƒk_a˘iv©e_èsk
 (&
NL_RX_TASK
);

1181 
NL_TX_TASK
.
èsk
 = 
∆_tx_èsk
;

1182 
NL_TX_TASK
.
Ptos
 = (*Ë&
∆_tx_èsk_°ack
[
NRK_APP_STACKSIZE
 - 1];

1183 
NL_TX_TASK
.
Pbos
 = (*Ë&
∆_tx_èsk_°ack
[0];

1184 
NL_TX_TASK
.
¥io
 = 18;

1185 
NL_TX_TASK
.
Fú°A˘iv©i⁄
 = 
TRUE
;

1186 
NL_TX_TASK
.
Ty≥
 = 
BASIC_TASK
;

1187 
NL_TX_TASK
.
SchTy≥
 = 
PREEMPTIVE
;

1189 
NL_TX_TASK
.
˝u_ª£rve
.
£cs
 = 0;

1190 
NL_TX_TASK
.
˝u_ª£rve
.
«no_£cs
 = 500 * 
NANOS_PER_MS
;

1191 
NL_TX_TASK
.
≥riod
.
£cs
 = 1;

1192 
NL_TX_TASK
.
≥riod
.
«no_£cs
 = 0;

1194 
NL_TX_TASK
.
off£t
.
£cs
 = 0;

1195 
NL_TX_TASK
.
off£t
.
«no_£cs
= 0;

1196 
	`ƒk_a˘iv©e_èsk
 (&
NL_TX_TASK
);

1198 if(
DEBUG_NL
 == 2)

1199 
	`ƒk_k¥ötf
(
	`PSTR
("create_network_layer_tasks(): NetworkÜayerÅask creation done\r\n"));

1200 
	}
}

1203 
	$öôüli£_√tw‹k_œyî
()

1205 
öt8_t
 
i
;

1208 
∆
.
cou¡
 = 0;

1209 
∆
.
my_addr
 = 
NODE_ADDR
;

1210 
i
 = 0; i < 
MAX_NGBS
; i++)

1211 
∆
.
ngbs
[
i
].
addr
 = 
BCAST_ADDR
;

1213 
DEFAULT_GATEWAY
 = 
BCAST_ADDR
;

1214 
ROUTING_ALGORITHM
 = 
DEFAULT_ROUTING_ALGORITHM
;

1215 
FLOODING_TYPE
 = 
DEFAULT_FLOODING_TYPE
;

1216 
P_DISTRIBUTION
 = 
DEFAULT_PDISTRIBUTION
;

1218 
	`öôüli£_routög_èbÀ
();

1220 
∆_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

1221 if(
∆_£m
 =
NULL
)

1223 
	`ƒk_öt_dißbÀ
();

1224 
	`ƒk_Àd_£t
(
RED_LED
);

1226 
	`ƒk_k¥ötf
(
	`PSTR
("NL: Error creating semaphore in initialise_network_layer()\r\n"));

1229 
	`¸óã_√tw‹k_œyî_èsks
();

1232 
	}
}

1234 
	$öôüli£_routög_èbÀ
()

1236 
öt8_t
 
i
;

1238 
i
 = 0; i < 
MAX_NODES
; i++)

1240 
π
[
i
].
de°
 = 
BCAST_ADDR
;

1241 
π
[
i
].
√xtH›
 = 
BCAST_ADDR
;

1242 
π
[
i
].
co°
 = 
INFINITY
;

1245 
	}
}

1247 
	$£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
m
)

1249 
öt8_t
 
i
;

1251 
	`íãr_¸
(
∆_£m
, 34);

1252 
	`öôüli£_routög_èbÀ
();

1253 
DEFAULT_GATEWAY
 = 
m
 -> 
dg
;

1254 
i
 = 0; i < 
MAX_NODES
; i++)

1256 
π
[
i
] = 
m
 ->Ñt[i];

1258 
	`Àave_¸
(
∆_£m
, 34);

1260 
	}
}

1262 
	$¥öt_pkt_hódî
(
NW_Packë
 *
pkt
)

1264 
	`¥ötf
("[%u %u %u %u %d %u %d %d]", 
pkt
 -> 
§c
,Ökà-> 
de°
,Ökà-> 
¥evH›
,Ökà-> 
√xtH›
,Ökà-> 
âl
,Ökà-> 
ty≥
,Ökà-> 
Àngth
,Ökà-> 
¥io
);

1267 
	}
}

1269 
	$¥öt_pkt
(
NW_Packë
 *
pkt
)

1271 
öt8_t
 
i
;

1273 
	`¥öt_pkt_hódî
(
pkt
);

1274 
i
 = 0; i < 
pkt
 -> 
Àngth
; i++)

1275 
	`¥ötf
("%u ", (
pkt
 -> 
d©a
)[
i
]);

1277 
	`¥ötf
("\r\n");

1280 
	}
}

1282 
	$¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπbl
)

1284 
öt8_t
 
i
;

1286 
	`ƒk_k¥ötf
(
	`PSTR
("RoutingÅable for "));

1287 
	`¥ötf
("%d\r\n", 
mπbl
 -> 
node
);

1289 
i
 = 0; i < 
MAX_NODES
; i++)

1291 if((
mπbl
 -> 
π
[
i
]).
de°
 =
BCAST_ADDR
)

1294 
	`¥ötf
("%d -> %d [nh = ", 
mπbl
 -> 
node
, (mπb»-> 
π
[
i
]).
de°
);

1295 if((
mπbl
 -> 
π
[
i
]).
√xtH›
 =
INVALID_ADDRESS
)

1296 
	`¥ötf
("INV, ");

1298 
	`¥ötf
("%d, ", (
mπbl
 -> 
π
[
i
]).
√xtH›
);

1300 if((
mπbl
 -> 
π
[
i
]).
co°
 !
INFINITY
)

1301 
	`¥ötf
("di° = %d]\r\n", (
mπbl
 -> 
π
[
i
]).
co°
);

1303 
	`¥ötf
("dist = INF]\r\n");

1306 
	}
}

1308 
	$ªc‹d_tx_queue_fuŒ
(
NW_Packë
 *
pkt
)

1312 
	}
}

1314 
	$ªc‹d_u«ssocüãd_sockë_pkt
(
NW_Packë
 *
pkt
)

1317 
	}
}

1319 
	$ªc‹d_max_ngb_limô_ªached
(
NW_Packë
 *
pkt
)

1322 
	}
}

1324 
	$cﬁÀ˘_queue_°©i°ics
()

1327 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NetworkLayer.h

32 #i‚de‡
_NETWORK_LAYER_H


33 
	#_NETWORK_LAYER_H


	)

35 
	~"NWSèckC⁄fig.h
"

36 
	~<°döt.h
>

37 
	~"Tøn•‹tLayîUDP.h
"

39 
	#TRUE
 1

	)

40 
	#FALSE
 0

	)

41 
	#DEBUG_NL
 0

42 

	)

45 
	#MAX_NETWORK_PAYLOAD
 
MAX_TRANSPORT_UDP_SEG


46 
	#BCAST_ADDR
 65535

47 

	)

49 
	#LINK_STATE
 1

50 
	#FLOODING
 2

	)

51 
	#PROBABILISTIC
 1

52 
	#TTL_BASED
 2

	)

53 
	#RANDOM
 1

54 
	#GAUSSIAN
 2

	)

56 
	#DEFAULT_ROUTING_ALGORITHM
 
LINK_STATE


	)

57 
	#DEFAULT_FLOODING_TYPE
 
TTL_BASED


	)

58 
	#DEFAULT_PDISTRIBUTION
 
RANDOM


	)

61 
	#SIZE_NEIGHBOR
 5

	)

62 
	#SIZE_NEIGHBORLIST
 (3 + 
MAX_NGBS
 * 
SIZE_NEIGHBOR
)

	)

64 
	#SIZE_MSG_HELLO
 
SIZE_NEIGHBOR


	)

65 
	#SIZE_MSG_NGB_LIST
 
SIZE_NEIGHBORLIST


	)

67 
	#SIZE_NW_PACKET_HEADER
 12

	)

68 
	#SIZE_NW_PACKET
 (
SIZE_NW_PACKET_HEADER
 + 
MAX_NETWORK_PAYLOAD
)

	)

70 
	#SIZE_ROUTING_TABLE_ENTRY
 5

	)

71 
	#SIZE_ROUTING_TABLE
 (
SIZE_ROUTING_TABLE_ENTRY
 * 
MAX_NODES
)

	)

72 
	#SIZE_MSG_ROUTING_TABLE
 (4 + 
SIZE_ROUTING_TABLE
)

	)

74 
	#RF_BUFFER_SIZE
 92

75 

	)

77 
	#APPLICATION
 0x00

78 
	#NW_CONTROL
 0x80

79 

	)

81 
	#HELLO
 0x80

82 
	#NGB_LIST
 0x88

83 
	#ROUTE_CONFIG
 0x90

84 
	#INVALID
 0xFF

85 

	)

87 
	#UDP
 0x00

88 

	)

90 
	#MULTIHOP_YES
 
TRUE


	)

91 
	#MULTIHOP_NO
 
FALSE


	)

93 
	#INFINITY
 100

	)

94 
	#INVALID_ADDRESS
 
BCAST_ADDR


	)

101 
uöt16_t
 
	maddr
;

102 
öt8_t
 
	mrssi
;

103 
öt8_t
 
	mœ°Rï‹t
;

104 
öt8_t
 
	misNew
;

105 }
	tNeighb‹
;

110 
uöt16_t
 
	mmy_addr
;

111 
Neighb‹
 
	mngbs
[
MAX_NGBS
];

112 
öt8_t
 
	mcou¡
;

113 }
	tNeighb‹Li°
;

118 
Neighb‹
 
	mn
;

119 }
	tMsg_Hñlo
;

124 
Neighb‹Li°
 
	m∆
;

125 }
	tMsg_NgbLi°
;

130 
uöt16_t
 
	m§c
;

131 
uöt16_t
 
	mde°
;

132 
uöt16_t
 
	m¥evH›
;

133 
uöt16_t
 
	m√xtH›
;

134 
öt8_t
 
	mâl
;

135 
uöt8_t
 
	mty≥
;

140 
öt8_t
 
	mÀngth
;

141 
öt8_t
 
	m¥io
;

142 
uöt8_t
 
	md©a
[
MAX_NETWORK_PAYLOAD
];

143 }
	tNW_Packë
;

148 
uöt16_t
 
	mde°
;

149 
uöt16_t
 
	m√xtH›
;

150 
uöt8_t
 
	mco°
;

151 }
	tRoutögTabÀ
;

155 
uöt16_t
 
	mdg
;

156 
uöt16_t
 
	mnode
;

157 
RoutögTabÀ
 
	mπ
[
MAX_NODES
];

158 }
	tMsg_RoutögTabÀ
;

161 
öt8_t
 
add_√ighb‹
(
Neighb‹
 
n
);

174 
öt8_t
 
shouldIMu…ih›
(
NW_Packë
 *
pkt
);

183 
mu…ih›
(
NW_Packë
 *
pkt
);

193 
uöt16_t
 
rouã_addr
(uöt16_à
addr
);

202 
rouã_∑ckë
(
NW_Packë
 *
pkt
);

211 
öt8_t
 
£ndToG©eway
(
uöt8_t
 *
buf
, i¡8_à
Àn
);

226 
uöt8_t
 
pkt_ty≥
(
NW_Packë
 *
pkt
);

235 
uöt8_t
 
é_ty≥
(uöt8_à
ty≥
);

244 
uöt8_t
 
nw_˘æ_ty≥
(uöt8_à
ty≥
);

253 
¥o˚ss_≠p_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
);

265 
¥o˚ss_nw_˘æ_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
);

281 
¸óã_√tw‹k_œyî_èsks
();

290 
öôüli£_√tw‹k_œyî
();

299 
ªc‹d_tx_queue_fuŒ
(
NW_Packë
 *
pkt
);

308 
ªc‹d_u«ssocüãd_sockë_pkt
(
NW_Packë
 *
pkt
);

317 
ªc‹d_max_ngb_limô_ªached
(
NW_Packë
 *
pkt
);

326 
cﬁÀ˘_queue_°©i°ics
();

336 
öt8_t
 
£t_routög_Æg‹ôhm
(öt8_à
¥ef
, i¡8_à
ty≥
, i¡8_à
pdi°
);

353 
£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπ
);

356 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπ
);

365 
öt8_t
 
gë_routög_èbÀ
(
RoutögTabÀ
 *
π
);

376 
¥öt_pkt_hódî
(
NW_Packë
 *
pkt
);

385 
¥öt_pkt
(
NW_Packë
 *
pkt
);

394 
öôüli£_routög_èbÀ
();

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Pack.c

28 
	~"Pack.h
"

29 
	~"NWEº‹Codes.h
"

33 
öt8_t
 
	gídün
;

36 
öt8_t
 
	$ídü¬ess
()

38 
uöt16_t
 
n
 = 0x0102;

39 
uöt8_t
 *
±r
 = (uöt8_t*)(&
n
);

41 if(
±r
[0] == 2 &&Ötr[1] == 1)

43 
ídün
 = 
LITTLE_ENDIAN
;

44  
LITTLE_ENDIAN
;

46 if(
±r
[0] == 1 &&Ötr[1] == 2)

48 
ídün
 = 
BIG_ENDIAN
;

49  
BIG_ENDIAN
;

51  
ERROR_ENDIAN
;

52 
	}
}

55 
	$∑ck_Neighb‹
(
uöt8_t
 *
de°
, 
Neighb‹
 *
n
)

57 if(
ídün
 =
LITTLE_ENDIAN
)

59 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) + 1 );

60 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) );

64 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) );

65 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) + 1 );

68 
de°
[2] = 
n
 -> 
rssi
;

69 
de°
[3] = 
n
 -> 
œ°Rï‹t
;

70 
de°
[4] = 
n
 -> 
isNew
;

73 
	}
}

75 
	$∑ck_Msg_Hñlo
(
uöt8_t
 *
de°
, 
Msg_Hñlo
 *
m
)

77 
	`∑ck_Neighb‹
(
de°
, &(
m
 -> 
n
));

79 
	}
}

81 
	$∑ck_Neighb‹Li°
(
uöt8_t
 *
de°
, 
Neighb‹Li°
 *
n
)

83 
uöt8_t
 
i
,
j
;

85 if(
ídün
 =
LITTLE_ENDIAN
)

87 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) + 1 );

88 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) );

92 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) );

93 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) + 1 );

97 
i
 = 0, 
j
 = 2; i < 
MAX_NGBS
; i++, j +
SIZE_NEIGHBOR
)

98 
	`∑ck_Neighb‹
–
de°
 + 
j
, &(
n
 -> 
ngbs
[
i
]) );

100 
de°
[27] = 
n
 -> 
cou¡
;

103 
	}
}

105 
	$∑ck_Msg_NgbLi°
(
uöt8_t
 *
de°
, 
Msg_NgbLi°
 *
m
)

107 
	`∑ck_Neighb‹Li°
(
de°
, &(
m
 -> 
∆
));

109 
	}
}

111 
	$∑ck_RoutögTabÀE¡ry
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 *
π
)

113 if(
ídün
 =
LITTLE_ENDIAN
)

115 
de°
[0] = *–(
uöt8_t
*)(&(
π
 -> dest)) + 1 );

116 
de°
[1] = *–(
uöt8_t
*)(&(
π
 -> dest)) );

118 
de°
[2] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) + 1 );

119 
de°
[3] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) );

123 
de°
[0] = *–(
uöt8_t
*)(&(
π
 -> dest)) );

124 
de°
[1] = *–(
uöt8_t
*)(&(
π
 -> dest)) + 1 );

126 
de°
[2] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) );

127 
de°
[3] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) + 1 );

129 
de°
[4] = 
π
 -> 
co°
;

131 
	}
}

133 
	$∑ck_RoutögTabÀ
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 
π
[])

135 
öt8_t
 
i
,
j
;

137 
i
 = 0, 
j
 = 0; i < 
MAX_NODES
; i++, j +
SIZE_ROUTING_TABLE_ENTRY
)

139 
	`∑ck_RoutögTabÀE¡ry
(
de°
 + 
j
, &
π
[
i
]);

142 
	}
}

143 
	$∑ck_Msg_RoutögTabÀ
(
uöt8_t
 *
de°
, 
Msg_RoutögTabÀ
 *
m
)

145 if(
ídün
 =
LITTLE_ENDIAN
)

147 
de°
[0] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) + 1 );

148 
de°
[1] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) );

150 
de°
[2] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) + 1 );

151 
de°
[3] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) );

156 
de°
[0] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) );

157 
de°
[1] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) + 1 );

159 
de°
[2] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) );

160 
de°
[3] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) + 1 );

163 
	`∑ck_RoutögTabÀ
(
de°
 + 4, 
m
 -> 
π
);

165 
	}
}

167 
	$∑ck_NW_Packë_hódî
(
uöt8_t
 *
de°
, 
NW_Packë
 *
pkt
)

169 if(
ídün
 =
LITTLE_ENDIAN
)

171 
de°
[0] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 );

172 
de°
[1] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) );

174 
de°
[2] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) + 1 );

175 
de°
[3] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) );

177 
de°
[4] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) + 1 );

178 
de°
[5] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) );

180 
de°
[6] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) + 1 );

181 
de°
[7] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) );

187 
de°
[0] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) );

188 
de°
[1] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 );

190 
de°
[2] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) );

191 
de°
[3] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) + 1 );

193 
de°
[4] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) );

194 
de°
[5] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) + 1 );

196 
de°
[6] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) );

197 
de°
[7] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) + 1 );

201 
de°
[8] = 
pkt
 -> 
âl
;

202 
de°
[9] = 
pkt
 -> 
ty≥
;

203 
de°
[10] = 
pkt
 -> 
Àngth
;

204 
de°
[11] = 
pkt
 -> 
¥io
;

207 
	}
}

209 
	$∑ck_NodeToG©ewaySîül_Packë_hódî
(
uöt8_t
 *
de°
, 
NodeToG©ewaySîül_Packë
 *
pkt
)

211 
de°
[0] = 
pkt
 -> 
ty≥
;

212 
de°
[1] = 
pkt
 -> 
Àngth
;

215 
	}
}

217 
	$∑ck_G©ewayToNodeSîül_Packë_hódî
(
uöt8_t
 *
de°
, 
G©ewayToNodeSîül_Packë
 *
pkt
)

219 
de°
[0] = 
pkt
 -> 
ty≥
;

220 
de°
[1] = 
pkt
 -> 
Àngth
;

223 
	}
}

225 
	$∑ck_TL_UDP_hódî
(
uöt8_t
 *
de°
, 
Tøn•‹t_Segmít_UDP
* 
£g
)

227 
de°
[0] = 
£g
 -> 
§cP‹t
;

228 
de°
[1] = 
£g
 -> 
de°P‹t
;

229 
de°
[2] = 
£g
 -> 
Àngth
;

232 
	}
}

237 
	$u≈ack_TL_UDP_hódî
(
Tøn•‹t_Segmít_UDP
* 
£g
, 
uöt8_t
 *
§c
)

239 
£g
 -> 
§cP‹t
 = 
§c
[0];

240 
£g
 -> 
de°P‹t
 = 
§c
[1];

241 
£g
 -> 
Àngth
 = 
§c
[2];

244 
	}
}

246 
	$u≈ack_Neighb‹
(
Neighb‹
 *
n
, 
uöt8_t
* 
§c
)

248 if(
ídün
 =
LITTLE_ENDIAN
)

250 *–(
uöt8_t
*)(&(
n
 -> 
addr
)ËË
§c
[1];

251 *–(
uöt8_t
*)(&(
n
 -> 
addr
)Ë+ 1 ) = 
§c
[0];

255 *–(
uöt8_t
*)(&(
n
 -> 
addr
)ËË
§c
[0];

256 *–(
uöt8_t
*)(&(
n
 -> 
addr
)Ë+ 1 ) = 
§c
[1];

259 
n
 -> 
rssi
 = 
§c
[2];

260 
n
 -> 
œ°Rï‹t
 = 
§c
[3];

261 
n
 -> 
isNew
 = 
§c
[4];

264 
	}
}

266 
	$u≈ack_Msg_Hñlo
(
Msg_Hñlo
 *
m
, 
uöt8_t
* 
§c
)

268 
	`u≈ack_Neighb‹
(&(
m
 -> 
n
), 
§c
);

270 
	}
}

272 
	$u≈ack_Neighb‹Li°
(
Neighb‹Li°
 *
∆i°
, 
uöt8_t
 *
§c
)

274 
Neighb‹
 
n
;

275 
uöt8_t
 
i
,
j
;

277 if(
ídün
 =
LITTLE_ENDIAN
)

279 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)ËË
§c
[1];

280 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)Ë+ 1 ) = 
§c
[0];

284 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)ËË
§c
[0];

285 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)Ë+ 1 ) = 
§c
[1];

288 
i
 = 0,
j
 = 2; i < 
MAX_NGBS
; i++, j +
SIZE_NEIGHBOR
)

290 
	`u≈ack_Neighb‹
(&
n
, 
§c
 + 
j
);

291 
∆i°
 -> 
ngbs
[
i
] = 
n
;

293 
∆i°
 -> 
cou¡
 = 
§c
[2 + 
MAX_NGBS
 * 
SIZE_NEIGHBOR
];

296 
	}
}

298 
	$u≈ack_Msg_NgbLi°
(
Msg_NgbLi°
 *
m
, 
uöt8_t
 *
§c
)

300 
	`u≈ack_Neighb‹Li°
(&(
m
 -> 
∆
), 
§c
);

302 
	}
}

304 
	$u≈ack_RoutögTabÀE¡ry
(
RoutögTabÀ
 *
π
, 
uöt8_t
 *
§c
)

306 if(
ídün
 =
LITTLE_ENDIAN
)

308 *–(
uöt8_t
*)(&(
π
 -> 
de°
)ËË
§c
[1];

309 *–(
uöt8_t
*)(&(
π
 -> 
de°
)Ë+ 1 ) = 
§c
[0];

311 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)ËË
§c
[3];

312 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[2];

317 *–(
uöt8_t
*)(&(
π
 -> 
de°
)ËË
§c
[0];

318 *–(
uöt8_t
*)(&(
π
 -> 
de°
)Ë+ 1 ) = 
§c
[1];

320 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)ËË
§c
[2];

321 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[3];

324 
π
 -> 
co°
 = 
§c
[4];

326 
	}
}

327 
	$u≈ack_RoutögTabÀ
(
RoutögTabÀ
 
π
[], 
uöt8_t
 *
§c
)

329 
öt8_t
 
i
, 
j
;

331 
i
 = 0, 
j
 = 0; i < 
MAX_NODES
; i++, j +
SIZE_ROUTING_TABLE_ENTRY
)

333 
	`u≈ack_RoutögTabÀE¡ry
(&
π
[
i
], 
§c
 + 
j
);

336 
	}
}

337 
	$u≈ack_Msg_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
m
, 
uöt8_t
 *
§c
)

339 if(
ídün
 =
LITTLE_ENDIAN
)

341 *–(
uöt8_t
*)(&(
m
 -> 
dg
)ËË
§c
[1];

342 *–(
uöt8_t
*)(&(
m
 -> 
dg
)Ë+ 1 ) = 
§c
[0];

344 *–(
uöt8_t
*)(&(
m
 -> 
node
)ËË
§c
[3];

345 *–(
uöt8_t
*)(&(
m
 -> 
node
)Ë+ 1 ) = 
§c
[2];

349 *–(
uöt8_t
*)(&(
m
 -> 
dg
)ËË
§c
[0];

350 *–(
uöt8_t
*)(&(
m
 -> 
dg
)Ë+ 1 ) = 
§c
[1];

352 *–(
uöt8_t
*)(&(
m
 -> 
node
)ËË
§c
[2];

353 *–(
uöt8_t
*)(&(
m
 -> 
node
)Ë+ 1 ) = 
§c
[3];

356 
	`u≈ack_RoutögTabÀ
(
m
 -> 
π
, 
§c
 + 4);

358 
	}
}

360 
	$u≈ack_NW_Packë_hódî
(
NW_Packë
 *
pkt
, 
uöt8_t
* 
§c
)

362 if(
ídün
 =
LITTLE_ENDIAN
)

364 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) ) = src[1];

365 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 ) = src[0];

367 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)ËË
§c
[3];

368 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)Ë+ 1 ) = 
§c
[2];

370 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)ËË
§c
[5];

371 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)Ë+ 1 ) = 
§c
[4];

373 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)ËË
§c
[7];

374 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[6];

379 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) ) = src[0];

380 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 ) = src[1];

382 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)ËË
§c
[2];

383 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)Ë+ 1 ) = 
§c
[3];

385 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)ËË
§c
[4];

386 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)Ë+ 1 ) = 
§c
[5];

388 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)ËË
§c
[6];

389 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[7];

393 
pkt
 -> 
âl
 = 
§c
[8];

394 
pkt
 -> 
ty≥
 = 
§c
[9];

395 
pkt
 -> 
Àngth
 = 
§c
[10];

396 
pkt
 -> 
¥io
 = 
§c
[11];

399 
	}
}

402 
	$u≈ack_NodeToG©ewaySîül_Packë_hódî
(
NodeToG©ewaySîül_Packë
 *
pkt
, 
uöt8_t
 *
§c
)

404 
pkt
 -> 
ty≥
 = 
§c
[0];

405 
pkt
 -> 
Àngth
 = 
§c
[1];

408 
	}
}

410 
	$u≈ack_G©ewayToNodeSîül_Packë_hódî
(
G©ewayToNodeSîül_Packë
 *
pkt
, 
uöt8_t
 *
§c
)

412 
pkt
 -> 
ty≥
 = 
§c
[0];

413 
pkt
 -> 
Àngth
 = 
§c
[1];

416 
	}
}

419 
uöt16_t
 
	$ht⁄
(
uöt16_t
 
ho°
)

421 
uöt16_t
 
nw
;

422 
uöt8_t
 *
§c
;

423 
uöt8_t
 *
de°
;

425 if(
ídün
 =
BIG_ENDIAN
)

426  
ho°
;

428 
§c
 = (
uöt8_t
*)(&
ho°
);

429 
de°
 = (
uöt8_t
*)(&
nw
);

431 
de°
[0] = 
§c
[1];

432 
de°
[1] = 
§c
[0];

434  
nw
;

435 
	}
}

439 
uöt16_t
 
	$¡oh
(
uöt16_t
 
nw
)

441 
uöt16_t
 
ho°
;

442 
uöt8_t
 *
§c
;

443 
uöt8_t
 *
de°
;

445 if(
ídün
 =
BIG_ENDIAN
)

446  
nw
;

448 
§c
 = (
uöt8_t
*)(&
nw
);

449 
de°
 = (
uöt8_t
*)(&
ho°
);

451 
de°
[0] = 
§c
[1];

452 
de°
[1] = 
§c
[0];

454  
ho°
;

455 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Pack.h

31 #i‚de‡
_PACK_H


32 
	#_PACK_H


	)

34 
	~"Nëw‹kLayî.h
"

35 
	~"Tøn•‹tLayîUDP.h
"

36 
	~"Sîül.h
"

37 
	~<°döt.h
>

41 
	#LITTLE_ENDIAN
 1

	)

42 
	#BIG_ENDIAN
 2

	)

45 
öt8_t
 
ídü¬ess
();

59 
∑ck_Neighb‹
(
uöt8_t
*, 
Neighb‹
*);

60 
∑ck_Msg_Hñlo
(
uöt8_t
*, 
Msg_Hñlo
*);

61 
∑ck_Neighb‹Li°
(
uöt8_t
*, 
Neighb‹Li°
*);

62 
∑ck_Msg_NgbLi°
(
uöt8_t
*, 
Msg_NgbLi°
*);

63 
∑ck_RoutögTabÀE¡ry
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 *
π
);

64 
∑ck_RoutögTabÀ
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 
π
[]);

65 
∑ck_Msg_RoutögTabÀ
(
uöt8_t
 *
de°
, 
Msg_RoutögTabÀ
 *
m
);

66 
∑ck_NW_Packë_hódî
(
uöt8_t
*, 
NW_Packë
*);

67 
∑ck_NodeToG©ewaySîül_Packë_hódî
(
uöt8_t
 *
de°
, 
NodeToG©ewaySîül_Packë
 *
pkt
);

68 
∑ck_G©ewayToNodeSîül_Packë_hódî
(
uöt8_t
 *
de°
, 
G©ewayToNodeSîül_Packë
 *
pkt
);

69 
∑ck_TL_UDP_hódî
(
uöt8_t
 *, 
Tøn•‹t_Segmít_UDP
*);

72 
u≈ack_Neighb‹
(
Neighb‹
*, 
uöt8_t
*);

73 
u≈ack_Msg_Hñlo
(
Msg_Hñlo
*, 
uöt8_t
*);

74 
u≈ack_Neighb‹Li°
(
Neighb‹Li°
*, 
uöt8_t
*);

75 
u≈ack_Msg_NgbLi°
(
Msg_NgbLi°
*, 
uöt8_t
*);

76 
u≈ack_RoutögTabÀE¡ry
(
RoutögTabÀ
 *
π
, 
uöt8_t
 *
§c
);

77 
u≈ack_RoutögTabÀ
(
RoutögTabÀ
 
π
[], 
uöt8_t
 *
§c
);

78 
u≈ack_Msg_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
m
, 
uöt8_t
 *
§c
);

79 
u≈ack_NW_Packë_hódî
(
NW_Packë
*, 
uöt8_t
*);

80 
u≈ack_NodeToG©ewaySîül_Packë_hódî
(
NodeToG©ewaySîül_Packë
*, 
uöt8_t
 *);

81 
u≈ack_G©ewayToNodeSîül_Packë_hódî
(
G©ewayToNodeSîül_Packë
*, 
uöt8_t
 *);

82 
u≈ack_TL_UDP_hódî
(
Tøn•‹t_Segmít_UDP
*, 
uöt8_t
 *);

85 
uöt16_t
 
ht⁄
(uint16_t);

86 
uöt16_t
 
¡oh
(uint16_t);

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Serial.c

27 
	~"Sîül.h
"

29 
	~<°dio.h
>

30 
	~<°döt.h
>

31 
	~<°dlib.h
>

33 
	~<ƒk.h
>

34 
	~<ö˛ude.h
>

35 
	~<ulib.h
>

36 
	~<avr/¶ìp.h
>

37 
	~<hÆ.h
>

38 
	~<ƒk_îr‹.h
>

39 
	~<ƒk_timî.h
>

40 
	~<¶ù.h
>

42 
	#INFINITY
 100

	)

43 
	#INVALID_ADDRESS
 0

	)

47 
u≈ack_G©ewayToNodeSîül_Packë_hódî
(
G©ewayToNodeSîül_Packë
 *, 
uöt8_t
 *);

48 
∑ck_Msg_RoutögTabÀ
(
uöt8_t
 *, 
Msg_RoutögTabÀ
*);

51 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *);

52 
£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *);

53 
uöt16_t
 
rouã_addr
(uint16_t);

56 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

57 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

58 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
*);

59 
ƒk_£m_t
 *
bm_£m
;

63 
ƒk_èsk_ty≥
 
	gSERIAL_TASK
;

64 
NRK_STK
 
	g£rül_èsk_°ack
[
NRK_APP_STACKSIZE
];

65 
£rül_èsk
();

67 
uöt8_t
 
	grx_buf
[
SIZE_GATEWAYTONODESERIAL_PACKET
];

68 
G©ewayToNodeSîül_Packë
 
	ggä_pkt
;

70 
Msg_RoutögTabÀ
 
	gmπ
;

71 
NW_Packë
 
	gnw_pkt
;

72 
uöt8_t
 
	gtx_buf
[
SIZE_NW_PACKET
];

118 
	$£ndToSîül
(
uöt8_t
 *
buf
, 
öt8_t
 
Àn
)

120  
	`¶ù_°¨ãd
 (Ë=
NRK_ERROR
 )

122 
	`ƒk_waô_u¡û_√xt_≥riod
();

125 if(
DEBUG_SR
 == 2)

127 
	`ƒk_k¥ötf
(
	`PSTR
("Calling slip_tx\r\n"));

130 if–
	`¶ù_tx
 (
buf
, 
Àn
Ë=
NRK_ERROR
 )

132 
	`ƒk_öt_dißbÀ
();

133 
	`ƒk_Àd_£t
(
RED_LED
);

136 
	`ƒk_k¥ötf
(
	`PSTR
("Error sending out NGB_LIST message over serial\r\n"));

141 
	}
}

143 
	$¥ötBuf„r
(
uöt8_t
 *
buf
, 
öt8_t
 
Àn
)

145 
Àn
 > 0)

147 
	`¥ötf
("%d ", *
buf
);

148 
buf
++;

149 
Àn
--;

151 
	`¥ötf
("\n\n");

153 
	}
}

156 
uöt8_t
 
	$£rül_pkt_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
)

158 
pkt
 -> 
ty≥
)

160 
SERIAL_APPLICATION
:

161  
SERIAL_APPLICATION
;

163 
SERIAL_ROUTE_CONFIG
:

164  
SERIAL_NW_CONTROL
;

167  
INVALID
;

168 
	}
}

170 
uöt8_t
 
	$£rül_nw_˘æ_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
)

172 
pkt
 -> 
ty≥
)

174 
SERIAL_ROUTE_CONFIG
:

175  
SERIAL_ROUTE_CONFIG
;

179 
	`¥ötf
("Bug detected in implementation ofÖacketÅype\n");

181  
INVALID
;

182 
	}
}

184 
	$¥o˚ss_£rül_≠p_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
)

186 
öt8_t
 
i
;

187 
	`¥ötf
("ReceivedánápplicationÜayerÖacket\n");

188 
i
 = 0; i < 
pkt
 -> 
Àngth
; i++)

190 
	`¥ötf
("%c", 
pkt
 -> 
d©a
[
i
]);

192 
	`¥ötf
("\r\n");

195 
	}
}

197 
	$¥o˚ss_£rül_nw_˘æ_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
)

199 
öt8_t
 
i
;

200 
öt8_t
 
ªt
;

202 if(
DEBUG_SR
 == 0)

204 
	`¥ötf
("InsideÖrocess_serial_nw_ctrl_pkt()\r\n");

207 
	`£rül_nw_˘æ_ty≥
(
pkt
))

209 
SERIAL_ROUTE_CONFIG
:

210 
	`u≈ack_Msg_RoutögTabÀ
(&
mπ
, 
pkt
 -> 
d©a
);

211 
mπ
.
dg
 = 
NODE_ADDR
;

213 if(
DEBUG_SR
 == 0)

215 
	`¥öt_RoutögTabÀ
(&
mπ
);

218 if(
mπ
.
node
 =
NODE_ADDR
)

220 
	`£t_RoutögTabÀ
(&
mπ
);

225 
nw_pkt
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

226 
nw_pkt
.
de°
 = 
mπ
.
node
;

227 
nw_pkt
.
√xtH›
 = 
	`rouã_addr
(
mπ
.
node
);

228 
nw_pkt
.
¥evH›
 = (
uöt16_t
)
NODE_ADDR
;

229 
nw_pkt
.
âl
 = 
MAX_NETWORK_DIAMETER
;

230 
nw_pkt
.
ty≥
 = (
uöt8_t
)
ROUTE_CONFIG
;

231 
nw_pkt
.
Àngth
 = 
SIZE_MSG_ROUTING_TABLE
;

232 
nw_pkt
.
¥io
 = 
NORMAL_PRIORITY
;

234 
	`∑ck_Msg_RoutögTabÀ
(
nw_pkt
.
d©a
, &
mπ
);

237 
	`íãr_¸
(
bm_£m
, 34);

238 
ªt
 = 
	`ö£π_tx_aq
(&
nw_pkt
);

239 if(
ªt
 =
NRK_ERROR
)

241 
	`Àave_¸
(
bm_£m
, 34);

242 
	`ƒk_waô_u¡û_√xt_≥riod
();

246 
	`Àave_¸
(
bm_£m
, 34);

257 
	}
}

260 
	$£rül_èsk
()

262 
öt8_t
 
ªt
;

264 if(
DEBUG_SR
 == 0)

266 
	`ƒk_k¥ötf
(
	`PSTR
("Inside serial_task. Task PID = "));

267 
	`¥ötf
("%d\r\n", 
	`ƒk_gë_pid
());

271 
	`¶ù_öô
 (
°dö
, 
°dout
, 0, 0);

276 if(
DEBUG_SR
 == 1)

278 
	`ƒk_k¥ötf
(
	`PSTR
("SL: Waiting foráÖacket fromÅhe gateway\r\n"));

280 
ªt
 = 
	`¶ù_rx
 (
rx_buf
, 
SIZE_GATEWAYTONODESERIAL_PACKET
);

281 i‡(
ªt
 > 0)

283 if(
DEBUG_SR
 == 0)

285 
	`ƒk_k¥ötf
(
	`PSTR
("Receivedá message fromÅhe gateway\r\n"));

286 
	`¥ötBuf„r
(
rx_buf
, 
SIZE_GATEWAYTONODESERIAL_PACKET
);

288 
	`u≈ack_G©ewayToNodeSîül_Packë_hódî
(&
gä_pkt
, 
rx_buf
);

289 
	`mem˝y
(
gä_pkt
.
d©a
, 
rx_buf
 + 
SIZE_GATEWAYTONODESERIAL_PACKET_HEADER
, 
MAX_GATEWAY_PAYLOAD
);

290 if(
DEBUG_SR
 == 0)

292 
	`ƒk_k¥ötf
(
	`PSTR
("Unpacked gatewaytonodeÖacket = "));

293 
	`¥öt_gä_pkt
(&
gä_pkt
);

296 
	`£rül_pkt_ty≥
(&
gä_pkt
))

298 
SERIAL_APPLICATION
:

299 
	`¥o˚ss_£rül_≠p_pkt
(&
gä_pkt
);

302 
SERIAL_NW_CONTROL
:

303 
	`¥o˚ss_£rül_nw_˘æ_pkt
(&
gä_pkt
);

306 
INVALID
:

308 
	`¥ötf
("£rül_èsk(): InvÆidÖackëÅy≥Ñe˚ived = %d\n", 
gä_pkt
.
ty≥
);

314 
	`ƒk_k¥ötf
(
	`PSTR
("FailedÅoÑeceiveá SLIP message from gateway\r\n"));

320 
	}
}

323 
	$¸óã_£rül_èsk
()

325 
SERIAL_TASK
.
èsk
 = 
£rül_èsk
;

326 
SERIAL_TASK
.
Ptos
 = (*Ë&
£rül_èsk_°ack
[
NRK_APP_STACKSIZE
 - 1];

327 
SERIAL_TASK
.
Pbos
 = (*Ë&
£rül_èsk_°ack
[0];

328 
SERIAL_TASK
.
¥io
 = 17;

329 
SERIAL_TASK
.
Fú°A˘iv©i⁄
 = 
TRUE
;

330 
SERIAL_TASK
.
Ty≥
 = 
BASIC_TASK
;

331 
SERIAL_TASK
.
SchTy≥
 = 
PREEMPTIVE
;

333 
SERIAL_TASK
.
˝u_ª£rve
.
£cs
 = 0;

334 
SERIAL_TASK
.
˝u_ª£rve
.
«no_£cs
 = 200 * 
NANOS_PER_MS
;

335 
SERIAL_TASK
.
≥riod
.
£cs
 = 0;

336 
SERIAL_TASK
.
≥riod
.
«no_£cs
 = 250 * 
NANOS_PER_MS
;

339 
SERIAL_TASK
.
off£t
.
£cs
 = 0;

340 
SERIAL_TASK
.
off£t
.
«no_£cs
= 0;

341 if(
CONNECTED_TO_GATEWAY
 =
TRUE
)

342 
	`ƒk_a˘iv©e_èsk
 (&
SERIAL_TASK
);

344 if(
DEBUG_SR
 == 0)

346 
	`ƒk_k¥ötf
(
	`PSTR
("SerialÅaskáctivated\r\n"));

348 
	}
}

350 
	$öôüli£_£rül_communiˇti⁄
()

352 
	`¸óã_£rül_èsk
();

355 
	}
}

357 
	$¥öt_gä_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
)

359 
öt8_t
 
i
;

360 
	`¥öt_gä_pkt_hódî
(
pkt
);

362 
i
 = 0; i < 
pkt
 -> 
Àngth
; i++)

364 
	`¥ötf
("%d ", 
pkt
 -> 
d©a
[
i
]);

366 
	`¥ötf
("\r\n");

369 
	}
}

372 
	$¥öt_gä_pkt_hódî
(
G©ewayToNodeSîül_Packë
 *
pkt
)

374 
	`ƒk_k¥ötf
(
	`PSTR
("["));

375 
	`¥ötf
("%d %d]", 
pkt
 -> 
ty≥
,Ökà-> 
Àngth
);

378 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Serial.h

31 #i‚de‡
_SERIAL_H


32 
	#_SERIAL_H


	)

34 
	~"NWSèckC⁄fig.h
"

35 
	~"Nëw‹kLayî.h
"

36 
	~<°döt.h
>

37 
	~<¶ù.h
>

39 
	#DEBUG_SR
 0

40 

	)

49 
	#SERIAL_APPLICATION
 0x00

50 
	#SERIAL_NW_CONTROL
 0x80

51 

	)

53 
	#SERIAL_NGB_LIST
 0x80

54 
	#SERIAL_ROUTE_CONFIG
 0x80

55 
	#INVALID
 0xFF

56 

	)

57 
	#SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
 2

	)

58 
	#SIZE_NODETOGATEWAYSERIAL_PACKET
 (
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
 + 
MAX_SERIAL_PAYLOAD
)

	)

60 
	#SIZE_GATEWAYTONODESERIAL_PACKET_HEADER
 2

	)

61 
	#SIZE_GATEWAYTONODESERIAL_PACKET
 (
SIZE_GATEWAYTONODESERIAL_PACKET_HEADER
 + 
MAX_GATEWAY_PAYLOAD
)

	)

66 
uöt8_t
 
	mty≥
;

73 
öt8_t
 
	mÀngth
;

74 
uöt8_t
 
	md©a
[
MAX_SERIAL_PAYLOAD
];

76 }
	tNodeToG©ewaySîül_Packë
;

80 
uöt8_t
 
	mty≥
;

86 
öt8_t
 
	mÀngth
;

87 
uöt8_t
 
	md©a
[
MAX_GATEWAY_PAYLOAD
];

88 }
	tG©ewayToNodeSîül_Packë
;

91 
£ndToSîül
(
uöt8_t
 *
buf
, 
öt8_t
 
Àngth
);

102 
¥ötBuf„r
(
uöt8_t
 *
buf
, 
öt8_t
 
Àn
);

113 
¸óã_£rül_èsk
();

114 
uöt8_t
 
£rül_pkt_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
);

115 
uöt8_t
 
£rül_nw_˘æ_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
);

116 
¥o˚ss_£rül_≠p_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
);

117 
¥o˚ss_£rül_nw_˘æ_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
);

118 
¥öt_gä_pkt
(
G©ewayToNodeSîül_Packë
*);

119 
¥öt_gä_pkt_hódî
(
G©ewayToNodeSîül_Packë
 *
pkt
);

120 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπbl
);

121 
öôüli£_£rül_communiˇti⁄
();

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/TransportLayerUDP.c

29 
	~"Tøn•‹tLayîUDP.h
"

30 
	~"Nëw‹kLayî.h
"

31 
	~"Buf„rM™agî.h
"

32 
	~"NWEº‹Codes.h
"

33 
	~<ƒk.h
>

34 
	~<ö˛ude.h
>

35 
	~<ulib.h
>

36 
	~<°dio.h
>

37 
	~<avr/¶ìp.h
>

38 
	~<hÆ.h
>

39 
	~<ƒk_îr‹.h
>

40 
	~<°döt.h
>

45 
Sockë
 
	gsock
[
NUM_PORTS
];

47 
P‹t
 
	gp‹ts
[
NUM_PORTS
];

49 
öt8_t
 
	géayî_öô_d⁄e
;

51 
Tøn•‹t_Segmít_UDP
 
	gudp_£g
;

52 
NW_Packë
 
	gpkt
;

54 
ƒk_£m_t
 *
	gé_£m
;

59 
Re˚iveBuf„rM™agî
 
rx_buf_mgr
[];

60 
öt8_t
 
num_bufs_‰ì
;

61 
Re˚iveBuf„rUDP
 
rx_buf_udp
[];

62 
TønsmôBuf„r
 
tx_buf
[];

63 
TønsmôBuf„rM™agî
 
tx_buf_mgr
;

64 
ƒk_£m_t
 *
bm_£m
;

66 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

67 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

68 
öt8_t
 
gë_num_bufs_‰ì
();

69 
ö£π_rx_fq
(
Re˚iveBuf„rUDP
*, 
öt8_t
, int8_t);

70 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
 *);

71 
öt8_t
 
gë_ö_¥o˚ss_buf_cou¡
(int8_t);

72 
Re˚iveBuf„rUDP
* 
ªmove_rx_pq
(
öt8_t
);

73 
¥öt_tx_buf„r
();

76 
uöt16_t
 
rouã_addr
(uint16_t);

77 
ƒk_£m_t
 *
∆_£m
;

80 
∑ck_TL_UDP_hódî
(
uöt8_t
*, 
Tøn•‹t_Segmít_UDP
*);

83 
go_öto_∑nic
(
öt8_t
 *);

86 
	$öôüli£_å™•‹t_œyî_udp
()

88 
öt8_t
 
i
;

91 
i
 = 0; i < 
NUM_PORTS
; i++)

93 
sock
[
i
].
pödex
 = -1;

94 
sock
[
i
].
rbmödex
 = -1;

95 
sock
[
i
].
pid
 = 
INVALID_PID
;

96 
sock
[
i
].
timeout
.
£cs
 = 0;

97 
sock
[
i
].
timeout
.
«no_£cs
 = 0;

99 
p‹ts
[
i
].
≤o
 = 
INVALID_PORT
;

103 
é_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

104 if(
é_£m
 =
NULL
)

106 
	`ƒk_öt_dißbÀ
();

107 
	`ƒk_Àd_£t
(
RED_LED
);

109 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_transport_layer_udp(): Error creatingÅhe semaphore\r\n"));

112 if(
NUM_PORTS
 > 
MAX_PORTS
)

114 
	`ƒk_öt_dißbÀ
();

115 
	`ƒk_Àd_£t
(
RED_LED
);

117 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_transport_layer_udp(): Too manyÖorts opened in system\r\n"));

121 
éayî_öô_d⁄e
 = 1;

123 
	}
}

125 
öt8_t
 
	$gë_√xt_avaûabÀ_sockë
()

127 
öt8_t
 
i
;

130 
i
 = 0; i < 
NUM_PORTS
; i++)

132 if(
sock
[
i
].
pid
 =
INVALID_PID
)

133  
i
;

135 
	`_ƒk_î∫o_£t
(
NO_SOCKET_DESC_AVAILABLE
);

137  
NRK_ERROR
;

138 
	}
}

141 
öt8_t
 
	$¸óã_sockë
(
öt8_t
 
ty≥
)

143 
öt8_t
 
ªsu…
;

145 
	`íãr_¸
(
é_£m
, 3);

147 if(
éayî_öô_d⁄e
 != 1)

149 
	`ƒk_öt_dißbÀ
();

150 
	`ƒk_Àd_£t
(
RED_LED
);

152 
	`ƒk_k¥ötf
(
	`PSTR
("create_socket(): TransportÜayerÇot initialised\r\n"));

155 
ty≥
)

157 
SOCK_DGRAM
:

158 
SOCK_IPC
:

159 
SOCK_RAW
:

160 
ªsu…
 = 
	`gë_√xt_avaûabÀ_sockë
();

161 if(
ªsu…
 !
NRK_ERROR
)

163 
sock
[
ªsu…
].
pid
 = 
	`ƒk_gë_pid
();

164 
sock
[
ªsu…
].
ty≥
 =Åype;

169 
	`_ƒk_î∫o_£t
(
UNSUPPORTED_SOCK_TYPE
);

170 
ªsu…
 = 
NRK_ERROR
;

173 
	`Àave_¸
(
é_£m
, 3);

174  
ªsu…
;

175 
	}
}

178 
uöt8_t
 
	$gë_√xt_avaûabÀ_p‹t
()

180 
uöt16_t
 
i
;

181 
öt8_t
 
j
;

183 
i
 = 
EPHEMERAL_PORT_NUM_START
; i <
MAX_PORT_NUM
; i++)

186 
j
 = 0; j < 
NUM_PORTS
; j++)

187 if(
p‹ts
[
j
].
≤o
 =
i
)

190 if(
j
 =
NUM_PORTS
)

191  
i
;

197 
	`_ƒk_î∫o_£t
(
NO_PORTS_AVAILABLE
);

198  
INVALID_PORT
;

199 
	}
}

201 
öt8_t
 
	$check_p‹t_avaûabÀ
(
uöt8_t
 
±
)

203 
öt8_t
 
i
;

205 
i
 = 0; i < 
NUM_PORTS
; i++)

206 if(
p‹ts
[
i
].
≤o
 =
±
)

209 if(
i
 =
NUM_PORTS
)

210  
NRK_OK
;

212 
	`_ƒk_î∫o_£t
(
PORT_UNAVAILABLE
);

213  
NRK_ERROR
;

214 
	}
}

216 
	$assign_p‹t
(
öt8_t
 
pödex
, 
uöt8_t
 
±
)

218 
öt8_t
 
ªt1
, 
ªt2
;

221 
p‹ts
[
pödex
].
≤o
 = 
±
;

222 
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
 = 
	`ƒk_sig«l_¸óã
();

223 
p‹ts
[
pödex
].
d©a_¨rived_sig«l
 = 
	`ƒk_sig«l_¸óã
();

225 if–
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
 =
NRK_ERROR
 )

227 
	`ƒk_öt_dißbÀ
();

228 
	`ƒk_Àd_£t
(
RED_LED
);

230 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe send_done signal\r\n"));

233 if–
p‹ts
[
pödex
].
d©a_¨rived_sig«l
 =
NRK_ERROR
 )

235 
	`ƒk_öt_dißbÀ
();

236 
	`ƒk_Àd_£t
(
RED_LED
);

238 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe data_arrived signal\r\n"));

241 
ªt1
 = 
	`ƒk_sig«l_ªgi°î
(
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
);

242 
ªt2
 = 
	`ƒk_sig«l_ªgi°î
(
p‹ts
[
pödex
].
d©a_¨rived_sig«l
);

244 if(
ªt1
 =
NRK_ERROR
)

246 
	`ƒk_öt_dißbÀ
();

247 
	`ƒk_Àd_£t
(
RED_LED
);

249 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): ErrorÑegisteringÅhe send_done signal\r\n"));

252 if(
ªt2
 =
NRK_ERROR
)

254 
	`ƒk_öt_dißbÀ
();

255 
	`ƒk_Àd_£t
(
RED_LED
);

257 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): ErrorÑegisteringÅhe data_arrived signal\r\n"));

261 
	}
}

263 
	$ªÀa£_p‹t
(
öt8_t
 
pödex
)

265 
öt8_t
 
ªt1
, 
ªt2
;

268 
p‹ts
[
pödex
].
≤o
 = 
INVALID_PID
;

269 
ªt1
 = 
	`ƒk_sig«l_dñëe
(
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
);

270 
ªt2
 = 
	`ƒk_sig«l_dñëe
(
p‹ts
[
pödex
].
d©a_¨rived_sig«l
);

272 if(
ªt1
 =
NRK_ERROR
)

274 
	`ƒk_öt_dißbÀ
();

275 
	`ƒk_Àd_£t
(
RED_LED
);

277 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe send_done signal\r\n"));

280 if(
ªt2
 =
NRK_ERROR
)

282 
	`ƒk_öt_dißbÀ
();

283 
	`ƒk_Àd_£t
(
RED_LED
);

285 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe data_arrived signal\r\n"));

289 
	}
}

291 
öt8_t
 
	$gë_ödex_u«ssig√d_p‹t_ñemít
()

293 
öt8_t
 
i
;

295 
i
 = 0; i < 
NUM_PORTS
; i++)

296 if(
p‹ts
[
i
].
≤o
 =
INVALID_PORT
)

297  
i
;

299 
	`_ƒk_î∫o_£t
(
NO_PORT_ELEMENT_AVAILABLE
);

300  
NRK_ERROR
;

301 
	}
}

303 
öt8_t
 
	$gë_ödex_u«ssig√d_rbm_ñemít
()

305 
öt8_t
 
i
;

307 
i
 = 0; i < 
NUM_PORTS
; i++)

308 if(
rx_buf_mgr
[
i
].
pödex
 == -1)

309  
i
;

311 
	`_ƒk_î∫o_£t
(
NO_RBM_ELEMENT_AVAILABLE
);

312  
NRK_ERROR
;

313 
	}
}

315 
uöt8_t
 
	$gë_p‹t_num
(
öt8_t
 
sock_num
)

318 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

320 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

321  
INVALID_PORT
;

324 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

326 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

327  
INVALID_PORT
;

330 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

332 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

333  
INVALID_PORT
;

336 if(
sock
[
sock_num
].
pödex
 == -1)

338 
	`_ƒk_î∫o_£t
(
UNMAPPED_SOCKET
);

339  
INVALID_PORT
;

342  
p‹ts
[
sock
[
sock_num
].
pödex
].
≤o
;

343 
	}
}

346 
öt8_t
 
	$böd
(
öt8_t
 
sock_num
, 
öt16_t
 
p‹t
)

348 
öt8_t
 
buf_ödex
;

349 
öt8_t
 
p‹t_ödex
;

350 
öt8_t
 
rbm_ödex
;

351 
öt8_t
 
i
;

352 
öt8_t
 
size
;

354 
	`íãr_¸
(
bm_£m
, 8);

355 
	`íãr_¸
(
é_£m
, 8);

357 if(
éayî_öô_d⁄e
 != 1)

359 
	`ƒk_öt_dißbÀ
();

360 
	`ƒk_Àd_£t
(
RED_LED
);

362 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): TransportÜayerÇot initialised\r\n"));

366 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

368 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

370 
	`Àave_¸
(
é_£m
, 8);

371 
	`Àave_¸
(
bm_£m
, 8);

372  
NRK_ERROR
;

375 if(
p‹t
 <0 ||Ö‹à> 
MAX_PORT_NUM
)

377 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

379 
	`Àave_¸
(
é_£m
, 8);

380 
	`Àave_¸
(
bm_£m
, 8);

381  
NRK_ERROR
;

384 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

386 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

388 
	`Àave_¸
(
é_£m
, 8);

389 
	`Àave_¸
(
bm_£m
, 8);

390  
NRK_ERROR
;

393 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

395 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

397 
	`Àave_¸
(
é_£m
, 8);

398 
	`Àave_¸
(
bm_£m
, 8);

399  
NRK_ERROR
;

402 if(
sock
[
sock_num
].
rbmödex
 != -1)

404 
	`_ƒk_î∫o_£t
(
INVALID_CALL
);

406 
	`Àave_¸
(
é_£m
, 8);

407 
	`Àave_¸
(
bm_£m
, 8);

408  
NRK_ERROR
;

411 if(
	`check_p‹t_avaûabÀ
((
uöt8_t
)
p‹t
Ë=
FALSE
)

413 
	`Àave_¸
(
é_£m
, 8);

414 
	`Àave_¸
(
bm_£m
, 8);

415  
NRK_ERROR
;

418 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

420 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

422 
	`Àave_¸
(
é_£m
, 8);

423 
	`Àave_¸
(
bm_£m
, 8);

424  
NRK_ERROR
;

427 if(
sock
[
sock_num
].
pödex
 != -1)

429 
	`ƒk_öt_dißbÀ
();

430 
	`ƒk_Àd_£t
(
RED_LED
);

432 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

436 
size
 = 
DEFAULT_RX_QUEUE_SIZE
;

443 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

444 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

446 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

448 
	`ƒk_öt_dißbÀ
();

449 
	`ƒk_Àd_£t
(
RED_LED
);

451 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

455 
	`assign_p‹t
(
p‹t_ödex
, (
uöt8_t
)
p‹t
);

458 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

459 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

462 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

463 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

466 
i
 = 1; i <
size
; i++)

468 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

469 if(
buf_ödex
 =
NRK_ERROR
)

471 
	`ƒk_öt_dißbÀ
();

472 
	`ƒk_Àd_£t
(
RED_LED
);

474 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug found in implementation ofÇum_bufs_free\r\n"));

477 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

478 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

479 
num_bufs_‰ì
--;

482 
	`Àave_¸
(
é_£m
, 8);

483 
	`Àave_¸
(
bm_£m
, 8);

484  
NRK_OK
;

485 
	}
}

487 
öt8_t
 
	$gë_rx_queue_size
(
öt8_t
 
sock_num
)

489 
öt8_t
 
cou¡
;

491 
	`íãr_¸
(
bm_£m
, 9);

492 
	`íãr_¸
(
é_£m
, 9);

495 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

497 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

499 
	`Àave_¸
(
é_£m
, 9);

500 
	`Àave_¸
(
bm_£m
, 9);

501  
NRK_ERROR
;

504 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

506 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

508 
	`Àave_¸
(
é_£m
, 9);

509 
	`Àave_¸
(
bm_£m
, 9);

510  
NRK_ERROR
;

513 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

515 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

517 
	`Àave_¸
(
é_£m
, 9);

518 
	`Àave_¸
(
bm_£m
, 9);

519  
NRK_ERROR
;

522 if(
sock
[
sock_num
].
pödex
 == -1)

524 
	`Àave_¸
(
é_£m
, 9);

525 
	`Àave_¸
(
bm_£m
, 9);

529 if(
sock
[
sock_num
].
rbmödex
 == -1)

531 
	`ƒk_öt_dißbÀ
();

532 
	`ƒk_Àd_£t
(
RED_LED
);

534 
	`ƒk_k¥ötf
(
	`PSTR
("get_rx_queue_size(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

538 
cou¡
 = 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡TŸÆ
;

540 
	`Àave_¸
(
é_£m
, 9);

541 
	`Àave_¸
(
bm_£m
, 9);

542  
cou¡
;

543 
	}
}

546 
öt8_t
 
	$£t_rx_queue_size
(
öt8_t
 
sock_num
, i¡8_à
size
)

548 
uöt8_t
 
p‹t
;

549 
öt8_t
 
i
;

550 
öt8_t
 
Êag
;

552 
öt8_t
 
buf_ödex
;

553 
öt8_t
 
p‹t_ödex
;

554 
öt8_t
 
rbm_ödex
;

556 
	`íãr_¸
(
bm_£m
, 10);

557 
	`íãr_¸
(
é_£m
, 10);

559 if(
éayî_öô_d⁄e
 != 1)

561 
	`ƒk_öt_dißbÀ
();

562 
	`ƒk_Àd_£t
(
RED_LED
);

564 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): TransportÜayerÇot initialised\r\n"));

567 
Êag
 = 0;

569 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
size
 <= 0)

571 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

573 
	`Àave_¸
(
é_£m
, 10);

574 
	`Àave_¸
(
bm_£m
, 10);

575  
NRK_ERROR
;

578 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

580 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

582 
	`Àave_¸
(
é_£m
, 10);

583 
	`Àave_¸
(
bm_£m
, 10);

584  
NRK_ERROR
;

587 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

589 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

591 
	`Àave_¸
(
é_£m
, 10);

592 
	`Àave_¸
(
bm_£m
, 10);

593  
NRK_ERROR
;

596 if(
sock
[
sock_num
].
pödex
 == -1)

598 
Êag
 = 1;

599 
p‹t
 = 
	`gë_√xt_avaûabÀ_p‹t
();

600 if(
p‹t
 =
INVALID_PORT
)

602 
	`Àave_¸
(
é_£m
, 10);

603 
	`Àave_¸
(
bm_£m
, 10);

604  
NRK_ERROR
;

606 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

608 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

610 
	`Àave_¸
(
é_£m
, 10);

611 
	`Àave_¸
(
bm_£m
, 10);

612  
NRK_ERROR
;

616 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

617 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

619 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

621 
	`ƒk_öt_dißbÀ
();

622 
	`ƒk_Àd_£t
(
RED_LED
);

624 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

628 
	`assign_p‹t
(
p‹t_ödex
, 
p‹t
);

631 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

632 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

635 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

636 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

641 if(
size
 =
DEFAULT_RX_QUEUE_SIZE
)

643 
	`Àave_¸
(
é_£m
, 10);

644 
	`Àave_¸
(
bm_£m
, 10);

645  
size
;

648 
size
 -
DEFAULT_RX_QUEUE_SIZE
;

652 if(
	`gë_num_bufs_‰ì
(Ë< 
size
)

653 
size
 = 
	`gë_num_bufs_‰ì
();

658 
i
 = 1; i <
size
; i++)

660 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

661 if(
buf_ödex
 =
NRK_ERROR
)

663 
	`ƒk_öt_dißbÀ
();

664 
	`ƒk_Àd_£t
(
RED_LED
);

666 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): Bug found in implementation ofÇum_bufs_free\r\n"));

668 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

669 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

670 
num_bufs_‰ì
--;

673 
	`Àave_¸
(
é_£m
, 10);

674 
	`Àave_¸
(
bm_£m
, 10);

676 if(
Êag
 == 0)

677  
size
 + 
DEFAULT_RX_QUEUE_SIZE
;

679  
size
;

680 
	}
}

682 
öt8_t
 
	$ªÀa£_buf„r
(
öt8_t
 
sock_num
, 
uöt8_t
 *
±r
)

684 
Re˚iveBuf„rUDP
 *
buf
;

686 
	`íãr_¸
(
bm_£m
, 11);

687 
	`íãr_¸
(
é_£m
, 11);

690 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
±r
 =
NULL
)

692 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

694 
	`Àave_¸
(
é_£m
, 11);

695 
	`Àave_¸
(
bm_£m
, 11);

696  
NRK_ERROR
;

698 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

700 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

702 
	`Àave_¸
(
é_£m
, 11);

703 
	`Àave_¸
(
bm_£m
, 11);

704  
NRK_ERROR
;

707 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

709 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

711 
	`Àave_¸
(
é_£m
, 11);

712 
	`Àave_¸
(
bm_£m
, 11);

713  
NRK_ERROR
;

716 if(
sock
[
sock_num
].
pödex
 == -1)

718 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

720 
	`Àave_¸
(
é_£m
, 11);

721 
	`Àave_¸
(
bm_£m
, 11);

722  
NRK_ERROR
;

725 if(
sock
[
sock_num
].
rbmödex
 == -1)

727 
	`ƒk_öt_dißbÀ
();

728 
	`ƒk_Àd_£t
(
RED_LED
);

730 
	`ƒk_k¥ötf
(
	`PSTR
("release_buffer(): Bug discovered in implementation ofÖort /ÑbmÉlementárray\r\n"));

734 
buf
 = 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
hód_fq
;

735 
buf
 !
NULL
)

737 if–(
±r
 =(
buf
 -> 
£g
).
d©a
Ë&& (bu‡-> 
°©us
 =
FULL
) )

739 
buf
 = bu‡-> 
√xt
;

741 if(
buf
 =
NULL
)

743 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

745 
	`Àave_¸
(
é_£m
, 11);

746 
	`Àave_¸
(
bm_£m
, 11);

747  
NRK_ERROR
;

750 
buf
 -> 
°©us
 = 
EMPTY
;

751 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡Fªe
++;

753 
	`Àave_¸
(
é_£m
, 11);

754 
	`Àave_¸
(
bm_£m
, 11);

755  
NRK_OK
;

756 
	}
}

758 
öt8_t
 
	$˛o£_sockë
(
öt8_t
 
sock_num
)

760 
Re˚iveBuf„rUDP
 *
±r
;

762 
	`íãr_¸
(
bm_£m
, 12);

763 
	`íãr_¸
(
é_£m
, 12);

766 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

768 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

770 
	`Àave_¸
(
é_£m
, 12);

771 
	`Àave_¸
(
bm_£m
, 12);

772  
NRK_ERROR
;

774 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
() )

776 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

778 
	`Àave_¸
(
é_£m
, 12);

779 
	`Àave_¸
(
bm_£m
, 12);

780  
NRK_ERROR
;

783 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

785 
sock
[
sock_num
].
pid
 = 
INVALID_PID
;

786 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

787 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

789 
	`Àave_¸
(
é_£m
, 12);

790 
	`Àave_¸
(
bm_£m
, 12);

791  
NRK_OK
;

795 if(
sock
[
sock_num
].
pödex
 != -1)

797 if(
sock
[
sock_num
].
rbmödex
 == -1)

799 
	`ƒk_öt_dißbÀ
();

800 
	`ƒk_Àd_£t
(
RED_LED
);

802 
	`ƒk_k¥ötf
(
	`PSTR
("close_socket(): Bug discovered in implementation ofÖort /rbmÉlementárray\r\n"));

805  (
±r
 = 
	`ªmove_rx_pq
(
sock
[
sock_num
].
rbmödex
)Ë!
NULL
 )

806 
±r
 -> 
°©us
 = 
UNALLOCATED
;

809  (
±r
 = 
	`ªmove_rx_fq
(
sock
[
sock_num
].
rbmödex
, 
EMPTY
)Ë!
NULL
 )

810 
±r
 -> 
°©us
 = 
UNALLOCATED
;

813  (
±r
 = 
	`ªmove_rx_fq
(
sock
[
sock_num
].
rbmödex
,
FULL
)Ë!
NULL
 )

814 
±r
 -> 
°©us
 = 
UNALLOCATED
;

816 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
pid
 = 
INVALID_PID
;

817 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
pödex
 = -1;

818 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡TŸÆ
 = 0;

819 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡Fªe
 = 0;

821 
	`ªÀa£_p‹t
(
sock
[
sock_num
].
pödex
);

824 
sock
[
sock_num
].
pödex
 = -1;

825 
sock
[
sock_num
].
rbmödex
 = -1;

826 
sock
[
sock_num
].
pid
 = 
INVALID_PID
;

827 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

828 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

830 
	`Àave_¸
(
é_£m
, 12);

831 
	`Àave_¸
(
bm_£m
, 12);

832  
NRK_OK
;

833 
	}
}

835 
öt8_t
 
	$is_p‹t_assocüãd
(
öt16_t
 
p‹t
)

838 if(
p‹t
 <0 ||Ö‹à> 
MAX_PORT_NUM
)

840 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

841  
NRK_ERROR
;

844 
	`íãr_¸
(
é_£m
, 13);

846 if(
	`check_p‹t_avaûabÀ
((
uöt8_t
)
p‹t
Ë=
NRK_OK
)

848 
	`Àave_¸
(
é_£m
, 13);

849  
FALSE
;

851 
	`Àave_¸
(
é_£m
, 13);

852  
TRUE
;

853 
	}
}

855 
öt8_t
 
	$£nd
(
öt8_t
 
sock_num
, i¡8_à*
±r
, i¡8_à
Àn
, 
öt32_t
 
de°_addr
, 
öt16_t
 
de°_p‹t
, i¡8_à
¥io
)

857 
öt8_t
 
ªsu…
;

859 
	`íãr_¸
(
bm_£m
, 14);

860 
	`íãr_¸
(
é_£m
, 14);

863 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

865 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

867 
	`Àave_¸
(
é_£m
, 14);

868 
	`Àave_¸
(
bm_£m
, 14);

869  
NRK_ERROR
;

872 if(
±r
 =
NULL
 || 
Àn
 <0 ||Üí > 
MAX_APP_PAYLOAD
)

874 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

876 
	`Àave_¸
(
é_£m
, 14);

877 
	`Àave_¸
(
bm_£m
, 14);

878  
NRK_ERROR
;

881 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

883 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

885 
	`Àave_¸
(
é_£m
, 14);

886 
	`Àave_¸
(
bm_£m
, 14);

887  
NRK_ERROR
;

891 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

893 
ƒk_sig_t
 
Œ_tx_d⁄e_sig«l
 = 
	`bmac_gë_tx_d⁄e_sig«l
();

894 if(
	`ƒk_sig«l_ªgi°î
(
Œ_tx_d⁄e_sig«l
Ë=
NRK_ERROR
)

896 
	`ƒk_öt_dißbÀ
();

897 
	`ƒk_Àd_£t
(
RED_LED
);

899 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Error inÑegistering forÜl_tx_done_signal\r\n"));

939  
	`bmac_tx_pkt
(
±r
, 
Àn
) == -1)

941 
ªsu…
 = 
	`ƒk_evít_waô
–
	`SIG
(
Œ_tx_d⁄e_sig«l
) );

944 
	`Àave_¸
(
é_£m
, 14);

945 
	`Àave_¸
(
bm_£m
, 14);

946  
NRK_OK
;

949 if(
de°_addr
 < 0 || 
de°_p‹t
 <0 || de°_p‹à>
MAX_PORT_NUM
)

951 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

953 
	`Àave_¸
(
é_£m
, 14);

954 
	`Àave_¸
(
bm_£m
, 14);

955  
NRK_ERROR
;

958 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
)

960 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

962 
	`Àave_¸
(
é_£m
, 14);

963 
	`Àave_¸
(
bm_£m
, 14);

964  
NRK_ERROR
;

968 if(
sock
[
sock_num
].
pödex
 == -1)

971 if(
DEBUG_TL
 == 2)

973 
	`¥ötf
("%d ", 
NODE_ADDR
);

974 
	`ƒk_k¥ötf
(
	`PSTR
("called send() withoutá mapping\r\n"));

976 
öt8_t
 
buf_ödex
, 
p‹t_ödex
, 
rbm_ödex
;

977 
uöt8_t
 
p‹t
;

979 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

981 
	`Àave_¸
(
é_£m
, 14);

982 
	`Àave_¸
(
bm_£m
, 14);

983 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

984  
NRK_ERROR
;

987 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

988 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

989 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

991 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

993 
	`ƒk_öt_dißbÀ
();

994 
	`ƒk_Àd_£t
(
RED_LED
);

996 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

999 if(
buf_ödex
 =
NRK_ERROR
)

1001 
	`ƒk_öt_dißbÀ
();

1002 
	`ƒk_Àd_£t
(
RED_LED
);

1004 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Bug detected in implementation ofÇum_bufs_free\r\n"));

1007 
p‹t
 = 
	`gë_√xt_avaûabÀ_p‹t
();

1010 
	`assign_p‹t
(
p‹t_ödex
, 
p‹t
);

1013 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

1014 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

1017 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

1018 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

1021 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

1022 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

1023 
num_bufs_‰ì
--;

1028 
udp_£g
.
§cP‹t
 = 
p‹ts
[
sock
[
sock_num
].
pödex
].
≤o
;

1029 
udp_£g
.
de°P‹t
 = (
uöt8_t
)
de°_p‹t
;

1030 
udp_£g
.
Àngth
 = 
Àn
;

1031 
	`mem˝y
(
udp_£g
.
d©a
, 
±r
, 
Àn
);

1033 if(
DEBUG_TL
 == 2)

1035 
	`¥ötf
("%d: ", 
NODE_ADDR
);

1036 
	`ƒk_k¥ötf
(
	`PSTR
("sent segment = "));

1037 
	`¥öt_£g
(&
udp_£g
);

1040 
sock
[
sock_num
].
ty≥
)

1042 
SOCK_DGRAM
:

1043 
pkt
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

1044 
pkt
.
de°
 = (
uöt16_t
)
de°_addr
;

1045 
pkt
.
√xtH›
 = 
	`rouã_addr
(
de°_addr
);

1046 
pkt
.
¥evH›
 = 
NODE_ADDR
;

1048 
pkt
.
âl
 = 
MAX_NETWORK_DIAMETER
;

1049 
pkt
.
ty≥
 = 
UDP
;

1050 
pkt
.
Àngth
 = 
SIZE_TRANSPORT_UDP_HEADER
 + 
Àn
;

1051 
pkt
.
¥io
 =Örio;

1052 
	`∑ck_TL_UDP_hódî
(
pkt
.
d©a
, &
udp_£g
);

1053 
	`mem˝y
(
pkt
.
d©a
 + 
SIZE_TRANSPORT_UDP_HEADER
, 
udp_£g
.d©a, 
MAX_APP_PAYLOAD
);

1055 if(
DEBUG_TL
 == 2)

1057 
	`¥ötf
("%d: ",
NODE_ADDR
);

1058 
	`ƒk_k¥ötf
(
	`PSTR
("sentÖacket = "));

1059 
	`¥öt_pkt
(&
pkt
);

1064 
ªsu…
 = 
	`ö£π_tx_aq
(&
pkt
);

1065 if(
DEBUG_TL
 == 2)

1067 
	`ƒk_k¥ötf
("TL: send(): InsertedÖacket.");

1068 
	`¥öt_tx_buf„r
();

1071 if(
ªsu…
 =
NRK_ERROR
)

1072 
	`_ƒk_î∫o_£t
(
NO_TX_BUFFERS_AVAILABLE
);

1074 
	`Àave_¸
(
é_£m
, 14);

1075 
	`Àave_¸
(
bm_£m
, 14);

1076  
ªsu…
;

1079 
SOCK_IPC
:

1080 
	`ö£π_rx_pq
(&
udp_£g
, 
¥io
, 
NODE_ADDR
, 
INVALID_RSSI
);

1081 
	`Àave_¸
(
é_£m
, 14);

1082 
	`Àave_¸
(
bm_£m
, 14);

1086 
	`ƒk_öt_dißbÀ
();

1087 
	`ƒk_Àd_£t
(
RED_LED
);

1090 
	`ƒk_k¥ötf
(
	`PSTR
("TL: send(): Bug discovered in implementation of socketÅype\r\n"));

1094  
NRK_OK
;

1095 
	}
}

1097 
öt8_t
 
	$£t_timeout
(
öt8_t
 
sock_num
, i¡8_à
£cs
, i¡8_à
«no_£cs
)

1099 
	`íãr_¸
(
é_£m
, 15);

1105 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
£cs
 < 0 || 
«no_£cs
 < 0)

1107 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1109 
	`Àave_¸
(
é_£m
, 15);

1110  
NRK_ERROR
;

1113 if(
£cs
 =0 && 
«no_£cs
 == 0)

1115 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1117 
	`Àave_¸
(
é_£m
, 15);

1118  
NRK_ERROR
;

1121 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

1123 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1125 
	`Àave_¸
(
é_£m
, 15);

1126  
NRK_ERROR
;

1131 
sock
[
sock_num
].
timeout
.
£cs
 = secs;

1132 
sock
[
sock_num
].
timeout
.
«no_£cs
 =Çano_secs;

1134 
	`Àave_¸
(
é_£m
, 15);

1138  
NRK_OK
;

1139 
	}
}

1141 
uöt8_t
* 
	$ª˚ive
(
öt8_t
 
sock_num
, i¡8_à*
Àn
, 
uöt16_t
 *
§cAddr
, 
uöt8_t
 *
§cP‹t
, i¡8_à*
rssi
)

1143 
ƒk_sig_mask_t
 
my_sigs
;

1144 
Re˚iveBuf„rUDP
 *
buf
;

1145 
Tøn•‹t_Segmít_UDP
 *
£g
;

1146 
öt8_t
 
rbm_ödex
;

1147 
öt8_t
 
p‹t_ödex
;

1149 
	`íãr_¸
(
bm_£m
, 16);

1150 
	`íãr_¸
(
é_£m
, 16);

1153 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
Àn
 =
NULL
)

1155 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1157 
	`Àave_¸
(
é_£m
, 16);

1158 
	`Àave_¸
(
bm_£m
, 16);

1159  
NULL
;

1162 if–
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

1164 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1166 
	`Àave_¸
(
é_£m
, 16);

1167 
	`Àave_¸
(
bm_£m
, 16);

1168  
NULL
;

1171 if(
sock
[
sock_num
].
pödex
 == -1)

1173 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1175 
	`Àave_¸
(
é_£m
, 16);

1176 
	`Àave_¸
(
bm_£m
, 16);

1177  
NULL
;

1181 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

1186 if(
sock
[
sock_num
].
rbmödex
 == -1)

1188 
	`ƒk_öt_dißbÀ
();

1189 
	`ƒk_Àd_£t
(
RED_LED
);

1191 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

1195 
rbm_ödex
 = 
sock
[
sock_num
].
rbmödex
;

1196 
p‹t_ödex
 = 
sock
[
sock_num
].
pödex
;

1197 if(
sock
[
sock_num
].
timeout
.
£cs
 =0 && sock[sock_num].timeout.
«no_£cs
 == 0)

1200 if(
DEBUG_TL
 == 2)

1201 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): InsideÅhe sectionÅhatÑelatesÅo 'withoutÅimeout'Ñeceive\r\n"));

1204 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 =rx_buf_mgr[rbm_ödex].
cou¡TŸÆ
)

1206 if(
DEBUG_TL
 == 2)

1208 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): No segments inÑeceive queue ofÖort "));

1209 
	`¥ötf
("%d\n", 
p‹ts
[
p‹t_ödex
].
≤o
);

1213 
	`Àave_¸
(
é_£m
, 16);

1214 
	`Àave_¸
(
bm_£m
, 16);

1215 
my_sigs
 = 
	`ƒk_evít_waô
(
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
));

1216 
	`íãr_¸
(
bm_£m
, 16);

1217 
	`íãr_¸
(
é_£m
, 16);

1220 if(
my_sigs
 == 0)

1222 
	`ƒk_öt_dißbÀ
();

1223 
	`ƒk_Àd_£t
(
RED_LED
);

1225 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error callingÇrk_event_wait (withoutÅimeout)\r\n"));

1227 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
) )

1229 if(
DEBUG_TL
 == 2)

1230 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): ReceivedÅhe dataárrived signal\r\n"));

1235 
	`ƒk_öt_dißbÀ
();

1236 
	`ƒk_Àd_£t
(
RED_LED
);

1238 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Unknown signalÑeceived (withoutÅimeout)\r\n"));

1245 if(
DEBUG_TL
 == 2)

1246 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): InsideÅhe sectionÅhatÑelatesÅo 'withÅimeout'Ñeceive\r\n"));

1248 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
)

1250 
	`ƒk_öt_dißbÀ
();

1251 
	`ƒk_Àd_£t
(
RED_LED
);

1253 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error inÑegistering forÇrk_wakeup_signal\r\n"));

1255 if–
	`ƒk_£t_√xt_wakeup
(
sock
[
sock_num
].
timeout
Ë=
NRK_ERROR
)

1257 
	`ƒk_öt_dißbÀ
();

1258 
	`ƒk_Àd_£t
(
RED_LED
);

1260 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): ErrorÑeturned byÇrk_set_next_wakeup\r\n"));

1263 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 =rx_buf_mgr[rbm_ödex].
cou¡TŸÆ
)

1265 if(
DEBUG_TL
 == 2)

1267 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): No segments inÑeceive queue ofÖort "));

1268 
	`¥ötf
("%d\n", 
p‹ts
[
p‹t_ödex
].
≤o
);

1274 
	`Àave_¸
(
é_£m
, 16);

1275 
	`Àave_¸
(
bm_£m
, 16);

1276 
my_sigs
 = 
	`ƒk_evít_waô
(
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
));

1277 
	`íãr_¸
(
bm_£m
, 16);

1278 
	`íãr_¸
(
é_£m
, 16);

1281 if(
my_sigs
 == 0)

1283 
	`ƒk_öt_dißbÀ
();

1284 
	`ƒk_Àd_£t
(
RED_LED
);

1286 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error callingÇrk_event_wait() (withÅimeout)\r\n"));

1288 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
) )

1290 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1291 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1292 if(
DEBUG_TL
 == 2)

1293 
	`ƒk_k¥ötf
(
	`PSTR
("ReceivedÅhe dataárrived signal\r\n"));

1297 if–
my_sigs
 & 
	`SIG
(
ƒk_wakeup_sig«l
) )

1299 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1300 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1302 
	`_ƒk_î∫o_£t
(
SOCKET_TIMEOUT
);

1304 
	`Àave_¸
(
é_£m
, 16);

1305 
	`Àave_¸
(
bm_£m
, 16);

1306  
NULL
;

1310 
	`ƒk_öt_dißbÀ
();

1311 
	`ƒk_Àd_£t
(
RED_LED
);

1313 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Unknown signalÑeceived (withÅimeout)\r\n"));

1324 
buf
 = 
	`ªmove_rx_pq
(
rbm_ödex
);

1325 if(
buf
 =
NULL
)

1327 
	`ƒk_öt_dißbÀ
();

1328 
	`ƒk_Àd_£t
(
RED_LED
);

1330 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Bug found in implementation of data_arrived_signal /Ñx buffer mgmt\r\n"));

1332 
	`ö£π_rx_fq
(
buf
, 
rbm_ödex
, 
FULL
);

1333 
£g
 = &(
buf
 -> seg);

1336 *
Àn
 = 
£g
 -> 
Àngth
;

1337 if(
§cAddr
 !
NULL
)

1338 *
§cAddr
 = 
buf
 -> srcAddr;

1339 if(
§cP‹t
 !
NULL
)

1340 *
§cP‹t
 = 
£g
 -> srcPort;

1341 if(
rssi
 !
NULL
)

1342 *
rssi
 = 
buf
 ->Ñssi;

1344 
	`Àave_¸
(
é_£m
, 16);

1345 
	`Àave_¸
(
bm_£m
, 16);

1346  
£g
 -> 
d©a
;

1347 
	}
}

1350 
öt8_t
 
	$check_ª˚ive_queue
(
öt8_t
 
sock_num
)

1352 
öt8_t
 
rbm_ödex
;

1353 
öt8_t
 
cou¡1
, 
cou¡2
, 
cou¡3
;

1355 
	`íãr_¸
(
bm_£m
, 17);

1356 
	`íãr_¸
(
é_£m
, 17);

1359 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

1361 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1363 
	`Àave_¸
(
é_£m
, 17);

1364 
	`Àave_¸
(
bm_£m
, 17);

1365  
NRK_ERROR
;

1368 if–(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
()Ë|| (sock[sock_num].
pödex
 == -1) )

1370 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1372 
	`Àave_¸
(
é_£m
, 17);

1373 
	`Àave_¸
(
bm_£m
, 17);

1374  
NRK_ERROR
;

1377 
rbm_ödex
 = 
sock
[
sock_num
].
rbmödex
;

1378 
cou¡1
 = 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
;

1379 
cou¡2
 = 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
;

1380 
cou¡3
 = 
	`gë_ö_¥o˚ss_buf_cou¡
(
rbm_ödex
);

1382 
	`Àave_¸
(
é_£m
, 17);

1383 
	`Àave_¸
(
bm_£m
, 17);

1384  
cou¡1
 - 
cou¡2
 - 
cou¡3
;

1385 
	}
}

1387 
öt8_t
 
	$waô_u¡û_£nd_d⁄e
(
öt8_t
 
sock_num
)

1389 
öt8_t
 
p‹t_ödex
;

1390 
ƒk_sig_mask_t
 
my_sigs
;

1392 
	`íãr_¸
(
bm_£m
, 18);

1393 
	`íãr_¸
(
é_£m
, 18);

1396 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

1398 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1400 
	`Àave_¸
(
é_£m
, 18);

1401 
	`Àave_¸
(
bm_£m
, 18);

1402  
NRK_ERROR
;

1405 if–(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
()Ë|| (sock[sock_num].
pödex
 == -1) )

1407 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1409 
	`Àave_¸
(
é_£m
, 18);

1410 
	`Àave_¸
(
bm_£m
, 18);

1411  
NRK_ERROR
;

1416 
p‹t_ödex
 = 
sock
[
sock_num
].
pödex
;

1418 if(
sock
[
sock_num
].
timeout
.
£cs
 =0 && sock[sock_num].timeout.
«no_£cs
 == 0)

1423 
	`Àave_¸
(
é_£m
, 18);

1424 
	`Àave_¸
(
bm_£m
, 18);

1425 
my_sigs
 = 
	`ƒk_evít_waô
–
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) );

1426 
	`íãr_¸
(
bm_£m
, 18);

1427 
	`íãr_¸
(
é_£m
, 18);

1429 if(
my_sigs
 == 0)

1431 
	`ƒk_öt_dißbÀ
();

1432 
	`ƒk_Àd_£t
(
RED_LED
);

1434 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_event_wait() (withoutÅimeout)\r\n"));

1437 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) )

1439 
	`Àave_¸
(
é_£m
, 18);

1440 
	`Àave_¸
(
bm_£m
, 18);

1441  
NRK_OK
;

1446 
	`ƒk_öt_dißbÀ
();

1447 
	`ƒk_Àd_£t
(
RED_LED
);

1449 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): Unknown signalÑeceived (withoutÅimeout)\r\n"));

1455 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
 )

1457 
	`ƒk_öt_dißbÀ
();

1458 
	`ƒk_Àd_£t
(
RED_LED
);

1460 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑegistering forÇrk_wakeup_signal\r\n"));

1462 if–
	`ƒk_£t_√xt_wakeup
(
sock
[
sock_num
].
timeout
Ë=
NRK_ERROR
)

1464 
	`ƒk_öt_dißbÀ
();

1465 
	`ƒk_Àd_£t
(
RED_LED
);

1467 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_set_next_wakeup()\r\n"));

1471 
	`Àave_¸
(
é_£m
, 18);

1472 
	`Àave_¸
(
bm_£m
, 18);

1473 
my_sigs
 = 
	`ƒk_evít_waô
–
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
) );

1474 
	`íãr_¸
(
bm_£m
, 18);

1475 
	`íãr_¸
(
é_£m
, 18);

1477 if(
my_sigs
 == 0)

1479 
	`ƒk_öt_dißbÀ
();

1480 
	`ƒk_Àd_£t
(
RED_LED
);

1482 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_event_wait()\r\n"));

1485 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) )

1487 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1488 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1490 
	`Àave_¸
(
é_£m
, 18);

1491 
	`Àave_¸
(
bm_£m
, 18);

1492  
NRK_OK
;

1495 if–
my_sigs
 & 
	`SIG
(
ƒk_wakeup_sig«l
) )

1497 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1498 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1499 
	`_ƒk_î∫o_£t
(
SOCKET_TIMEOUT
);

1501 
	`Àave_¸
(
é_£m
, 18);

1502 
	`Àave_¸
(
bm_£m
, 18);

1503  
NRK_ERROR
;

1507 
	`ƒk_öt_dißbÀ
();

1508 
	`ƒk_Àd_£t
(
RED_LED
);

1510 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): Unknown signalÑeceived (withÅimeout)\r\n"));

1515 
	`Àave_¸
(
é_£m
, 18);

1516 
	`Àave_¸
(
bm_£m
, 18);

1517  
NRK_ERROR
;

1518 
	}
}

1520 
	$¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
 *
£g
)

1522 
	`¥ötf
("[%d %d %d] ", 
£g
 -> 
§cP‹t
, seg -> 
de°P‹t
, seg -> 
Àngth
);

1524 
	}
}

1526 
	$¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *
£g
)

1528 
öt8_t
 
i
;

1530 
	`¥öt_£g_hódî
(
£g
);

1531 
i
 = 0; i < 
£g
 -> 
Àngth
; i++)

1532 
	`¥ötf
("%d ", (
£g
 -> 
d©a
)[
i
]);

1534 
	`¥ötf
("\r\n");

1535 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/TransportLayerUDP.h

31 #i‚de‡
_TRANSPORT_LAYER_UDP_H


32 
	#_TRANSPORT_LAYER_UDP_H


	)

34 
	~"NWSèckC⁄fig.h
"

35 
	~<ƒk.h
>

36 
	~<ö˛ude.h
>

37 
	~<°döt.h
>

40 
	#DEBUG_TL
 0

41 

	)

43 
	#SOCK_DGRAM
 1

44 
	#SOCK_SEQPACKET
 2

45 
	#SOCK_RAW
 3

46 
	#SOCK_IPC
 4

47 

	)

48 
	#EPHEMERAL_PORT_NUM_START
 11

49 
	#MAX_PORT_NUM
 255

	)

50 
	#MAX_PORTS
 127

51 

	)

54 
	#SIZE_TRANSPORT_UDP_HEADER
 3

	)

55 
	#MAX_TRANSPORT_UDP_SEG
 (
MAX_APP_PAYLOAD
 + 
SIZE_TRANSPORT_UDP_HEADER
)

	)

57 
	#INVALID_PORT
 0

58 
	#INVALID_PID
 0

59 
	#INVALID_RSSI
 (-120)

	)

65 
uöt8_t
 
	m§cP‹t
;

66 
uöt8_t
 
	mde°P‹t
;

67 
öt8_t
 
	mÀngth
;

68 
uöt8_t
 
	md©a
[
MAX_APP_PAYLOAD
];

70 }
	tTøn•‹t_Segmít_UDP
;

74 
uöt8_t
 
	m≤o
;

75 
ƒk_sig_t
 
	md©a_¨rived_sig«l
;

76 
ƒk_sig_t
 
	m£nd_d⁄e_sig«l
;

78 }
	tP‹t
;

82 
öt8_t
 
	mpödex
;

83 
öt8_t
 
	mrbmödex
;

84 
öt8_t
 
	mpid
;

85 
öt8_t
 
	mty≥
;

86 
ƒk_time_t
 
	mtimeout
;

87 }
	tSockë
;

92 
öôüli£_å™•‹t_œyî_udp
();

101 
öt8_t
 
gë_√xt_avaûabÀ_sockë
();

111 
öt8_t
 
¸óã_sockë
(öt8_à
ty≥
);

122 
uöt8_t
 
gë_√xt_avaûabÀ_p‹t
();

132 
öt8_t
 
check_p‹t_avaûabÀ
(
uöt8_t
 
±
);

142 
assign_p‹t
(
öt8_t
 
pödex
, 
uöt8_t
 
±
);

153 
ªÀa£_p‹t
(
öt8_t
 
pödex
);

162 
öt8_t
 
gë_u«ssig√d_p‹t_ñemít
();

173 
öt8_t
 
gë_u«ssig√d_rbm_ñemít
();

184 
uöt8_t
 
gë_p‹t_num
(
öt8_t
 
sock_num
);

200 
öt8_t
 
böd
(öt8_à
sock_num
, 
öt16_t
 
p‹t
);

219 
öt8_t
 
gë_rx_queue_size
(öt8_à
sock_num
);

234 
öt8_t
 
£t_rx_queue_size
(öt8_à
sock_num
, i¡8_à
size
);

261 
öt8_t
 
ªÀa£_buf„r
(öt8_à
sock_num
, 
uöt8_t
* 
±r
);

280 
öt8_t
 
˛o£_sockë
(öt8_à
sock_num
);

293 
öt8_t
 
is_p‹t_assocüãd
(
öt16_t
 
p‹t
);

304 
öt8_t
 
£nd
(öt8_à
sock_num
, i¡8_à*
±r
, i¡8_à
Àn
, 
öt32_t
 
de°_addr
, 
öt16_t
 
de°_p‹t
, i¡8_à
¥io
);

331 
öt8_t
 
£t_timeout
(öt8_à
sock_num
, i¡8_à
£cs
, i¡8_à
«no_£cs
);

350 
uöt8_t
* 
ª˚ive
(
öt8_t
 
sock_num
, i¡8_à*
Àn
, 
uöt16_t
 *
§cAddr
, uöt8_à*
§cP‹t
, i¡8_à*
rssi
);

376 
öt8_t
 
check_ª˚ive_queue
(öt8_à
sock_num
);

399 
öt8_t
 
waô_u¡û_£nd_d⁄e
(öt8_à
sock_num
);

420 
¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
* 
£g
);

421 
¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *
£g
);

	@/home/gopikannan/Downloads/nano-RK/src/net/networkstack/nrk_cfg.h

4 #i‚de‡
__ƒk_cfg_h


5 
	#__ƒk_cfg_h


	)

9 
	#NRK_REPORT_ERRORS


	)

12 
	#NRK_HALT_AND_LOOP_ON_ERROR


	)

21 
	#NRK_STACK_CHECK


	)

26 
	#NRK_NO_POWER_DOWN


	)

32 
	#NRK_MAX_TASKS
 8

	)

35 
	#NRK_TASK_IDLE_STK_SIZE
 128

36 
	#NRK_APP_STACKSIZE
 192

	)

37 
	#NRK_KERNEL_STACKSIZE
 128

	)

38 
	#NRK_MAX_RESOURCE_CNT
 9

	)

42 
	#SLIP_PCP_CEILING
 19

44 
	#NRK_UART_BUF
 1

	)

46 
	#MAX_RX_UART_BUF
 128

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/route_table/route_table.c

1 
	~"rouã_èbÀ.h
"

2 
	~<ƒk_îr‹.h
>

3 
	~<ƒk_time.h
>

5 
ƒk_time_t
 
	gœ°_time
;

6 
ƒk_time_t
 
	gcuºít_time
;

7 
ƒk_time_t
 
	gñ≠£d_time
;

9 
öt8_t
 
	$rouã_èbÀ_öô
()

11 
uöt8_t
 
i
,
j
;

13 
i
=0; i<
ROUTE_TABLE_SIZE
; i++ )

15 
rouã_èbÀ
[
i
].
Êags
=0;

16 
rouã_èbÀ
[
i
].
d°
=0;

17 
rouã_èbÀ
[
i
].
√xt_h›
=0;

18 
rouã_èbÀ
[
i
].
âl
=0;

19 
j
=0; j<
ROUTE_TABLE_VALUES
; j++ )

20 
rouã_èbÀ
[
i
].
vÆue
[
j
]=-1;

22 
	`ƒk_time_gë
(&
œ°_time
);

23 
	}
}

25 
	$_rouã_èbÀ_âl_upd©e
()

27 
uöt8_t
 
i
;

28 
öt8_t
 
v
;

29 
	`ƒk_time_gë
(&
cuºít_time
);

30 
v
=
	`ƒk_time_sub
(&
ñ≠£d_time
, 
cuºít_time
, 
œ°_time
);

31 
œ°_time
.
£cs
=
cuºít_time
.secs;

32 
œ°_time
.
«no_£cs
=
cuºít_time
.nano_secs;

33 if(
v
==
NRK_OK
)

35 
i
=0; i<
ROUTE_TABLE_SIZE
; i++ )

37 if(
rouã_èbÀ
[
i
].
âl
!=0)

41 if(
rouã_èbÀ
[
i
].
âl
>
ñ≠£d_time
.
£cs
)

42 
rouã_èbÀ
[
i
].
âl
-=
ñ≠£d_time
.
£cs
;

45 
rouã_èbÀ
[
i
].
Êags
=0;

46 
rouã_èbÀ
[
i
].
âl
=0;

47 
rouã_èbÀ
[
i
].
d°
=0;

48 
rouã_èbÀ
[
i
].
√xt_h›
=0;

53 
	}
}

55 
öt8_t
 
	$rouã_èbÀ_£t
–
uöt16_t
 
d°
, uöt16_à
√xt_h›
, uöt16_à
âl
 )

57 
uöt8_t
 
i
;

58 
öt8_t
 
found
;

59 
found
=-1;

60 
	`_rouã_èbÀ_âl_upd©e
();

61 
i
=0; i<
ROUTE_TABLE_SIZE
; i++ )

63 if(
rouã_èbÀ
[
i
].
d°
==dst )

65 
rouã_èbÀ
[
i
].
√xt_h›
=next_hop;

66 
rouã_èbÀ
[
i
].
âl
=ttl;

67 
rouã_èbÀ
[
i
].
Êags
|=
VALID_MASK
;

68  
NRK_OK
;

70 if(
rouã_èbÀ
[
i
].
âl
==0 && 
found
==-1) found=i;

73 if(
found
>=0)

75 
rouã_èbÀ
[
found
].
√xt_h›
=next_hop;

76 
rouã_èbÀ
[
found
].
âl
=ttl;

77 
rouã_èbÀ
[
found
].
Êags
|=
VALID_MASK
;

78  
NRK_OK
;

80  
NRK_ERROR
;

81 
	}
}

83 
öt8_t
 
	$rouã_èbÀ_˛r
–
uöt16_t
 
d°
)

85 
uöt8_t
 
i
;

86 
i
=0; i<
ROUTE_TABLE_SIZE
; i++ )

88 if(
rouã_èbÀ
[
i
].
d°
==dst)

90 
rouã_èbÀ
[
i
].
Êags
=0;

91 
rouã_èbÀ
[
i
].
d°
=0;

92 
rouã_èbÀ
[
i
].
âl
=0;

93 
rouã_èbÀ
[
i
].
√xt_h›
=0;

94  
NRK_OK
;

97 
NRK_ERROR
;

98 
	}
}

102 
uöt16_t
 
	$rouã_èbÀ_gë
–
uöt16_t
 
d°
)

104 
uöt8_t
 
i
;

105 
i
=0; i<
ROUTE_TABLE_SIZE
; i++ )

107 if((
rouã_èbÀ
[
i
].
Êags
 & 
VALID_MASK
)!=0 &&Ñouã_èbÀ[i].
d°
==dst)

108  (
rouã_èbÀ
[
i
].
√xt_h›
);

112 
	}
}

114 
öt8_t
 
	$rouã_èbÀ_vÆue_£t
(
uöt16_t
 
d°
, 
uöt8_t
 
vÆue_ödex
, 
öt8_t
 
vÆue
)

116 
uöt8_t
 
i
;

117 if(
vÆue_ödex
>=
ROUTE_TABLE_VALUES
 )  
NRK_ERROR
;

118 
i
=0; i<
ROUTE_TABLE_SIZE
; i++ )

120 if((
rouã_èbÀ
[
i
].
Êags
 & 
VALID_MASK
 )!=0 &&Ñouã_èbÀ[i].
d°
==dst )

122 
rouã_èbÀ
[
i
].
vÆue
[
vÆue_ödex
]=value;

123  
NRK_OK
;

126  
NRK_ERROR
;

127 
	}
}

129 
öt8_t
 
	$rouã_èbÀ_vÆue_gë
(
uöt16_t
 
d°
,
uöt8_t
 
vÆue_ödex
)

131 
uöt8_t
 
i
;

132 if(
vÆue_ödex
>=
ROUTE_TABLE_VALUES
 )  
NRK_ERROR
;

133 
i
=0; i<
ROUTE_TABLE_SIZE
; i++ )

135 if((
rouã_èbÀ
[
i
].
Êags
 & 
VALID_MASK
Ë!=0 &&Ñouã_èbÀ[i].
d°
==dst!=0)

137  (
rouã_èbÀ
[
i
].
vÆue
[
vÆue_ödex
]);

140  
NRK_ERROR
;

141 
	}
}

151 
öt8_t
 
	$rouã_èbÀ_gë_√xt_vÆid_ödex
(
uöt8_t
 
°¨t_ödex
)

153 
uöt8_t
 
i
;

154 if(
°¨t_ödex
>=
ROUTE_TABLE_SIZE
Ë 
NRK_ERROR
;

155 
i
=
°¨t_ödex
; i<
ROUTE_TABLE_SIZE
; i++ )

156 if((
rouã_èbÀ
[
i
].
Êags
 & 
VALID_MASK
) !=0 )

157  
i
;

158  
NRK_ERROR
;

159 
	}
}

161 
uöt16_t
 
	$rouã_èbÀ_gë_d°_by_ödex
(
öt8_t
 
ödex
)

163 if(
ödex
>=
ROUTE_TABLE_SIZE
 )  0;

164  
rouã_èbÀ
[
ödex
].
d°
;

166 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/route_table/route_table.h

1 #i‚de‡
_ROUTE_TABLE_H_


2 
	#_ROUTE_TABLE_H_


	)

4 
	~<ƒk.h
>

6 #i‚de‡
ROUTE_TABLE_SIZE


8 
	#ROUTE_TABLE_SIZE
 5

	)

11 #i‚de‡
ROUTE_TABLE_VALUES


13 
	#ROUTE_TABLE_VALUES
 1

	)

16 
	#VALID_MASK
 0x01

	)

17 
	#EXTENDED_ADDRESS_MASK
 0x02

	)

20 
	srouã_ty≥
 {

21 
uöt16_t
 
	md°
;

22 
uöt16_t
 
	m√xt_h›
;

23 
uöt16_t
 
	mâl
;

24 
öt8_t
 
	mÊags
;

25 
öt8_t
 
	mvÆue
[
ROUTE_TABLE_VALUES
];

26 } 
	trouã_èbÀ_t
;

28 
rouã_èbÀ_t
 
	grouã_èbÀ
[
ROUTE_TABLE_SIZE
];

30 
öt8_t
 
rouã_èbÀ_öô
();

31 
öt8_t
 
rouã_èbÀ_£t
–
uöt16_t
 
d°
, uöt16_à
√xt_h›
, uöt16_à
âl
);

32 
öt8_t
 
rouã_èbÀ_˛r
–
uöt16_t
 
d°
);

33 
uöt16_t
 
rouã_èbÀ_gë
–uöt16_à
d°
);

35 
_rouã_èbÀ_âl_upd©e
();

36 
öt8_t
 
rouã_èbÀ_vÆue_£t
(
uöt16_t
 
d°
, 
uöt8_t
 
vÆue_ödex
, i¡8_à
vÆue
);

37 
öt8_t
 
rouã_èbÀ_vÆue_gë
(
uöt16_t
 
d°
, 
uöt8_t
 
vÆue_ödex
);

40 
öt8_t
 
rouã_èbÀ_gë_√xt_vÆid_ödex
(
uöt8_t
 
°¨t_ödex
);

41 
uöt16_t
 
rouã_èbÀ_gë_d°_by_ödex
(
öt8_t
 
ödex
);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/BufferManager.c

3 
	~<°döt.h
>

4 
	~<ƒk.h
>

5 
	~<ö˛ude.h
>

6 
	~<ulib.h
>

7 
	~<°dio.h
>

8 
	~<hÆ.h
>

9 
	~<ƒk_îr‹.h
>

11 
	~"Buf„rM™agî.h
"

12 
	~"NWEº‹Codes.h
"

13 
	~"Debug.h
"

17 
P‹t
 
p‹ts
[];

18 
¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *);

21 
¥öt_pkt_hódî
();

25 
Re˚iveBuf„rUDP
 
	grx_buf_udp
[
MAX_RX_QUEUE_SIZE
];

26 
öt8_t
 
	gnum_bufs_‰ì
;

28 
TønsmôBuf„r
 
	gtx_buf
[
MAX_TX_QUEUE_SIZE
];

30 
Re˚iveBuf„rM™agî
 
	grx_buf_mgr
[
NUM_PORTS
];

32 
TønsmôBuf„rM™agî
 
	gtx_buf_mgr
;

34 
uöt32_t
 
	gex˚ssPﬁicySëtögs
;

37 
ƒk_£m_t
 *
	gbm_£m
;

40 
	$öôüli£_nw_∑ckë
(
NW_Packë
 *
pkt
)

42 
öt8_t
 
i
;

44 
pkt
 -> 
§c
 = 0;

45 
pkt
 -> 
de°
 = 0;

46 
pkt
 -> 
âl
 = 0;

47 
pkt
 -> 
ty≥
 = 0xFF;

48 
pkt
 -> 
Àngth
 = 0;

49 
pkt
 -> 
¥io
 = 0;

51 
i
 = 0; i < 
MAX_NETWORK_PAYLOAD
; i++)

52 (
pkt
 -> 
d©a
)[
i
] = 0;

55 
	}
}

58 
ölöe
 
	$íãr_¸
(
ƒk_£m_t
 *
£m
, 
öt8_t
 
‚o
)

60 if–
	`ƒk_£m_≥nd
(
£m
Ë=
NRK_ERROR
 )

62 
‚o
)

66 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on initialise_transport_layer_udp()\r\n"));

70 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_next_available_socket()\r\n"));

74 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on create_socket()\r\n"));

78 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_next_available_port()\r\n"));

82 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on check_port_available()\r\n"));

86 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onássign_port()\r\n"));

90 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑelease_port()\r\n"));

94 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on bind()\r\n"));

98 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_rx_queue_size()\r\n"));

102 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on set_rx_queue_size()\r\n"));

106 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑelease_buffer()\r\n"));

110 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on close_socket()\r\n"));

114 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on is_port_associated()\r\n"));

118 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on send()\r\n"));

122 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on set_timeout()\r\n"));

126 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑeceive()\r\n"));

130 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on check_receive_queue()\r\n"));

134 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on wait_until_send_done()\r\n"));

139 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onádd_neighbor()\r\n"));

143 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on shouldIMultihop()\r\n"));

147 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on multihop()\r\n"));

151 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑoute_addr()\r\n"));

154 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑoute_packet()\r\n"));

158 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on sendToGateway()\r\n"));

162 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖkt_type()\r\n"));

166 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÅl_type()\r\n"));

170 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÇw_ctrl_type()\r\n"));

174 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖrocess_app_pkt()\r\n"));

178 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖrocess_nw_ctrl_pkt()\r\n"));

182 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖrocess_other_pkt()\r\n"));

186 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on build_Msg_Hello()\r\n"));

190 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on build_Msg_NgbList()\r\n"));

194 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÇl_rx_task()\r\n"));

198 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÇl_tx_task()\r\n"));

202 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on create_network_layer_tasks()\r\n"));

206 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on initialise_network_layer()\r\n"));

211 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on initialise_buffer_manager()\r\n"));

215 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on is_excess_policy_valid()\r\n"));

219 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on set_excess_policy()\r\n"));

223 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_excess_policy()\r\n"));

227 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_index_unallocated_rx_buf()\r\n"));

231 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_rx_pq()\r\n"));

235 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_rx_pq()\r\n"));

239 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_rx_fq()\r\n"));

243 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_rx_fq()\r\n"));

247 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_tx_aq()\r\n"));

251 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_tx_aq()\r\n"));

255 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_tx_fq()\r\n"));

259 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_tx_fq()\r\n"));

263 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_in_process_buf_count()\r\n"));

269 
	`ƒk_k¥ötf
(
	`PSTR
("enter_cr(): Unknown functionÇumber\r\n"));

275 
	}
}

278 
ölöe
 
	$Àave_¸
(
ƒk_£m_t
 *
£m
, 
öt8_t
 
‚o
)

280 if–
	`ƒk_£m_po°
(
£m
Ë=
NRK_ERROR
 )

282 
‚o
)

286 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on initialise_transport_layer_udp()\r\n"));

290 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_next_available_socket()\r\n"));

294 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on create_socket()\r\n"));

298 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_next_available_port()\r\n"));

302 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on check_port_available()\r\n"));

306 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onássign_port()\r\n"));

310 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑelease_port()\r\n"));

314 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on bind()\r\n"));

318 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_rx_queue_size()\r\n"));

322 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on set_rx_queue_size()\r\n"));

326 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑelease_buffer()\r\n"));

330 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on close_socket()\r\n"));

334 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on is_port_associated()\r\n"));

338 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on send()\r\n"));

344 
uöt32_t
 
i
;

345 
	`ƒk_öt_dißbÀ
();

346 
i
 = 0; i < 30000000L; i++)

348 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on set_timeout()\r\n"));

349 
	`¥ötf
("%d ", 
	`ƒk_î∫o_gë
());

355 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑeceive()\r\n"));

359 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on check_receive_queue()\r\n"));

363 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on wait_until_send_done()\r\n"));

368 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onádd_neighbor()\r\n"));

372 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on shouldIMultihop()\r\n"));

376 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on multihop()\r\n"));

380 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑoute_addr()\r\n"));

383 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑoute_packet()\r\n"));

387 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on sendToGateway()\r\n"));

391 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖkt_type()\r\n"));

395 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÅl_type()\r\n"));

399 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÇw_ctrl_type()\r\n"));

403 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖrocess_app_pkt()\r\n"));

407 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖrocess_nw_ctrl_pkt()\r\n"));

411 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖrocess_other_pkt()\r\n"));

415 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on build_Msg_Hello()\r\n"));

419 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on build_Msg_NgbList()\r\n"));

423 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÇl_rx_task()\r\n"));

427 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÇl_tx_task()\r\n"));

431 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on create_network_layer_tasks()\r\n"));

435 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on initialise_network_layer()\r\n"));

440 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on initialise_buffer_manager()\r\n"));

444 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on is_excess_policy_valid()\r\n"));

448 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on set_excess_policy()\r\n"));

452 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_excess_policy()\r\n"));

456 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_index_unallocated_rx_buf()\r\n"));

460 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_rx_pq()\r\n"));

464 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_rx_pq()\r\n"));

468 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_rx_fq()\r\n"));

472 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_rx_fq()\r\n"));

476 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_tx_aq()\r\n"));

480 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_tx_aq()\r\n"));

484 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_tx_fq()\r\n"));

488 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_tx_fq()\r\n"));

492 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_in_process_buf_count()\r\n"));

498 
	`ƒk_k¥ötf
(
	`PSTR
("leave_cr(): Unknown functionÇumber\r\n"));

504 
	}
}

506 
	$öôüli£_buf„r_m™agî
()

508 
öt8_t
 
i
;

511 
i
 = 0; i < 
MAX_RX_QUEUE_SIZE
; i++)

513 
rx_buf_udp
[
i
].
°©us
 = 
UNALLOCATED
;

514 
rx_buf_udp
[
i
].
√xt
 = 
NULL
;

516 
num_bufs_‰ì
 = 
MAX_RX_QUEUE_SIZE
;

519 
i
 = 0; i < 
NUM_PORTS
; i++)

521 
rx_buf_mgr
[
i
].
pid
 = 
INVALID_PID
;

522 
rx_buf_mgr
[
i
].
pödex
 = -1;

523 
rx_buf_mgr
[
i
].
hód_fq
 = 
NULL
;

524 
rx_buf_mgr
[
i
].
èû_fq
 = 
NULL
;

525 
rx_buf_mgr
[
i
].
hód_pq
 = 
NULL
;

526 
rx_buf_mgr
[
i
].
èû_pq
 = 
NULL
;

527 
rx_buf_mgr
[
i
].
cou¡TŸÆ
 = 0;

528 
rx_buf_mgr
[
i
].
cou¡Fªe
 = 0;

532 
tx_buf_mgr
.
hód_fq
 = 
NULL
;

533 
tx_buf_mgr
.
èû_fq
 = 
NULL
;

534 
tx_buf_mgr
.
hód_aq
 = 
NULL
;

535 
tx_buf_mgr
.
èû_aq
 = 
NULL
;

536 
tx_buf_mgr
.
cou¡_fq
 = 0;

537 
tx_buf_mgr
.
cou¡_aq
 = 0;

540 
i
 = 0; i < 
MAX_TX_QUEUE_SIZE
; i++)

542 
tx_buf
[
i
].
°©us
 = 
EMPTY
;

543 
tx_buf
[
i
].
√xt
 = 
NULL
;

544 
	`öôüli£_nw_∑ckë
–&(
tx_buf
[
i
].
pkt
) );

545 
	`ö£π_tx_fq
–&(
tx_buf
[
i
]) );

549 
ex˚ssPﬁicySëtögs
 = 0;

551 
bm_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

552 if(
bm_£m
 =
NULL
)

554 
	`ƒk_öt_dißbÀ
();

555 
	`ƒk_Àd_£t
(
RED_LED
);

557 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_buffer_manager(): Error creatingÅhe semaphore\r\n"));

560 if(
DEBUG_BM
 == 2)

562 
	`ƒk_k¥ötf
(
	`PSTR
("InitialÅx buffer\r\n"));

563 
	`¥öt_tx_buf„r
();

567 
	}
}

569 
ölöe
 
	$¥öt_tx_buf„r
()

571 
öt8_t
 
i
;

573 
	`ƒk_k¥ötf
(
	`PSTR
("Transmit Buffer: "));

574 if(
tx_buf_mgr
.
hód_fq
 =
NULL
)

575 
	`¥ötf
("-1 ");

577 
	`¥ötf
("%d ", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
hód_fq
));

579 if(
tx_buf_mgr
.
èû_fq
 =
NULL
)

580 
	`¥ötf
("-1 ");

582 
	`¥ötf
("%d ", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
èû_fq
));

584 if(
tx_buf_mgr
.
hód_aq
 =
NULL
)

585 
	`¥ötf
("-1 ");

587 
	`¥ötf
("%d ", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
hód_aq
));

589 if(
tx_buf_mgr
.
èû_aq
 =
NULL
)

590 
	`¥ötf
("-1\n");

592 
	`¥ötf
("%d\n", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
èû_aq
));

594 
i
 = 0; i < 
MAX_TX_QUEUE_SIZE
; i++)

595 
	`¥öt_pkt
(&(
tx_buf
[
i
].
pkt
));

598 
	}
}

600 
	$¥öt_rx_buf„rs
(
uöt8_t
 
p‹t
)

602 
öt8_t
 
rbm_ödex
;

603 
Re˚iveBuf„rUDP
 *
buf
;

605 
rbm_ödex
 = 
	`p‹t_to_rbm_ödex
(
p‹t
);

607 if(
DEBUG_BM
 == 0)

609 
	`ƒk_k¥ötf
(
	`PSTR
("BM:Ñbm_index = "));

610 
	`¥ötf
("%d\r\n", 
rbm_ödex
);

612 
	`ƒk_k¥ötf
(
	`PSTR
("Port queue:\r\n"));

613 
buf
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

614 
buf
 !
NULL
)

616 
	`¥ötf
("%d ", 
buf
 -> 
§cAddr
);

617 
	`¥öt_£g
–&(
buf
 -> 
£g
) );

622 
	}
}

624 
ölöe
 
öt8_t
 
	$c⁄vît_±r_to_ödex
(
TønsmôBuf„r
 *
±r
)

626 
öt8_t
 
i
;

628 
i
 = 0; i < 
MAX_TX_QUEUE_SIZE
; i++)

629 if(
±r
 =&
tx_buf
[
i
])

632  
i
;

633 
	}
}

635 
ölöe
 
öt8_t
 
	$is_ex˚ss_pﬁicy_vÆid
(
öt8_t
 
¥ef
)

637 
¥ef
)

639 
OVERWRITE
:

640 
DROP
:

641  
TRUE
;

643  
FALSE
;

644 
	}
}

646 
öt8_t
 
	$£t_ex˚ss_pﬁicy
(
öt8_t
 
¥io
, i¡8_à
¥ef
)

648 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
 || 
	`is_ex˚ss_pﬁicy_vÆid
(
¥ef
Ë=
FALSE
)

650 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

651  
NRK_ERROR
;

654 
	`íãr_¸
(
bm_£m
, 39);

656 if(
¥ef
 =
DROP
)

657 
ex˚ssPﬁicySëtögs
 |(
uöt32_t
)1 << 
¥io
;

659 
ex˚ssPﬁicySëtögs
 &~–(
uöt32_t
)1 << 
¥io
 );

661 
	`Àave_¸
(
bm_£m
, 39);

663  
NRK_OK
;

664 
	}
}

666 
öt8_t
 
	$gë_ex˚ss_pﬁicy
(
öt8_t
 
¥io
)

668 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
)

670 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

671  
NRK_ERROR
;

674 
	`íãr_¸
(
bm_£m
, 40);

677 if–((
ex˚ssPﬁicySëtögs
 >> 
¥io
Ë& ((
uöt32_t
)1)) == 0 )

679 
	`Àave_¸
(
bm_£m
, 40);

680  
OVERWRITE
;

683 
	`Àave_¸
(
bm_£m
, 40);

684  
DROP
;

685 
	}
}

687 
öt8_t
 
	$gë_ödex_u«Œoˇãd_rx_buf
()

689 
öt8_t
 
i
;

691 
i
 = 0; i < 
MAX_RX_QUEUE_SIZE
; i++)

692 if(
rx_buf_udp
[
i
].
°©us
 =
UNALLOCATED
)

693  
i
;

695  
NRK_ERROR
;

696 
	}
}

698 
ölöe
 
öt8_t
 
	$p‹t_to_rbm_ödex
(
uöt8_t
 
p‹t
)

700 
öt8_t
 
i
;

702 
i
 = 0; i < 
NUM_PORTS
; i++)

703 if(
rx_buf_mgr
[
i
].
pödex
 != -1)

704 if(
p‹ts
[
rx_buf_mgr
[
i
].
pödex
].
≤o
 =
p‹t
)

705  
i
;

708  
NRK_ERROR
;

709 
	}
}

711 
ölöe
 
öt8_t
 
	$p‹t_to_p‹t_ödex
(
uöt8_t
 
p‹t
)

713 
öt8_t
 
i
;

714 
i
 = 0; i < 
NUM_PORTS
; i++)

715 if(
p‹ts
[
i
].
≤o
 =
p‹t
)

716  
i
;

719  
NRK_ERROR
;

720 
	}
}

722 
	$ö£π_rx_pq
(
Tøn•‹t_Segmít_UDP
 *
£g
, 
öt8_t
 
¥io
, 
uöt16_t
 
addr
, i¡8_à
rssi
)

724 
öt8_t
 
rbm_ödex
;

725 
Re˚iveBuf„rUDP
 *
buf
, *
±r
, *
¥ev
;

727 
rbm_ödex
 = 
	`p‹t_to_rbm_ödex
(
£g
 -> 
de°P‹t
);

729 if(
DEBUG_BM
 == 2)

731 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): DestPort = "));

732 
	`¥ötf
("%d\r\n", 
£g
 -> 
de°P‹t
);

734 
buf
 = 
	`ªmove_rx_fq
(
rbm_ödex
, 
EMPTY
);

737 
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

738 
¥ev
 = 
NULL
;

741 
±r
 !
NULL
)

743 if(
±r
 -> 
¥io
 <Örio)

746 
¥ev
 = 
±r
;

747 
±r
 =Öå -> 
√xt
;

750 if(
DEBUG_BM
 == 2)

752 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): AfterÖtrÜoop\r\n"));

755 if(
buf
 !
NULL
)

757 if(
DEBUG_BM
 == 2)

759 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): There is space\r\n"));

763 
buf
 -> 
£g
 = *seg;

764 
buf
 -> 
°©us
 = 
FULL
;

765 
buf
 -> 
¥io
 =Örio;

766 
buf
 -> 
§cAddr
 = 
addr
;

767 
buf
 -> 
rssi
 =Ñssi;

768 
buf
 -> 
√xt
 = 
±r
;

771 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =
NULL
)

773 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =Ñx_buf_mgr[rbm_ödex].
èû_pq
 = 
buf
;

775 if(
¥ev
 =
NULL
)

776 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 = 
buf
;

779 
¥ev
 -> 
√xt
 = 
buf
;

780 if(
¥ev
 =
rx_buf_mgr
[
rbm_ödex
].
èû_pq
)

781 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 = 
buf
;

785 if(
DEBUG_BM
 == 2)

787 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): BeforeÑeturning (there is space)\r\n"));

798 if(
DEBUG_BM
 == 2)

800 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): No space\r\n"));

804 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =
NULL
)

806 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 != 0)

808 
	`ƒk_öt_dißbÀ
();

809 
	`ƒk_Àd_£t
(
RED_LED
);

811 
	`ƒk_k¥ötf
(
	`PSTR
("insert_rx_pq(): Bug found in implementation of countFree inÑx_buf_mgr\r\n"));

813 if(
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 !
NULL
)

815 
	`ƒk_öt_dißbÀ
();

816 
	`ƒk_Àd_£t
(
RED_LED
);

818 
	`ƒk_k¥ötf
(
	`PSTR
("insert_rx_pq(): Bug found in implementation ofÅail_pq inÑx_buf_mgr\r\n"));

821 if(
DEBUG_BM
 == 2)

823 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): BeforeÑeturning. No space butÖort queueálsoÉmpty\r\n"));

832 if(
DEBUG_BM
 == 2)

834 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Possibility ofÑeplacement\r\n"));

836 if–(
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 <Örio )

840 if(
DEBUG_BM
 == 2)

842 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 1\r\n"));

845 
Re˚iveBuf„rUDP
 *
qå
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

847 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =rx_buf_mgr[rbm_ödex].
èû_pq
)

850 if(
DEBUG_BM
 == 2)

852 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 2\r\n"));

854 
qå
 -> 
£g
 = *seg;

855 
qå
 -> 
¥io
 =Örio;

856 
qå
 -> 
§cAddr
 = 
addr
;

857 
qå
 -> 
rssi
 =Ñssi;

863 if(
DEBUG_BM
 == 2)

865 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Before qtrÜoop\r\n"));

868 
qå
 -> 
√xt
 !
rx_buf_mgr
[
rbm_ödex
].
èû_pq
)

869 
qå
 = qå -> 
√xt
;

871 if(
DEBUG_BM
 == 2)

873 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): After qtrÜoop\r\n"));

877 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
£g
 = *seg;

878 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 =Örio;

879 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
§cAddr
 = 
addr
;

880 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
rssi
 =Ñssi;

883 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
√xt
 = 
±r
;

884 if(
¥ev
 =
NULL
)

885 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =Ñx_buf_mgr[rbm_ödex].
èû_pq
;

887 
¥ev
 -> 
√xt
 = 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
;

889 
qå
 -> 
√xt
 = 
NULL
;

890 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 = 
qå
;

895 if–(
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 ==Örio )

898 if(
DEBUG_BM
 == 2)

900 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 3\r\n"));

903 if–((
ex˚ssPﬁicySëtögs
 >> 
¥io
Ë& ((
uöt32_t
)1)Ë=
OVERWRITE
)

905 if(
DEBUG_BM
 == 2)

907 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 4\r\n"));

910 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
£g
 = *seg;

911 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 =Örio;

912 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
§cAddr
 = 
addr
;

913 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
rssi
 =Ñssi;

919 if(
DEBUG_BM
 == 2)

921 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 5\r\n"));

928 if(
DEBUG_BM
 == 2)

930 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 6\r\n"));

936 if(
DEBUG_BM
 == 2)

938 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 7\r\n"));

941 
	}
}

943 
Re˚iveBuf„rUDP
* 
	$ªmove_rx_pq
(
öt8_t
 
rbm_ödex
)

946 
Re˚iveBuf„rUDP
 *
±r
;

948 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =
NULL
)

950  
NULL
;

953 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =rx_buf_mgr[rbm_ödex].
èû_pq
)

954 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 = 
NULL
;

956 
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

958 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =Ñx_buf_mgr[rbm_ödex].hód_pq -> 
√xt
;

960  
±r
;

961 
	}
}

964 
	$ö£π_rx_fq
(
Re˚iveBuf„rUDP
 *
buf
, 
öt8_t
 
rbm_ödex
, i¡8_à
°©us
)

967 if(
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =
NULL
)

969 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =Ñx_buf_mgr[rbm_ödex].
èû_fq
 = 
buf
;

970 
buf
 -> 
√xt
 = 
NULL
;

974 
rx_buf_mgr
[
rbm_ödex
].
èû_fq
 -> 
√xt
 = 
buf
;

975 
buf
 -> 
√xt
 = 
NULL
;

976 
rx_buf_mgr
[
rbm_ödex
].
èû_fq
 = 
buf
;

979 if(
°©us
 =
EMPTY
)

981 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
++;

982 
buf
 -> 
°©us
 = 
EMPTY
;

986 
	}
}

989 
Re˚iveBuf„rUDP
* 
	$ªmove_rx_fq
(
öt8_t
 
rbm_ödex
, i¡8_à
°©us
)

992 
Re˚iveBuf„rUDP
 *
±r
;

993 
Re˚iveBuf„rUDP
 *
¥ev
 = 
NULL
;

995 if(
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =
NULL
)

996  
NULL
;

998 
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
;

999 
±r
 !
NULL
)

1001 if(
°©us
 =
EMPTY
)

1003 if(
±r
 -> 
°©us
 =
EMPTY
)

1006 if(
±r
 -> 
°©us
 =
FULL
)

1008 
¥ev
 = 
±r
;

1009 
±r
 =Öå -> 
√xt
;

1011 if(
±r
 =
NULL
)

1012  
NULL
;

1014 if(
¥ev
 =
NULL
)

1016 if(
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =rx_buf_mgr[rbm_ödex].
èû_fq
)

1017 
rx_buf_mgr
[
rbm_ödex
].
èû_fq
 = 
NULL
;

1019 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =Ñx_buf_mgr[rbm_ödex].hód_fq -> 
√xt
;

1020 if(
°©us
 =
EMPTY
)

1021 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
--;

1022  
±r
;

1026 
¥ev
 -> 
√xt
 = 
±r
 ->Çext;

1027 if(
°©us
 =
EMPTY
)

1028 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
--;

1029  
±r
;

1030 
	}
}

1033 
öt8_t
 
	$ö£π_tx_aq
(
NW_Packë
 *
pkt
)

1035 
TønsmôBuf„r
 *
buf
 = 
	`ªmove_tx_fq
();

1036 
TønsmôBuf„r
 *
±r
;

1037 
TønsmôBuf„r
 *
¥ev
;

1039 if(
buf
 =
NULL
)

1041  
NRK_ERROR
;

1044 if(
tx_buf_mgr
.
hód_aq
 =
NULL
)

1047 
buf
 -> 
pkt
 = *pkt;

1048 
buf
 -> 
°©us
 = 
FULL
;

1049 
buf
 -> 
¥io
 = 
pkt
 ->Örio;

1050 
buf
 -> 
√xt
 = 
NULL
;

1052 
tx_buf_mgr
.
hód_aq
 =Åx_buf_mgr.
èû_aq
 = 
buf
;

1053 
tx_buf_mgr
.
cou¡_aq
++;

1054  
NRK_OK
;

1058 
±r
 = 
tx_buf_mgr
.
hód_aq
;

1059 
¥ev
 = 
NULL
;

1062 
±r
 !
NULL
)

1064 if(
±r
 -> 
¥io
 < 
pkt
 ->Örio)

1067 
¥ev
 = 
±r
;

1068 
±r
 =Öå -> 
√xt
;

1071 
buf
 -> 
pkt
 = *pkt;

1072 
buf
 -> 
°©us
 = 
FULL
;

1073 
buf
 -> 
¥io
 = 
pkt
 ->Örio;

1074 
buf
 -> 
√xt
 = 
±r
;

1076 if(
¥ev
 =
NULL
)

1077 
tx_buf_mgr
.
hód_aq
 = 
buf
;

1080 
¥ev
 -> 
√xt
 = 
buf
;

1081 if(
¥ev
 =
tx_buf_mgr
.
èû_aq
)

1082 
tx_buf_mgr
.
èû_aq
 = 
buf
;

1086 
tx_buf_mgr
.
cou¡_aq
++;

1087  
NRK_OK
;

1088 
	}
}

1091 
TønsmôBuf„r
* 
	$ªmove_tx_aq
()

1095 
TønsmôBuf„r
 *
±r
;

1097 if(
tx_buf_mgr
.
hód_aq
 =
NULL
)

1099  
NULL
;

1102 if(
tx_buf_mgr
.
hód_aq
 =tx_buf_mgr.
èû_aq
)

1103 
tx_buf_mgr
.
èû_aq
 = 
NULL
;

1105 
±r
 = 
tx_buf_mgr
.
hód_aq
;

1107 
tx_buf_mgr
.
hód_aq
 =Åx_buf_mgr.hód_aq -> 
√xt
;

1108 
tx_buf_mgr
.
cou¡_aq
--;

1110  
±r
;

1111 
	}
}

1113 
	$ö£π_tx_fq
(
TønsmôBuf„r
 *
buf
)

1117 if(
tx_buf_mgr
.
hód_fq
 =
NULL
)

1118 
tx_buf_mgr
.
hód_fq
 =Åx_buf_mgr.
èû_fq
 = 
buf
;

1121 
tx_buf_mgr
.
èû_fq
 -> 
√xt
 = 
buf
;

1122 
tx_buf_mgr
.
èû_fq
 = 
buf
;

1124 
buf
 -> 
°©us
 = 
EMPTY
;

1125 
buf
 -> 
√xt
 = 
NULL
;

1126 
	`öôüli£_nw_∑ckë
(&(
buf
 -> 
pkt
));

1127 
tx_buf_mgr
.
cou¡_fq
++;

1130 
	}
}

1133 
TønsmôBuf„r
* 
	$ªmove_tx_fq
()

1136 
TønsmôBuf„r
 *
±r
;

1138 if(
tx_buf_mgr
.
hód_fq
 =
NULL
)

1139  
NULL
;

1141 if(
tx_buf_mgr
.
hód_fq
 =tx_buf_mgr.
èû_fq
)

1142 
tx_buf_mgr
.
èû_fq
 = 
NULL
;

1144 
±r
 = 
tx_buf_mgr
.
hód_fq
;

1146 
tx_buf_mgr
.
hód_fq
 =Åx_buf_mgr.hód_fq -> 
√xt
;

1147 
tx_buf_mgr
.
cou¡_fq
--;

1149  
±r
;

1150 
	}
}

1153 
öt8_t
 
	$gë_ö_¥o˚ss_buf_cou¡
(
öt8_t
 
rbm_ödex
)

1155 
öt8_t
 
cou¡
 = 0;

1157 
Re˚iveBuf„rUDP
 *
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
;

1159 
±r
 !
NULL
)

1161 if(
±r
 -> 
°©us
 =
FULL
)

1162 
cou¡
++;

1164 
±r
 =Öå -> 
√xt
;

1167  
cou¡
;

1168 
	}
}

1170 
öt8_t
 
	$gë_num_bufs_‰ì
()

1172 
öt8_t
 
n
;

1174 
n
 = 
num_bufs_‰ì
;

1176  
n
;

1177 
	}
}

1180 
	$£t_num_bufs_‰ì
(
öt8_t
 
n
)

1182 
num_bufs_‰ì
 = 
n
;

1184 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/BufferManager.h

4 #i‚de‡
_BUFFER_MANAGER_H


5 
	#_BUFFER_MANAGER_H


	)

7 
	~<°döt.h
>

9 
	~"Tøn•‹tLayîUDP.h
"

10 
	~"Nëw‹kLayî.h
"

16 
	#DEBUG_BM
 0

17 

	)

18 
	#DEFAULT_RX_QUEUE_SIZE
 1

19 

	)

21 
	#UNALLOCATED
 1

22 
	#EMPTY
 2

23 
	#FULL
 3

24 

	)

29 
	#OVERWRITE
 0

	)

30 
	#DROP
 1

	)

33 
	#MAX_TASK_PRIORITY
 19

	)

37 
	sRe˚iveBuf„rUDP


39 
Tøn•‹t_Segmít_UDP
 
	m£g
;

40 
öt8_t
 
	m°©us
;

41 
öt8_t
 
	m¥io
;

43 
öt8_t
 
	mrssi
;

44 
uöt16_t
 
	m§cAddr
;

45 
Re˚iveBuf„rUDP
 *
	m√xt
;

46 }
	tRe˚iveBuf„rUDP
;

50 
öt8_t
 
	mpid
;

51 
öt8_t
 
	mpödex
;

52 
Re˚iveBuf„rUDP
 *
	mhód_fq
;

53 
Re˚iveBuf„rUDP
 *
	mèû_fq
;

54 
Re˚iveBuf„rUDP
 *
	mhód_pq
;

55 
Re˚iveBuf„rUDP
 *
	mèû_pq
;

56 
öt8_t
 
	mcou¡TŸÆ
;

57 
öt8_t
 
	mcou¡Fªe
;

58 }
	tRe˚iveBuf„rM™agî
;

60 
	sTønsmôBuf„r


62 
NW_Packë
 
	mpkt
;

63 
öt8_t
 
	m°©us
;

64 
öt8_t
 
	m¥io
;

67 
TønsmôBuf„r
 *
	m√xt
;

68 }
	tTønsmôBuf„r
;

72 
TønsmôBuf„r
 *
	mhód_fq
;

73 
TønsmôBuf„r
 *
	mèû_fq
;

74 
TønsmôBuf„r
 *
	mhód_aq
;

75 
TønsmôBuf„r
 *
	mèû_aq
;

76 
öt8_t
 
	mcou¡_aq
;

77 
öt8_t
 
	mcou¡_fq
;

78 }
	tTønsmôBuf„rM™agî
;

84 
öôüli£_buf„r_m™agî
();

94 
öt8_t
 
is_ex˚ss_pﬁicy_vÆid
(öt8_à
¥ef
);

103 
öt8_t
 
£t_ex˚ss_pﬁicy
(öt8_à
¥io
, i¡8_à
¥ef
);

116 
öt8_t
 
gë_ex˚ss_pﬁicy
(öt8_à
¥io
);

128 
öt8_t
 
gë_ödex_u«Œoˇãd_rx_buf
();

139 
öt8_t
 
p‹t_to_rbm_ödex
(
uöt8_t
 
p‹t
);

148 
öt8_t
 
p‹t_to_p‹t_ödex
(
uöt8_t
 
p‹t
);

157 
ö£π_rx_pq
(
Tøn•‹t_Segmít_UDP
 *
£g
, 
öt8_t
 
¥io
, 
uöt16_t
 
addr
, i¡8_à
rssi
);

171 
Re˚iveBuf„rUDP
* 
ªmove_rx_pq
(
öt8_t
 
rbm_ödex
);

180 
ö£π_rx_fq
(
Re˚iveBuf„rUDP
 *
buf
, 
öt8_t
 
rbm_ödex
, i¡8_à
°©us
);

193 
Re˚iveBuf„rUDP
* 
ªmove_rx_fq
(
öt8_t
 
rbm_ödex
, i¡8_à
°©us
);

204 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
 *
pkt
);

215 
TønsmôBuf„r
* 
ªmove_tx_aq
();

226 
ö£π_tx_fq
(
TønsmôBuf„r
 *
buf
);

235 
TønsmôBuf„r
* 
ªmove_tx_fq
();

245 
öt8_t
 
gë_ö_¥o˚ss_buf_cou¡
(öt8_à
rbm_ödex
);

254 
öt8_t
 
gë_num_bufs_‰ì
();

263 
£t_num_bufs_‰ì
(
öt8_t
 
n
);

272 
¥öt_tx_buf„r
();

281 
öt8_t
 
c⁄vît_±r_to_ödex
(
TønsmôBuf„r
 *
±r
);

282 
¥öt_rx_buf„rs
(
uöt8_t
 
p‹t
);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Debug.c

1 
	~<ƒk.h
>

2 
	~<ö˛ude.h
>

3 
	~<ulib.h
>

4 
	~<°dio.h
>

5 
	~<avr/¶ìp.h
>

6 
	~<hÆ.h
>

7 
	~<°döt.h
>

9 
	~"Debug.h
"

12 
	$go_öto_∑nic
(*
°r
)

15 
	`ƒk_öt_dißbÀ
();

17 
	`ƒk_Àd_£t
(
RED_LED
);

19 
	`¥ötf
("PANIC: %s. Thi†shouldÇevî h≠≥n\n", 
°r
);

21 
	}
}

23 
	$¥öt_nw_°ack_î∫o
(
öt8_t
 
n
)

25 
n
)

28 
	`ƒk_k¥ötf
(
	`PSTR
("MaximumÇeighborÜimitÑeached\r\n"));

32 
	`ƒk_k¥ötf
(
	`PSTR
("No socket descriptorávailable\r\n"));

36 
	`ƒk_k¥ötf
(
	`PSTR
("Unsupported socketÅype\r\n"));

40 
	`ƒk_k¥ötf
(
	`PSTR
("Port is unavailable\r\n"));

44 
	`ƒk_k¥ötf
(
	`PSTR
("Invalid socket descriptor\r\n"));

48 
	`ƒk_k¥ötf
(
	`PSTR
("Invalid call made\r\n"));

52 
	`ƒk_k¥ötf
(
	`PSTR
("NoÖortsávailable\r\n"));

56 
	`ƒk_k¥ötf
(
	`PSTR
("InvalidárgumentsÖassed\r\n"));

60 
	`ƒk_k¥ötf
(
	`PSTR
("Error in calculatingÉndianness\r\n"));

64 
	`ƒk_k¥ötf
(
	`PSTR
("NoÑeceive buffersávailable\r\n"));

68 
	`ƒk_k¥ötf
(
	`PSTR
("NoÅransmit buffersávailable\r\n"));

72 
	`ƒk_k¥ötf
(
	`PSTR
("SocketÅimeout\r\n"));

76 
	`ƒk_k¥ötf
(
	`PSTR
("Unmapped socket\r\n"));

80 
	`ƒk_k¥ötf
(
	`PSTR
("NoÖortÉlementávailable inÖortárray\r\n"));

84 
	`ƒk_k¥ötf
(
	`PSTR
("NoÑbmÉlementávailable inÑbmárray\r\n"));

88 
	`ƒk_k¥ötf
(
	`PSTR
("UnknownÉrrorÇumberÖassed\r\n"));

93 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Debug.h

1 #i‚de‡
_DEBUG_H


2 
	#_DEBUG_H


	)

5 
go_öto_∑nic
(*
°r
);

15 
¥öt_nw_°ack_î∫o
(
öt8_t
 
n
);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NWErrorCodes.h

5 #i‚de‡
_NW_ERROR_CODES_H


6 
	#_NW_ERROR_CODES_H


	)

8 
	#MAX_NEIGHBOR_LIMIT_REACHED
 1

	)

9 
	#NO_SOCKET_DESC_AVAILABLE
 2

	)

10 
	#UNSUPPORTED_SOCK_TYPE
 3

	)

11 
	#PORT_UNAVAILABLE
 4

	)

12 
	#INVALID_SOCKET
 5

	)

13 
	#INVALID_CALL
 6

	)

14 
	#NO_PORTS_AVAILABLE
 7

	)

15 
	#INVALID_ARGUMENT
 8

	)

16 
	#ERROR_ENDIAN
 9

	)

17 
	#NO_RX_BUFFERS_AVAILABLE
 10

	)

18 
	#NO_TX_BUFFERS_AVAILABLE
 11

	)

19 
	#SOCKET_TIMEOUT
 12

	)

20 
	#UNMAPPED_SOCKET
 13

	)

21 
	#NO_PORT_ELEMENT_AVAILABLE
 14

	)

22 
	#NO_RBM_ELEMENT_AVAILABLE
 15

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NWStackConfig.c

3 
	~"NWSèckC⁄fig.h
"

4 
	~"NWEº‹Codes.h
"

5 
	~<°döt.h
>

6 
	~<ƒk.h
>

7 
	~<ö˛ude.h
>

8 
	~<ulib.h
>

9 
	~<°dio.h
>

10 
	~<avr/¶ìp.h
>

11 
	~<hÆ.h
>

12 
	~<ƒk_îr‹.h
>

13 
	~<°dlib.h
>

14 
	~<m©h.h
>

16 
	#DEBUG_NWSC
 2

	)

22 
öôüli£_å™•‹t_œyî_udp
();

25 
öt8_t
 
ídü¬ess
();

28 
öôüli£_buf„r_m™agî
();

31 
öôüli£_√tw‹k_œyî
();

34 
go_öto_∑nic
(*);

40 
öôüli£_£rül_communiˇti⁄
();

43 
	$ƒk_öô_nw_°ack
()

45 if(
	`ídü¬ess
(Ë=
ERROR_ENDIAN
)

47 
	`ƒk_öt_dißbÀ
();

48 
	`ƒk_Àd_£t
(
RED_LED
);

50 
	`ƒk_k¥ötf
(
	`PSTR
("Error in calculatingÉndianness in init_nw_stack()"));

54 
	`§™d
(
NODE_ADDR
);

56 
	`öôüli£_£rül_communiˇti⁄
();

57 if(
DEBUG_NWSC
 == 2)

58 
	`ƒk_k¥ötf
(
	`PSTR
("Serial communications initalized\r\n"));

60 
	`öôüli£_buf„r_m™agî
();

61 if(
DEBUG_NWSC
 == 2)

62 
	`ƒk_k¥ötf
(
	`PSTR
("Buffer manager initialised\r\n"));

64 
	`öôüli£_å™•‹t_œyî_udp
();

65 if(
DEBUG_NWSC
 == 2)

66 
	`ƒk_k¥ötf
(
	`PSTR
("TransportÜayer initialised\r\n"));

73 
	`öôüli£_√tw‹k_œyî
();

74 if(
DEBUG_NWSC
 == 2)

75 
	`ƒk_k¥ötf
(
	`PSTR
("NetworkÜayer initialised\r\n"));

78 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NWStackConfig.h

4 #i‚de‡
_NW_STACK_CONFIG_H


5 
	#_NW_STACK_CONFIG_H


	)

7 
	~"NWEº‹Codes.h
"

10 
	#MAX_APP_PAYLOAD
 40

11 
	#MAX_SERIAL_PAYLOAD
 32

12 
	#MAX_GATEWAY_PAYLOAD
 40

13 
	#MAX_RX_QUEUE_SIZE
 8

15 
	#MAX_TX_QUEUE_SIZE
 4

16 
	#DEFAULT_EXCESS_POLICY
 
DROP


17 

	)

20 
	#NUM_PORTS
 4

21 

	)

23 
	#CONNECTED_TO_GATEWAY
 
TRUE


24 
	#MAX_NGBS
 5

25 
	#HELLO_PERIOD
 2

26 
	#MAX_NETWORK_DIAMETER
 20

27 
	#NGB_LIST_PERIOD
 6

28 
	#TIMEOUT_COUNTER
 5

29 
	#MAX_NODES
 5

30 

	)

32 
	#MAX_PRIORITY
 31

	)

33 
	#LOW_PRIORITY
 1

	)

34 
	#NORMAL_PRIORITY
 2

	)

35 
	#HIGH_PRIORITY
 3

	)

38 
ƒk_öô_nw_°ack
();

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NetworkLayer.c

4 
	~"Tøn•‹tLayîUDP.h
"

5 
	~"Nëw‹kLayî.h
"

6 
	~"Buf„rM™agî.h
"

7 
	~"Sîül.h
"

8 
	~"NWEº‹Codes.h
"

9 
	~"Debug.h
"

11 
	~<ƒk.h
>

12 
	~<ö˛ude.h
>

13 
	~<ulib.h
>

14 
	~<°dio.h
>

15 
	~<avr/¶ìp.h
>

16 
	~<hÆ.h
>

17 
	~<widom.h
>

18 
	~<ƒk_îr‹.h
>

19 
	~<°döt.h
>

20 
	~<°dlib.h
>

22 
	#PKT_PRIO
 
NODE_ADDR


	)

26 
ƒk_£m_t
 *
é_£m
;

27 
P‹t
 
p‹ts
[];

29 
öt8_t
 
is_p‹t_assocüãd
(
öt16_t
 
p‹t
);

30 
¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
*);

31 
¥öt_£g
(
Tøn•‹t_Segmít_UDP
*);

34 
ƒk_£m_t
 *
bm_£m
;

35 
Re˚iveBuf„rM™agî
 
rx_buf_mgr
[];

37 
ö£π_rx_pq
(
Tøn•‹t_Segmít_UDP
*, 
öt8_t
, 
uöt16_t
, int8_t);

38 
TønsmôBuf„r
* 
ªmove_tx_aq
();

39 
ö£π_tx_fq
(
TønsmôBuf„r
*);

40 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

41 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

42 
öt8_t
 
p‹t_to_p‹t_ödex
(
uöt8_t
);

43 
¥öt_tx_buf„r
();

47 
∑ck_Msg_NgbLi°
(
uöt8_t
 *, 
Msg_NgbLi°
 *);

48 
∑ck_Msg_Hñlo
(
uöt8_t
 *, 
Msg_Hñlo
 *);

49 
∑ck_NodeToG©ewaySîül_Packë_hódî
(
uöt8_t
 *, 
NodeToG©ewaySîül_Packë
 *);

50 
∑ck_TL_UDP_hódî
(
uöt8_t
 *, 
Tøn•‹t_Segmít_UDP
*);

51 
∑ck_NW_Packë_hódî
(
uöt8_t
 *,
NW_Packë
*);

53 
u≈ack_Msg_NgbLi°
(
Msg_NgbLi°
*, 
uöt8_t
 *);

54 
u≈ack_Msg_Hñlo
(
Msg_Hñlo
 *, 
uöt8_t
 *);

55 
u≈ack_TL_UDP_hódî
(
Tøn•‹t_Segmít_UDP
 *, 
uöt8_t
 *);

56 
u≈ack_NW_Packë_hódî
(
NW_Packë
*, 
uöt8_t
 *);

59 
£ndToSîül
(
uöt8_t
 *, 
öt8_t
);

60 
¥ötBuf„r
(
uöt8_t
 *, 
öt8_t
);

63 
go_öto_∑nic
(*);

66 
öt8_t
 
wd_tx_∑ckë_íqueue
(
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
¥i‹ôy
);

69 
Neighb‹Li°
 
	g∆
;

70 
RoutögTabÀ
 
	gπ
[
MAX_NODES
];

72 
uöt8_t
 
	grx_buf
[
RF_BUFFER_SIZE
];

73 
NW_Packë
 
	gpkt_rx
;

75 
uöt8_t
 
	gtx_buf
[
SIZE_NW_PACKET
];

76 
NW_Packë
 
	gpkt_tx
;

78 
uöt8_t
 
	gto_gw_buf
[
SIZE_NODETOGATEWAYSERIAL_PACKET
];

79 
NodeToG©ewaySîül_Packë
 
	g¡g_pkt
;

81 
uöt16_t
 
	gDEFAULT_GATEWAY
;

82 
öt8_t
 
	gROUTING_ALGORITHM
;

83 
öt8_t
 
	gFLOODING_TYPE
;

84 
öt8_t
 
	gP_DISTRIBUTION
;

87 
Tøn•‹t_Segmít_UDP
 
	gudp_£g
;

88 
Msg_Hñlo
 
	gmh
;

89 
Msg_NgbLi°
 
	gm∆i°
;

90 
Neighb‹Li°
 
	g∆i°
;

93 
Msg_Hñlo
 
	gmhe
;

94 
Msg_NgbLi°
 
	gmn
;

95 
Tøn•‹t_Segmít_UDP
 
	g£g
;

97 
Msg_RoutögTabÀ
 
	gmπ
;

101 
ƒk_èsk_ty≥
 
	gNL_RX_TASK
;

102 
NRK_STK
 
	g∆_rx_èsk_°ack
[
NRK_APP_STACKSIZE
];

103 
∆_rx_èsk
();

105 
ƒk_èsk_ty≥
 
	gNL_TX_TASK
;

106 
NRK_STK
 
	g∆_tx_èsk_°ack
[
NRK_APP_STACKSIZE
];

107 
∆_tx_èsk
();

109 
ƒk_£m_t
 *
	g∆_£m
;

112 
ölöe
 
öt8_t
 
	$add_√ighb‹
(
Neighb‹
 
n
)

114 
öt8_t
 
i
;

115 
öt8_t
 
found
 = 
FALSE
;

122 
	`íãr_¸
(
∆_£m
, 19);

123 
i
 = 0; i < 
MAX_NGBS
; i++)

126 if(
∆
.
ngbs
[
i
].
addr
 =
n
.addr)

128 
found
 = 
TRUE
;

130 
∆
.
ngbs
[
i
].
œ°Rï‹t
 = 
TIMEOUT_COUNTER
;

131 
∆
.
ngbs
[
i
].
isNew
 = 
FALSE
;

132 
∆
.
ngbs
[
i
].
rssi
 = 
n
.rssi;

134 if(
∆
.
ngbs
[
i
].
addr
 !
BCAST_ADDR
)

136 
∆
.
ngbs
[
i
].
œ°Rï‹t
--;

137 if(
∆
.
ngbs
[
i
].
œ°Rï‹t
 == 0)

139 
∆
.
ngbs
[
i
].
addr
 = 
BCAST_ADDR
;

140 
∆
.
ngbs
[
i
].
rssi
 = 0;

141 
∆
.
ngbs
[
i
].
isNew
 = 
FALSE
;

142 
∆
.
cou¡
--;

147 if(
found
 =
TRUE
)

149 
	`Àave_¸
(
∆_£m
, 19);

150  
NRK_OK
;

154 if(
∆
.
cou¡
 =
MAX_NGBS
)

156 
	`_ƒk_î∫o_£t
(
MAX_NEIGHBOR_LIMIT_REACHED
);

158 
	`Àave_¸
(
∆_£m
, 19);

159  
NRK_ERROR
;

163 
i
 = 0; i < 
MAX_NGBS
; i++)

165 if(
∆
.
ngbs
[
i
].
addr
 =
BCAST_ADDR
)

167 
n
.
œ°Rï‹t
 = 
TIMEOUT_COUNTER
;

168 
n
.
isNew
 = 
TRUE
;

169 
∆
.
ngbs
[
i
] = 
n
;

170 
∆
.
cou¡
++;

175 if(
i
 =
MAX_NGBS
)

177 
	`ƒk_öt_dißbÀ
();

178 
	`ƒk_Àd_£t
(
RED_LED
);

180 
	`ƒk_k¥ötf
(
	`PSTR
("add_neighbor(): Bug found in implementation of MAX_NGBS\r\n"));

183 
	`Àave_¸
(
∆_£m
, 19);

184  
NRK_OK
;

185 
	}
}

188 
ölöe
 
öt8_t
 
	$shouldIMu…ih›
(
NW_Packë
 *
pkt
)

190 
pkt
 -> 
âl
--;

192 if(
pkt
 -> 
âl
 == 0)

193  
MULTIHOP_NO
;

195  
MULTIHOP_YES
;

196 
	}
}

198 
ölöe
 
	$mu…ih›
(
NW_Packë
 *
pkt
)

200 if–
	`shouldIMu…ih›
(
pkt
Ë=
MULTIHOP_YES
 )

202 
	`íãr_¸
(
bm_£m
, 21);

203 if–
	`ö£π_tx_aq
(
pkt
Ë=
NRK_ERROR
 )

205 
	`ªc‹d_tx_queue_fuŒ
(
pkt
);

207 
	`Àave_¸
(
bm_£m
, 21);

209 if(
DEBUG_NL
 == 2)

211 
	`ƒk_k¥ötf
(
	`PSTR
("NL: multihop(): InsertedÖacket. "));

212 
	`¥öt_tx_buf„r
();

217 
	}
}

219 
ölöe
 
uöt16_t
 
	$rouã_addr
(
uöt16_t
 
addr
)

221 
öt8_t
 
i
;

224 if(
addr
 =
BCAST_ADDR
)

225  
BCAST_ADDR
;

227 
	`íãr_¸
(
∆_£m
, 34);

229 
i
 = 0; i < 
MAX_NODES
; i++)

231 if(
π
[
i
].
de°
 !
BCAST_ADDR
)

232 if(
π
[
i
].
de°
 =
addr
)

234 
	`Àave_¸
(
∆_£m
, 34);

235  
π
[
i
].
√xtH›
;

240 
	`Àave_¸
(
∆_£m
, 34);

241  
BCAST_ADDR
;

242 
	}
}

244 
	$rouã_∑ckë
(
NW_Packë
 *
pkt
)

246 
pkt
 -> 
âl
--;

247 if(
pkt
 -> 
âl
 == 0)

251 
pkt
 -> 
¥evH›
 = 
NODE_ADDR
;

252 
pkt
 -> 
√xtH›
 = 
	`rouã_addr
’kà-> 
de°
);

254 
	`íãr_¸
(
bm_£m
, 23);

255 if–
	`ö£π_tx_aq
(
pkt
Ë=
NRK_ERROR
 )

257 
	`ªc‹d_tx_queue_fuŒ
(
pkt
);

259 
	`Àave_¸
(
bm_£m
, 23);

262 
	}
}

264 
öt8_t
 
	$£ndToG©eway
(
uöt8_t
 *
±r
, 
öt8_t
 
Àn
)

266 
uöt8_t
 
gw_buf
[
SIZE_NODETOGATEWAYSERIAL_PACKET
] = {0};

268 if(
Àn
 <0 ||Üí > 
MAX_SERIAL_PAYLOAD
 || 
±r
 =
NULL
 || 
CONNECTED_TO_GATEWAY
 =
FALSE
)

270 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

271  
NRK_ERROR
;

275 
gw_buf
[0] = 
SERIAL_APPLICATION
;

276 
gw_buf
[1] = 
Àn
;

277 
	`mem˝y
(
gw_buf
 + 
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
, 
±r
, 
Àn
);

279 
	`£ndToSîül
(
gw_buf
, 
SIZE_NODETOGATEWAYSERIAL_PACKET
);

282  
NRK_OK
;

283 
	}
}

285 
ölöe
 
uöt8_t
 
	$pkt_ty≥
(
NW_Packë
 *
pkt
)

287 
pkt
 -> 
ty≥
)

289 
UDP
:

290  
APPLICATION
;

292 
HELLO
:

293 
NGB_LIST
:

294 
ROUTE_CONFIG
:

295  
NW_CONTROL
;

298  
INVALID
;

299 
	}
}

301 
ölöe
 
uöt8_t
 
	$é_ty≥
(
uöt8_t
 
ty≥
)

303 if(
ty≥
 =
UDP
)

304  
UDP
;

306  
INVALID
;

307 
	}
}

309 
ölöe
 
uöt8_t
 
	$nw_˘æ_ty≥
(
uöt8_t
 
ty≥
)

311 
ty≥
)

313 
HELLO
:

314  
HELLO
;

316 
NGB_LIST
:

317  
NGB_LIST
;

319 
ROUTE_CONFIG
:

320  
ROUTE_CONFIG
;

322  
INVALID
;

323 
	}
}

325 
	$¥o˚ss_≠p_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
)

327 
öt8_t
 
ªt
;

329 if(
DEBUG_NL
 >= 1)

331 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Entered\r\n"));

332 
	`ƒk_k¥ötf
(
	`PSTR
("NLÖrocess_app_pkt(): Received from "));

333 
	`¥öt_pkt_hódî
(
pkt
);

343 if(
	`é_ty≥
(
pkt
 -> 
ty≥
Ë=
UDP
)

346 
	`u≈ack_TL_UDP_hódî
(&
udp_£g
, 
pkt
 -> 
d©a
);

348 
	`mem˝y
(
udp_£g
.
d©a
, 
pkt
 -> d©®+ 
SIZE_TRANSPORT_UDP_HEADER
, 
MAX_APP_PAYLOAD
);

351 if(
	`is_p‹t_assocüãd
(
udp_£g
.
de°P‹t
Ë=
TRUE
)

353 
öt8_t
 
p‹t_ödex
;

355 
	`íãr_¸
(
bm_£m
, 28);

356 
	`íãr_¸
(
é_£m
, 28);

359 if(
DEBUG_NL
 == 2)

364 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Before inserting intoÖort queue\r\n"));

366 
	`ö£π_rx_pq
(&
udp_£g
, 
pkt
 -> 
¥io
,Ökà-> 
§c
, 
rssi
);

367 if(
DEBUG_NL
 == 2)

369 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): After inserting intoÖort queue\r\n"));

372 
p‹t_ödex
 = 
	`p‹t_to_p‹t_ödex
(
udp_£g
.
de°P‹t
);

373 if(
p‹t_ödex
 =
NRK_ERROR
)

375 
	`ƒk_öt_dißbÀ
();

376 
	`ƒk_Àd_£t
(
RED_LED
);

378 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

380 
ªt
 = 
	`ƒk_evít_sig«l
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
);

382 if(
ªt
 =
NRK_ERROR
)

384 if(
	`ƒk_î∫o_gë
() == 1)

386 
	`ƒk_öt_dißbÀ
();

387 
	`ƒk_Àd_£t
(
RED_LED
);

389 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Bug detected in implementation ofÖort signals\r\n"));

396 if(
DEBUG_NL
 == 0)

398 
	`ƒk_k¥ötf
(
	`PSTR
("UnassociatedÖort found: "));

399 
	`¥ötf
("%u\n", 
udp_£g
.
de°P‹t
);

402 
	`ªc‹d_u«ssocüãd_sockë_pkt
(
pkt
);

405 
	`Àave_¸
(
é_£m
, 28);

406 
	`Àave_¸
(
bm_£m
, 28);

411 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): UnsupportedÅransportÜayerÅype detected = "));

412 
	`¥ötf
("%d\r\n", 
pkt
 -> 
ty≥
);

415 
	}
}

417 
	$¥o˚ss_nw_˘æ_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
)

419 
öt8_t
 
ªt
;

420 
öt8_t
 
i
;

422 if(
DEBUG_NL
 >= 1)

423 
	`ƒk_k¥ötf
(
	`PSTR
("NL: EnteredÖrocess_nw_ctrl_pkt()\n"));

425  
	`nw_˘æ_ty≥
(
pkt
 -> 
ty≥
) )

427 
HELLO
:

430 
	`u≈ack_Msg_Hñlo
(&
mh
, 
pkt
 -> 
d©a
);

431 
mh
.
n
.
rssi
 =Ñssi;

432 
ªt
 = 
	`add_√ighb‹
(
mh
.
n
);

433 if(
ªt
 =
NRK_ERROR
)

435 
	`ªc‹d_max_ngb_limô_ªached
(
pkt
);

437 if(
DEBUG_NL
 >= 1)

439 
	`ƒk_k¥ötf
(
	`PSTR
("Received HELLO msg from: "));

440 
	`¥ötf
("%d ", 
mh
.
n
.
addr
);

441 
	`ƒk_k¥ötf
(
	`PSTR
("with RSSI = "));

442 
	`¥ötf
("%d\r\n",
mh
.
n
.
rssi
);

447 
NGB_LIST
:

449 if(
pkt
 -> 
§c
 =
NODE_ADDR
)

453 
	`u≈ack_Msg_NgbLi°
(&
m∆i°
, 
pkt
 -> 
d©a
);

454 
∆i°
 = 
m∆i°
.
∆
;

456 if(
DEBUG_NL
 >= 1)

458 
öt8_t
 
i
;

459 
	`¥ötf
("NL: Re˚ived NGB_LIST msg from %d wôh cou¡ = %d\n", 
∆i°
.
my_addr
,Çli°.
cou¡
);

460 
i
 = 0; i < 
MAX_NGBS
; i++)

462 if(
∆i°
.
ngbs
[
i
].
addr
 !
BCAST_ADDR
)

463 
	`¥ötf
("%u, ", 
∆i°
.
ngbs
[
i
].
addr
);

465 
	`¥ötf
("\r\n");

469 
	`rouã_∑ckë
(
pkt
);

472 if(
CONNECTED_TO_GATEWAY
 =
TRUE
)

475 
¡g_pkt
.
ty≥
 = 
SERIAL_NGB_LIST
;

476 
¡g_pkt
.
Àngth
 = 
SIZE_MSG_NGB_LIST
;

478 
	`∑ck_Msg_NgbLi°
(
¡g_pkt
.
d©a
, &
m∆i°
);

481 
	`∑ck_NodeToG©ewaySîül_Packë_hódî
(
to_gw_buf
, &
¡g_pkt
);

483 
	`mem˝y
(
to_gw_buf
 + 
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
, 
¡g_pkt
.
d©a
, 
MAX_SERIAL_PAYLOAD
);

486 if(
DEBUG_NL
 >= 1)

488 
	`ƒk_k¥ötf
(
	`PSTR
("SendingÖacketÅo gateway\r\n"));

492 
	`£ndToSîül
(
to_gw_buf
, 
SIZE_NODETOGATEWAYSERIAL_PACKET
);

497 
ROUTE_CONFIG
:

499 
	`u≈ack_Msg_RoutögTabÀ
(&
mπ
, 
pkt
 -> 
d©a
);

500 
	`íãr_¸
(
∆_£m
, 34);

501 
DEFAULT_GATEWAY
 = 
mπ
.
dg
;

502 
	`Àave_¸
(
∆_£m
, 34);

504 if(
DEBUG_NL
 == 0)

506 
	`ƒk_k¥ötf
(
	`PSTR
("Receivedá ROUTE_CONFIG message\r\n"));

507 
i
 = 0; i < 
MAX_NODES
; i++)

509 
	`¥ötf
("%d -> %d [%d, %d]\r\n", 
mπ
.
node
, mπ.
π
[
i
].
de°
, mπ.π[i].
√xtH›
, mπ.π[i].
co°
);

513 if(
mπ
.
node
 =
NODE_ADDR
)

515 
	`íãr_¸
(
∆_£m
, 34);

516 
	`öôüli£_routög_èbÀ
();

517 
i
 = 0; i < 
MAX_NODES
; i++)

519 
π
[
i
] = 
mπ
.rt[i];

521 
	`Àave_¸
(
∆_£m
, 34);

525 
	`rouã_∑ckë
(
pkt
);

531 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_nw_ctrl_pkt(): UnsupportedÇetwork control messageÑeceived = "));

532 
	`¥ötf
("%u\n", 
pkt
 -> 
ty≥
);

538 
	}
}

540 
	$¥o˚ss_Ÿhî_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
)

543 
	}
}

546 
ölöe
 
	$buûd_Msg_Hñlo
(
Msg_Hñlo
 *
m
)

548 (
m
 -> 
n
).
addr
 = (
uöt16_t
)
NODE_ADDR
;

549 (
m
 -> 
n
).
rssi
 = (m ->Ç).
œ°Rï‹t
 = (m ->Ç).
isNew
 = 0;

552 
pkt_tx
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

553 
pkt_tx
.
de°
 = (
uöt16_t
)
BCAST_ADDR
;

554 
pkt_tx
.
√xtH›
 = (
uöt16_t
)
BCAST_ADDR
;

555 
pkt_tx
.
¥evH›
 = (
uöt16_t
)
NODE_ADDR
;

557 
pkt_tx
.
âl
 = 1;

558 
pkt_tx
.
ty≥
 = (
uöt8_t
)
HELLO
;

559 
pkt_tx
.
Àngth
 = 
SIZE_MSG_HELLO
;

560 
pkt_tx
.
¥io
 = 
NORMAL_PRIORITY
;

562 
	`∑ck_Msg_Hñlo
(
pkt_tx
.
d©a
, 
m
);

564 
	}
}

566 
ölöe
 
	$buûd_Msg_NgbLi°
(
Msg_NgbLi°
 *
m
)

568 
	`íãr_¸
(
∆_£m
, 32);

569 
m
 -> 
∆
 =Çl;

570 
	`Àave_¸
(
∆_£m
, 32);

573 
pkt_tx
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

574 
	`íãr_¸
(
∆_£m
, 25);

575 
pkt_tx
.
de°
 = 
DEFAULT_GATEWAY
;

576 
	`Àave_¸
(
∆_£m
, 25);

577 
pkt_tx
.
√xtH›
 = 
	`rouã_addr
’kt_tx.
de°
);

578 
pkt_tx
.
¥evH›
 = (
uöt16_t
)
NODE_ADDR
;

580 
pkt_tx
.
âl
 = 
MAX_NETWORK_DIAMETER
;

581 
pkt_tx
.
ty≥
 = (
uöt8_t
)
NGB_LIST
;

582 
pkt_tx
.
Àngth
 = 
SIZE_MSG_NGB_LIST
;

583 
pkt_tx
.
¥io
 = 
NORMAL_PRIORITY
;

585 
	`∑ck_Msg_NgbLi°
(
pkt_tx
.
d©a
, 
m
);

588 
	}
}

591 
	$∆_rx_èsk
()

593 
uöt8_t
 
Àn
;

594 
öt8_t
 
rssi
;

595 
uöt8_t
 *
loˇl_rx_buf
;

596 
öt8_t
 
vÆ
;

597 
öt8_t
 
Êag
;

599 
ƒk_time_t
 
°¨t
, 
íd
, 
ñ≠£d
;

601 if(
DEBUG_NL
 >= 1)

603 
	`ƒk_k¥ötf
(
	`PSTR
("NL_RX_TASK PID = "));

604 
	`¥ötf
("%d\r\n",
	`ƒk_gë_pid
());

608 
	`ƒk_time_gë
(&
°¨t
);

609 
íd
.
£cs
 = 
°¨t
.secs;

610 
íd
.
«no_£cs
 = 
°¨t
.nano_secs;

613 
vÆ
 = 
	`wd_öô
(16);

614 if(
vÆ
 =
NRK_ERROR
)

616 
	`ƒk_öt_dißbÀ
();

617 
	`ƒk_Àd_£t
(
RED_LED
);

619 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned by wd_init()\r\n"));

623 
vÆ
 = 
	`wd_rx_pkt_£t_buf„r
(
rx_buf
, 
RF_BUFFER_SIZE
);

624 if(
vÆ
 =
NRK_ERROR
)

626 
	`ƒk_öt_dißbÀ
();

627 
	`ƒk_Àd_£t
(
RED_LED
);

629 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned by wd_rx_pkt_set_buffer()\r\n"));

636 if(
CONNECTED_TO_GATEWAY
 =
TRUE
)

638 
	`ƒk_time_gë
(&
íd
);

639 
vÆ
 = 
	`ƒk_time_sub
(&
ñ≠£d
, 
íd
, 
°¨t
);

640 
	`ƒk_time_com∑˘_«nos
(&
ñ≠£d
);

641 if(
ñ≠£d
.
£cs
 >
NGB_LIST_PERIOD
)

643 
¡g_pkt
.
ty≥
 = 
SERIAL_NGB_LIST
;

644 
¡g_pkt
.
Àngth
 = 
SIZE_MSG_NGB_LIST
;

645 
	`íãr_¸
(
∆_£m
, 34);

646 
	`∑ck_Msg_NgbLi°
(
¡g_pkt
.
d©a
, &
∆
);

647 
	`Àave_¸
(
∆_£m
, 34);

648 
	`∑ck_NodeToG©ewaySîül_Packë_hódî
(
to_gw_buf
, &
¡g_pkt
);

649 
	`mem˝y
(
to_gw_buf
 + 
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
, 
¡g_pkt
.
d©a
, 
MAX_SERIAL_PAYLOAD
);

650 if(
DEBUG_NL
 == 2)

652 
	`ƒk_k¥ötf
(
	`PSTR
("Sending own NGB_LIST messageÅo gateway\r\n"));

656 
	`£ndToSîül
(
to_gw_buf
, 
SIZE_NODETOGATEWAYSERIAL_PACKET
);

659 
°¨t
.
£cs
 = 
íd
.secs;

660 
°¨t
.
«no_£cs
 = 
íd
.nano_secs;

664 if(
DEBUG_NL
 >= 1)

666 
	`ƒk_k¥ötf
(
	`PSTR
("Waiting forÇextÖkt fromÜinkÜayer\r\n"));

669 
Êag
 = 0;

671 
	`wd_rx_pkt_ªady
(Ë=
NRK_ERROR
)

673 
vÆ
 = 
	`wd_waô_u¡û_rx_∑ckë
();

674 if(
DEBUG_NL
 == 2)

676 
	`ƒk_k¥ötf
(
	`PSTR
("NL: wd_wait_until_rx_packet()Ñeturned "));

677 
	`¥ötf
("%d\n", 
vÆ
);

683 
loˇl_rx_buf
 = 
	`wd_rx_pkt_gë
(&
Àn
,&
rssi
);

684 if(
loˇl_rx_buf
 =
NULL
)

686 
	`ƒk_k¥ötf
(
	`PSTR
("NL: NULLÑeturned by wd_rx_pkt_get()\r\n"));

689 } 
loˇl_rx_buf
 =
NULL
);

692 if(
Àn
 !
SIZE_NW_PACKET
)

703 if(
DEBUG_NL
 >= 1)

705 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_rx_task(): WrongÜength ofÖacketÑeceived: "));

706 
	`¥ötf
("%d\r\n", 
Àn
);

708 
Êag
 = 1;

711 
	`ƒk_Àd_£t
(
GREEN_LED
);

713 if(
DEBUG_NL
 == 2)

715 
öt8_t
 
i
;

716 
	`ƒk_k¥ötf
(
	`PSTR
("NL: Contents ofÑeceivedÖacketáre\r\n"));

717 
	`¥ötf
("[");

718 
i
 = 0; i < 
Àn
; i++)

719 
	`¥ötf
("%d ", 
loˇl_rx_buf
[
i
]);

720 
	`¥ötf
("]\r\n");

722 if(
Êag
 == 1)

724 
	`wd_rx_pkt_ªÀa£
();

725 
	`ƒk_Àd_˛r
(
GREEN_LED
);

730 
	`u≈ack_NW_Packë_hódî
(&
pkt_rx
, 
loˇl_rx_buf
);

732 
	`mem˝y
(
pkt_rx
.
d©a
, 
loˇl_rx_buf
 + 
SIZE_NW_PACKET_HEADER
, 
MAX_NETWORK_PAYLOAD
);

734 
	`wd_rx_pkt_ªÀa£
();

737 if(
	`pkt_ty≥
(&
pkt_rx
Ë=
APPLICATION
)

740 if(
pkt_rx
.
de°
 =
NODE_ADDR
 ||Ökt_rx.de° =
BCAST_ADDR
)

741 
	`¥o˚ss_≠p_pkt
(&
pkt_rx
, 
rssi
);

744 if(
pkt_rx
.
√xtH›
 =
NODE_ADDR
)

746 if(
pkt_rx
.
§c
 =
NODE_ADDR
)

748 
	`ƒk_öt_dißbÀ
();

749 
	`ƒk_Àd_£t
(
RED_LED
);

752 
	`ƒk_k¥ötf
(
	`PSTR
("RoutingÅable corruptedát "));

753 
	`¥ötf
("%d\r\n", 
NODE_ADDR
);

757 
	`rouã_∑ckë
(&
pkt_rx
);

760 if(
pkt_rx
.
√xtH›
 =
BCAST_ADDR
)

761 
	`rouã_∑ckë
(&
pkt_rx
);

767 if(
	`pkt_ty≥
(&
pkt_rx
Ë=
NW_CONTROL
)

770 if(
pkt_rx
.
de°
 =
NODE_ADDR
 ||Ökt_rx.de° =
BCAST_ADDR
)

771 
	`¥o˚ss_nw_˘æ_pkt
(&
pkt_rx
, 
rssi
);

774 if(
pkt_rx
.
√xtH›
 =
NODE_ADDR
)

776 if(
pkt_rx
.
§c
 =
NODE_ADDR
)

778 
	`ƒk_öt_dißbÀ
();

779 
	`ƒk_Àd_£t
(
RED_LED
);

782 
	`ƒk_k¥ötf
(
	`PSTR
("RoutingÅable corruptedát "));

783 
	`¥ötf
("%d\r\n", 
NODE_ADDR
);

787 
	`rouã_∑ckë
(&
pkt_rx
);

790 if(
pkt_rx
.
√xtH›
 =
BCAST_ADDR
)

791 
	`rouã_∑ckë
(&
pkt_rx
);

797 
	`ƒk_k¥ötf
(
	`PSTR
("NL: UnknownÖktÅypeÑeceived = "));

798 
	`¥ötf
("%d\r\n", 
	`pkt_ty≥
(&
pkt_rx
));

802 
	`ƒk_Àd_˛r
(
GREEN_LED
);

806 
	}
}

809 
	$∆_tx_èsk
()

811 
TønsmôBuf„r
 *
±r
 = 
NULL
;

812 
ƒk_sig_t
 
tx_d⁄e_sig«l
;

813 
öt8_t
 
ªt
;

814 
öt8_t
 
p‹t_ödex
;

815 
öt8_t
 
£¡
;

816 
öt8_t
 
isAµliˇti⁄
;

819 
ƒk_time_t
 
timeout
;

820 
ƒk_time_t
 
°¨t
;

821 
ƒk_time_t
 
íd
;

822 
ƒk_time_t
 
ñ≠£d
;

825 !
	`wd_°¨ãd
()Ë
	`ƒk_waô_u¡û_√xt_≥riod
();

828 
tx_d⁄e_sig«l
 = 
	`wd_gë_tx_sig«l
();

830 if–
	`ƒk_sig«l_ªgi°î
(
tx_d⁄e_sig«l
Ë=
NRK_ERROR
 )

832 
	`ƒk_öt_dißbÀ
();

833 
	`ƒk_Àd_£t
(
RED_LED
);

835 
	`ƒk_k¥ötf
(
	`PSTR
("NL: Error whileÑegistering forÅhe bmax_tx_done_signal\r\n"));

839 
	`ƒk_time_gë
(&
°¨t
);

840 
íd
.
£cs
 = 
°¨t
.secs;

841 
íd
.
«no_£cs
 = 
°¨t
.nano_secs;

842 
£¡
 = 0;

845 if–
	`wd_£t_rf_powî
(10Ë=
NRK_ERROR
)

847 
	`ƒk_Àd_£t
(
RED_LED
);

848 
	`ƒk_öt_dißbÀ
();

850 
	`ƒk_k¥ötf
(
	`PSTR
("Error settingÅheÅransmitÖower\r\n"));

854 
isAµliˇti⁄
 = 
FALSE
;

855 
ªt
 = 
	`ƒk_time_sub
(&
ñ≠£d
, 
íd
, 
°¨t
);

856 if(
ªt
 == 0)

858 
	`ƒk_öt_dißbÀ
();

859 
	`ƒk_Àd_£t
(
RED_LED
);

861 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned byÇrk_time_sub\r\n"));

866 
	`ƒk_time_com∑˘_«nos
(&
ñ≠£d
);

868 if(
ñ≠£d
.
£cs
 >
HELLO_PERIOD
)

870 
£¡
++;

871 
	`buûd_Msg_Hñlo
(&
mhe
);

872 if(
DEBUG_NL
 == 2)

874 
	`ƒk_k¥ötf
(
	`PSTR
("After building Msg_Hello,Öacket = "));

875 
	`¥öt_pkt
(&
pkt_tx
);

878 
	`íãr_¸
(
bm_£m
, 34);

879 
ªt
 = 
	`ö£π_tx_aq
(&
pkt_tx
);

880 
	`Àave_¸
(
bm_£m
, 34);

882 if(
DEBUG_NL
 == 2)

884 
	`ƒk_k¥ötf
(
	`PSTR
("build_Msg_Hello() insertedÖacket."));

885 
	`¥öt_tx_buf„r
();

889 if(
ªt
 =
NRK_ERROR
 && 
DEBUG_NL
 == 2)

891 
	`ƒk_k¥ötf
(
	`PSTR
("HELLO msg wasÇot inserted intoÅheÅransmit queue\r\n"));

894 
°¨t
.
£cs
 = 
íd
.secs;

895 
°¨t
.
«no_£cs
 = 
íd
.nano_secs;

898 if(
£¡
 >= 3)

900 
	`buûd_Msg_NgbLi°
(&
mn
);

902 
	`íãr_¸
(
bm_£m
, 34);

903 
ªt
 = 
	`ö£π_tx_aq
(&
pkt_tx
);

904 
	`Àave_¸
(
bm_£m
, 34);

906 if(
DEBUG_NL
 == 2)

908 
	`ƒk_k¥ötf
(
	`PSTR
("build_Msg_NgbList() insertedÖacket."));

909 
	`¥öt_tx_buf„r
();

913 if(
ªt
 =
NRK_ERROR
 && 
DEBUG_NL
 == 2)

915 
	`ƒk_k¥ötf
(
	`PSTR
("NGB_LIST msg wasÇot inserted intoÅheÅransmit queue\r\n"));

918 
£¡
 = 0;

922 if(
	`ønd
() % 2 == 0)

923 
	`cﬁÀ˘_queue_°©i°ics
();

925 
	`íãr_¸
(
bm_£m
, 34);

926 
±r
 = 
	`ªmove_tx_aq
();

927 
	`Àave_¸
(
bm_£m
, 34);

929 if(
±r
 =
NULL
)

931 if(
DEBUG_NL
 == 2)

932 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Transmit queue isÉmpty\r\n"));

935 
	`ƒk_time_gë
(&
íd
);

937 
	`ƒk_waô_u¡û_√xt_≥riod
();

941 if(
DEBUG_NL
 == 2)

943 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): PacketÑemoved. Packet = "));

945 
	`¥öt_pkt
–&(
±r
 -> 
pkt
) );

951 if–(
	`pkt_ty≥
(&(
±r
 -> 
pkt
)Ë=
APPLICATION
Ë&& (’å ->Ökt).
§c
 =
NODE_ADDR
) )

954 
	`u≈ack_TL_UDP_hódî
(&
£g
, (
±r
 -> 
pkt
).
d©a
);

955 
	`mem˝y
(
£g
.
d©a
, (
±r
 -> 
pkt
).d©®+ 
SIZE_TRANSPORT_UDP_HEADER
, 
MAX_APP_PAYLOAD
);

957 if(
DEBUG_NL
 == 2)

959 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): Segment Removed = "));

960 
	`¥öt_£g
(&
£g
);

962 
isAµliˇti⁄
 = 
TRUE
;

966 
	`∑ck_NW_Packë_hódî
(
tx_buf
, &(
±r
 -> 
pkt
));

968 
	`mem˝y
(
tx_buf
 + 
SIZE_NW_PACKET_HEADER
, (
±r
 -> 
pkt
).
d©a
, 
MAX_NETWORK_PAYLOAD
);

970 
	`íãr_¸
(
bm_£m
, 34);

971 
	`ö£π_tx_fq
(
±r
);

972 
	`Àave_¸
(
bm_£m
, 34);

973 if(
DEBUG_NL
 == 2)

975 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): ReleasedÅransmit buffer back into queue\n"));

976 
	`¥öt_tx_buf„r
();

982 
ªt
 = 
	`wd_tx_∑ckë_íqueue
(
tx_buf
, 
SIZE_NW_PACKET
, 
PKT_PRIO
);

983 if(
ªt
 =
NRK_ERROR
)

984 if(
	`ƒk_evít_waô
(
	`SIG
(
tx_d⁄e_sig«l
)) == 0)

986 
	`ƒk_öt_dißbÀ
();

987 
	`ƒk_Àd_£t
(
RED_LED
);

989 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned byÇrk_event_wait(tx_done_signal)\r\n"));

991 }
ªt
 =
NRK_ERROR
);

994 
timeout
.
£cs
 = 10;

995 
timeout
.
«no_£cs
 = 0;

996 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
 )

998 
	`ƒk_öt_dißbÀ
();

999 
	`ƒk_Àd_£t
(
RED_LED
);

1001 
	`ƒk_k¥ötf
(
	`PSTR
("NL:nl_tx(): ErrorÑegistering forÇrk_wakeup_signal\r\n"));

1003 if–
	`ƒk_£t_√xt_wakeup
(
timeout
Ë=
NRK_ERROR
)

1005 
	`ƒk_öt_dißbÀ
();

1006 
	`ƒk_Àd_£t
(
RED_LED
);

1008 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx(): ErrorÑeturned byÇrk_set_next_wakeup()\r\n"));

1010 
	`ƒk_Àd_£t
(
BLUE_LED
);

1011 
ªt
 = 
	`ƒk_evít_waô
 (
	`SIG
(
tx_d⁄e_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
));

1012 if(
ªt
 == 0)

1014 
	`ƒk_öt_dißbÀ
();

1015 
	`ƒk_Àd_£t
(
RED_LED
);

1017 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned byÇrk_event_wait(tx_done_signal)\r\n"));

1019 if(
ªt
 & 
	`SIG
(
tx_d⁄e_sig«l
))

1021 if(
isAµliˇti⁄
 =
TRUE
)

1023 
	`íãr_¸
(
é_£m
, 34);

1024 
p‹t_ödex
 = 
	`p‹t_to_p‹t_ödex
(
£g
.
§cP‹t
);

1026 if(
p‹t_ödex
 =
NRK_ERROR
)

1028 
	`ƒk_öt_dißbÀ
();

1029 
	`ƒk_Àd_£t
(
RED_LED
);

1031 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task: Bug detected in implementation ofÖortÉlementárray\r\n"));

1034 if(
	`ƒk_evít_sig«l
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
Ë=
NRK_ERROR
)

1036 if(
	`ƒk_î∫o_gë
() == 1)

1038 
	`ƒk_öt_dißbÀ
();

1039 
	`ƒk_Àd_£t
(
RED_LED
);

1041 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task: Bug detected in creating signals inÖortÉlementárray\r\n"));

1044 
	`Àave_¸
(
é_£m
, 34);

1052 if(
ªt
 & 
	`SIG
(
ƒk_wakeup_sig«l
))

1058 
	`ƒk_k¥ötf
(
	`PSTR
("BMAC didÇotÅransmitÅheÖacket within specifiedÅime\r\n"));

1063 
	`ƒk_öt_dißbÀ
();

1064 
	`ƒk_Àd_£t
(
RED_LED
);

1066 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): Unknown signal caught\r\n"));

1069 
	`ƒk_Àd_˛r
(
BLUE_LED
);

1071 
	`ƒk_time_gë
(&
íd
);

1076 
	}
}

1078 
öt8_t
 
	$£t_routög_Æg‹ôhm
(
öt8_t
 
¥ef
, i¡8_à
ty≥
, i¡8_à
pdi°
)

1080 
¥ef
)

1082 
LINK_STATE
:

1085 
FLOODING
:

1087 
ty≥
)

1089 
TTL_BASED
:

1092 
PROBABILISTIC
:

1094 
pdi°
)

1096 
RANDOM
:

1097 
GAUSSIAN
:

1102 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1103  
NRK_ERROR
;

1111 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1112  
NRK_ERROR
;

1120 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1121  
NRK_ERROR
;

1125 
	`íãr_¸
(
∆_£m
, 19);

1126 
ROUTING_ALGORITHM
 = 
¥ef
;

1127 if(
¥ef
 =
FLOODING
)

1129 
FLOODING_TYPE
 = 
ty≥
;

1130 if(
ty≥
 =
PROBABILISTIC
)

1132 
P_DISTRIBUTION
 = 
pdi°
;

1135 
	`Àave_¸
(
∆_£m
, 19);

1137  
NRK_OK
;

1138 
	}
}

1140 
	$¸óã_√tw‹k_œyî_èsks
()

1142 
NL_RX_TASK
.
èsk
 = 
∆_rx_èsk
;

1143 
NL_RX_TASK
.
Ptos
 = (*Ë&
∆_rx_èsk_°ack
[
NRK_APP_STACKSIZE
 - 1];

1144 
NL_RX_TASK
.
Pbos
 = (*Ë&
∆_rx_èsk_°ack
[0];

1145 
NL_RX_TASK
.
¥io
 = 19;

1146 
NL_RX_TASK
.
Fú°A˘iv©i⁄
 = 
TRUE
;

1147 
NL_RX_TASK
.
Ty≥
 = 
BASIC_TASK
;

1148 
NL_RX_TASK
.
SchTy≥
 = 
PREEMPTIVE
;

1150 
NL_RX_TASK
.
˝u_ª£rve
.
£cs
 = 0;

1151 
NL_RX_TASK
.
˝u_ª£rve
.
«no_£cs
 = 700 * 
NANOS_PER_MS
;

1152 
NL_RX_TASK
.
≥riod
.
£cs
 = 1;

1153 
NL_RX_TASK
.
≥riod
.
«no_£cs
 = 0;

1156 
NL_RX_TASK
.
off£t
.
£cs
 = 0;

1157 
NL_RX_TASK
.
off£t
.
«no_£cs
= 0;

1158 
	`ƒk_a˘iv©e_èsk
 (&
NL_RX_TASK
);

1161 
NL_TX_TASK
.
èsk
 = 
∆_tx_èsk
;

1162 
NL_TX_TASK
.
Ptos
 = (*Ë&
∆_tx_èsk_°ack
[
NRK_APP_STACKSIZE
 - 1];

1163 
NL_TX_TASK
.
Pbos
 = (*Ë&
∆_tx_èsk_°ack
[0];

1164 
NL_TX_TASK
.
¥io
 = 18;

1165 
NL_TX_TASK
.
Fú°A˘iv©i⁄
 = 
TRUE
;

1166 
NL_TX_TASK
.
Ty≥
 = 
BASIC_TASK
;

1167 
NL_TX_TASK
.
SchTy≥
 = 
PREEMPTIVE
;

1169 
NL_TX_TASK
.
˝u_ª£rve
.
£cs
 = 0;

1170 
NL_TX_TASK
.
˝u_ª£rve
.
«no_£cs
 = 500 * 
NANOS_PER_MS
;

1171 
NL_TX_TASK
.
≥riod
.
£cs
 = 1;

1172 
NL_TX_TASK
.
≥riod
.
«no_£cs
 = 0;

1174 
NL_TX_TASK
.
off£t
.
£cs
 = 0;

1175 
NL_TX_TASK
.
off£t
.
«no_£cs
= 0;

1176 
	`ƒk_a˘iv©e_èsk
 (&
NL_TX_TASK
);

1178 if(
DEBUG_NL
 == 2)

1179 
	`ƒk_k¥ötf
(
	`PSTR
("create_network_layer_tasks(): NetworkÜayerÅask creation done\r\n"));

1180 
	}
}

1183 
	$öôüli£_√tw‹k_œyî
()

1185 
öt8_t
 
i
;

1188 
∆
.
cou¡
 = 0;

1189 
∆
.
my_addr
 = 
NODE_ADDR
;

1190 
i
 = 0; i < 
MAX_NGBS
; i++)

1191 
∆
.
ngbs
[
i
].
addr
 = 
BCAST_ADDR
;

1193 
DEFAULT_GATEWAY
 = 
BCAST_ADDR
;

1194 
ROUTING_ALGORITHM
 = 
DEFAULT_ROUTING_ALGORITHM
;

1195 
FLOODING_TYPE
 = 
DEFAULT_FLOODING_TYPE
;

1196 
P_DISTRIBUTION
 = 
DEFAULT_PDISTRIBUTION
;

1198 
	`öôüli£_routög_èbÀ
();

1200 
∆_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

1201 if(
∆_£m
 =
NULL
)

1203 
	`ƒk_öt_dißbÀ
();

1204 
	`ƒk_Àd_£t
(
RED_LED
);

1206 
	`ƒk_k¥ötf
(
	`PSTR
("NL: Error creating semaphore in initialise_network_layer()\r\n"));

1209 
	`¸óã_√tw‹k_œyî_èsks
();

1212 
	}
}

1214 
	$öôüli£_routög_èbÀ
()

1216 
öt8_t
 
i
;

1218 
i
 = 0; i < 
MAX_NODES
; i++)

1220 
π
[
i
].
de°
 = 
BCAST_ADDR
;

1221 
π
[
i
].
√xtH›
 = 
BCAST_ADDR
;

1222 
π
[
i
].
co°
 = 
INFINITY
;

1225 
	}
}

1227 
	$£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
m
)

1229 
öt8_t
 
i
;

1231 
	`íãr_¸
(
∆_£m
, 34);

1232 
	`öôüli£_routög_èbÀ
();

1233 
DEFAULT_GATEWAY
 = 
m
 -> 
dg
;

1234 
i
 = 0; i < 
MAX_NODES
; i++)

1236 
π
[
i
] = 
m
 ->Ñt[i];

1238 
	`Àave_¸
(
∆_£m
, 34);

1240 
	}
}

1242 
	$¥öt_pkt_hódî
(
NW_Packë
 *
pkt
)

1244 
	`¥ötf
("[%u %u %u %u %d %u %d %d]", 
pkt
 -> 
§c
,Ökà-> 
de°
,Ökà-> 
¥evH›
,Ökà-> 
√xtH›
,Ökà-> 
âl
,Ökà-> 
ty≥
,Ökà-> 
Àngth
,Ökà-> 
¥io
);

1247 
	}
}

1249 
	$¥öt_pkt
(
NW_Packë
 *
pkt
)

1251 
öt8_t
 
i
;

1253 
	`¥öt_pkt_hódî
(
pkt
);

1254 
i
 = 0; i < 
pkt
 -> 
Àngth
; i++)

1255 
	`¥ötf
("%u ", (
pkt
 -> 
d©a
)[
i
]);

1257 
	`¥ötf
("\r\n");

1260 
	}
}

1262 
	$¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπbl
)

1264 
öt8_t
 
i
;

1266 
	`ƒk_k¥ötf
(
	`PSTR
("RoutingÅable for "));

1267 
	`¥ötf
("%d\r\n", 
mπbl
 -> 
node
);

1269 
i
 = 0; i < 
MAX_NODES
; i++)

1274 
	`¥ötf
("%d -> %d [nh = ", 
mπbl
 -> 
node
, (mπb»-> 
π
[
i
]).
de°
);

1275 if((
mπbl
 -> 
π
[
i
]).
√xtH›
 =
INVALID_ADDRESS
)

1276 
	`¥ötf
("INV, ");

1278 
	`¥ötf
("%d, ", (
mπbl
 -> 
π
[
i
]).
√xtH›
);

1280 if((
mπbl
 -> 
π
[
i
]).
co°
 !
INFINITY
)

1281 
	`¥ötf
("di° = %d]\r\n", (
mπbl
 -> 
π
[
i
]).
co°
);

1283 
	`¥ötf
("dist = INF]\r\n");

1286 
	}
}

1288 
	$ªc‹d_tx_queue_fuŒ
(
NW_Packë
 *
pkt
)

1292 
	}
}

1294 
	$ªc‹d_u«ssocüãd_sockë_pkt
(
NW_Packë
 *
pkt
)

1297 
	}
}

1299 
	$ªc‹d_max_ngb_limô_ªached
(
NW_Packë
 *
pkt
)

1302 
	}
}

1304 
	$cﬁÀ˘_queue_°©i°ics
()

1307 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NetworkLayer.h

5 #i‚de‡
_NETWORK_LAYER_H


6 
	#_NETWORK_LAYER_H


	)

8 
	~"NWSèckC⁄fig.h
"

9 
	~<°döt.h
>

10 
	~"Tøn•‹tLayîUDP.h
"

12 
	#TRUE
 1

	)

13 
	#FALSE
 0

	)

14 
	#DEBUG_NL
 0

15 

	)

18 
	#MAX_NETWORK_PAYLOAD
 
MAX_TRANSPORT_UDP_SEG


19 
	#BCAST_ADDR
 65535

20 

	)

22 
	#LINK_STATE
 1

23 
	#FLOODING
 2

	)

24 
	#PROBABILISTIC
 1

25 
	#TTL_BASED
 2

	)

26 
	#RANDOM
 1

27 
	#GAUSSIAN
 2

	)

29 
	#DEFAULT_ROUTING_ALGORITHM
 
LINK_STATE


	)

30 
	#DEFAULT_FLOODING_TYPE
 
TTL_BASED


	)

31 
	#DEFAULT_PDISTRIBUTION
 
RANDOM


	)

34 
	#SIZE_NEIGHBOR
 5

	)

35 
	#SIZE_NEIGHBORLIST
 (3 + 
MAX_NGBS
 * 
SIZE_NEIGHBOR
)

	)

37 
	#SIZE_MSG_HELLO
 
SIZE_NEIGHBOR


	)

38 
	#SIZE_MSG_NGB_LIST
 
SIZE_NEIGHBORLIST


	)

40 
	#SIZE_NW_PACKET_HEADER
 12

	)

41 
	#SIZE_NW_PACKET
 (
SIZE_NW_PACKET_HEADER
 + 
MAX_NETWORK_PAYLOAD
)

	)

43 
	#SIZE_ROUTING_TABLE_ENTRY
 5

	)

44 
	#SIZE_ROUTING_TABLE
 (
SIZE_ROUTING_TABLE_ENTRY
 * 
MAX_NODES
)

	)

45 
	#SIZE_MSG_ROUTING_TABLE
 (4 + 
SIZE_ROUTING_TABLE
)

	)

47 
	#RF_BUFFER_SIZE
 92

48 

	)

50 
	#APPLICATION
 0x00

51 
	#NW_CONTROL
 0x80

52 

	)

54 
	#HELLO
 0x80

55 
	#NGB_LIST
 0x88

56 
	#ROUTE_CONFIG
 0x90

57 
	#INVALID
 0xFF

58 

	)

60 
	#UDP
 0x00

61 

	)

63 
	#MULTIHOP_YES
 
TRUE


	)

64 
	#MULTIHOP_NO
 
FALSE


	)

66 
	#INFINITY
 100

	)

67 
	#INVALID_ADDRESS
 
BCAST_ADDR


	)

74 
uöt16_t
 
	maddr
;

75 
öt8_t
 
	mrssi
;

76 
öt8_t
 
	mœ°Rï‹t
;

77 
öt8_t
 
	misNew
;

78 }
	tNeighb‹
;

83 
uöt16_t
 
	mmy_addr
;

84 
Neighb‹
 
	mngbs
[
MAX_NGBS
];

85 
öt8_t
 
	mcou¡
;

86 }
	tNeighb‹Li°
;

91 
Neighb‹
 
	mn
;

92 }
	tMsg_Hñlo
;

97 
Neighb‹Li°
 
	m∆
;

98 }
	tMsg_NgbLi°
;

103 
uöt16_t
 
	m§c
;

104 
uöt16_t
 
	mde°
;

105 
uöt16_t
 
	m¥evH›
;

106 
uöt16_t
 
	m√xtH›
;

107 
öt8_t
 
	mâl
;

108 
uöt8_t
 
	mty≥
;

113 
öt8_t
 
	mÀngth
;

114 
öt8_t
 
	m¥io
;

115 
uöt8_t
 
	md©a
[
MAX_NETWORK_PAYLOAD
];

116 }
	tNW_Packë
;

121 
uöt16_t
 
	mde°
;

122 
uöt16_t
 
	m√xtH›
;

123 
uöt8_t
 
	mco°
;

124 }
	tRoutögTabÀ
;

128 
uöt16_t
 
	mdg
;

129 
uöt16_t
 
	mnode
;

130 
RoutögTabÀ
 
	mπ
[
MAX_NODES
];

131 }
	tMsg_RoutögTabÀ
;

134 
öt8_t
 
add_√ighb‹
(
Neighb‹
 
n
);

147 
öt8_t
 
shouldIMu…ih›
(
NW_Packë
 *
pkt
);

156 
mu…ih›
(
NW_Packë
 *
pkt
);

166 
uöt16_t
 
rouã_addr
(uöt16_à
addr
);

175 
rouã_∑ckë
(
NW_Packë
 *
pkt
);

184 
öt8_t
 
£ndToG©eway
(
uöt8_t
 *
buf
, i¡8_à
Àn
);

199 
uöt8_t
 
pkt_ty≥
(
NW_Packë
 *
pkt
);

208 
uöt8_t
 
é_ty≥
(uöt8_à
ty≥
);

217 
uöt8_t
 
nw_˘æ_ty≥
(uöt8_à
ty≥
);

226 
¥o˚ss_≠p_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
);

238 
¥o˚ss_nw_˘æ_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
);

254 
¸óã_√tw‹k_œyî_èsks
();

263 
öôüli£_√tw‹k_œyî
();

272 
ªc‹d_tx_queue_fuŒ
(
NW_Packë
 *
pkt
);

281 
ªc‹d_u«ssocüãd_sockë_pkt
(
NW_Packë
 *
pkt
);

290 
ªc‹d_max_ngb_limô_ªached
(
NW_Packë
 *
pkt
);

299 
cﬁÀ˘_queue_°©i°ics
();

309 
öt8_t
 
£t_routög_Æg‹ôhm
(öt8_à
¥ef
, i¡8_à
ty≥
, i¡8_à
pdi°
);

326 
£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπ
);

329 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπ
);

338 
öt8_t
 
gë_routög_èbÀ
(
RoutögTabÀ
 *
π
);

349 
¥öt_pkt_hódî
(
NW_Packë
 *
pkt
);

358 
¥öt_pkt
(
NW_Packë
 *
pkt
);

367 
öôüli£_routög_èbÀ
();

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Pack.c

2 
	~"Pack.h
"

3 
	~"NWEº‹Codes.h
"

7 
öt8_t
 
	gídün
;

10 
öt8_t
 
	$ídü¬ess
()

12 
uöt16_t
 
n
 = 0x0102;

13 
uöt8_t
 *
±r
 = (uöt8_t*)(&
n
);

15 if(
±r
[0] == 2 &&Ötr[1] == 1)

17 
ídün
 = 
LITTLE_ENDIAN
;

18  
LITTLE_ENDIAN
;

20 if(
±r
[0] == 1 &&Ötr[1] == 2)

22 
ídün
 = 
BIG_ENDIAN
;

23  
BIG_ENDIAN
;

25  
ERROR_ENDIAN
;

26 
	}
}

29 
	$∑ck_Neighb‹
(
uöt8_t
 *
de°
, 
Neighb‹
 *
n
)

31 if(
ídün
 =
LITTLE_ENDIAN
)

33 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) + 1 );

34 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) );

38 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) );

39 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) + 1 );

42 
de°
[2] = 
n
 -> 
rssi
;

43 
de°
[3] = 
n
 -> 
œ°Rï‹t
;

44 
de°
[4] = 
n
 -> 
isNew
;

47 
	}
}

49 
	$∑ck_Msg_Hñlo
(
uöt8_t
 *
de°
, 
Msg_Hñlo
 *
m
)

51 
	`∑ck_Neighb‹
(
de°
, &(
m
 -> 
n
));

53 
	}
}

55 
	$∑ck_Neighb‹Li°
(
uöt8_t
 *
de°
, 
Neighb‹Li°
 *
n
)

57 
uöt8_t
 
i
,
j
;

59 if(
ídün
 =
LITTLE_ENDIAN
)

61 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) + 1 );

62 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) );

66 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) );

67 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) + 1 );

71 
i
 = 0, 
j
 = 2; i < 
MAX_NGBS
; i++, j +
SIZE_NEIGHBOR
)

72 
	`∑ck_Neighb‹
–
de°
 + 
j
, &(
n
 -> 
ngbs
[
i
]) );

74 
de°
[27] = 
n
 -> 
cou¡
;

77 
	}
}

79 
	$∑ck_Msg_NgbLi°
(
uöt8_t
 *
de°
, 
Msg_NgbLi°
 *
m
)

81 
	`∑ck_Neighb‹Li°
(
de°
, &(
m
 -> 
∆
));

83 
	}
}

85 
	$∑ck_RoutögTabÀE¡ry
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 *
π
)

87 if(
ídün
 =
LITTLE_ENDIAN
)

89 
de°
[0] = *–(
uöt8_t
*)(&(
π
 -> dest)) + 1 );

90 
de°
[1] = *–(
uöt8_t
*)(&(
π
 -> dest)) );

92 
de°
[2] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) + 1 );

93 
de°
[3] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) );

97 
de°
[0] = *–(
uöt8_t
*)(&(
π
 -> dest)) );

98 
de°
[1] = *–(
uöt8_t
*)(&(
π
 -> dest)) + 1 );

100 
de°
[2] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) );

101 
de°
[3] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) + 1 );

103 
de°
[4] = 
π
 -> 
co°
;

105 
	}
}

107 
	$∑ck_RoutögTabÀ
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 
π
[])

109 
öt8_t
 
i
,
j
;

111 
i
 = 0, 
j
 = 0; i < 
MAX_NODES
; i++, j +
SIZE_ROUTING_TABLE_ENTRY
)

113 
	`∑ck_RoutögTabÀE¡ry
(
de°
 + 
j
, &
π
[
i
]);

116 
	}
}

117 
	$∑ck_Msg_RoutögTabÀ
(
uöt8_t
 *
de°
, 
Msg_RoutögTabÀ
 *
m
)

119 if(
ídün
 =
LITTLE_ENDIAN
)

121 
de°
[0] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) + 1 );

122 
de°
[1] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) );

124 
de°
[2] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) + 1 );

125 
de°
[3] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) );

130 
de°
[0] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) );

131 
de°
[1] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) + 1 );

133 
de°
[2] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) );

134 
de°
[3] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) + 1 );

137 
	`∑ck_RoutögTabÀ
(
de°
 + 4, 
m
 -> 
π
);

139 
	}
}

141 
	$∑ck_NW_Packë_hódî
(
uöt8_t
 *
de°
, 
NW_Packë
 *
pkt
)

143 if(
ídün
 =
LITTLE_ENDIAN
)

145 
de°
[0] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 );

146 
de°
[1] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) );

148 
de°
[2] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) + 1 );

149 
de°
[3] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) );

151 
de°
[4] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) + 1 );

152 
de°
[5] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) );

154 
de°
[6] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) + 1 );

155 
de°
[7] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) );

161 
de°
[0] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) );

162 
de°
[1] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 );

164 
de°
[2] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) );

165 
de°
[3] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) + 1 );

167 
de°
[4] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) );

168 
de°
[5] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) + 1 );

170 
de°
[6] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) );

171 
de°
[7] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) + 1 );

175 
de°
[8] = 
pkt
 -> 
âl
;

176 
de°
[9] = 
pkt
 -> 
ty≥
;

177 
de°
[10] = 
pkt
 -> 
Àngth
;

178 
de°
[11] = 
pkt
 -> 
¥io
;

181 
	}
}

183 
	$∑ck_NodeToG©ewaySîül_Packë_hódî
(
uöt8_t
 *
de°
, 
NodeToG©ewaySîül_Packë
 *
pkt
)

185 
de°
[0] = 
pkt
 -> 
ty≥
;

186 
de°
[1] = 
pkt
 -> 
Àngth
;

189 
	}
}

191 
	$∑ck_G©ewayToNodeSîül_Packë_hódî
(
uöt8_t
 *
de°
, 
G©ewayToNodeSîül_Packë
 *
pkt
)

193 
de°
[0] = 
pkt
 -> 
ty≥
;

194 
de°
[1] = 
pkt
 -> 
Àngth
;

197 
	}
}

199 
	$∑ck_TL_UDP_hódî
(
uöt8_t
 *
de°
, 
Tøn•‹t_Segmít_UDP
* 
£g
)

201 
de°
[0] = 
£g
 -> 
§cP‹t
;

202 
de°
[1] = 
£g
 -> 
de°P‹t
;

203 
de°
[2] = 
£g
 -> 
Àngth
;

206 
	}
}

211 
	$u≈ack_TL_UDP_hódî
(
Tøn•‹t_Segmít_UDP
* 
£g
, 
uöt8_t
 *
§c
)

213 
£g
 -> 
§cP‹t
 = 
§c
[0];

214 
£g
 -> 
de°P‹t
 = 
§c
[1];

215 
£g
 -> 
Àngth
 = 
§c
[2];

218 
	}
}

220 
	$u≈ack_Neighb‹
(
Neighb‹
 *
n
, 
uöt8_t
* 
§c
)

222 if(
ídün
 =
LITTLE_ENDIAN
)

224 *–(
uöt8_t
*)(&(
n
 -> 
addr
)ËË
§c
[1];

225 *–(
uöt8_t
*)(&(
n
 -> 
addr
)Ë+ 1 ) = 
§c
[0];

229 *–(
uöt8_t
*)(&(
n
 -> 
addr
)ËË
§c
[0];

230 *–(
uöt8_t
*)(&(
n
 -> 
addr
)Ë+ 1 ) = 
§c
[1];

233 
n
 -> 
rssi
 = 
§c
[2];

234 
n
 -> 
œ°Rï‹t
 = 
§c
[3];

235 
n
 -> 
isNew
 = 
§c
[4];

238 
	}
}

240 
	$u≈ack_Msg_Hñlo
(
Msg_Hñlo
 *
m
, 
uöt8_t
* 
§c
)

242 
	`u≈ack_Neighb‹
(&(
m
 -> 
n
), 
§c
);

244 
	}
}

246 
	$u≈ack_Neighb‹Li°
(
Neighb‹Li°
 *
∆i°
, 
uöt8_t
 *
§c
)

248 
Neighb‹
 
n
;

249 
uöt8_t
 
i
,
j
;

251 if(
ídün
 =
LITTLE_ENDIAN
)

253 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)ËË
§c
[1];

254 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)Ë+ 1 ) = 
§c
[0];

258 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)ËË
§c
[0];

259 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)Ë+ 1 ) = 
§c
[1];

262 
i
 = 0,
j
 = 2; i < 
MAX_NGBS
; i++, j +
SIZE_NEIGHBOR
)

264 
	`u≈ack_Neighb‹
(&
n
, 
§c
 + 
j
);

265 
∆i°
 -> 
ngbs
[
i
] = 
n
;

267 
∆i°
 -> 
cou¡
 = 
§c
[2 + 
MAX_NGBS
 * 
SIZE_NEIGHBOR
];

270 
	}
}

272 
	$u≈ack_Msg_NgbLi°
(
Msg_NgbLi°
 *
m
, 
uöt8_t
 *
§c
)

274 
	`u≈ack_Neighb‹Li°
(&(
m
 -> 
∆
), 
§c
);

276 
	}
}

278 
	$u≈ack_RoutögTabÀE¡ry
(
RoutögTabÀ
 *
π
, 
uöt8_t
 *
§c
)

280 if(
ídün
 =
LITTLE_ENDIAN
)

282 *–(
uöt8_t
*)(&(
π
 -> 
de°
)ËË
§c
[1];

283 *–(
uöt8_t
*)(&(
π
 -> 
de°
)Ë+ 1 ) = 
§c
[0];

285 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)ËË
§c
[3];

286 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[2];

291 *–(
uöt8_t
*)(&(
π
 -> 
de°
)ËË
§c
[0];

292 *–(
uöt8_t
*)(&(
π
 -> 
de°
)Ë+ 1 ) = 
§c
[1];

294 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)ËË
§c
[2];

295 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[3];

298 
π
 -> 
co°
 = 
§c
[4];

300 
	}
}

301 
	$u≈ack_RoutögTabÀ
(
RoutögTabÀ
 
π
[], 
uöt8_t
 *
§c
)

303 
öt8_t
 
i
, 
j
;

305 
i
 = 0, 
j
 = 0; i < 
MAX_NODES
; i++, j +
SIZE_ROUTING_TABLE_ENTRY
)

307 
	`u≈ack_RoutögTabÀE¡ry
(&
π
[
i
], 
§c
 + 
j
);

310 
	}
}

311 
	$u≈ack_Msg_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
m
, 
uöt8_t
 *
§c
)

313 if(
ídün
 =
LITTLE_ENDIAN
)

315 *–(
uöt8_t
*)(&(
m
 -> 
dg
)ËË
§c
[1];

316 *–(
uöt8_t
*)(&(
m
 -> 
dg
)Ë+ 1 ) = 
§c
[0];

318 *–(
uöt8_t
*)(&(
m
 -> 
node
)ËË
§c
[3];

319 *–(
uöt8_t
*)(&(
m
 -> 
node
)Ë+ 1 ) = 
§c
[2];

323 *–(
uöt8_t
*)(&(
m
 -> 
dg
)ËË
§c
[0];

324 *–(
uöt8_t
*)(&(
m
 -> 
dg
)Ë+ 1 ) = 
§c
[1];

326 *–(
uöt8_t
*)(&(
m
 -> 
node
)ËË
§c
[2];

327 *–(
uöt8_t
*)(&(
m
 -> 
node
)Ë+ 1 ) = 
§c
[3];

330 
	`u≈ack_RoutögTabÀ
(
m
 -> 
π
, 
§c
 + 4);

332 
	}
}

334 
	$u≈ack_NW_Packë_hódî
(
NW_Packë
 *
pkt
, 
uöt8_t
* 
§c
)

336 if(
ídün
 =
LITTLE_ENDIAN
)

338 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) ) = src[1];

339 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 ) = src[0];

341 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)ËË
§c
[3];

342 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)Ë+ 1 ) = 
§c
[2];

344 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)ËË
§c
[5];

345 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)Ë+ 1 ) = 
§c
[4];

347 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)ËË
§c
[7];

348 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[6];

353 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) ) = src[0];

354 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 ) = src[1];

356 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)ËË
§c
[2];

357 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)Ë+ 1 ) = 
§c
[3];

359 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)ËË
§c
[4];

360 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)Ë+ 1 ) = 
§c
[5];

362 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)ËË
§c
[6];

363 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[7];

367 
pkt
 -> 
âl
 = 
§c
[8];

368 
pkt
 -> 
ty≥
 = 
§c
[9];

369 
pkt
 -> 
Àngth
 = 
§c
[10];

370 
pkt
 -> 
¥io
 = 
§c
[11];

373 
	}
}

376 
	$u≈ack_NodeToG©ewaySîül_Packë_hódî
(
NodeToG©ewaySîül_Packë
 *
pkt
, 
uöt8_t
 *
§c
)

378 
pkt
 -> 
ty≥
 = 
§c
[0];

379 
pkt
 -> 
Àngth
 = 
§c
[1];

382 
	}
}

384 
	$u≈ack_G©ewayToNodeSîül_Packë_hódî
(
G©ewayToNodeSîül_Packë
 *
pkt
, 
uöt8_t
 *
§c
)

386 
pkt
 -> 
ty≥
 = 
§c
[0];

387 
pkt
 -> 
Àngth
 = 
§c
[1];

390 
	}
}

393 
uöt16_t
 
	$ht⁄
(
uöt16_t
 
ho°
)

395 
uöt16_t
 
nw
;

396 
uöt8_t
 *
§c
;

397 
uöt8_t
 *
de°
;

399 if(
ídün
 =
BIG_ENDIAN
)

400  
ho°
;

402 
§c
 = (
uöt8_t
*)(&
ho°
);

403 
de°
 = (
uöt8_t
*)(&
nw
);

405 
de°
[0] = 
§c
[1];

406 
de°
[1] = 
§c
[0];

408  
nw
;

409 
	}
}

413 
uöt16_t
 
	$¡oh
(
uöt16_t
 
nw
)

415 
uöt16_t
 
ho°
;

416 
uöt8_t
 *
§c
;

417 
uöt8_t
 *
de°
;

419 if(
ídün
 =
BIG_ENDIAN
)

420  
nw
;

422 
§c
 = (
uöt8_t
*)(&
nw
);

423 
de°
 = (
uöt8_t
*)(&
ho°
);

425 
de°
[0] = 
§c
[1];

426 
de°
[1] = 
§c
[0];

428  
ho°
;

429 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Pack.h

5 #i‚de‡
_PACK_H


6 
	#_PACK_H


	)

8 
	~"Nëw‹kLayî.h
"

9 
	~"Tøn•‹tLayîUDP.h
"

10 
	~"Sîül.h
"

11 
	~<°döt.h
>

15 
	#LITTLE_ENDIAN
 1

	)

16 
	#BIG_ENDIAN
 2

	)

19 
öt8_t
 
ídü¬ess
();

33 
∑ck_Neighb‹
(
uöt8_t
*, 
Neighb‹
*);

34 
∑ck_Msg_Hñlo
(
uöt8_t
*, 
Msg_Hñlo
*);

35 
∑ck_Neighb‹Li°
(
uöt8_t
*, 
Neighb‹Li°
*);

36 
∑ck_Msg_NgbLi°
(
uöt8_t
*, 
Msg_NgbLi°
*);

37 
∑ck_RoutögTabÀE¡ry
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 *
π
);

38 
∑ck_RoutögTabÀ
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 
π
[]);

39 
∑ck_Msg_RoutögTabÀ
(
uöt8_t
 *
de°
, 
Msg_RoutögTabÀ
 *
m
);

40 
∑ck_NW_Packë_hódî
(
uöt8_t
*, 
NW_Packë
*);

41 
∑ck_NodeToG©ewaySîül_Packë_hódî
(
uöt8_t
 *
de°
, 
NodeToG©ewaySîül_Packë
 *
pkt
);

42 
∑ck_G©ewayToNodeSîül_Packë_hódî
(
uöt8_t
 *
de°
, 
G©ewayToNodeSîül_Packë
 *
pkt
);

43 
∑ck_TL_UDP_hódî
(
uöt8_t
 *, 
Tøn•‹t_Segmít_UDP
*);

46 
u≈ack_Neighb‹
(
Neighb‹
*, 
uöt8_t
*);

47 
u≈ack_Msg_Hñlo
(
Msg_Hñlo
*, 
uöt8_t
*);

48 
u≈ack_Neighb‹Li°
(
Neighb‹Li°
*, 
uöt8_t
*);

49 
u≈ack_Msg_NgbLi°
(
Msg_NgbLi°
*, 
uöt8_t
*);

50 
u≈ack_RoutögTabÀE¡ry
(
RoutögTabÀ
 *
π
, 
uöt8_t
 *
§c
);

51 
u≈ack_RoutögTabÀ
(
RoutögTabÀ
 
π
[], 
uöt8_t
 *
§c
);

52 
u≈ack_Msg_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
m
, 
uöt8_t
 *
§c
);

53 
u≈ack_NW_Packë_hódî
(
NW_Packë
*, 
uöt8_t
*);

54 
u≈ack_NodeToG©ewaySîül_Packë_hódî
(
NodeToG©ewaySîül_Packë
*, 
uöt8_t
 *);

55 
u≈ack_G©ewayToNodeSîül_Packë_hódî
(
G©ewayToNodeSîül_Packë
*, 
uöt8_t
 *);

56 
u≈ack_TL_UDP_hódî
(
Tøn•‹t_Segmít_UDP
*, 
uöt8_t
 *);

59 
uöt16_t
 
ht⁄
(uint16_t);

60 
uöt16_t
 
¡oh
(uint16_t);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Serial.c

1 
	~"Sîül.h
"

3 
	~<°dio.h
>

4 
	~<°döt.h
>

5 
	~<°dlib.h
>

7 
	~<ƒk.h
>

8 
	~<ö˛ude.h
>

9 
	~<ulib.h
>

10 
	~<avr/¶ìp.h
>

11 
	~<hÆ.h
>

12 
	~<ƒk_îr‹.h
>

13 
	~<ƒk_timî.h
>

14 
	~<¶ù.h
>

16 
	#INFINITY
 100

	)

17 
	#INVALID_ADDRESS
 0

	)

21 
u≈ack_G©ewayToNodeSîül_Packë_hódî
(
G©ewayToNodeSîül_Packë
 *, 
uöt8_t
 *);

22 
∑ck_Msg_RoutögTabÀ
(
uöt8_t
 *, 
Msg_RoutögTabÀ
*);

25 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *);

26 
£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *);

27 
uöt16_t
 
rouã_addr
(uint16_t);

30 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

31 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

32 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
*);

33 
ƒk_£m_t
 *
bm_£m
;

37 
ƒk_èsk_ty≥
 
	gSERIAL_TASK
;

38 
NRK_STK
 
	g£rül_èsk_°ack
[
NRK_APP_STACKSIZE
];

39 
£rül_èsk
();

41 
uöt8_t
 
	grx_buf
[
SIZE_GATEWAYTONODESERIAL_PACKET
];

42 
G©ewayToNodeSîül_Packë
 
	ggä_pkt
;

44 
Msg_RoutögTabÀ
 
	gmπ
;

45 
NW_Packë
 
	gnw_pkt
;

46 
uöt8_t
 
	gtx_buf
[
SIZE_NW_PACKET
];

92 
	$£ndToSîül
(
uöt8_t
 *
buf
, 
öt8_t
 
Àn
)

94  
	`¶ù_°¨ãd
 (Ë=
NRK_ERROR
 )

96 
	`ƒk_waô_u¡û_√xt_≥riod
();

99 if(
DEBUG_SR
 == 2)

101 
	`ƒk_k¥ötf
(
	`PSTR
("Calling slip_tx\r\n"));

104 if–
	`¶ù_tx
 (
buf
, 
Àn
Ë=
NRK_ERROR
 )

106 
	`ƒk_öt_dißbÀ
();

107 
	`ƒk_Àd_£t
(
RED_LED
);

110 
	`ƒk_k¥ötf
(
	`PSTR
("Error sending out NGB_LIST message over serial\r\n"));

115 
	}
}

117 
	$¥ötBuf„r
(
uöt8_t
 *
buf
, 
öt8_t
 
Àn
)

119 
Àn
 > 0)

121 
	`¥ötf
("%d ", *
buf
);

122 
buf
++;

123 
Àn
--;

125 
	`¥ötf
("\n\n");

127 
	}
}

130 
uöt8_t
 
	$£rül_pkt_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
)

132 
pkt
 -> 
ty≥
)

134 
SERIAL_APPLICATION
:

135  
SERIAL_APPLICATION
;

137 
SERIAL_ROUTE_CONFIG
:

138  
SERIAL_NW_CONTROL
;

141  
INVALID
;

142 
	}
}

144 
uöt8_t
 
	$£rül_nw_˘æ_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
)

146 
pkt
 -> 
ty≥
)

148 
SERIAL_ROUTE_CONFIG
:

149  
SERIAL_ROUTE_CONFIG
;

153 
	`¥ötf
("Bug detected in implementation ofÖacketÅype\n");

155  
INVALID
;

156 
	}
}

158 
	$¥o˚ss_£rül_≠p_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
)

160 
öt8_t
 
i
;

161 
	`¥ötf
("ReceivedánápplicationÜayerÖacket\n");

162 
i
 = 0; i < 
pkt
 -> 
Àngth
; i++)

164 
	`¥ötf
("%c", 
pkt
 -> 
d©a
[
i
]);

166 
	`¥ötf
("\r\n");

169 
	}
}

171 
	$¥o˚ss_£rül_nw_˘æ_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
)

173 
öt8_t
 
i
;

174 
öt8_t
 
ªt
;

176 if(
DEBUG_SR
 == 0)

178 
	`¥ötf
("InsideÖrocess_serial_nw_ctrl_pkt()\r\n");

181 
	`£rül_nw_˘æ_ty≥
(
pkt
))

183 
SERIAL_ROUTE_CONFIG
:

184 
	`u≈ack_Msg_RoutögTabÀ
(&
mπ
, 
pkt
 -> 
d©a
);

185 
mπ
.
dg
 = 
NODE_ADDR
;

187 if(
DEBUG_SR
 == 0)

189 
	`¥öt_RoutögTabÀ
(&
mπ
);

192 if(
mπ
.
node
 =
NODE_ADDR
)

194 
	`£t_RoutögTabÀ
(&
mπ
);

199 
nw_pkt
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

200 
nw_pkt
.
de°
 = 
mπ
.
node
;

201 
nw_pkt
.
√xtH›
 = 
	`rouã_addr
(
mπ
.
node
);

202 
nw_pkt
.
¥evH›
 = (
uöt16_t
)
NODE_ADDR
;

203 
nw_pkt
.
âl
 = 
MAX_NETWORK_DIAMETER
;

204 
nw_pkt
.
ty≥
 = (
uöt8_t
)
ROUTE_CONFIG
;

205 
nw_pkt
.
Àngth
 = 
SIZE_MSG_ROUTING_TABLE
;

206 
nw_pkt
.
¥io
 = 
NORMAL_PRIORITY
;

208 
	`∑ck_Msg_RoutögTabÀ
(
nw_pkt
.
d©a
, &
mπ
);

211 
	`íãr_¸
(
bm_£m
, 34);

212 
ªt
 = 
	`ö£π_tx_aq
(&
nw_pkt
);

213 if(
ªt
 =
NRK_ERROR
)

215 
	`Àave_¸
(
bm_£m
, 34);

216 
	`ƒk_waô_u¡û_√xt_≥riod
();

220 
	`Àave_¸
(
bm_£m
, 34);

231 
	}
}

234 
	$£rül_èsk
()

236 
öt8_t
 
ªt
;

238 if(
DEBUG_SR
 == 0)

240 
	`ƒk_k¥ötf
(
	`PSTR
("Inside serial_task. Task PID = "));

241 
	`¥ötf
("%d\r\n", 
	`ƒk_gë_pid
());

245 
	`¶ù_öô
 (
°dö
, 
°dout
, 0, 0);

250 if(
DEBUG_SR
 == 1)

252 
	`ƒk_k¥ötf
(
	`PSTR
("SL: Waiting foráÖacket fromÅhe gateway\r\n"));

254 
ªt
 = 
	`¶ù_rx
 (
rx_buf
, 
SIZE_GATEWAYTONODESERIAL_PACKET
);

255 i‡(
ªt
 > 0)

257 if(
DEBUG_SR
 == 0)

259 
	`ƒk_k¥ötf
(
	`PSTR
("Receivedá message fromÅhe gateway\r\n"));

260 
	`¥ötBuf„r
(
rx_buf
, 
SIZE_GATEWAYTONODESERIAL_PACKET
);

262 
	`u≈ack_G©ewayToNodeSîül_Packë_hódî
(&
gä_pkt
, 
rx_buf
);

263 
	`mem˝y
(
gä_pkt
.
d©a
, 
rx_buf
 + 
SIZE_GATEWAYTONODESERIAL_PACKET_HEADER
, 
MAX_GATEWAY_PAYLOAD
);

264 if(
DEBUG_SR
 == 0)

266 
	`ƒk_k¥ötf
(
	`PSTR
("Unpacked gatewaytonodeÖacket = "));

267 
	`¥öt_gä_pkt
(&
gä_pkt
);

270 
	`£rül_pkt_ty≥
(&
gä_pkt
))

272 
SERIAL_APPLICATION
:

273 
	`¥o˚ss_£rül_≠p_pkt
(&
gä_pkt
);

276 
SERIAL_NW_CONTROL
:

277 
	`¥o˚ss_£rül_nw_˘æ_pkt
(&
gä_pkt
);

280 
INVALID
:

282 
	`¥ötf
("£rül_èsk(): InvÆidÖackëÅy≥Ñe˚ived = %d\n", 
gä_pkt
.
ty≥
);

288 
	`ƒk_k¥ötf
(
	`PSTR
("FailedÅoÑeceiveá SLIP message from gateway\r\n"));

294 
	}
}

297 
	$¸óã_£rül_èsk
()

299 
SERIAL_TASK
.
èsk
 = 
£rül_èsk
;

300 
SERIAL_TASK
.
Ptos
 = (*Ë&
£rül_èsk_°ack
[
NRK_APP_STACKSIZE
 - 1];

301 
SERIAL_TASK
.
Pbos
 = (*Ë&
£rül_èsk_°ack
[0];

302 
SERIAL_TASK
.
¥io
 = 17;

303 
SERIAL_TASK
.
Fú°A˘iv©i⁄
 = 
TRUE
;

304 
SERIAL_TASK
.
Ty≥
 = 
BASIC_TASK
;

305 
SERIAL_TASK
.
SchTy≥
 = 
PREEMPTIVE
;

307 
SERIAL_TASK
.
˝u_ª£rve
.
£cs
 = 0;

308 
SERIAL_TASK
.
˝u_ª£rve
.
«no_£cs
 = 200 * 
NANOS_PER_MS
;

309 
SERIAL_TASK
.
≥riod
.
£cs
 = 0;

310 
SERIAL_TASK
.
≥riod
.
«no_£cs
 = 250 * 
NANOS_PER_MS
;

313 
SERIAL_TASK
.
off£t
.
£cs
 = 0;

314 
SERIAL_TASK
.
off£t
.
«no_£cs
= 0;

315 if(
CONNECTED_TO_GATEWAY
 =
TRUE
)

316 
	`ƒk_a˘iv©e_èsk
 (&
SERIAL_TASK
);

318 if(
DEBUG_SR
 == 0)

320 
	`ƒk_k¥ötf
(
	`PSTR
("SerialÅaskáctivated\r\n"));

322 
	}
}

324 
	$öôüli£_£rül_communiˇti⁄
()

326 
	`¸óã_£rül_èsk
();

329 
	}
}

331 
	$¥öt_gä_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
)

333 
öt8_t
 
i
;

334 
	`¥öt_gä_pkt_hódî
(
pkt
);

336 
i
 = 0; i < 
pkt
 -> 
Àngth
; i++)

338 
	`¥ötf
("%d ", 
pkt
 -> 
d©a
[
i
]);

340 
	`¥ötf
("\r\n");

343 
	}
}

346 
	$¥öt_gä_pkt_hódî
(
G©ewayToNodeSîül_Packë
 *
pkt
)

348 
	`ƒk_k¥ötf
(
	`PSTR
("["));

349 
	`¥ötf
("%d %d]", 
pkt
 -> 
ty≥
,Ökà-> 
Àngth
);

352 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Serial.h

5 #i‚de‡
_SERIAL_H


6 
	#_SERIAL_H


	)

8 
	~"NWSèckC⁄fig.h
"

9 
	~"Nëw‹kLayî.h
"

10 
	~<°döt.h
>

11 
	~<¶ù.h
>

13 
	#DEBUG_SR
 0

14 

	)

23 
	#SERIAL_APPLICATION
 0x00

24 
	#SERIAL_NW_CONTROL
 0x80

25 

	)

27 
	#SERIAL_NGB_LIST
 0x80

28 
	#SERIAL_ROUTE_CONFIG
 0x80

29 
	#INVALID
 0xFF

30 

	)

31 
	#SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
 2

	)

32 
	#SIZE_NODETOGATEWAYSERIAL_PACKET
 (
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
 + 
MAX_SERIAL_PAYLOAD
)

	)

34 
	#SIZE_GATEWAYTONODESERIAL_PACKET_HEADER
 2

	)

35 
	#SIZE_GATEWAYTONODESERIAL_PACKET
 (
SIZE_GATEWAYTONODESERIAL_PACKET_HEADER
 + 
MAX_GATEWAY_PAYLOAD
)

	)

40 
uöt8_t
 
	mty≥
;

47 
öt8_t
 
	mÀngth
;

48 
uöt8_t
 
	md©a
[
MAX_SERIAL_PAYLOAD
];

50 }
	tNodeToG©ewaySîül_Packë
;

54 
uöt8_t
 
	mty≥
;

60 
öt8_t
 
	mÀngth
;

61 
uöt8_t
 
	md©a
[
MAX_GATEWAY_PAYLOAD
];

62 }
	tG©ewayToNodeSîül_Packë
;

65 
£ndToSîül
(
uöt8_t
 *
buf
, 
öt8_t
 
Àngth
);

76 
¥ötBuf„r
(
uöt8_t
 *
buf
, 
öt8_t
 
Àn
);

87 
¸óã_£rül_èsk
();

88 
uöt8_t
 
£rül_pkt_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
);

89 
uöt8_t
 
£rül_nw_˘æ_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
);

90 
¥o˚ss_£rül_≠p_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
);

91 
¥o˚ss_£rül_nw_˘æ_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
);

92 
¥öt_gä_pkt
(
G©ewayToNodeSîül_Packë
*);

93 
¥öt_gä_pkt_hódî
(
G©ewayToNodeSîül_Packë
 *
pkt
);

94 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπbl
);

95 
öôüli£_£rül_communiˇti⁄
();

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/TransportLayerUDP.c

3 
	~"Tøn•‹tLayîUDP.h
"

4 
	~"Nëw‹kLayî.h
"

5 
	~"Buf„rM™agî.h
"

6 
	~"NWEº‹Codes.h
"

7 
	~<ƒk.h
>

8 
	~<ö˛ude.h
>

9 
	~<ulib.h
>

10 
	~<°dio.h
>

11 
	~<avr/¶ìp.h
>

12 
	~<hÆ.h
>

13 
	~<ƒk_îr‹.h
>

14 
	~<°döt.h
>

16 
	#PKT_PRIO
 
NODE_ADDR


	)

19 
Sockë
 
	gsock
[
NUM_PORTS
];

21 
P‹t
 
	gp‹ts
[
NUM_PORTS
];

23 
öt8_t
 
	géayî_öô_d⁄e
;

25 
Tøn•‹t_Segmít_UDP
 
	gudp_£g
;

26 
NW_Packë
 
	gpkt
;

28 
ƒk_£m_t
 *
	gé_£m
;

33 
Re˚iveBuf„rM™agî
 
rx_buf_mgr
[];

34 
öt8_t
 
num_bufs_‰ì
;

35 
Re˚iveBuf„rUDP
 
rx_buf_udp
[];

36 
TønsmôBuf„r
 
tx_buf
[];

37 
TønsmôBuf„rM™agî
 
tx_buf_mgr
;

38 
ƒk_£m_t
 *
bm_£m
;

40 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

41 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

42 
öt8_t
 
gë_num_bufs_‰ì
();

43 
ö£π_rx_fq
(
Re˚iveBuf„rUDP
*, 
öt8_t
, int8_t);

44 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
 *);

45 
öt8_t
 
gë_ö_¥o˚ss_buf_cou¡
(int8_t);

46 
Re˚iveBuf„rUDP
* 
ªmove_rx_pq
(
öt8_t
);

47 
¥öt_tx_buf„r
();

50 
uöt16_t
 
rouã_addr
(uint16_t);

51 
ƒk_£m_t
 *
∆_£m
;

54 
∑ck_TL_UDP_hódî
(
uöt8_t
*, 
Tøn•‹t_Segmít_UDP
*);

57 
go_öto_∑nic
(
öt8_t
 *);

60 
	$öôüli£_å™•‹t_œyî_udp
()

62 
öt8_t
 
i
;

65 
i
 = 0; i < 
NUM_PORTS
; i++)

67 
sock
[
i
].
pödex
 = -1;

68 
sock
[
i
].
rbmödex
 = -1;

69 
sock
[
i
].
pid
 = 
INVALID_PID
;

70 
sock
[
i
].
timeout
.
£cs
 = 0;

71 
sock
[
i
].
timeout
.
«no_£cs
 = 0;

73 
p‹ts
[
i
].
≤o
 = 
INVALID_PORT
;

77 
é_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

78 if(
é_£m
 =
NULL
)

80 
	`ƒk_öt_dißbÀ
();

81 
	`ƒk_Àd_£t
(
RED_LED
);

83 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_transport_layer_udp(): Error creatingÅhe semaphore\r\n"));

86 if(
NUM_PORTS
 > 
MAX_PORTS
)

88 
	`ƒk_öt_dißbÀ
();

89 
	`ƒk_Àd_£t
(
RED_LED
);

91 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_transport_layer_udp(): Too manyÖorts opened in system\r\n"));

95 
éayî_öô_d⁄e
 = 1;

97 
	}
}

99 
öt8_t
 
	$gë_√xt_avaûabÀ_sockë
()

101 
öt8_t
 
i
;

104 
i
 = 0; i < 
NUM_PORTS
; i++)

106 if(
sock
[
i
].
pid
 =
INVALID_PID
)

107  
i
;

109 
	`_ƒk_î∫o_£t
(
NO_SOCKET_DESC_AVAILABLE
);

111  
NRK_ERROR
;

112 
	}
}

115 
öt8_t
 
	$¸óã_sockë
(
öt8_t
 
ty≥
)

117 
öt8_t
 
ªsu…
;

119 
	`íãr_¸
(
é_£m
, 3);

121 if(
éayî_öô_d⁄e
 != 1)

123 
	`ƒk_öt_dißbÀ
();

124 
	`ƒk_Àd_£t
(
RED_LED
);

126 
	`ƒk_k¥ötf
(
	`PSTR
("create_socket(): TransportÜayerÇot initialised\r\n"));

129 
ty≥
)

131 
SOCK_DGRAM
:

132 
SOCK_IPC
:

133 
SOCK_RAW
:

134 
ªsu…
 = 
	`gë_√xt_avaûabÀ_sockë
();

135 if(
ªsu…
 !
NRK_ERROR
)

137 
sock
[
ªsu…
].
pid
 = 
	`ƒk_gë_pid
();

138 
sock
[
ªsu…
].
ty≥
 =Åype;

143 
	`_ƒk_î∫o_£t
(
UNSUPPORTED_SOCK_TYPE
);

144 
ªsu…
 = 
NRK_ERROR
;

147 
	`Àave_¸
(
é_£m
, 3);

148  
ªsu…
;

149 
	}
}

152 
uöt8_t
 
	$gë_√xt_avaûabÀ_p‹t
()

154 
uöt16_t
 
i
;

155 
öt8_t
 
j
;

157 
i
 = 
EPHEMERAL_PORT_NUM_START
; i <
MAX_PORT_NUM
; i++)

160 
j
 = 0; j < 
NUM_PORTS
; j++)

161 if(
p‹ts
[
j
].
≤o
 =
i
)

164 if(
j
 =
NUM_PORTS
)

165  
i
;

171 
	`_ƒk_î∫o_£t
(
NO_PORTS_AVAILABLE
);

172  
INVALID_PORT
;

173 
	}
}

175 
öt8_t
 
	$check_p‹t_avaûabÀ
(
uöt8_t
 
±
)

177 
öt8_t
 
i
;

179 
i
 = 0; i < 
NUM_PORTS
; i++)

180 if(
p‹ts
[
i
].
≤o
 =
±
)

183 if(
i
 =
NUM_PORTS
)

184  
NRK_OK
;

186 
	`_ƒk_î∫o_£t
(
PORT_UNAVAILABLE
);

187  
NRK_ERROR
;

188 
	}
}

190 
	$assign_p‹t
(
öt8_t
 
pödex
, 
uöt8_t
 
±
)

192 
öt8_t
 
ªt1
, 
ªt2
;

195 
p‹ts
[
pödex
].
≤o
 = 
±
;

196 
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
 = 
	`ƒk_sig«l_¸óã
();

197 
p‹ts
[
pödex
].
d©a_¨rived_sig«l
 = 
	`ƒk_sig«l_¸óã
();

199 if–
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
 =
NRK_ERROR
 )

201 
	`ƒk_öt_dißbÀ
();

202 
	`ƒk_Àd_£t
(
RED_LED
);

204 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe send_done signal\r\n"));

207 if–
p‹ts
[
pödex
].
d©a_¨rived_sig«l
 =
NRK_ERROR
 )

209 
	`ƒk_öt_dißbÀ
();

210 
	`ƒk_Àd_£t
(
RED_LED
);

212 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe data_arrived signal\r\n"));

215 
ªt1
 = 
	`ƒk_sig«l_ªgi°î
(
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
);

216 
ªt2
 = 
	`ƒk_sig«l_ªgi°î
(
p‹ts
[
pödex
].
d©a_¨rived_sig«l
);

218 if(
ªt1
 =
NRK_ERROR
)

220 
	`ƒk_öt_dißbÀ
();

221 
	`ƒk_Àd_£t
(
RED_LED
);

223 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): ErrorÑegisteringÅhe send_done signal\r\n"));

226 if(
ªt2
 =
NRK_ERROR
)

228 
	`ƒk_öt_dißbÀ
();

229 
	`ƒk_Àd_£t
(
RED_LED
);

231 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): ErrorÑegisteringÅhe data_arrived signal\r\n"));

235 
	}
}

237 
	$ªÀa£_p‹t
(
öt8_t
 
pödex
)

239 
öt8_t
 
ªt1
, 
ªt2
;

242 
p‹ts
[
pödex
].
≤o
 = 
INVALID_PID
;

243 
ªt1
 = 
	`ƒk_sig«l_dñëe
(
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
);

244 
ªt2
 = 
	`ƒk_sig«l_dñëe
(
p‹ts
[
pödex
].
d©a_¨rived_sig«l
);

246 if(
ªt1
 =
NRK_ERROR
)

248 
	`ƒk_öt_dißbÀ
();

249 
	`ƒk_Àd_£t
(
RED_LED
);

251 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe send_done signal\r\n"));

254 if(
ªt2
 =
NRK_ERROR
)

256 
	`ƒk_öt_dißbÀ
();

257 
	`ƒk_Àd_£t
(
RED_LED
);

259 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe data_arrived signal\r\n"));

263 
	}
}

265 
öt8_t
 
	$gë_ödex_u«ssig√d_p‹t_ñemít
()

267 
öt8_t
 
i
;

269 
i
 = 0; i < 
NUM_PORTS
; i++)

270 if(
p‹ts
[
i
].
≤o
 =
INVALID_PORT
)

271  
i
;

273 
	`_ƒk_î∫o_£t
(
NO_PORT_ELEMENT_AVAILABLE
);

274  
NRK_ERROR
;

275 
	}
}

277 
öt8_t
 
	$gë_ödex_u«ssig√d_rbm_ñemít
()

279 
öt8_t
 
i
;

281 
i
 = 0; i < 
NUM_PORTS
; i++)

282 if(
rx_buf_mgr
[
i
].
pödex
 == -1)

283  
i
;

285 
	`_ƒk_î∫o_£t
(
NO_RBM_ELEMENT_AVAILABLE
);

286  
NRK_ERROR
;

287 
	}
}

289 
uöt8_t
 
	$gë_p‹t_num
(
öt8_t
 
sock_num
)

292 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

294 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

295  
INVALID_PORT
;

298 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

300 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

301  
INVALID_PORT
;

304 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

306 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

307  
INVALID_PORT
;

310 if(
sock
[
sock_num
].
pödex
 == -1)

312 
	`_ƒk_î∫o_£t
(
UNMAPPED_SOCKET
);

313  
INVALID_PORT
;

316  
p‹ts
[
sock
[
sock_num
].
pödex
].
≤o
;

317 
	}
}

320 
öt8_t
 
	$böd
(
öt8_t
 
sock_num
, 
öt16_t
 
p‹t
)

322 
öt8_t
 
buf_ödex
;

323 
öt8_t
 
p‹t_ödex
;

324 
öt8_t
 
rbm_ödex
;

325 
öt8_t
 
i
;

326 
öt8_t
 
size
;

328 
	`íãr_¸
(
bm_£m
, 8);

329 
	`íãr_¸
(
é_£m
, 8);

331 if(
éayî_öô_d⁄e
 != 1)

333 
	`ƒk_öt_dißbÀ
();

334 
	`ƒk_Àd_£t
(
RED_LED
);

336 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): TransportÜayerÇot initialised\r\n"));

340 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

342 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

344 
	`Àave_¸
(
é_£m
, 8);

345 
	`Àave_¸
(
bm_£m
, 8);

346  
NRK_ERROR
;

349 if(
p‹t
 <0 ||Ö‹à> 
MAX_PORT_NUM
)

351 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

353 
	`Àave_¸
(
é_£m
, 8);

354 
	`Àave_¸
(
bm_£m
, 8);

355  
NRK_ERROR
;

358 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

360 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

362 
	`Àave_¸
(
é_£m
, 8);

363 
	`Àave_¸
(
bm_£m
, 8);

364  
NRK_ERROR
;

367 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

369 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

371 
	`Àave_¸
(
é_£m
, 8);

372 
	`Àave_¸
(
bm_£m
, 8);

373  
NRK_ERROR
;

376 if(
sock
[
sock_num
].
rbmödex
 != -1)

378 
	`_ƒk_î∫o_£t
(
INVALID_CALL
);

380 
	`Àave_¸
(
é_£m
, 8);

381 
	`Àave_¸
(
bm_£m
, 8);

382  
NRK_ERROR
;

385 if(
	`check_p‹t_avaûabÀ
((
uöt8_t
)
p‹t
Ë=
FALSE
)

387 
	`Àave_¸
(
é_£m
, 8);

388 
	`Àave_¸
(
bm_£m
, 8);

389  
NRK_ERROR
;

392 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

394 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

396 
	`Àave_¸
(
é_£m
, 8);

397 
	`Àave_¸
(
bm_£m
, 8);

398  
NRK_ERROR
;

401 if(
sock
[
sock_num
].
pödex
 != -1)

403 
	`ƒk_öt_dißbÀ
();

404 
	`ƒk_Àd_£t
(
RED_LED
);

406 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

410 
size
 = 
DEFAULT_RX_QUEUE_SIZE
;

417 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

418 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

420 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

422 
	`ƒk_öt_dißbÀ
();

423 
	`ƒk_Àd_£t
(
RED_LED
);

425 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

429 
	`assign_p‹t
(
p‹t_ödex
, (
uöt8_t
)
p‹t
);

432 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

433 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

436 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

437 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

440 
i
 = 1; i <
size
; i++)

442 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

443 if(
buf_ödex
 =
NRK_ERROR
)

445 
	`ƒk_öt_dißbÀ
();

446 
	`ƒk_Àd_£t
(
RED_LED
);

448 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug found in implementation ofÇum_bufs_free\r\n"));

451 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

452 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

453 
num_bufs_‰ì
--;

456 
	`Àave_¸
(
é_£m
, 8);

457 
	`Àave_¸
(
bm_£m
, 8);

458  
NRK_OK
;

459 
	}
}

461 
öt8_t
 
	$gë_rx_queue_size
(
öt8_t
 
sock_num
)

463 
öt8_t
 
cou¡
;

465 
	`íãr_¸
(
bm_£m
, 9);

466 
	`íãr_¸
(
é_£m
, 9);

469 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

471 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

473 
	`Àave_¸
(
é_£m
, 9);

474 
	`Àave_¸
(
bm_£m
, 9);

475  
NRK_ERROR
;

478 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

480 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

482 
	`Àave_¸
(
é_£m
, 9);

483 
	`Àave_¸
(
bm_£m
, 9);

484  
NRK_ERROR
;

487 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

489 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

491 
	`Àave_¸
(
é_£m
, 9);

492 
	`Àave_¸
(
bm_£m
, 9);

493  
NRK_ERROR
;

496 if(
sock
[
sock_num
].
pödex
 == -1)

498 
	`Àave_¸
(
é_£m
, 9);

499 
	`Àave_¸
(
bm_£m
, 9);

503 if(
sock
[
sock_num
].
rbmödex
 == -1)

505 
	`ƒk_öt_dißbÀ
();

506 
	`ƒk_Àd_£t
(
RED_LED
);

508 
	`ƒk_k¥ötf
(
	`PSTR
("get_rx_queue_size(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

512 
cou¡
 = 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡TŸÆ
;

514 
	`Àave_¸
(
é_£m
, 9);

515 
	`Àave_¸
(
bm_£m
, 9);

516  
cou¡
;

517 
	}
}

520 
öt8_t
 
	$£t_rx_queue_size
(
öt8_t
 
sock_num
, i¡8_à
size
)

522 
uöt8_t
 
p‹t
;

523 
öt8_t
 
i
;

524 
öt8_t
 
Êag
;

526 
öt8_t
 
buf_ödex
;

527 
öt8_t
 
p‹t_ödex
;

528 
öt8_t
 
rbm_ödex
;

530 
	`íãr_¸
(
bm_£m
, 10);

531 
	`íãr_¸
(
é_£m
, 10);

533 if(
éayî_öô_d⁄e
 != 1)

535 
	`ƒk_öt_dißbÀ
();

536 
	`ƒk_Àd_£t
(
RED_LED
);

538 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): TransportÜayerÇot initialised\r\n"));

541 
Êag
 = 0;

543 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
size
 <= 0)

545 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

547 
	`Àave_¸
(
é_£m
, 10);

548 
	`Àave_¸
(
bm_£m
, 10);

549  
NRK_ERROR
;

552 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

554 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

556 
	`Àave_¸
(
é_£m
, 10);

557 
	`Àave_¸
(
bm_£m
, 10);

558  
NRK_ERROR
;

561 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

563 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

565 
	`Àave_¸
(
é_£m
, 10);

566 
	`Àave_¸
(
bm_£m
, 10);

567  
NRK_ERROR
;

570 if(
sock
[
sock_num
].
pödex
 == -1)

572 
Êag
 = 1;

573 
p‹t
 = 
	`gë_√xt_avaûabÀ_p‹t
();

574 if(
p‹t
 =
INVALID_PORT
)

576 
	`Àave_¸
(
é_£m
, 10);

577 
	`Àave_¸
(
bm_£m
, 10);

578  
NRK_ERROR
;

580 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

582 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

584 
	`Àave_¸
(
é_£m
, 10);

585 
	`Àave_¸
(
bm_£m
, 10);

586  
NRK_ERROR
;

590 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

591 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

593 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

595 
	`ƒk_öt_dißbÀ
();

596 
	`ƒk_Àd_£t
(
RED_LED
);

598 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

602 
	`assign_p‹t
(
p‹t_ödex
, 
p‹t
);

605 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

606 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

609 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

610 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

615 if(
size
 =
DEFAULT_RX_QUEUE_SIZE
)

617 
	`Àave_¸
(
é_£m
, 10);

618 
	`Àave_¸
(
bm_£m
, 10);

619  
size
;

622 
size
 -
DEFAULT_RX_QUEUE_SIZE
;

626 if(
	`gë_num_bufs_‰ì
(Ë< 
size
)

627 
size
 = 
	`gë_num_bufs_‰ì
();

632 
i
 = 1; i <
size
; i++)

634 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

635 if(
buf_ödex
 =
NRK_ERROR
)

637 
	`ƒk_öt_dißbÀ
();

638 
	`ƒk_Àd_£t
(
RED_LED
);

640 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): Bug found in implementation ofÇum_bufs_free\r\n"));

642 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

643 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

644 
num_bufs_‰ì
--;

647 
	`Àave_¸
(
é_£m
, 10);

648 
	`Àave_¸
(
bm_£m
, 10);

650 if(
Êag
 == 0)

651  
size
 + 
DEFAULT_RX_QUEUE_SIZE
;

653  
size
;

654 
	}
}

656 
öt8_t
 
	$ªÀa£_buf„r
(
öt8_t
 
sock_num
, 
uöt8_t
 *
±r
)

658 
Re˚iveBuf„rUDP
 *
buf
;

660 
	`íãr_¸
(
bm_£m
, 11);

661 
	`íãr_¸
(
é_£m
, 11);

664 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
±r
 =
NULL
)

666 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

668 
	`Àave_¸
(
é_£m
, 11);

669 
	`Àave_¸
(
bm_£m
, 11);

670  
NRK_ERROR
;

672 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

674 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

676 
	`Àave_¸
(
é_£m
, 11);

677 
	`Àave_¸
(
bm_£m
, 11);

678  
NRK_ERROR
;

681 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

683 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

685 
	`Àave_¸
(
é_£m
, 11);

686 
	`Àave_¸
(
bm_£m
, 11);

687  
NRK_ERROR
;

690 if(
sock
[
sock_num
].
pödex
 == -1)

692 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

694 
	`Àave_¸
(
é_£m
, 11);

695 
	`Àave_¸
(
bm_£m
, 11);

696  
NRK_ERROR
;

699 if(
sock
[
sock_num
].
rbmödex
 == -1)

701 
	`ƒk_öt_dißbÀ
();

702 
	`ƒk_Àd_£t
(
RED_LED
);

704 
	`ƒk_k¥ötf
(
	`PSTR
("release_buffer(): Bug discovered in implementation ofÖort /ÑbmÉlementárray\r\n"));

708 
buf
 = 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
hód_fq
;

709 
buf
 !
NULL
)

711 if–(
±r
 =(
buf
 -> 
£g
).
d©a
Ë&& (bu‡-> 
°©us
 =
FULL
) )

713 
buf
 = bu‡-> 
√xt
;

715 if(
buf
 =
NULL
)

717 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

719 
	`Àave_¸
(
é_£m
, 11);

720 
	`Àave_¸
(
bm_£m
, 11);

721  
NRK_ERROR
;

724 
buf
 -> 
°©us
 = 
EMPTY
;

725 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡Fªe
++;

727 
	`Àave_¸
(
é_£m
, 11);

728 
	`Àave_¸
(
bm_£m
, 11);

729  
NRK_OK
;

730 
	}
}

732 
öt8_t
 
	$˛o£_sockë
(
öt8_t
 
sock_num
)

734 
Re˚iveBuf„rUDP
 *
±r
;

736 
	`íãr_¸
(
bm_£m
, 12);

737 
	`íãr_¸
(
é_£m
, 12);

740 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

742 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

744 
	`Àave_¸
(
é_£m
, 12);

745 
	`Àave_¸
(
bm_£m
, 12);

746  
NRK_ERROR
;

748 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
() )

750 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

752 
	`Àave_¸
(
é_£m
, 12);

753 
	`Àave_¸
(
bm_£m
, 12);

754  
NRK_ERROR
;

757 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

759 
sock
[
sock_num
].
pid
 = 
INVALID_PID
;

760 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

761 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

763 
	`Àave_¸
(
é_£m
, 12);

764 
	`Àave_¸
(
bm_£m
, 12);

765  
NRK_OK
;

769 if(
sock
[
sock_num
].
pödex
 != -1)

771 if(
sock
[
sock_num
].
rbmödex
 == -1)

773 
	`ƒk_öt_dißbÀ
();

774 
	`ƒk_Àd_£t
(
RED_LED
);

776 
	`ƒk_k¥ötf
(
	`PSTR
("close_socket(): Bug discovered in implementation ofÖort /rbmÉlementárray\r\n"));

779  (
±r
 = 
	`ªmove_rx_pq
(
sock
[
sock_num
].
rbmödex
)Ë!
NULL
 )

780 
±r
 -> 
°©us
 = 
UNALLOCATED
;

783  (
±r
 = 
	`ªmove_rx_fq
(
sock
[
sock_num
].
rbmödex
, 
EMPTY
)Ë!
NULL
 )

784 
±r
 -> 
°©us
 = 
UNALLOCATED
;

787  (
±r
 = 
	`ªmove_rx_fq
(
sock
[
sock_num
].
rbmödex
,
FULL
)Ë!
NULL
 )

788 
±r
 -> 
°©us
 = 
UNALLOCATED
;

790 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
pid
 = 
INVALID_PID
;

791 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
pödex
 = -1;

792 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡TŸÆ
 = 0;

793 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡Fªe
 = 0;

795 
	`ªÀa£_p‹t
(
sock
[
sock_num
].
pödex
);

798 
sock
[
sock_num
].
pödex
 = -1;

799 
sock
[
sock_num
].
rbmödex
 = -1;

800 
sock
[
sock_num
].
pid
 = 
INVALID_PID
;

801 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

802 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

804 
	`Àave_¸
(
é_£m
, 12);

805 
	`Àave_¸
(
bm_£m
, 12);

806  
NRK_OK
;

807 
	}
}

809 
öt8_t
 
	$is_p‹t_assocüãd
(
öt16_t
 
p‹t
)

812 if(
p‹t
 <0 ||Ö‹à> 
MAX_PORT_NUM
)

814 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

815  
NRK_ERROR
;

818 
	`íãr_¸
(
é_£m
, 13);

820 if(
	`check_p‹t_avaûabÀ
((
uöt8_t
)
p‹t
Ë=
NRK_OK
)

822 
	`Àave_¸
(
é_£m
, 13);

823  
FALSE
;

825 
	`Àave_¸
(
é_£m
, 13);

826  
TRUE
;

827 
	}
}

829 
öt8_t
 
	$£nd
(
öt8_t
 
sock_num
, i¡8_à*
±r
, i¡8_à
Àn
, 
öt32_t
 
de°_addr
, 
öt16_t
 
de°_p‹t
, i¡8_à
¥io
)

831 
öt8_t
 
ªsu…
;

833 
	`íãr_¸
(
bm_£m
, 14);

834 
	`íãr_¸
(
é_£m
, 14);

837 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

839 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

841 
	`Àave_¸
(
é_£m
, 14);

842 
	`Àave_¸
(
bm_£m
, 14);

843  
NRK_ERROR
;

846 if(
±r
 =
NULL
 || 
Àn
 <0 ||Üí > 
MAX_APP_PAYLOAD
)

848 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

850 
	`Àave_¸
(
é_£m
, 14);

851 
	`Àave_¸
(
bm_£m
, 14);

852  
NRK_ERROR
;

855 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

857 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

859 
	`Àave_¸
(
é_£m
, 14);

860 
	`Àave_¸
(
bm_£m
, 14);

861  
NRK_ERROR
;

865 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

867 
ƒk_sig_t
 
Œ_tx_d⁄e_sig«l
 = 
	`wd_gë_tx_sig«l
();

868 if(
	`ƒk_sig«l_ªgi°î
(
Œ_tx_d⁄e_sig«l
Ë=
NRK_ERROR
)

870 
	`ƒk_öt_dißbÀ
();

871 
	`ƒk_Àd_£t
(
RED_LED
);

873 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Error inÑegistering forÜl_tx_done_signal\r\n"));

913  
	`wd_tx_∑ckë
(
±r
, 
Àn
, 
PKT_PRIO
) == -1)

915 
ªsu…
 = 
	`ƒk_evít_waô
–
	`SIG
(
Œ_tx_d⁄e_sig«l
) );

918 
	`Àave_¸
(
é_£m
, 14);

919 
	`Àave_¸
(
bm_£m
, 14);

920  
NRK_OK
;

923 if(
de°_addr
 < 0 || 
de°_p‹t
 <0 || de°_p‹à>
MAX_PORT_NUM
)

925 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

927 
	`Àave_¸
(
é_£m
, 14);

928 
	`Àave_¸
(
bm_£m
, 14);

929  
NRK_ERROR
;

932 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
)

934 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

936 
	`Àave_¸
(
é_£m
, 14);

937 
	`Àave_¸
(
bm_£m
, 14);

938  
NRK_ERROR
;

942 if(
sock
[
sock_num
].
pödex
 == -1)

945 if(
DEBUG_TL
 == 2)

947 
	`¥ötf
("%d ", 
NODE_ADDR
);

948 
	`ƒk_k¥ötf
(
	`PSTR
("called send() withoutá mapping\r\n"));

950 
öt8_t
 
buf_ödex
, 
p‹t_ödex
, 
rbm_ödex
;

951 
uöt8_t
 
p‹t
;

953 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

955 
	`Àave_¸
(
é_£m
, 14);

956 
	`Àave_¸
(
bm_£m
, 14);

957 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

958  
NRK_ERROR
;

961 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

962 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

963 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

965 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

967 
	`ƒk_öt_dißbÀ
();

968 
	`ƒk_Àd_£t
(
RED_LED
);

970 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

973 if(
buf_ödex
 =
NRK_ERROR
)

975 
	`ƒk_öt_dißbÀ
();

976 
	`ƒk_Àd_£t
(
RED_LED
);

978 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Bug detected in implementation ofÇum_bufs_free\r\n"));

981 
p‹t
 = 
	`gë_√xt_avaûabÀ_p‹t
();

984 
	`assign_p‹t
(
p‹t_ödex
, 
p‹t
);

987 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

988 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

991 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

992 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

995 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

996 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

997 
num_bufs_‰ì
--;

1002 
udp_£g
.
§cP‹t
 = 
p‹ts
[
sock
[
sock_num
].
pödex
].
≤o
;

1003 
udp_£g
.
de°P‹t
 = (
uöt8_t
)
de°_p‹t
;

1004 
udp_£g
.
Àngth
 = 
Àn
;

1005 
	`mem˝y
(
udp_£g
.
d©a
, 
±r
, 
Àn
);

1007 if(
DEBUG_TL
 == 2)

1009 
	`¥ötf
("%d: ", 
NODE_ADDR
);

1010 
	`ƒk_k¥ötf
(
	`PSTR
("sent segment = "));

1011 
	`¥öt_£g
(&
udp_£g
);

1014 
sock
[
sock_num
].
ty≥
)

1016 
SOCK_DGRAM
:

1017 
pkt
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

1018 
pkt
.
de°
 = (
uöt16_t
)
de°_addr
;

1019 
pkt
.
√xtH›
 = 
	`rouã_addr
(
de°_addr
);

1020 
pkt
.
¥evH›
 = 
NODE_ADDR
;

1022 
pkt
.
âl
 = 
MAX_NETWORK_DIAMETER
;

1023 
pkt
.
ty≥
 = 
UDP
;

1024 
pkt
.
Àngth
 = 
SIZE_TRANSPORT_UDP_HEADER
 + 
Àn
;

1025 
pkt
.
¥io
 =Örio;

1026 
	`∑ck_TL_UDP_hódî
(
pkt
.
d©a
, &
udp_£g
);

1027 
	`mem˝y
(
pkt
.
d©a
 + 
SIZE_TRANSPORT_UDP_HEADER
, 
udp_£g
.d©a, 
MAX_APP_PAYLOAD
);

1029 if(
DEBUG_TL
 == 2)

1031 
	`¥ötf
("%d: ",
NODE_ADDR
);

1032 
	`ƒk_k¥ötf
(
	`PSTR
("sentÖacket = "));

1033 
	`¥öt_pkt
(&
pkt
);

1038 
ªsu…
 = 
	`ö£π_tx_aq
(&
pkt
);

1039 if(
DEBUG_TL
 == 2)

1041 
	`ƒk_k¥ötf
("TL: send(): InsertedÖacket.");

1042 
	`¥öt_tx_buf„r
();

1045 if(
ªsu…
 =
NRK_ERROR
)

1046 
	`_ƒk_î∫o_£t
(
NO_TX_BUFFERS_AVAILABLE
);

1048 
	`Àave_¸
(
é_£m
, 14);

1049 
	`Àave_¸
(
bm_£m
, 14);

1050  
ªsu…
;

1053 
SOCK_IPC
:

1054 
	`ö£π_rx_pq
(&
udp_£g
, 
¥io
, 
NODE_ADDR
, 
INVALID_RSSI
);

1055 
	`Àave_¸
(
é_£m
, 14);

1056 
	`Àave_¸
(
bm_£m
, 14);

1060 
	`ƒk_öt_dißbÀ
();

1061 
	`ƒk_Àd_£t
(
RED_LED
);

1064 
	`ƒk_k¥ötf
(
	`PSTR
("TL: send(): Bug discovered in implementation of socketÅype\r\n"));

1068  
NRK_OK
;

1069 
	}
}

1071 
öt8_t
 
	$£t_timeout
(
öt8_t
 
sock_num
, i¡8_à
£cs
, i¡8_à
«no_£cs
)

1073 
	`íãr_¸
(
é_£m
, 15);

1079 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
£cs
 < 0 || 
«no_£cs
 < 0)

1081 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1083 
	`Àave_¸
(
é_£m
, 15);

1084  
NRK_ERROR
;

1087 if(
£cs
 =0 && 
«no_£cs
 == 0)

1089 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1091 
	`Àave_¸
(
é_£m
, 15);

1092  
NRK_ERROR
;

1095 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

1097 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1099 
	`Àave_¸
(
é_£m
, 15);

1100  
NRK_ERROR
;

1105 
sock
[
sock_num
].
timeout
.
£cs
 = secs;

1106 
sock
[
sock_num
].
timeout
.
«no_£cs
 =Çano_secs;

1108 
	`Àave_¸
(
é_£m
, 15);

1112  
NRK_OK
;

1113 
	}
}

1115 
uöt8_t
* 
	$ª˚ive
(
öt8_t
 
sock_num
, i¡8_à*
Àn
, 
uöt16_t
 *
§cAddr
, 
uöt8_t
 *
§cP‹t
, i¡8_à*
rssi
)

1117 
ƒk_sig_mask_t
 
my_sigs
;

1118 
Re˚iveBuf„rUDP
 *
buf
;

1119 
Tøn•‹t_Segmít_UDP
 *
£g
;

1120 
öt8_t
 
rbm_ödex
;

1121 
öt8_t
 
p‹t_ödex
;

1123 
	`íãr_¸
(
bm_£m
, 16);

1124 
	`íãr_¸
(
é_£m
, 16);

1127 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
Àn
 =
NULL
)

1129 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1131 
	`Àave_¸
(
é_£m
, 16);

1132 
	`Àave_¸
(
bm_£m
, 16);

1133  
NULL
;

1136 if–
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

1138 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1140 
	`Àave_¸
(
é_£m
, 16);

1141 
	`Àave_¸
(
bm_£m
, 16);

1142  
NULL
;

1145 if(
sock
[
sock_num
].
pödex
 == -1)

1147 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1149 
	`Àave_¸
(
é_£m
, 16);

1150 
	`Àave_¸
(
bm_£m
, 16);

1151  
NULL
;

1155 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

1160 if(
sock
[
sock_num
].
rbmödex
 == -1)

1162 
	`ƒk_öt_dißbÀ
();

1163 
	`ƒk_Àd_£t
(
RED_LED
);

1165 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

1169 
rbm_ödex
 = 
sock
[
sock_num
].
rbmödex
;

1170 
p‹t_ödex
 = 
sock
[
sock_num
].
pödex
;

1172 if(
sock
[
sock_num
].
timeout
.
£cs
 =0 && sock[sock_num].timeout.
«no_£cs
 == 0)

1176 if(
DEBUG_TL
 == 2)

1177 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): InsideÅhe sectionÅhatÑelatesÅo 'withoutÅimeout'Ñeceive\r\n"));

1180 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 =rx_buf_mgr[rbm_ödex].
cou¡TŸÆ
)

1182 if(
DEBUG_TL
 == 2)

1184 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): No segments inÑeceive queue ofÖort "));

1185 
	`¥ötf
("%d\n", 
p‹ts
[
p‹t_ödex
].
≤o
);

1189 
	`Àave_¸
(
é_£m
, 16);

1190 
	`Àave_¸
(
bm_£m
, 16);

1191 
my_sigs
 = 
	`ƒk_evít_waô
(
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
));

1192 
	`íãr_¸
(
bm_£m
, 16);

1193 
	`íãr_¸
(
é_£m
, 16);

1196 if(
my_sigs
 == 0)

1198 
	`ƒk_öt_dißbÀ
();

1199 
	`ƒk_Àd_£t
(
RED_LED
);

1201 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error callingÇrk_event_wait (withoutÅimeout)\r\n"));

1203 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
) )

1205 if(
DEBUG_TL
 == 2)

1206 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): ReceivedÅhe dataárrived signal\r\n"));

1211 
	`ƒk_öt_dißbÀ
();

1212 
	`ƒk_Àd_£t
(
RED_LED
);

1214 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Unknown signalÑeceived (withoutÅimeout)\r\n"));

1222 if(
DEBUG_TL
 == 2)

1223 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): InsideÅhe sectionÅhatÑelatesÅo 'withÅimeout'Ñeceive\r\n"));

1225 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
)

1227 
	`ƒk_öt_dißbÀ
();

1228 
	`ƒk_Àd_£t
(
RED_LED
);

1230 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error inÑegistering forÇrk_wakeup_signal\r\n"));

1232 if–
	`ƒk_£t_√xt_wakeup
(
sock
[
sock_num
].
timeout
Ë=
NRK_ERROR
)

1234 
	`ƒk_öt_dißbÀ
();

1235 
	`ƒk_Àd_£t
(
RED_LED
);

1237 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): ErrorÑeturned byÇrk_set_next_wakeup\r\n"));

1245 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 =rx_buf_mgr[rbm_ödex].
cou¡TŸÆ
)

1247 if(
DEBUG_TL
 == 2)

1249 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): No segments inÑeceive queue ofÖort "));

1250 
	`¥ötf
("%d\n", 
p‹ts
[
p‹t_ödex
].
≤o
);

1257 
	`Àave_¸
(
é_£m
, 16);

1258 
	`Àave_¸
(
bm_£m
, 16);

1259 
my_sigs
 = 
	`ƒk_evít_waô
(
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
));

1260 
	`íãr_¸
(
bm_£m
, 16);

1261 
	`íãr_¸
(
é_£m
, 16);

1264 if(
my_sigs
 == 0)

1266 
	`ƒk_öt_dißbÀ
();

1267 
	`ƒk_Àd_£t
(
RED_LED
);

1269 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error callingÇrk_event_wait() (withÅimeout)\r\n"));

1271 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
) )

1273 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1274 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1276 
	`ƒk_k¥ötf
(
	`PSTR
("ReceivedÅhe dataárrived signal\r\n"));

1280 if–
my_sigs
 & 
	`SIG
(
ƒk_wakeup_sig«l
) )

1282 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1283 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1285 
	`_ƒk_î∫o_£t
(
SOCKET_TIMEOUT
);

1287 
	`Àave_¸
(
é_£m
, 16);

1288 
	`Àave_¸
(
bm_£m
, 16);

1290  
NULL
;

1294 
	`ƒk_öt_dißbÀ
();

1295 
	`ƒk_Àd_£t
(
RED_LED
);

1296 1Ë
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Unknown signalÑeceived (withÅimeout)\r\n"));

1307 
buf
 = 
	`ªmove_rx_pq
(
rbm_ödex
);

1308 if(
buf
 =
NULL
)

1310 
	`ƒk_öt_dißbÀ
();

1311 
	`ƒk_Àd_£t
(
RED_LED
);

1312 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Bug found in implementation of data_arrived_signal /Ñx buffer mgmt. Exit! \r\n"));

1316 
	`ö£π_rx_fq
(
buf
, 
rbm_ödex
, 
FULL
);

1317 
£g
 = &(
buf
 -> seg);

1320 *
Àn
 = 
£g
 -> 
Àngth
;

1321 if(
§cAddr
 !
NULL
)

1322 *
§cAddr
 = 
buf
 -> srcAddr;

1323 if(
§cP‹t
 !
NULL
)

1324 *
§cP‹t
 = 
£g
 -> srcPort;

1325 if(
rssi
 !
NULL
)

1326 *
rssi
 = 
buf
 ->Ñssi;

1328 
	`Àave_¸
(
é_£m
, 16);

1329 
	`Àave_¸
(
bm_£m
, 16);

1330  
£g
 -> 
d©a
;

1331 
	}
}

1334 
öt8_t
 
	$check_ª˚ive_queue
(
öt8_t
 
sock_num
)

1336 
öt8_t
 
rbm_ödex
;

1337 
öt8_t
 
cou¡1
, 
cou¡2
, 
cou¡3
;

1339 
	`íãr_¸
(
bm_£m
, 17);

1340 
	`íãr_¸
(
é_£m
, 17);

1343 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

1345 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1347 
	`Àave_¸
(
é_£m
, 17);

1348 
	`Àave_¸
(
bm_£m
, 17);

1349  
NRK_ERROR
;

1352 if–(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
()Ë|| (sock[sock_num].
pödex
 == -1) )

1354 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1356 
	`Àave_¸
(
é_£m
, 17);

1357 
	`Àave_¸
(
bm_£m
, 17);

1358  
NRK_ERROR
;

1361 
rbm_ödex
 = 
sock
[
sock_num
].
rbmödex
;

1362 
cou¡1
 = 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
;

1363 
cou¡2
 = 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
;

1364 
cou¡3
 = 
	`gë_ö_¥o˚ss_buf_cou¡
(
rbm_ödex
);

1366 
	`Àave_¸
(
é_£m
, 17);

1367 
	`Àave_¸
(
bm_£m
, 17);

1368  
cou¡1
 - 
cou¡2
 - 
cou¡3
;

1369 
	}
}

1371 
öt8_t
 
	$waô_u¡û_£nd_d⁄e
(
öt8_t
 
sock_num
)

1373 
öt8_t
 
p‹t_ödex
;

1374 
ƒk_sig_mask_t
 
my_sigs
;

1376 
	`íãr_¸
(
bm_£m
, 18);

1377 
	`íãr_¸
(
é_£m
, 18);

1380 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

1382 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1384 
	`Àave_¸
(
é_£m
, 18);

1385 
	`Àave_¸
(
bm_£m
, 18);

1386  
NRK_ERROR
;

1389 if–(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
()Ë|| (sock[sock_num].
pödex
 == -1) )

1391 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1393 
	`Àave_¸
(
é_£m
, 18);

1394 
	`Àave_¸
(
bm_£m
, 18);

1395  
NRK_ERROR
;

1400 
p‹t_ödex
 = 
sock
[
sock_num
].
pödex
;

1402 if(
sock
[
sock_num
].
timeout
.
£cs
 =0 && sock[sock_num].timeout.
«no_£cs
 == 0)

1407 
	`Àave_¸
(
é_£m
, 18);

1408 
	`Àave_¸
(
bm_£m
, 18);

1409 
my_sigs
 = 
	`ƒk_evít_waô
–
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) );

1410 
	`íãr_¸
(
bm_£m
, 18);

1411 
	`íãr_¸
(
é_£m
, 18);

1413 if(
my_sigs
 == 0)

1415 
	`ƒk_öt_dißbÀ
();

1416 
	`ƒk_Àd_£t
(
RED_LED
);

1418 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_event_wait() (withoutÅimeout)\r\n"));

1421 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) )

1423 
	`Àave_¸
(
é_£m
, 18);

1424 
	`Àave_¸
(
bm_£m
, 18);

1425  
NRK_OK
;

1430 
	`ƒk_öt_dißbÀ
();

1431 
	`ƒk_Àd_£t
(
RED_LED
);

1433 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): Unknown signalÑeceived (withoutÅimeout)\r\n"));

1439 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
 )

1441 
	`ƒk_öt_dißbÀ
();

1442 
	`ƒk_Àd_£t
(
RED_LED
);

1444 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑegistering forÇrk_wakeup_signal\r\n"));

1446 if–
	`ƒk_£t_√xt_wakeup
(
sock
[
sock_num
].
timeout
Ë=
NRK_ERROR
)

1448 
	`ƒk_öt_dißbÀ
();

1449 
	`ƒk_Àd_£t
(
RED_LED
);

1451 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_set_next_wakeup()\r\n"));

1455 
	`Àave_¸
(
é_£m
, 18);

1456 
	`Àave_¸
(
bm_£m
, 18);

1457 
my_sigs
 = 
	`ƒk_evít_waô
–
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
) );

1458 
	`íãr_¸
(
bm_£m
, 18);

1459 
	`íãr_¸
(
é_£m
, 18);

1461 if(
my_sigs
 == 0)

1463 
	`ƒk_öt_dißbÀ
();

1464 
	`ƒk_Àd_£t
(
RED_LED
);

1466 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_event_wait()\r\n"));

1469 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) )

1471 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1472 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1474 
	`Àave_¸
(
é_£m
, 18);

1475 
	`Àave_¸
(
bm_£m
, 18);

1476  
NRK_OK
;

1479 if–
my_sigs
 & 
	`SIG
(
ƒk_wakeup_sig«l
) )

1481 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1482 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1483 
	`_ƒk_î∫o_£t
(
SOCKET_TIMEOUT
);

1485 
	`Àave_¸
(
é_£m
, 18);

1486 
	`Àave_¸
(
bm_£m
, 18);

1487  
NRK_ERROR
;

1491 
	`ƒk_öt_dißbÀ
();

1492 
	`ƒk_Àd_£t
(
RED_LED
);

1494 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): Unknown signalÑeceived (withÅimeout)\r\n"));

1499 
	`Àave_¸
(
é_£m
, 18);

1500 
	`Àave_¸
(
bm_£m
, 18);

1501  
NRK_ERROR
;

1502 
	}
}

1504 
	$¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
 *
£g
)

1506 
	`¥ötf
("[%d %d %d] ", 
£g
 -> 
§cP‹t
, seg -> 
de°P‹t
, seg -> 
Àngth
);

1508 
	}
}

1510 
	$¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *
£g
)

1512 
öt8_t
 
i
;

1514 
	`¥öt_£g_hódî
(
£g
);

1515 
i
 = 0; i < 
£g
 -> 
Àngth
; i++)

1516 
	`¥ötf
("%d ", (
£g
 -> 
d©a
)[
i
]);

1518 
	`¥ötf
("\r\n");

1519 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/TransportLayerUDP.h

5 #i‚de‡
_TRANSPORT_LAYER_UDP_H


6 
	#_TRANSPORT_LAYER_UDP_H


	)

8 
	~"NWSèckC⁄fig.h
"

9 
	~<ƒk.h
>

10 
	~<ö˛ude.h
>

11 
	~<°döt.h
>

14 
	#DEBUG_TL
 0

15 

	)

17 
	#SOCK_DGRAM
 1

18 
	#SOCK_SEQPACKET
 2

19 
	#SOCK_RAW
 3

20 
	#SOCK_IPC
 4

21 

	)

22 
	#EPHEMERAL_PORT_NUM_START
 11

23 
	#MAX_PORT_NUM
 255

	)

24 
	#MAX_PORTS
 127

25 

	)

28 
	#SIZE_TRANSPORT_UDP_HEADER
 3

	)

29 
	#MAX_TRANSPORT_UDP_SEG
 (
MAX_APP_PAYLOAD
 + 
SIZE_TRANSPORT_UDP_HEADER
)

	)

31 
	#INVALID_PORT
 0

32 
	#INVALID_PID
 0

33 
	#INVALID_RSSI
 (-120)

	)

39 
uöt8_t
 
	m§cP‹t
;

40 
uöt8_t
 
	mde°P‹t
;

41 
öt8_t
 
	mÀngth
;

42 
uöt8_t
 
	md©a
[
MAX_APP_PAYLOAD
];

44 }
	tTøn•‹t_Segmít_UDP
;

48 
uöt8_t
 
	m≤o
;

49 
ƒk_sig_t
 
	md©a_¨rived_sig«l
;

50 
ƒk_sig_t
 
	m£nd_d⁄e_sig«l
;

52 }
	tP‹t
;

56 
öt8_t
 
	mpödex
;

57 
öt8_t
 
	mrbmödex
;

58 
öt8_t
 
	mpid
;

59 
öt8_t
 
	mty≥
;

60 
ƒk_time_t
 
	mtimeout
;

61 }
	tSockë
;

66 
öôüli£_å™•‹t_œyî_udp
();

75 
öt8_t
 
gë_√xt_avaûabÀ_sockë
();

85 
öt8_t
 
¸óã_sockë
(öt8_à
ty≥
);

96 
uöt8_t
 
gë_√xt_avaûabÀ_p‹t
();

106 
öt8_t
 
check_p‹t_avaûabÀ
(
uöt8_t
 
±
);

116 
assign_p‹t
(
öt8_t
 
pödex
, 
uöt8_t
 
±
);

127 
ªÀa£_p‹t
(
öt8_t
 
pödex
);

136 
öt8_t
 
gë_u«ssig√d_p‹t_ñemít
();

147 
öt8_t
 
gë_u«ssig√d_rbm_ñemít
();

158 
uöt8_t
 
gë_p‹t_num
(
öt8_t
 
sock_num
);

174 
öt8_t
 
böd
(öt8_à
sock_num
, 
öt16_t
 
p‹t
);

193 
öt8_t
 
gë_rx_queue_size
(öt8_à
sock_num
);

208 
öt8_t
 
£t_rx_queue_size
(öt8_à
sock_num
, i¡8_à
size
);

235 
öt8_t
 
ªÀa£_buf„r
(öt8_à
sock_num
, 
uöt8_t
* 
±r
);

254 
öt8_t
 
˛o£_sockë
(öt8_à
sock_num
);

267 
öt8_t
 
is_p‹t_assocüãd
(
öt16_t
 
p‹t
);

278 
öt8_t
 
£nd
(öt8_à
sock_num
, i¡8_à*
±r
, i¡8_à
Àn
, 
öt32_t
 
de°_addr
, 
öt16_t
 
de°_p‹t
, i¡8_à
¥io
);

305 
öt8_t
 
£t_timeout
(öt8_à
sock_num
, i¡8_à
£cs
, i¡8_à
«no_£cs
);

324 
uöt8_t
* 
ª˚ive
(
öt8_t
 
sock_num
, i¡8_à*
Àn
, 
uöt16_t
 *
§cAddr
, uöt8_à*
§cP‹t
, i¡8_à*
rssi
);

350 
öt8_t
 
check_ª˚ive_queue
(öt8_à
sock_num
);

373 
öt8_t
 
waô_u¡û_£nd_d⁄e
(öt8_à
sock_num
);

394 
¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
* 
£g
);

395 
¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *
£g
);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/new_network_stack/NetworkLayer.c

1 
ö˛udes
 
	gAM
;

2 
ö˛udes
 
	gRTChaö
;

4 
	~"/›t/töyos-1.x/c⁄åib/chaöødio/≠ps/Utûs/MesßgeTy≥s.h
"

6 
	#MAX_RESEND
 3

	)

7 
	#PRI
 2

	)

18 
	#DEST_ID
 1

	)

19 
	#REQ_OPEN_TIMEOUT
 500

	)

20 
	#OPEN_WAIT
 200

	)

21 
	#IDLE_MUL
 100

	)

22 
	#DEST_CONTENTION_CHANNEL
 23

	)

24 #ifde‡
SOURCE


25 
	#DROP_THRESHOLD
 3

	)

27 
	#DROP_THRESHOLD
 3

	)

32 
	#NORMAL_CHANNEL
 12

	)

34 #ifde‡
SOURCE


35 
	#RT_CHANNEL
 20

	)

40 
	#IDLE_TIMER
 2000

	)

43 
	#QUE_SIZE
 25

	)

45 
	#FULL_FUNCTION


	)

50 #i‚de‡
SOURCE


51 
	#NEXT_NODE_INDEX
 
MOTE_ID
-2

53 

	)

59 
moduÀ
 
	gRTChaöM
 {

60 
	g¥ovides
 {

61 
öãrÁ˚
 
	gStdC⁄åﬁ
;

62 #ifde‡
FULL_FUNCTION


63 
öãrÁ˚
 
	gRTChaöCål
;

65 
öãrÁ˚
 
Re˚iveMsg
 
as
 
	gRe˚ive
;

66 
öãrÁ˚
 
SídMsg
 
as
 
	gSíd
;

68 
	gu£s
 {

69 
öãrÁ˚
 
StdC⁄åﬁ
 
as
 
	gRadioC⁄åﬁ
;

70 
öãrÁ˚
 
RadioSídMsg
 
as
 
	gRadioSíd
;

71 
öãrÁ˚
 
Re˚iveMsg
 
as
 
	gRadioRe˚ive
;

72 
öãrÁ˚
 
	gMacC⁄åﬁ
;

73 
öãrÁ˚
 
	gLeds
;

74 
öãrÁ˚
 
Timî
 
as
 
	gRTO_Timî
;

75 
öãrÁ˚
 
Timî
 
as
 
	gDATA_Timî
;

76 
öãrÁ˚
 
Timî
 
as
 
	gIDLE_Timî
;

80 
	gim∂emíèti⁄


82 
uöt8_t
 
	gnwk_°©e
;

83 
uöt8_t
 
	gødio_a˘ive
 = 
FALSE
;

85 
MsgQueEÀm
 
	gMsgQue
[
QUE_SIZE
];

86 
uöt8_t
 
	ghMsgQue
,
	gtMsgQue
;

88 
TOS_Msg
 
	gGMsg
;

89 
uöt8_t
 
	gnum_›í
=0, 
	gª£nd
=0;

90 
uöt16_t
 
	g∑ckë_dr›
=0;

96 #i‚de‡
CUSTOM


97 
uöt8_t
 
	groutög_èbÀ_size
 = 9;

100 
uöt8_t
 
	groutög_èbÀ
[] = {1,12,13,14,15,16,17,18,19};

103 #ifde‡
CUSTOM


104 
uöt8_t
 
	groutög_èbÀ_size
 = 1;

105 
uöt8_t
 
	groutög_èbÀ
[] = {5};

109 
uöt8_t
 
	gidÀd_time
 = 0;

110 
boﬁ
 
	g‰eq_ch™ge
=
FALSE
;

111 
uöt8_t
 
	gmyRTCh™√l
;

112 
uöt8_t
 
	gπ_to_ba£_f‹w¨d_ch™√l
;

113 
uöt8_t
 
	gmyNextRTNode
 = 
MOTE_ID
-1;

114 
boﬁ
 
	gªÆtime_comm
;

115 
uöt16_t
 
	gd©a_≥riod
;

116 
uöt32_t
 
	gidÀ_timeout
;

117 
uöt8_t
 
	g£q
 = 0;

120 
uöt8_t
 
	gba£_£q
 = 0;

122 
uöt8_t
 
	g£ndög_£q
 = 0;

124 #ifde‡
SOURCE


125 
SídREQO≥nChaö
();

126 
SídO≥nChaö
();

127 
SídClo£Chaö
();

128 
SèπSídRTD©a
();

131 
SídREPO≥nChaö
(
uöt8_t
 
addr
);

132 
FwdO≥nChaö
();

133 
FwdClo£Chaö
();

134 
FwdRTPkt
(
TOS_MsgPå
 
Msg
, 
uöt16_t
 
addªss
);

137 
boﬁ
 
isQueueFuŒ
();

138 
uöt16_t
 
obèö_√xt_h›
(uöt16_à
addªss
);

139 
uöt8_t
 
gë_up°ªam_√ighb‹
();

140 
uöt8_t
 
gë_down°ªam_√ighb‹
();

142 #ifde‡
BEACON_DEBUG


143 
uöt8_t
 
	gdebug_£nd_suc˚ss
 = 0;

144 
uöt8_t
 
	gdebug_£nd_èsk_po°ed
= 0;

145 
uöt8_t
 
	gdebug_œ°_£¡_£q
 = 0;

146 
uöt8_t
 
	gdebug_£nd_d⁄e_suc˚ss
 = 0;

149 
èsk
 
RadioSídTask
()

151 #ifde‡
BEACON_DEBUG


152 
	gdebug_£nd_èsk_po°ed
++;

155 if(
	ghMsgQue
 !
tMsgQue
){

156 
TOS_Msg
 *
pMsg
=&(
MsgQue
[
hMsgQue
].
msg
);

157 #ifde‡
BEACON_DEBUG


158 
	gpMsg
->
	gd©a
[
PERIODIC_REFRESH_SEQ_INDEX
+2] = 
hMsgQue
;

159 
	gpMsg
->
	gd©a
[
PERIODIC_REFRESH_SEQ_INDEX
+3] = 
tMsgQue
;

160 
	gpMsg
->
	gd©a
[
PERIODIC_REFRESH_SEQ_INDEX
+4] = 
debug_£nd_suc˚ss
;

161 
	gpMsg
->
	gd©a
[
PERIODIC_REFRESH_SEQ_INDEX
+5] = 
debug_£nd_èsk_po°ed
;

163 if(
ˇŒ
 
	gRadioSíd
.
£nd
(
pMsg
,pMsg->
¥i‹ôy
,
MsgQue
[
hMsgQue
].
mac_ty≥
)){

165 
	gª£nd
=0;

167 #ifde‡
BEACON_DEBUG


168 
	gpMsg
->
	gd©a
[
PERIODIC_REFRESH_SEQ_INDEX
+1] = 0xab;

172 
boﬁ
 
isQueueFuŒ
(){

173  (
	gtMsgQue
+1)%
	gQUE_SIZE
==
hMsgQue
;

176 #ifde‡
FULL_FUNCTION


177 
comm™d
 
ªsu…_t
 
	gRTChaöCål
.
O≥nRTChaö
(
uöt16_t
 
≥riod
, 
boﬁ
 
≥rsi°ít
){

178 #ifde‡
SOURCE


179 if(
	gnwk_°©e
==
NWK_NORMAL_OPERATION
){

180 if(
≥rsi°ít
Ë
ªÆtime_comm
=
TRUE
;

181 
	gmyRTCh™√l
=
RT_CHANNEL
;

182 
©omic
 
	gnwk_°©e
=
NWK_REQUESTING_OPEN
;

183 
	gd©a_≥riod
=
≥riod
;

184 
SídREQO≥nChaö
();

185 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
REQ_OPEN_TIMEOUT
);

186  
	gSUCCESS
;

188  
	gFAIL
;

190  
	gSUCCESS
;

194 
comm™d
 
ªsu…_t
 
	gRTChaöCål
.
Clo£RTChaö
(){

196 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

197 
	gnwk_°©e
 = 
NWK_NORMAL_OPERATION
;

198 
	gªÆtime_comm
=
FALSE
;

199  
	gSUCCESS
;

201 
comm™d
 
ªsu…_t
 
	gRTChaöCål
.
£ndRTMsg
(
TOS_MsgPå
 
pMsg
){

202 
TOS_MsgPå
 
	gpQue
=&(
MsgQue
[
tMsgQue
].
msg
);

203 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)(
pQue
->
d©a
);

205 if(
	gnwk_°©e
==
NWK_RTCHAIN_OPERATION
) {

206 if(
isQueueFuŒ
()){

207 #ifde‡
RTCHAIN_DEBUG


208 
ˇŒ
 
Leds
.
ªdOn
();

210  
	gFAIL
;

212 
mem˝y
(
pQue
, 
pMsg
, (
TOS_Msg
));

214 
	gpQue
->
	gÀngth
 = 
DATA_LENGTH
;

215 
	gpQue
->
	ggroup
 = 
TOS_AM_GROUP
;

216 
	gpQue
->
	g¥i‹ôy
=
PRI
;

217 
	gpQue
->
	gaddr
=
myNextRTNode
;

219 if(
	gmyNextRTNode
 =
DEST_ID
){

220 
ˇŒ
 
MacC⁄åﬁ
.
£tCh™√l2
(
DEST_CONTENTION_CHANNEL
);

223 
	gpQue
->
	gty≥
=
PKT_REALTIME
;

224 
	gpRTMsg
->
	gcmd
=
RT_DATA
;

225 
	gpRTMsg
->
	g§c
=
MOTE_ID
;

226 
	gpRTMsg
->
	g£q
=++
£q
;

227 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtBB
;

229 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

230 
po°
 
RadioSídTask
();

231 #ifde‡
RTCHAIN_DEBUG


232 
ˇŒ
 
	gLeds
.
gªíToggÀ
();

234  
	gSUCCESS
;

236  
	gFAIL
;

239 #ifde‡
SOURCE


240 
èsk
 
MaöTask
(){

242 if(
	gnwk_°©e
==
NWK_NORMAL_OPERATION
){

243 
ªÆtime_comm
=
TRUE
;

244 
	gmyRTCh™√l
=
RT_CHANNEL
;

245 
©omic
 
	gnwk_°©e
=
NWK_REQUESTING_OPEN
;

246 
SídREQO≥nChaö
();

247 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
REQ_OPEN_TIMEOUT
);

248 #ifde‡
RTCHAIN_DEBUG


249 
ˇŒ
 
	gLeds
.
gªíOff
();

250 
ˇŒ
 
	gLeds
.
yñlowOn
();

251 
ˇŒ
 
	gLeds
.
ªdOff
();

258 
SídREQO≥nChaö
(){

259 
TOS_Msg
 *
	gpMsg
=&(
MsgQue
[
tMsgQue
].
msg
);

260 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)(
pMsg
->
d©a
);

261 
O≥nMsg
 *
	gpO≥n
=(O≥nMsg*)(
pRTMsg
->
d©a
);

262 if(
isQueueFuŒ
()){

263 #ifde‡
RTCHAIN_DEBUG


264 
ˇŒ
 
	gLeds
.
ªdOn
();

270 
	gpMsg
->
	gÀngth
 = 
RTMSG_SIZE
;

271 
	gpMsg
->
	ggroup
 = 
TOS_AM_GROUP
;

272 
	gpMsg
->
	g¥i‹ôy
=
PRI
;

273 
	gpMsg
->
	gaddr
=
TOS_BCAST_ADDR
;

274 
	gpMsg
->
	gty≥
=
PKT_REALTIME
;

276 
	gpRTMsg
->
	gcmd
=
REQ_OPEN
;

277 
	gpRTMsg
->
	g§c
=
MOTE_ID
;

278 
	gpO≥n
->
	gde°
=
DEST_ID
;

280 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtBB
;

282 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

283 
po°
 
RadioSídTask
();

287 #ifde‡
SOURCE


289 
SídO≥nChaö
(){

290 
TOS_Msg
 *
	gpMsg
=&(
MsgQue
[
tMsgQue
].
msg
);

291 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)
pMsg
->
d©a
;

292 
O≥nMsg
 *
	gpO≥n
=(O≥nMsg*)
pRTMsg
->
d©a
;

294 if(
isQueueFuŒ
()){

296 #ifde‡
RTCHAIN_DEBUG


297 
ˇŒ
 
	gLeds
.
ªdOn
();

302 
	gpMsg
->
	gÀngth
 = 
RTMSG_SIZE
;

303 
	gpMsg
->
	ggroup
 = 
TOS_AM_GROUP
;

305 
	gpMsg
->
	g¥i‹ôy
=1;

306 
	gpMsg
->
	gaddr
=
myNextRTNode
;

307 
	gpMsg
->
	gty≥
=
PKT_REALTIME
;

309 
	gpRTMsg
->
	gcmd
=
OPEN_CHAIN
;

310 
	gpRTMsg
->
	g§c
=
MOTE_ID
;

311 
	gpO≥n
->
	gde°
=
DEST_ID
;

312 
	gpO≥n
->
	gnum
=
num_›í
++;

313 
	gpO≥n
->
	g‰eq_ch™ge
=0;

314 
	gpO≥n
->
	gch™√l
=
RT_CHANNEL
;

315 
	gpO≥n
->
	gd©a_≥riod
=
d©a_≥riod
;

317 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtBB
;

319 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

320 
po°
 
RadioSídTask
();

323 
SídClo£Chaö
(){

324 
TOS_Msg
 *
	gpMsg
=&(
MsgQue
[
tMsgQue
].
msg
);

325 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)(
pMsg
->
d©a
);

326 
O≥nMsg
 *
	gpO≥n
=(O≥nMsg*)(
pRTMsg
->
d©a
);

327 if(
isQueueFuŒ
()){

328 #ifde‡
RTCHAIN_DEBUG


329 
ˇŒ
 
	gLeds
.
ªdOn
();

334 
	gpMsg
->
	gÀngth
 = 
RTMSG_SIZE
;

335 
	gpMsg
->
	ggroup
 = 
TOS_AM_GROUP
;

336 
	gpMsg
->
	g¥i‹ôy
=
PRI
;

337 
	gpMsg
->
	gaddr
=
myNextRTNode
;

338 
	gpMsg
->
	gty≥
=
PKT_REALTIME
;

340 
	gpRTMsg
->
	gcmd
=
CLOSE_CHAIN
;

341 
	gpRTMsg
->
	g§c
=
MOTE_ID
;

342 
	gpO≥n
->
	gde°
=
DEST_ID
;

344 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtBB
;

346 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

347 
po°
 
RadioSídTask
();

350 #i‚de‡
FULL_FUNCTION


351 
SèπSídRTD©a
(){

352 
ˇŒ
 
	gDATA_Timî
.
°¨t
(
TIMER_REPEAT
,
d©a_≥riod
);

382 
SídREPO≥nChaö
(
uöt8_t
 
addr
){

383 
TOS_Msg
 *
	gpMsg
=&(
MsgQue
[
tMsgQue
].
msg
);

384 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)(
pMsg
->
d©a
);

385 
O≥nMsg
 *
	gpO≥n
=(O≥nMsg*)(
pRTMsg
->
d©a
);

386 if(
isQueueFuŒ
()){

387 #ifde‡
RTCHAIN_DEBUG


388 
ˇŒ
 
	gLeds
.
ªdOn
();

393 
	gpMsg
->
	gÀngth
 = 
RTMSG_SIZE
;

394 
	gpMsg
->
	ggroup
 = 
TOS_AM_GROUP
;

395 
	gpMsg
->
	gaddr
=
addr
;

396 
	gpMsg
->
	gty≥
=
PKT_REALTIME
;

398 
	gpRTMsg
->
	gcmd
=
REP_OPEN
;

399 
	gpRTMsg
->
	g§c
=
MOTE_ID
;

401 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtCSMA
;

403 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

404 
po°
 
RadioSídTask
();

407 
FwdO≥nChaö
(){

408 
TOS_Msg
 *
	gpMsg
=&(
MsgQue
[
tMsgQue
].
msg
);

409 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)(
pMsg
->
d©a
);

410 
O≥nMsg
 *
	gpO≥n
=(O≥nMsg*)(
pRTMsg
->
d©a
);

411 if(
isQueueFuŒ
()){

412 #ifde‡
RTCHAIN_DEBUG


413 
ˇŒ
 
	gLeds
.
ªdOn
();

418 
	gpMsg
->
	gÀngth
 = 
RTMSG_SIZE
;

419 
	gpMsg
->
	ggroup
 = 
TOS_AM_GROUP
;

421 
	gpMsg
->
	g¥i‹ôy
=
MOTE_ID
%7+2;

423 
	gpMsg
->
	gaddr
=
obèö_√xt_h›
(
DEST_ID
);

424 
	gpMsg
->
	gty≥
=
PKT_REALTIME
;

426 
	gpRTMsg
->
	gcmd
=
OPEN_CHAIN
;

427 
	gpRTMsg
->
	g§c
=
MOTE_ID
;

428 
	gpO≥n
->
	gde°
=
DEST_ID
;

429 
	gpO≥n
->
	g‰eq_ch™ge
=(
‰eq_ch™ge
+1)%2;

431 
	gpO≥n
->
	gch™√l
=
‰eq_ch™ge
?
myRTCh™√l
+1:myRTChannel;

432 
	gpO≥n
->
	gd©a_≥riod
=
d©a_≥riod
;

434 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtBB
;

436 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

437 
po°
 
RadioSídTask
();

440 
FwdClo£Chaö
(){

441 
TOS_Msg
 *
	gpMsg
=&(
MsgQue
[
tMsgQue
].
msg
);

442 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)(
pMsg
->
d©a
);

443 
O≥nMsg
 *
	gpO≥n
=(O≥nMsg*)(
pRTMsg
->
d©a
);

444 if(
isQueueFuŒ
()){

445 #ifde‡
RTCHAIN_DEBUG


446 
ˇŒ
 
	gLeds
.
ªdOn
();

451 
	gpMsg
->
	gÀngth
 = 
RTMSG_SIZE
;

452 
	gpMsg
->
	ggroup
 = 
TOS_AM_GROUP
;

454 
	gpMsg
->
	g¥i‹ôy
=
MOTE_ID
%7+2;

456 
	gpMsg
->
	gaddr
=
obèö_√xt_h›
(
DEST_ID
);

457 
	gpMsg
->
	gty≥
=
PKT_REALTIME
;

459 
	gpRTMsg
->
	gcmd
=
CLOSE_CHAIN
;

460 
	gpRTMsg
->
	g§c
=
MOTE_ID
;

461 
	gpO≥n
->
	gde°
=
DEST_ID
;

463 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtBB
;

465 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

466 
po°
 
RadioSídTask
();

469 
FwdRTPkt
(
TOS_MsgPå
 
Msg
, 
uöt16_t
 
addªss
){

470 
TOS_Msg
 *
	gpMsg
=&(
MsgQue
[
tMsgQue
].
msg
);

471 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)(
pMsg
->
d©a
);

472 
O≥nMsg
 *
	gpO≥n
=(O≥nMsg*)(
pRTMsg
->
d©a
);

473 if(
isQueueFuŒ
()){

474 #ifde‡
RTCHAIN_DEBUG


475 
ˇŒ
 
	gLeds
.
ªdOn
();

480 
	gpMsg
->
	gÀngth
 = 
Msg
->
Àngth
;

481 
	gpMsg
->
	ggroup
 = 
TOS_AM_GROUP
;

483 
	gpMsg
->
	g¥i‹ôy
=
‰eq_ch™ge
?
Msg
->
¥i‹ôy
-1:Msg->priority+1;

484 
	gpMsg
->
	gaddr
=
addªss
;

485 
	gpMsg
->
	gty≥
=
PKT_REALTIME
;

487 
mem˝y
(
pMsg
->
d©a
,
Msg
->d©a,Msg->
Àngth
);

488 
	gpRTMsg
->
	gcmd
=
RT_DATA
;

489 
	gpRTMsg
->
	g§c
=
MOTE_ID
;

491 if(
	gaddªss
 !
DEST_ID
){

492 if(
‰eq_ch™ge
){

494 
ˇŒ
 
MacC⁄åﬁ
.
£tCh™√l2
(
π_to_ba£_f‹w¨d_ch™√l
);

498 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
DEST_CONTENTION_CHANNEL
);

501 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtBB
;

503 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

504 
po°
 
RadioSídTask
();

510 
FwdN‹mÆPkt
(
TOS_MsgPå
 
pMsg
){

512 
TOS_Msg
 *
	gpQue
=&(
MsgQue
[
tMsgQue
].
msg
);

513 
N‹mÆMsg
 *
	gpN‹mÆ
=(N‹mÆMsg*)(
pQue
->
d©a
);

514 if(
isQueueFuŒ
()){

515 #ifde‡
RTCHAIN_DEBUG


516 
ˇŒ
 
	gLeds
.
ªdOn
();

521 
	gpQue
->
	gÀngth
 = 
pMsg
->
Àngth
;

522 
	gpQue
->
	ggroup
 = 
TOS_AM_GROUP
;

523 
	gpQue
->
	g¥i‹ôy
=0;

524 if(
	gpMsg
->
	gd©a
[
NORMAL_DATA_TYPE_INDEX
] =
PERIODIC_REFRESH
){

525 if(
pMsg
->
addr
 =
TOS_BCAST_ADDR
){

526 
pMsg
->
d©a
[
PERIODIC_REFRESH_RSSI_INDEX
]ıMsg->
°ªngth
;

527 
	gpMsg
->
	gd©a
[
PERIODIC_REFRESH_LOC_INDEX
]=
MOTE_ID
;

530 
	gpQue
->
	gaddr
=
obèö_√xt_h›
–((
N‹mÆMsg
*)(
pMsg
->
d©a
))->
de°
 );

531 
	gpQue
->
	gty≥
=
PKT_NORMAL
;

533 
mem˝y
(
pQue
->
d©a
,
pMsg
->d©a,pMsg->
Àngth
);

534 
	gpN‹mÆ
->
	g§c
=
MOTE_ID
;

536 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtCSMA
;

538 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

539 
po°
 
RadioSídTask
();

542 
comm™d
 
ªsu…_t
 
	gSíd
.
£nd
(
uöt16_t
 
addªss
, 
uöt8_t
 
Àngth
, 
TOS_MsgPå
 
pMsg
){

543 
TOS_MsgPå
 
	gpQue
=&(
MsgQue
[
tMsgQue
].
msg
);

544 
N‹mÆMsg
 *
	gpN‹mÆ
=(N‹mÆMsg*)(
pQue
->
d©a
);

546 if(
	gnwk_°©e
==
NWK_NORMAL_OPERATION
) {

547 if(
isQueueFuŒ
()){

548 #ifde‡
RTCHAIN_DEBUG


549 
ˇŒ
 
Leds
.
ªdOn
();

551  
	gFAIL
;

553 
mem˝y
(
pQue
, 
pMsg
, (
TOS_Msg
));

555 
	gpQue
->
	gÀngth
 = 
Àngth
 + 
NWK_NORMAL_HEADER_SIZE
;

556 
	gpQue
->
	ggroup
 = 
TOS_AM_GROUP
;

557 
	gpQue
->
	g¥i‹ôy
=0;

560 
	gpQue
->
	gaddr
=
obèö_√xt_h›
(
addªss
);

561 
	gpQue
->
	gty≥
=
PKT_NORMAL
;

562 
	gpN‹mÆ
->
	g§c
=
MOTE_ID
;

563 
	gpN‹mÆ
->
	gde°
=
addªss
;

564 
	gpN‹mÆ
->
	g£q
=++
£ndög_£q
;

565 
	gba£_£q
 = 
pN‹mÆ
->
£q
;

566 
	gMsgQue
[
tMsgQue
].
	gmac_ty≥
=
mtCSMA
;

568 
	gtMsgQue
=(
tMsgQue
+1)%
QUE_SIZE
;

569 
po°
 
RadioSídTask
();

570  
	gSUCCESS
;

572  
	gFAIL
;

575 
comm™d
 
ªsu…_t
 
	gStdC⁄åﬁ
.
öô
() {

576 
ªsu…_t
 
	gok1
,
	gok2
, 
	gok3
;

578 
	gok2
 = 
ˇŒ
 
RadioC⁄åﬁ
.
öô
();

579 
	gok3
 = 
ˇŒ
 
Leds
.
öô
();

581 
dbg
(
DBG_BOOT
, "TOSBase initialized\n");

582  
rcomböe3
(
ok1
, 
ok2
, 
ok3
);

585 
comm™d
 
ªsu…_t
 
	gStdC⁄åﬁ
.
°¨t
() {

586 
ˇŒ
 
	gRadioC⁄åﬁ
.
°¨t
();

588 
	gnwk_°©e
 = 
NWK_NORMAL_OPERATION
;

589 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

591 #i‚de‡
SOURCE


592 
ˇŒ
 
	gIDLE_Timî
.
°¨t
(
TIMER_REPEAT
,
IDLE_TIMER
);

596 #i‚de‡
FULL_FUNCTION


597 #ifde‡
SOURCE


598 
po°
 
MaöTask
();

602 #ifde‡
RTCHAIN_DEBUG


603 
ˇŒ
 
	gLeds
.
gªíOn
();

604 
ˇŒ
 
	gLeds
.
yñlowOff
();

605 
ˇŒ
 
	gLeds
.
ªdOff
();

607 
	g£q
=0;

608 
	ghMsgQue
 = 0;

609 
	gtMsgQue
 = 0;

610  
	gSUCCESS
;

613 
comm™d
 
ªsu…_t
 
	gStdC⁄åﬁ
.
°›
() {

614 
ªsu…_t
 
	gok1
, 
	gok2
;

615 
ˇŒ
 
	gRTO_Timî
.
°›
();

616 
ˇŒ
 
	gDATA_Timî
.
°›
();

617 
	gok2
 = 
ˇŒ
 
RadioC⁄åﬁ
.
°›
();

618  
rcomböe
(
ok1
, 
ok2
);

621 
evít
 
TOS_MsgPå
 
	gRadioRe˚ive
.
ª˚ive
(TOS_MsgPå 
Msg
)

623 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)
Msg
->
d©a
;

624 
N‹mÆMsg
 *
	gpMsg
=(N‹mÆMsg*)
Msg
->
d©a
;

625 
O≥nMsg
 *
	gpO≥n
=(O≥nMsg*)
pRTMsg
->
d©a
;

626 
	gidÀd_time
=0;

627 
	gødio_a˘ive
 = 
TRUE
;

629 if(
	gMsg
->
	g¸c
){

631 if(
	gMsg
->
	gaddr
!=
MOTE_ID
 && 
Msg
->
addr
!=
TOS_BCAST_ADDR
){

632  
Msg
;

635 if(
	gMsg
->
	gty≥
==
PKT_NORMAL
 && 
nwk_°©e
==
NWK_NORMAL_OPERATION
){

636 if(
MOTE_ID
==
pMsg
->
de°
){

638 if(
pMsg
->
£q
 =
ba£_£q
){

639 if(
Msg
->
addr
 =
MOTE_ID
){

640 
sig«l
 
Re˚ive
.
ª˚ive
(
Msg
);

643 if((
	gMsg
->
	gaddr
 =
TOS_BCAST_ADDR
)&&(
pMsg
->
£q
 !
ba£_£q
)){

644 
ba£_£q
 = 
pMsg
->
£q
;

645 if((
	gMOTE_ID
==
DEST_ID
)&&(
Msg
->
d©a
[
NORMAL_DATA_TYPE_INDEX
] =
PERIODIC_REFRESH
)){

646 
Msg
->
d©a
[
PERIODIC_REFRESH_RSSI_INDEX
]=Msg->
°ªngth
;

647 
	gMsg
->
	gd©a
[
PERIODIC_REFRESH_LOC_INDEX
]=
MOTE_ID
;

649 
sig«l
 
	gRe˚ive
.
ª˚ive
(
Msg
);

655 if(
	gpMsg
->
	g£q
!=
ba£_£q
){

657 #i‚de‡
SOURCE


658 
ˇŒ
 
Leds
.
gªíToggÀ
();

659 
	gba£_£q
=
pMsg
->
£q
;

660 
FwdN‹mÆPkt
(
Msg
);

664 if(
	gMsg
->
	gaddr
 !
TOS_BCAST_ADDR
){

665 
FwdN‹mÆPkt
(
Msg
);

671 i‡(
	gMsg
->
	gty≥
==
PKT_REALTIME
) {

672 
pRTMsg
->
cmd
){

673 #ifde‡
SOURCE


675 
REP_OPEN
:

676 if(
nwk_°©e
==
NWK_REQUESTING_OPEN
){

677 
©omic
 
nwk_°©e
=
NWK_OPENING_RTCHAIN
;

678 
ˇŒ
 
	gRTO_Timî
.
°›
();

679 
	gmyNextRTNode
=
pRTMsg
->
§c
;

680 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
OPEN_WAIT
);

683 #ifde‡
RTCHAIN_DEBUG


689 
	gREQ_OPEN
:

690 if(
nwk_°©e
==
NWK_NORMAL_OPERATION
){

692 
SídREPO≥nChaö
(
pRTMsg
->
§c
);

694 #ifde‡
RTCHAIN_DEBUG


695 
ˇŒ
 
	gLeds
.
yñlowToggÀ
();

698 
	gOPEN_CHAIN
:

699 if(
nwk_°©e
==
NWK_NORMAL_OPERATION
){

702 if(
obèö_√xt_h›
(
DEST_ID
)==DEST_ID){

703 
‰eq_ch™ge
 = 
TRUE
;

704 
	gπ_to_ba£_f‹w¨d_ch™√l
 = 
DEST_CONTENTION_CHANNEL
;

707 
	gπ_to_ba£_f‹w¨d_ch™√l
 = 
pO≥n
->
ch™√l
;

708 
	g‰eq_ch™ge
=
pO≥n
->
‰eq_ch™ge
;

713 
	gmyRTCh™√l
=
pO≥n
->
ch™√l
;

714 
	gd©a_≥riod
=
pO≥n
->
d©a_≥riod
;

716 
	gidÀ_timeout
=
d©a_≥riod
*
IDLE_MUL
;

718 if(
	gMOTE_ID
!=
DEST_ID
) {

719 
©omic
 
nwk_°©e
=
NWK_OPENING_RTCHAIN
;

720 
FwdO≥nChaö
();

725 
©omic
 
	gnwk_°©e
=
NWK_RTCHAIN_OPERATION
;

727 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
DEST_CONTENTION_CHANNEL
);

728 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
idÀ_timeout
);

729 
	g£q
=0;

731 #ifde‡
RTCHAIN_DEBUG


732 
ˇŒ
 
	gLeds
.
gªíOn
();

733 
ˇŒ
 
	gLeds
.
yñlowOn
();

734 
ˇŒ
 
	gLeds
.
ªdOff
();

739 
	gCLOSE_CHAIN
:

740 if(
nwk_°©e
==
NWK_RTCHAIN_OPERATION
){

741 
©omic
 
nwk_°©e
=
NWK_CLOSING_RTCHAIN
;

742 if(
	gMOTE_ID
!=
DEST_ID
){

743 
FwdClo£Chaö
();

747 
	gRT_DATA
:

748 if(
nwk_°©e
==
NWK_RTCHAIN_OPERATION
){

749 
ˇŒ
 
RTO_Timî
.
°›
();

750 if(
	g£q
!=
pRTMsg
->
£q
){

751 
£q
=
pRTMsg
->seq;

752 if(
	gMOTE_ID
==
DEST_ID
){

754 
sig«l
 
Re˚ive
.
ª˚ive
(
Msg
);

755 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
idÀ_timeout
);

759 
FwdRTPkt
(
Msg
, 
obèö_√xt_h›
(
DEST_ID
));

763 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
idÀ_timeout
);

765 #ifde‡
RTCHAIN_DEBUG


766 
ˇŒ
 
	gLeds
.
gªíToggÀ
();

773  
	gMsg
;

776  
	gMsg
;

779 
evít
 
ªsu…_t
 
	gRadioSíd
.
£ndD⁄e
(
TOS_MsgPå
 
Msg
,Ñesu…_à
suc˚ss
) {

780 
RTChaöMsg
 *
	gpRTMsg
=(RTChaöMsg*)(
Msg
->
d©a
);

784 if(
	gsuc˚ss
==
SUCCESS
) {

785 if(
Msg
->
ty≥
==
PKT_REALTIME
) {

786 i‡(!
Msg
->
ack
) {

787 if(
ª£nd
++<
MAX_RESEND
){

789 
nwk_°©e
){

790 
NWK_NORMAL_OPERATION
:

791 if(
pRTMsg
->
cmd
==
REP_OPEN
 ||ÖRTMsg->cmd==
NORMAL_DATA
 ){

792 
ˇŒ
 
RadioSíd
.
£nd
(
Msg
,Msg->
¥i‹ôy
,
mtCSMA
);

793  
	gSUCCESS
;

796 
	gNWK_OPENING_RTCHAIN
:

797 if(
pRTMsg
->
cmd
==
OPEN_CHAIN
){

798 
ˇŒ
 
RadioSíd
.
£nd
(
Msg
,Msg->
¥i‹ôy
,
mtBB
);

799  
	gSUCCESS
;

802 
	gNWK_RTCHAIN_OPERATION
:

803 if(
pRTMsg
->
cmd
==
RT_DATA
){

804 
ˇŒ
 
RadioSíd
.
£nd
(
Msg
,Msg->
¥i‹ôy
,
mtBB
);

805  
	gSUCCESS
;

808 
	gNWK_CLOSING_RTCHAIN
:

809 if(
pRTMsg
->
cmd
==
CLOSE_CHAIN
){

810 
ˇŒ
 
RadioSíd
.
£nd
(
Msg
,Msg->
¥i‹ôy
,
mtBB
);

811  
	gSUCCESS
;

818 
	gnwk_°©e
){

819 
	gNWK_OPENING_RTCHAIN
:

820 #ifde‡
SOURCE


826 
©omic
 {

827 
nwk_°©e
=
NWK_REQUESTING_OPEN
;

829 
	ghMsgQue
=
tMsgQue
=0;

833 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
REQ_OPEN_TIMEOUT
);

834 #ifde‡
RTCHAIN_DEBUG


835 
ˇŒ
 
	gLeds
.
yñlowOff
();

836 
ˇŒ
 
	gLeds
.
ªdOff
();

837 
ˇŒ
 
	gLeds
.
gªíOn
();

839  
	gSUCCESS
;

842 
©omic
 
	gnwk_°©e
=
NWK_NORMAL_OPERATION
;

843 #ifde‡
RTCHAIN_DEBUG


844 
ˇŒ
 
	gLeds
.
yñlowOff
();

845 
ˇŒ
 
	gLeds
.
ªdOff
();

846 
ˇŒ
 
	gLeds
.
gªíOn
();

850 
	gNWK_RTCHAIN_OPERATION
:

851 #ifde‡
SOURCE


852 #ifde‡
FULL_FUNCTION


853 
sig«l
 
RTChaöCål
.
£ndRTD⁄e
(&
MsgQue
[
hMsgQue
].
msg
, 
FALSE
);

855 if(
	g∑ckë_dr›
++>
	gDROP_THRESHOLD
){

861 #ifde‡
FULL_FUNCTION


862 
sig«l
 
	gRTChaöCål
.
RTChaöSètus
(
CHAIN_CLOSED
);

864 i‡(
	gªÆtime_comm
){

866 
	g©omic
 {

867 
	gnwk_°©e
=
NWK_REQUESTING_OPEN
;

868 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

870 
	ghMsgQue
=
tMsgQue
=0;

874 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
REQ_OPEN_TIMEOUT
);

875 #ifde‡
RTCHAIN_DEBUG


876 
ˇŒ
 
	gLeds
.
yñlowOff
();

877 
ˇŒ
 
	gLeds
.
ªdOff
();

878 
ˇŒ
 
	gLeds
.
gªíOn
();

880  
	gSUCCESS
;

883 
©omic
 
	gnwk_°©e
=
NWK_NORMAL_OPERATION
;

884 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

886 
	ghMsgQue
=
tMsgQue
=0;

887 #ifde‡
RTCHAIN_DEBUG


888 
ˇŒ
 
	gLeds
.
yñlowOff
();

889 
ˇŒ
 
	gLeds
.
ªdOff
();

890 
ˇŒ
 
	gLeds
.
gªíOn
();

897 if(
	g∑ckë_dr›
++>
	gDROP_THRESHOLD
){

898 
©omic
 
	gnwk_°©e
=
NWK_NORMAL_OPERATION
;

899 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

900 #ifde‡
RTCHAIN_DEBUG


901 
ˇŒ
 
	gLeds
.
yñlowOff
();

902 
ˇŒ
 
	gLeds
.
ªdOff
();

903 
ˇŒ
 
	gLeds
.
gªíOn
();

907 if(
	g‰eq_ch™ge
){

908 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
myRTCh™√l
);

910 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
idÀ_timeout
);

914 
	gNWK_CLOSING_RTCHAIN
:

915 #ifde‡
SOURCE


918 
©omic
 
nwk_°©e
=
NWK_REQUESTING_OPEN
;

919 
SídREQO≥nChaö
();

920 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
REQ_OPEN_TIMEOUT
);

921 #ifde‡
RTCHAIN_DEBUG


922 
ˇŒ
 
	gLeds
.
yñlowOff
();

923 
ˇŒ
 
	gLeds
.
ªdOff
();

924 
ˇŒ
 
	gLeds
.
gªíOn
();

926  
	gSUCCESS
;

929 
©omic
 
	gnwk_°©e
=
NWK_NORMAL_OPERATION
;

930 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

931 #ifde‡
RTCHAIN_DEBUG


932 
ˇŒ
 
	gLeds
.
yñlowOff
();

933 
ˇŒ
 
	gLeds
.
ªdOff
();

934 
ˇŒ
 
	gLeds
.
gªíOn
();

938 
©omic
 
	gnwk_°©e
=
NWK_NORMAL_OPERATION
;

939 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

940 #ifde‡
RTCHAIN_DEBUG


941 
ˇŒ
 
	gLeds
.
yñlowOff
();

942 
ˇŒ
 
	gLeds
.
ªdOff
();

943 
ˇŒ
 
	gLeds
.
gªíOn
();

951 
	gnwk_°©e
) {

952 
	gNWK_OPENING_RTCHAIN
:

953 if(
pRTMsg
->
cmd
==
OPEN_CHAIN
){

954 
©omic
 
nwk_°©e
=
NWK_RTCHAIN_OPERATION
;

955 
	g£q
=0;

960 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
myRTCh™√l
);

961 #ifde‡
RTCHAIN_DEBUG


962 
ˇŒ
 
	gLeds
.
gªíOn
();

963 
ˇŒ
 
	gLeds
.
yñlowOn
();

964 
ˇŒ
 
	gLeds
.
ªdOff
();

967 
	g∑ckë_dr›
=0;

968 #ifde‡
SOURCE


969 #ifde‡
FULL_FUNCTION


970 
sig«l
 
	gRTChaöCål
.
›íD⁄e
(
TRUE
,&
myNextRTNode
);

972 
SèπSídRTD©a
();

974  
	gSUCCESS
;

977 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
idÀ_timeout
);

981 
	gNWK_RTCHAIN_OPERATION
:

982 
∑ckë_dr›
=0;

983 #ifde‡
SOURCE


984 #ifde‡
FULL_FUNCTION


985 
sig«l
 
	gRTChaöCål
.
£ndRTD⁄e
(&
MsgQue
[
tMsgQue
].
msg
, 
TRUE
);

990 if(
	g‰eq_ch™ge
){

991 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
myRTCh™√l
);

994 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
idÀ_timeout
);

997 
	gNWK_CLOSING_RTCHAIN
:

998 #ifde‡
SOURCE


1001 
©omic
 
nwk_°©e
=
NWK_REQUESTING_OPEN
;

1002 
SídREQO≥nChaö
();

1003 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
REQ_OPEN_TIMEOUT
);

1004 #ifde‡
RTCHAIN_DEBUG


1005 
ˇŒ
 
	gLeds
.
yñlowOff
();

1006 
ˇŒ
 
	gLeds
.
ªdOff
();

1007 
ˇŒ
 
	gLeds
.
gªíOn
();

1009  
	gSUCCESS
;

1012 
©omic
 
	gnwk_°©e
=
NWK_NORMAL_OPERATION
;

1013 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

1014 #ifde‡
RTCHAIN_DEBUG


1015 
ˇŒ
 
	gLeds
.
yñlowOff
();

1016 
ˇŒ
 
	gLeds
.
ªdOff
();

1017 
ˇŒ
 
	gLeds
.
gªíOn
();

1021 
©omic
 
	gnwk_°©e
=
NWK_NORMAL_OPERATION
;

1022 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

1023 #ifde‡
RTCHAIN_DEBUG


1024 
ˇŒ
 
	gLeds
.
yñlowOff
();

1025 
ˇŒ
 
	gLeds
.
ªdOff
();

1026 
ˇŒ
 
	gLeds
.
gªíOn
();

1034 if(
	gMsg
->
	gack
 || Msg->
	gaddr
==
TOS_BCAST_ADDR
) {

1035 
sig«l
 
Síd
.
£ndD⁄e
(
Msg
, 
SUCCESS
);

1043 #ifde‡
RTCHAIN_DEBUG


1044 
ˇŒ
 
	gLeds
.
ªdOn
();

1048 #ifde‡
BEACON_DEBUG


1049 
	gdebug_£nd_suc˚ss
++;

1051 if(
	gdebug_œ°_£¡_£q
 =
Msg
->
d©a
[
PERIODIC_REFRESH_SEQ_INDEX
+5]){

1052 
ˇŒ
 
Leds
.
ªdOn
();

1053 if(
	gdebug_£nd_d⁄e_suc˚ss
 !
suc˚ss
){

1054 
ˇŒ
 
Leds
.
yñlowOn
();

1057 
	gdebug_£nd_d⁄e_suc˚ss
 = 
suc˚ss
;

1058 
	gdebug_œ°_£¡_£q
 = 
Msg
->
d©a
[
PERIODIC_REFRESH_SEQ_INDEX
+5];

1062 if(
	ghMsgQue
 =
tMsgQue
){

1063  
SUCCESS
;

1065 if((
	ghMsgQue
=(
hMsgQue
+1)%
QUE_SIZE
)!=
tMsgQue
){

1066 
po°
 
RadioSídTask
();

1068  
	gSUCCESS
;

1072 
evít
 
ªsu…_t
 
	gRTO_Timî
.
fúed
(){

1073 
ˇŒ
 
	gLeds
.
ªdToggÀ
();

1074 
	gnwk_°©e
){

1075 #ifde‡
SOURCE


1076 
	gNWK_REQUESTING_OPEN
:

1080 
SídREQO≥nChaö
();

1081 
ˇŒ
 
	gRTO_Timî
.
°¨t
(
TIMER_ONE_SHOT
,
REQ_OPEN_TIMEOUT
);

1083 #ifde‡
RTCHAIN_DEBUG


1084 
ˇŒ
 
	gLeds
.
ªdToggÀ
();

1087 
	gNWK_OPENING_RTCHAIN
:

1088 
SídO≥nChaö
();

1091 
	gNWK_RTCHAIN_OPERATION
:

1095 
©omic
 
nwk_°©e
=
NWK_NORMAL_OPERATION
;

1097 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

1098 #ifde‡
RTCHAIN_DEBUG


1099 
ˇŒ
 
	gLeds
.
yñlowOff
();

1100 
ˇŒ
 
	gLeds
.
ªdOff
();

1101 
ˇŒ
 
	gLeds
.
gªíOn
();

1108 
evít
 
ªsu…_t
 
	gDATA_Timî
.
fúed
(){

1121 
evít
 
ªsu…_t
 
	gIDLE_Timî
.
fúed
(){

1123 if(
	gødio_a˘ive
 =
FALSE
){

1124 
©omic
 
nwk_°©e
=
NWK_NORMAL_OPERATION
;

1125 
ˇŒ
 
	gMacC⁄åﬁ
.
ÊushRx
();

1126 
ˇŒ
 
	gMacC⁄åﬁ
.
£tCh™√l2
(
NORMAL_CHANNEL
);

1129 
	gødio_a˘ive
 = 
FALSE
;

1131 #ifde‡
STATE_DEBUG


1132 if(
	gidÀd_time
++ > 
	gIDLE_MAX
){

1133 
uöt16_t
 
	gt
= 0;

1134 
	gt
=0;Å< 40000 ;Å++){

1135 
ˇŒ
 
	gLeds
.
gªíToggÀ
();

1137 
	gidÀd_time
=0;

1149 
uöt16_t
 
obèö_√xt_h›
(uöt16_à
addªss
){

1150 
öt8_t
 
	gödex
 = 0;

1152 #ifde‡
SOURCE


1153  
	gTOS_BCAST_ADDR
;

1156 if(
	gaddªss
 < 
	gMOTE_ID
){

1157 ; (
	gödex
<
	groutög_èbÀ_size
 && 
	groutög_èbÀ
[
ödex
]<=
addªss
); index++){

1158 if(
	groutög_èbÀ
[
ödex
]==
addªss
){

1160  
gë_up°ªam_√ighb‹
();

1166 
	gödex
 = 
routög_èbÀ_size
-1; (ödex>=0 && 
routög_èbÀ
[
ödex
]>=
addªss
);index++){

1167 if(
	groutög_èbÀ
[
ödex
]==
addªss
){

1169  
gë_down°ªam_√ighb‹
();

1174  
	gTOS_BCAST_ADDR
;

1177 
uöt8_t
 
gë_up°ªam_√ighb‹
(){

1178 
öt8_t
 
	gödex
 = 0;

1179 ; 
	gödex
<
	groutög_èbÀ_size
; index++){

1180 if(
	groutög_èbÀ
[
ödex
]==
MOTE_ID
){

1181  
routög_èbÀ
[
ödex
-1];

1186 
uöt8_t
 
gë_down°ªam_√ighb‹
(){

1187 
öt8_t
 
	gödex
 = 0;

1188 ; 
	gödex
<
	groutög_èbÀ_size
; index++){

1189 if(
	groutög_èbÀ
[
ödex
]==
MOTE_ID
){

1190  
routög_èbÀ
[
ödex
+1];

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/new_network_stack/NetworkLayer.h

5 #i‚de‡
_NETWORK_LAYER_H


6 
	#_NETWORK_LAYER_H


	)

8 
	~"NWSèckC⁄fig.h
"

9 
	~<°döt.h
>

10 
	~"Tøn•‹tLayîUDP.h
"

12 
	#TRUE
 1

	)

13 
	#FALSE
 0

	)

14 
	#DEBUG_NL
 0

15 

	)

18 
	#MAX_NETWORK_PAYLOAD
 
MAX_TRANSPORT_UDP_SEG


19 
	#BCAST_ADDR
 65535

20 

	)

22 
	#LINK_STATE
 1

23 
	#FLOODING
 2

	)

24 
	#PROBABILISTIC
 1

25 
	#TTL_BASED
 2

	)

26 
	#RANDOM
 1

27 
	#GAUSSIAN
 2

	)

29 
	#DEFAULT_ROUTING_ALGORITHM
 
LINK_STATE


	)

30 
	#DEFAULT_FLOODING_TYPE
 
TTL_BASED


	)

31 
	#DEFAULT_PDISTRIBUTION
 
RANDOM


	)

34 
	#SIZE_NEIGHBOR
 5

	)

35 
	#SIZE_NEIGHBORLIST
 (3 + 
MAX_NGBS
 * 
SIZE_NEIGHBOR
)

	)

37 
	#SIZE_MSG_HELLO
 
SIZE_NEIGHBOR


	)

38 
	#SIZE_MSG_NGB_LIST
 
SIZE_NEIGHBORLIST


	)

40 
	#SIZE_NW_PACKET_HEADER
 12

	)

41 
	#SIZE_NW_PACKET
 (
SIZE_NW_PACKET_HEADER
 + 
MAX_NETWORK_PAYLOAD
)

	)

43 
	#SIZE_ROUTING_TABLE_ENTRY
 5

	)

44 
	#SIZE_ROUTING_TABLE
 (
SIZE_ROUTING_TABLE_ENTRY
 * 
MAX_NODES
)

	)

45 
	#SIZE_MSG_ROUTING_TABLE
 (4 + 
SIZE_ROUTING_TABLE
)

	)

47 
	#RF_BUFFER_SIZE
 92

48 

	)

50 
	#APPLICATION
 0x00

51 
	#NW_CONTROL
 0x80

52 

	)

54 
	#HELLO
 0x80

55 
	#NGB_LIST
 0x88

56 
	#ROUTE_CONFIG
 0x90

57 
	#INVALID
 0xFF

58 

	)

60 
	#UDP
 0x00

61 

	)

63 
	#MULTIHOP_YES
 
TRUE


	)

64 
	#MULTIHOP_NO
 
FALSE


	)

66 
	#INFINITY
 100

	)

67 
	#INVALID_ADDRESS
 
BCAST_ADDR


	)

74 
uöt16_t
 
	maddr
;

75 
öt8_t
 
	mrssi
;

76 
öt8_t
 
	mœ°Rï‹t
;

77 
öt8_t
 
	misNew
;

78 }
	tNeighb‹
;

83 
uöt16_t
 
	mmy_addr
;

84 
Neighb‹
 
	mngbs
[
MAX_NGBS
];

85 
öt8_t
 
	mcou¡
;

86 }
	tNeighb‹Li°
;

91 
Neighb‹
 
	mn
;

92 }
	tMsg_Hñlo
;

97 
Neighb‹Li°
 
	m∆
;

98 }
	tMsg_NgbLi°
;

103 
uöt16_t
 
	m§c
;

104 
uöt16_t
 
	mde°
;

105 
uöt16_t
 
	m¥evH›
;

106 
uöt16_t
 
	m√xtH›
;

107 
öt8_t
 
	mâl
;

108 
uöt8_t
 
	mty≥
;

113 
öt8_t
 
	mÀngth
;

114 
öt8_t
 
	m¥io
;

115 
uöt8_t
 
	md©a
[
MAX_NETWORK_PAYLOAD
];

116 }
	tNW_Packë
;

121 
uöt16_t
 
	mde°
;

122 
uöt16_t
 
	m√xtH›
;

123 
uöt8_t
 
	mco°
;

124 }
	tRoutögTabÀ
;

128 
uöt16_t
 
	mdg
;

129 
uöt16_t
 
	mnode
;

130 
RoutögTabÀ
 
	mπ
[
MAX_NODES
];

131 }
	tMsg_RoutögTabÀ
;

134 
öt8_t
 
add_√ighb‹
(
Neighb‹
 
n
);

147 
öt8_t
 
shouldIMu…ih›
(
NW_Packë
 *
pkt
);

156 
mu…ih›
(
NW_Packë
 *
pkt
);

166 
uöt16_t
 
rouã_addr
(uöt16_à
addr
);

175 
rouã_∑ckë
(
NW_Packë
 *
pkt
);

184 
öt8_t
 
£ndToG©eway
(
uöt8_t
 *
buf
, i¡8_à
Àn
);

199 
uöt8_t
 
pkt_ty≥
(
NW_Packë
 *
pkt
);

208 
uöt8_t
 
é_ty≥
(uöt8_à
ty≥
);

217 
uöt8_t
 
nw_˘æ_ty≥
(uöt8_à
ty≥
);

226 
¥o˚ss_≠p_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
);

238 
¥o˚ss_nw_˘æ_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
);

254 
¸óã_√tw‹k_œyî_èsks
();

263 
öôüli£_√tw‹k_œyî
();

272 
ªc‹d_tx_queue_fuŒ
(
NW_Packë
 *
pkt
);

281 
ªc‹d_u«ssocüãd_sockë_pkt
(
NW_Packë
 *
pkt
);

290 
ªc‹d_max_ngb_limô_ªached
(
NW_Packë
 *
pkt
);

299 
cﬁÀ˘_queue_°©i°ics
();

309 
öt8_t
 
£t_routög_Æg‹ôhm
(öt8_à
¥ef
, i¡8_à
ty≥
, i¡8_à
pdi°
);

326 
£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπ
);

329 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπ
);

338 
öt8_t
 
gë_routög_èbÀ
(
RoutögTabÀ
 *
π
);

349 
¥öt_pkt_hódî
(
NW_Packë
 *
pkt
);

358 
¥öt_pkt
(
NW_Packë
 *
pkt
);

367 
öôüli£_routög_èbÀ
();

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/new_network_stack/TransportLayerUDP.c

3 
	~"Tøn•‹tLayîUDP.h
"

4 
	~"Nëw‹kLayî.h
"

5 
	~"Buf„rM™agî.h
"

6 
	~"NWEº‹Codes.h
"

7 
	~<ƒk.h
>

8 
	~<ö˛ude.h
>

9 
	~<ulib.h
>

10 
	~<°dio.h
>

11 
	~<avr/¶ìp.h
>

12 
	~<hÆ.h
>

13 
	~<ƒk_îr‹.h
>

14 
	~<°döt.h
>

19 
Sockë
 
	gsock
[
NUM_PORTS
];

21 
P‹t
 
	gp‹ts
[
NUM_PORTS
];

23 
öt8_t
 
	géayî_öô_d⁄e
;

25 
Tøn•‹t_Segmít_UDP
 
	gudp_£g
;

26 
NW_Packë
 
	gpkt
;

28 
ƒk_£m_t
 *
	gé_£m
;

33 
Re˚iveBuf„rM™agî
 
rx_buf_mgr
[];

34 
öt8_t
 
num_bufs_‰ì
;

35 
Re˚iveBuf„rUDP
 
rx_buf_udp
[];

36 
TønsmôBuf„r
 
tx_buf
[];

37 
TønsmôBuf„rM™agî
 
tx_buf_mgr
;

38 
ƒk_£m_t
 *
bm_£m
;

40 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

41 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

42 
öt8_t
 
gë_num_bufs_‰ì
();

43 
ö£π_rx_fq
(
Re˚iveBuf„rUDP
*, 
öt8_t
, int8_t);

44 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
 *);

45 
öt8_t
 
gë_ö_¥o˚ss_buf_cou¡
(int8_t);

46 
Re˚iveBuf„rUDP
* 
ªmove_rx_pq
(
öt8_t
);

47 
¥öt_tx_buf„r
();

50 
uöt16_t
 
rouã_addr
(uint16_t);

51 
ƒk_£m_t
 *
∆_£m
;

54 
∑ck_TL_UDP_hódî
(
uöt8_t
*, 
Tøn•‹t_Segmít_UDP
*);

57 
go_öto_∑nic
(
öt8_t
 *);

60 
	$öôüli£_å™•‹t_œyî_udp
()

62 
öt8_t
 
i
;

65 
i
 = 0; i < 
NUM_PORTS
; i++)

67 
sock
[
i
].
pödex
 = -1;

68 
sock
[
i
].
rbmödex
 = -1;

69 
sock
[
i
].
pid
 = 
INVALID_PID
;

70 
sock
[
i
].
timeout
.
£cs
 = 0;

71 
sock
[
i
].
timeout
.
«no_£cs
 = 0;

73 
p‹ts
[
i
].
≤o
 = 
INVALID_PORT
;

77 
é_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

78 if(
é_£m
 =
NULL
)

80 
	`ƒk_öt_dißbÀ
();

81 
	`ƒk_Àd_£t
(
RED_LED
);

83 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_transport_layer_udp(): Error creatingÅhe semaphore\r\n"));

86 if(
NUM_PORTS
 > 
MAX_PORTS
)

88 
	`ƒk_öt_dißbÀ
();

89 
	`ƒk_Àd_£t
(
RED_LED
);

91 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_transport_layer_udp(): Too manyÖorts opened in system\r\n"));

95 
éayî_öô_d⁄e
 = 1;

97 
	}
}

99 
öt8_t
 
	$gë_√xt_avaûabÀ_sockë
()

101 
öt8_t
 
i
;

104 
i
 = 0; i < 
NUM_PORTS
; i++)

106 if(
sock
[
i
].
pid
 =
INVALID_PID
)

107  
i
;

109 
	`_ƒk_î∫o_£t
(
NO_SOCKET_DESC_AVAILABLE
);

111  
NRK_ERROR
;

112 
	}
}

115 
öt8_t
 
	$¸óã_sockë
(
öt8_t
 
ty≥
)

117 
öt8_t
 
ªsu…
;

119 
	`íãr_¸
(
é_£m
, 3);

121 if(
éayî_öô_d⁄e
 != 1)

123 
	`ƒk_öt_dißbÀ
();

124 
	`ƒk_Àd_£t
(
RED_LED
);

126 
	`ƒk_k¥ötf
(
	`PSTR
("create_socket(): TransportÜayerÇot initialised\r\n"));

129 
ty≥
)

131 
SOCK_DGRAM
:

132 
SOCK_IPC
:

133 
SOCK_RAW
:

134 
ªsu…
 = 
	`gë_√xt_avaûabÀ_sockë
();

135 if(
ªsu…
 !
NRK_ERROR
)

137 
sock
[
ªsu…
].
pid
 = 
	`ƒk_gë_pid
();

138 
sock
[
ªsu…
].
ty≥
 =Åype;

143 
	`_ƒk_î∫o_£t
(
UNSUPPORTED_SOCK_TYPE
);

144 
ªsu…
 = 
NRK_ERROR
;

147 
	`Àave_¸
(
é_£m
, 3);

148  
ªsu…
;

149 
	}
}

152 
uöt8_t
 
	$gë_√xt_avaûabÀ_p‹t
()

154 
uöt16_t
 
i
;

155 
öt8_t
 
j
;

157 
i
 = 
EPHEMERAL_PORT_NUM_START
; i <
MAX_PORT_NUM
; i++)

160 
j
 = 0; j < 
NUM_PORTS
; j++)

161 if(
p‹ts
[
j
].
≤o
 =
i
)

164 if(
j
 =
NUM_PORTS
)

165  
i
;

171 
	`_ƒk_î∫o_£t
(
NO_PORTS_AVAILABLE
);

172  
INVALID_PORT
;

173 
	}
}

175 
öt8_t
 
	$check_p‹t_avaûabÀ
(
uöt8_t
 
±
)

177 
öt8_t
 
i
;

179 
i
 = 0; i < 
NUM_PORTS
; i++)

180 if(
p‹ts
[
i
].
≤o
 =
±
)

183 if(
i
 =
NUM_PORTS
)

184  
NRK_OK
;

186 
	`_ƒk_î∫o_£t
(
PORT_UNAVAILABLE
);

187  
NRK_ERROR
;

188 
	}
}

190 
	$assign_p‹t
(
öt8_t
 
pödex
, 
uöt8_t
 
±
)

192 
öt8_t
 
ªt1
, 
ªt2
;

195 
p‹ts
[
pödex
].
≤o
 = 
±
;

196 
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
 = 
	`ƒk_sig«l_¸óã
();

197 
p‹ts
[
pödex
].
d©a_¨rived_sig«l
 = 
	`ƒk_sig«l_¸óã
();

199 if–
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
 =
NRK_ERROR
 )

201 
	`ƒk_öt_dißbÀ
();

202 
	`ƒk_Àd_£t
(
RED_LED
);

204 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe send_done signal\r\n"));

207 if–
p‹ts
[
pödex
].
d©a_¨rived_sig«l
 =
NRK_ERROR
 )

209 
	`ƒk_öt_dißbÀ
();

210 
	`ƒk_Àd_£t
(
RED_LED
);

212 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe data_arrived signal\r\n"));

215 
ªt1
 = 
	`ƒk_sig«l_ªgi°î
(
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
);

216 
ªt2
 = 
	`ƒk_sig«l_ªgi°î
(
p‹ts
[
pödex
].
d©a_¨rived_sig«l
);

218 if(
ªt1
 =
NRK_ERROR
)

220 
	`ƒk_öt_dißbÀ
();

221 
	`ƒk_Àd_£t
(
RED_LED
);

223 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): ErrorÑegisteringÅhe send_done signal\r\n"));

226 if(
ªt2
 =
NRK_ERROR
)

228 
	`ƒk_öt_dißbÀ
();

229 
	`ƒk_Àd_£t
(
RED_LED
);

231 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): ErrorÑegisteringÅhe data_arrived signal\r\n"));

235 
	}
}

237 
	$ªÀa£_p‹t
(
öt8_t
 
pödex
)

239 
öt8_t
 
ªt1
, 
ªt2
;

242 
p‹ts
[
pödex
].
≤o
 = 
INVALID_PID
;

243 
ªt1
 = 
	`ƒk_sig«l_dñëe
(
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
);

244 
ªt2
 = 
	`ƒk_sig«l_dñëe
(
p‹ts
[
pödex
].
d©a_¨rived_sig«l
);

246 if(
ªt1
 =
NRK_ERROR
)

248 
	`ƒk_öt_dißbÀ
();

249 
	`ƒk_Àd_£t
(
RED_LED
);

251 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe send_done signal\r\n"));

254 if(
ªt2
 =
NRK_ERROR
)

256 
	`ƒk_öt_dißbÀ
();

257 
	`ƒk_Àd_£t
(
RED_LED
);

259 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe data_arrived signal\r\n"));

263 
	}
}

265 
öt8_t
 
	$gë_ödex_u«ssig√d_p‹t_ñemít
()

267 
öt8_t
 
i
;

269 
i
 = 0; i < 
NUM_PORTS
; i++)

270 if(
p‹ts
[
i
].
≤o
 =
INVALID_PORT
)

271  
i
;

273 
	`_ƒk_î∫o_£t
(
NO_PORT_ELEMENT_AVAILABLE
);

274  
NRK_ERROR
;

275 
	}
}

277 
öt8_t
 
	$gë_ödex_u«ssig√d_rbm_ñemít
()

279 
öt8_t
 
i
;

281 
i
 = 0; i < 
NUM_PORTS
; i++)

282 if(
rx_buf_mgr
[
i
].
pödex
 == -1)

283  
i
;

285 
	`_ƒk_î∫o_£t
(
NO_RBM_ELEMENT_AVAILABLE
);

286  
NRK_ERROR
;

287 
	}
}

289 
uöt8_t
 
	$gë_p‹t_num
(
öt8_t
 
sock_num
)

292 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

294 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

295  
INVALID_PORT
;

298 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

300 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

301  
INVALID_PORT
;

304 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

306 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

307  
INVALID_PORT
;

310 if(
sock
[
sock_num
].
pödex
 == -1)

312 
	`_ƒk_î∫o_£t
(
UNMAPPED_SOCKET
);

313  
INVALID_PORT
;

316  
p‹ts
[
sock
[
sock_num
].
pödex
].
≤o
;

317 
	}
}

320 
öt8_t
 
	$böd
(
öt8_t
 
sock_num
, 
öt16_t
 
p‹t
)

322 
öt8_t
 
buf_ödex
;

323 
öt8_t
 
p‹t_ödex
;

324 
öt8_t
 
rbm_ödex
;

325 
öt8_t
 
i
;

326 
öt8_t
 
size
;

328 
	`íãr_¸
(
bm_£m
, 8);

329 
	`íãr_¸
(
é_£m
, 8);

331 if(
éayî_öô_d⁄e
 != 1)

333 
	`ƒk_öt_dißbÀ
();

334 
	`ƒk_Àd_£t
(
RED_LED
);

336 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): TransportÜayerÇot initialised\r\n"));

340 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

342 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

344 
	`Àave_¸
(
é_£m
, 8);

345 
	`Àave_¸
(
bm_£m
, 8);

346  
NRK_ERROR
;

349 if(
p‹t
 <0 ||Ö‹à> 
MAX_PORT_NUM
)

351 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

353 
	`Àave_¸
(
é_£m
, 8);

354 
	`Àave_¸
(
bm_£m
, 8);

355  
NRK_ERROR
;

358 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

360 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

362 
	`Àave_¸
(
é_£m
, 8);

363 
	`Àave_¸
(
bm_£m
, 8);

364  
NRK_ERROR
;

367 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

369 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

371 
	`Àave_¸
(
é_£m
, 8);

372 
	`Àave_¸
(
bm_£m
, 8);

373  
NRK_ERROR
;

376 if(
sock
[
sock_num
].
rbmödex
 != -1)

378 
	`_ƒk_î∫o_£t
(
INVALID_CALL
);

380 
	`Àave_¸
(
é_£m
, 8);

381 
	`Àave_¸
(
bm_£m
, 8);

382  
NRK_ERROR
;

385 if(
	`check_p‹t_avaûabÀ
((
uöt8_t
)
p‹t
Ë=
FALSE
)

387 
	`Àave_¸
(
é_£m
, 8);

388 
	`Àave_¸
(
bm_£m
, 8);

389  
NRK_ERROR
;

392 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

394 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

396 
	`Àave_¸
(
é_£m
, 8);

397 
	`Àave_¸
(
bm_£m
, 8);

398  
NRK_ERROR
;

401 if(
sock
[
sock_num
].
pödex
 != -1)

403 
	`ƒk_öt_dißbÀ
();

404 
	`ƒk_Àd_£t
(
RED_LED
);

406 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

410 
size
 = 
DEFAULT_RX_QUEUE_SIZE
;

417 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

418 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

420 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

422 
	`ƒk_öt_dißbÀ
();

423 
	`ƒk_Àd_£t
(
RED_LED
);

425 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

429 
	`assign_p‹t
(
p‹t_ödex
, (
uöt8_t
)
p‹t
);

432 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

433 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

436 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

437 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

440 
i
 = 1; i <
size
; i++)

442 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

443 if(
buf_ödex
 =
NRK_ERROR
)

445 
	`ƒk_öt_dißbÀ
();

446 
	`ƒk_Àd_£t
(
RED_LED
);

448 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug found in implementation ofÇum_bufs_free\r\n"));

451 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

452 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

453 
num_bufs_‰ì
--;

456 
	`Àave_¸
(
é_£m
, 8);

457 
	`Àave_¸
(
bm_£m
, 8);

458  
NRK_OK
;

459 
	}
}

461 
öt8_t
 
	$gë_rx_queue_size
(
öt8_t
 
sock_num
)

463 
öt8_t
 
cou¡
;

465 
	`íãr_¸
(
bm_£m
, 9);

466 
	`íãr_¸
(
é_£m
, 9);

469 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

471 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

473 
	`Àave_¸
(
é_£m
, 9);

474 
	`Àave_¸
(
bm_£m
, 9);

475  
NRK_ERROR
;

478 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

480 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

482 
	`Àave_¸
(
é_£m
, 9);

483 
	`Àave_¸
(
bm_£m
, 9);

484  
NRK_ERROR
;

487 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

489 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

491 
	`Àave_¸
(
é_£m
, 9);

492 
	`Àave_¸
(
bm_£m
, 9);

493  
NRK_ERROR
;

496 if(
sock
[
sock_num
].
pödex
 == -1)

498 
	`Àave_¸
(
é_£m
, 9);

499 
	`Àave_¸
(
bm_£m
, 9);

503 if(
sock
[
sock_num
].
rbmödex
 == -1)

505 
	`ƒk_öt_dißbÀ
();

506 
	`ƒk_Àd_£t
(
RED_LED
);

508 
	`ƒk_k¥ötf
(
	`PSTR
("get_rx_queue_size(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

512 
cou¡
 = 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡TŸÆ
;

514 
	`Àave_¸
(
é_£m
, 9);

515 
	`Àave_¸
(
bm_£m
, 9);

516  
cou¡
;

517 
	}
}

520 
öt8_t
 
	$£t_rx_queue_size
(
öt8_t
 
sock_num
, i¡8_à
size
)

522 
uöt8_t
 
p‹t
;

523 
öt8_t
 
i
;

524 
öt8_t
 
Êag
;

526 
öt8_t
 
buf_ödex
;

527 
öt8_t
 
p‹t_ödex
;

528 
öt8_t
 
rbm_ödex
;

530 
	`íãr_¸
(
bm_£m
, 10);

531 
	`íãr_¸
(
é_£m
, 10);

533 if(
éayî_öô_d⁄e
 != 1)

535 
	`ƒk_öt_dißbÀ
();

536 
	`ƒk_Àd_£t
(
RED_LED
);

538 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): TransportÜayerÇot initialised\r\n"));

541 
Êag
 = 0;

543 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
size
 <= 0)

545 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

547 
	`Àave_¸
(
é_£m
, 10);

548 
	`Àave_¸
(
bm_£m
, 10);

549  
NRK_ERROR
;

552 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

554 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

556 
	`Àave_¸
(
é_£m
, 10);

557 
	`Àave_¸
(
bm_£m
, 10);

558  
NRK_ERROR
;

561 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

563 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

565 
	`Àave_¸
(
é_£m
, 10);

566 
	`Àave_¸
(
bm_£m
, 10);

567  
NRK_ERROR
;

570 if(
sock
[
sock_num
].
pödex
 == -1)

572 
Êag
 = 1;

573 
p‹t
 = 
	`gë_√xt_avaûabÀ_p‹t
();

574 if(
p‹t
 =
INVALID_PORT
)

576 
	`Àave_¸
(
é_£m
, 10);

577 
	`Àave_¸
(
bm_£m
, 10);

578  
NRK_ERROR
;

580 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

582 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

584 
	`Àave_¸
(
é_£m
, 10);

585 
	`Àave_¸
(
bm_£m
, 10);

586  
NRK_ERROR
;

590 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

591 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

593 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

595 
	`ƒk_öt_dißbÀ
();

596 
	`ƒk_Àd_£t
(
RED_LED
);

598 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

602 
	`assign_p‹t
(
p‹t_ödex
, 
p‹t
);

605 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

606 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

609 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

610 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

615 if(
size
 =
DEFAULT_RX_QUEUE_SIZE
)

617 
	`Àave_¸
(
é_£m
, 10);

618 
	`Àave_¸
(
bm_£m
, 10);

619  
size
;

622 
size
 -
DEFAULT_RX_QUEUE_SIZE
;

626 if(
	`gë_num_bufs_‰ì
(Ë< 
size
)

627 
size
 = 
	`gë_num_bufs_‰ì
();

632 
i
 = 1; i <
size
; i++)

634 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

635 if(
buf_ödex
 =
NRK_ERROR
)

637 
	`ƒk_öt_dißbÀ
();

638 
	`ƒk_Àd_£t
(
RED_LED
);

640 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): Bug found in implementation ofÇum_bufs_free\r\n"));

642 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

643 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

644 
num_bufs_‰ì
--;

647 
	`Àave_¸
(
é_£m
, 10);

648 
	`Àave_¸
(
bm_£m
, 10);

650 if(
Êag
 == 0)

651  
size
 + 
DEFAULT_RX_QUEUE_SIZE
;

653  
size
;

654 
	}
}

656 
öt8_t
 
	$ªÀa£_buf„r
(
öt8_t
 
sock_num
, 
uöt8_t
 *
±r
)

658 
Re˚iveBuf„rUDP
 *
buf
;

660 
	`íãr_¸
(
bm_£m
, 11);

661 
	`íãr_¸
(
é_£m
, 11);

664 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
±r
 =
NULL
)

666 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

668 
	`Àave_¸
(
é_£m
, 11);

669 
	`Àave_¸
(
bm_£m
, 11);

670  
NRK_ERROR
;

672 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

674 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

676 
	`Àave_¸
(
é_£m
, 11);

677 
	`Àave_¸
(
bm_£m
, 11);

678  
NRK_ERROR
;

681 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

683 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

685 
	`Àave_¸
(
é_£m
, 11);

686 
	`Àave_¸
(
bm_£m
, 11);

687  
NRK_ERROR
;

690 if(
sock
[
sock_num
].
pödex
 == -1)

692 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

694 
	`Àave_¸
(
é_£m
, 11);

695 
	`Àave_¸
(
bm_£m
, 11);

696  
NRK_ERROR
;

699 if(
sock
[
sock_num
].
rbmödex
 == -1)

701 
	`ƒk_öt_dißbÀ
();

702 
	`ƒk_Àd_£t
(
RED_LED
);

704 
	`ƒk_k¥ötf
(
	`PSTR
("release_buffer(): Bug discovered in implementation ofÖort /ÑbmÉlementárray\r\n"));

708 
buf
 = 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
hód_fq
;

709 
buf
 !
NULL
)

711 if–(
±r
 =(
buf
 -> 
£g
).
d©a
Ë&& (bu‡-> 
°©us
 =
FULL
) )

713 
buf
 = bu‡-> 
√xt
;

715 if(
buf
 =
NULL
)

717 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

719 
	`Àave_¸
(
é_£m
, 11);

720 
	`Àave_¸
(
bm_£m
, 11);

721  
NRK_ERROR
;

724 
buf
 -> 
°©us
 = 
EMPTY
;

725 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡Fªe
++;

727 
	`Àave_¸
(
é_£m
, 11);

728 
	`Àave_¸
(
bm_£m
, 11);

729  
NRK_OK
;

730 
	}
}

732 
öt8_t
 
	$˛o£_sockë
(
öt8_t
 
sock_num
)

734 
Re˚iveBuf„rUDP
 *
±r
;

736 
	`íãr_¸
(
bm_£m
, 12);

737 
	`íãr_¸
(
é_£m
, 12);

740 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

742 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

744 
	`Àave_¸
(
é_£m
, 12);

745 
	`Àave_¸
(
bm_£m
, 12);

746  
NRK_ERROR
;

748 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
() )

750 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

752 
	`Àave_¸
(
é_£m
, 12);

753 
	`Àave_¸
(
bm_£m
, 12);

754  
NRK_ERROR
;

757 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

759 
sock
[
sock_num
].
pid
 = 
INVALID_PID
;

760 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

761 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

763 
	`Àave_¸
(
é_£m
, 12);

764 
	`Àave_¸
(
bm_£m
, 12);

765  
NRK_OK
;

769 if(
sock
[
sock_num
].
pödex
 != -1)

771 if(
sock
[
sock_num
].
rbmödex
 == -1)

773 
	`ƒk_öt_dißbÀ
();

774 
	`ƒk_Àd_£t
(
RED_LED
);

776 
	`ƒk_k¥ötf
(
	`PSTR
("close_socket(): Bug discovered in implementation ofÖort /rbmÉlementárray\r\n"));

779  (
±r
 = 
	`ªmove_rx_pq
(
sock
[
sock_num
].
rbmödex
)Ë!
NULL
 )

780 
±r
 -> 
°©us
 = 
UNALLOCATED
;

783  (
±r
 = 
	`ªmove_rx_fq
(
sock
[
sock_num
].
rbmödex
, 
EMPTY
)Ë!
NULL
 )

784 
±r
 -> 
°©us
 = 
UNALLOCATED
;

787  (
±r
 = 
	`ªmove_rx_fq
(
sock
[
sock_num
].
rbmödex
,
FULL
)Ë!
NULL
 )

788 
±r
 -> 
°©us
 = 
UNALLOCATED
;

790 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
pid
 = 
INVALID_PID
;

791 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
pödex
 = -1;

792 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡TŸÆ
 = 0;

793 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡Fªe
 = 0;

795 
	`ªÀa£_p‹t
(
sock
[
sock_num
].
pödex
);

798 
sock
[
sock_num
].
pödex
 = -1;

799 
sock
[
sock_num
].
rbmödex
 = -1;

800 
sock
[
sock_num
].
pid
 = 
INVALID_PID
;

801 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

802 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

804 
	`Àave_¸
(
é_£m
, 12);

805 
	`Àave_¸
(
bm_£m
, 12);

806  
NRK_OK
;

807 
	}
}

809 
öt8_t
 
	$is_p‹t_assocüãd
(
öt16_t
 
p‹t
)

812 if(
p‹t
 <0 ||Ö‹à> 
MAX_PORT_NUM
)

814 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

815  
NRK_ERROR
;

818 
	`íãr_¸
(
é_£m
, 13);

820 if(
	`check_p‹t_avaûabÀ
((
uöt8_t
)
p‹t
Ë=
NRK_OK
)

822 
	`Àave_¸
(
é_£m
, 13);

823  
FALSE
;

825 
	`Àave_¸
(
é_£m
, 13);

826  
TRUE
;

827 
	}
}

829 
öt8_t
 
	$£nd
(
öt8_t
 
sock_num
, i¡8_à*
±r
, i¡8_à
Àn
, 
öt32_t
 
de°_addr
, 
öt16_t
 
de°_p‹t
, i¡8_à
¥io
)

831 
öt8_t
 
ªsu…
;

833 
	`íãr_¸
(
bm_£m
, 14);

834 
	`íãr_¸
(
é_£m
, 14);

837 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

839 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

841 
	`Àave_¸
(
é_£m
, 14);

842 
	`Àave_¸
(
bm_£m
, 14);

843  
NRK_ERROR
;

846 if(
±r
 =
NULL
 || 
Àn
 <0 ||Üí > 
MAX_APP_PAYLOAD
)

848 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

850 
	`Àave_¸
(
é_£m
, 14);

851 
	`Àave_¸
(
bm_£m
, 14);

852  
NRK_ERROR
;

855 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

857 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

859 
	`Àave_¸
(
tbmac_tx_pkl_£m
, 14);

860 
	`Àave_¸
(
bm_£m
, 14);

861  
NRK_ERROR
;

865 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

867 
ƒk_sig_t
 
Œ_tx_d⁄e_sig«l
 = 
	`bmac_gë_tx_d⁄e_sig«l
();

868 if(
	`ƒk_sig«l_ªgi°î
(
Œ_tx_d⁄e_sig«l
Ë=
NRK_ERROR
)

870 
	`ƒk_öt_dißbÀ
();

871 
	`ƒk_Àd_£t
(
RED_LED
);

873 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Error inÑegistering forÜl_tx_done_signal\r\n"));

913  
	`bmac_tx_pkt
(
±r
, 
Àn
) == -1)

915 
ªsu…
 = 
	`ƒk_evít_waô
–
	`SIG
(
Œ_tx_d⁄e_sig«l
) );

918 
	`Àave_¸
(
é_£m
, 14);

919 
	`Àave_¸
(
bm_£m
, 14);

920  
NRK_OK
;

923 if(
de°_addr
 < 0 || 
de°_p‹t
 <0 || de°_p‹à>
MAX_PORT_NUM
)

925 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

927 
	`Àave_¸
(
é_£m
, 14);

928 
	`Àave_¸
(
bm_£m
, 14);

929  
NRK_ERROR
;

932 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
)

934 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

936 
	`Àave_¸
(
é_£m
, 14);

937 
	`Àave_¸
(
bm_£m
, 14);

938  
NRK_ERROR
;

942 if(
sock
[
sock_num
].
pödex
 == -1)

945 if(
DEBUG_TL
 == 2)

947 
	`¥ötf
("%d ", 
NODE_ADDR
);

948 
	`ƒk_k¥ötf
(
	`PSTR
("called send() withoutá mapping\r\n"));

950 
öt8_t
 
buf_ödex
, 
p‹t_ödex
, 
rbm_ödex
;

951 
uöt8_t
 
p‹t
;

953 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

955 
	`Àave_¸
(
é_£m
, 14);

956 
	`Àave_¸
(
bm_£m
, 14);

957 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

958  
NRK_ERROR
;

961 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

962 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

963 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

965 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

967 
	`ƒk_öt_dißbÀ
();

968 
	`ƒk_Àd_£t
(
RED_LED
);

970 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

973 if(
buf_ödex
 =
NRK_ERROR
)

975 
	`ƒk_öt_dißbÀ
();

976 
	`ƒk_Àd_£t
(
RED_LED
);

978 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Bug detected in implementation ofÇum_bufs_free\r\n"));

981 
p‹t
 = 
	`gë_√xt_avaûabÀ_p‹t
();

984 
	`assign_p‹t
(
p‹t_ödex
, 
p‹t
);

987 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

988 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

991 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

992 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

995 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

996 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

997 
num_bufs_‰ì
--;

1002 
udp_£g
.
§cP‹t
 = 
p‹ts
[
sock
[
sock_num
].
pödex
].
≤o
;

1003 
udp_£g
.
de°P‹t
 = (
uöt8_t
)
de°_p‹t
;

1004 
udp_£g
.
Àngth
 = 
Àn
;

1005 
	`mem˝y
(
udp_£g
.
d©a
, 
±r
, 
Àn
);

1007 if(
DEBUG_TL
 == 2)

1009 
	`¥ötf
("%d: ", 
NODE_ADDR
);

1010 
	`ƒk_k¥ötf
(
	`PSTR
("sent segment = "));

1011 
	`¥öt_£g
(&
udp_£g
);

1014 
sock
[
sock_num
].
ty≥
)

1016 
SOCK_DGRAM
:

1017 
pkt
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

1018 
pkt
.
de°
 = (
uöt16_t
)
de°_addr
;

1019 
pkt
.
√xtH›
 = 
	`rouã_addr
(
de°_addr
);

1020 
pkt
.
¥evH›
 = 
NODE_ADDR
;

1022 
pkt
.
âl
 = 
MAX_NETWORK_DIAMETER
;

1023 
pkt
.
ty≥
 = 
UDP
;

1024 
pkt
.
Àngth
 = 
SIZE_TRANSPORT_UDP_HEADER
 + 
Àn
;

1025 
pkt
.
¥io
 =Örio;

1026 
	`∑ck_TL_UDP_hódî
(
pkt
.
d©a
, &
udp_£g
);

1027 
	`mem˝y
(
pkt
.
d©a
 + 
SIZE_TRANSPORT_UDP_HEADER
, 
udp_£g
.d©a, 
MAX_APP_PAYLOAD
);

1029 if(
DEBUG_TL
 == 2)

1031 
	`¥ötf
("%d: ",
NODE_ADDR
);

1032 
	`ƒk_k¥ötf
(
	`PSTR
("sentÖacket = "));

1033 
	`¥öt_pkt
(&
pkt
);

1038 
ªsu…
 = 
	`ö£π_tx_aq
(&
pkt
);

1039 if(
DEBUG_TL
 == 2)

1041 
	`ƒk_k¥ötf
("TL: send(): InsertedÖacket.");

1042 
	`¥öt_tx_buf„r
();

1045 if(
ªsu…
 =
NRK_ERROR
)

1046 
	`_ƒk_î∫o_£t
(
NO_TX_BUFFERS_AVAILABLE
);

1048 
	`Àave_¸
(
é_£m
, 14);

1049 
	`Àave_¸
(
bm_£m
, 14);

1050  
ªsu…
;

1053 
SOCK_IPC
:

1054 
	`ö£π_rx_pq
(&
udp_£g
, 
¥io
, 
NODE_ADDR
, 
INVALID_RSSI
);

1055 
	`Àave_¸
(
é_£m
, 14);

1056 
	`Àave_¸
(
bm_£m
, 14);

1060 
	`ƒk_öt_dißbÀ
();

1061 
	`ƒk_Àd_£t
(
RED_LED
);

1064 
	`ƒk_k¥ötf
(
	`PSTR
("TL: send(): Bug discovered in implementation of socketÅype\r\n"));

1068  
NRK_OK
;

1069 
	}
}

1071 
öt8_t
 
	$£t_timeout
(
öt8_t
 
sock_num
, i¡8_à
£cs
, i¡8_à
«no_£cs
)

1073 
	`íãr_¸
(
é_£m
, 15);

1079 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
£cs
 < 0 || 
«no_£cs
 < 0)

1081 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1083 
	`Àave_¸
(
é_£m
, 15);

1084  
NRK_ERROR
;

1087 if(
£cs
 =0 && 
«no_£cs
 == 0)

1089 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1091 
	`Àave_¸
(
é_£m
, 15);

1092  
NRK_ERROR
;

1095 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

1097 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1099 
	`Àave_¸
(
é_£m
, 15);

1100  
NRK_ERROR
;

1105 
sock
[
sock_num
].
timeout
.
£cs
 = secs;

1106 
sock
[
sock_num
].
timeout
.
«no_£cs
 =Çano_secs;

1108 
	`Àave_¸
(
é_£m
, 15);

1112  
NRK_OK
;

1113 
	}
}

1115 
uöt8_t
* 
	$ª˚ive
(
öt8_t
 
sock_num
, i¡8_à*
Àn
, 
uöt16_t
 *
§cAddr
, 
uöt8_t
 *
§cP‹t
, i¡8_à*
rssi
)

1117 
ƒk_sig_mask_t
 
my_sigs
;

1118 
Re˚iveBuf„rUDP
 *
buf
;

1119 
Tøn•‹t_Segmít_UDP
 *
£g
;

1120 
öt8_t
 
rbm_ödex
;

1121 
öt8_t
 
p‹t_ödex
;

1123 
	`íãr_¸
(
bm_£m
, 16);

1124 
	`íãr_¸
(
é_£m
, 16);

1127 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
Àn
 =
NULL
)

1129 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1131 
	`Àave_¸
(
é_£m
, 16);

1132 
	`Àave_¸
(
bm_£m
, 16);

1133  
NULL
;

1136 if–
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

1138 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1140 
	`Àave_¸
(
é_£m
, 16);

1141 
	`Àave_¸
(
bm_£m
, 16);

1142  
NULL
;

1145 if(
sock
[
sock_num
].
pödex
 == -1)

1147 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1149 
	`Àave_¸
(
é_£m
, 16);

1150 
	`Àave_¸
(
bm_£m
, 16);

1151  
NULL
;

1155 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

1160 if(
sock
[
sock_num
].
rbmödex
 == -1)

1162 
	`ƒk_öt_dißbÀ
();

1163 
	`ƒk_Àd_£t
(
RED_LED
);

1165 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

1169 
rbm_ödex
 = 
sock
[
sock_num
].
rbmödex
;

1170 
p‹t_ödex
 = 
sock
[
sock_num
].
pödex
;

1171 if(
sock
[
sock_num
].
timeout
.
£cs
 =0 && sock[sock_num].timeout.
«no_£cs
 == 0)

1174 if(
DEBUG_TL
 == 2)

1175 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): InsideÅhe sectionÅhatÑelatesÅo 'withoutÅimeout'Ñeceive\r\n"));

1178 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 =rx_buf_mgr[rbm_ödex].
cou¡TŸÆ
)

1180 if(
DEBUG_TL
 == 2)

1182 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): No segments inÑeceive queue ofÖort "));

1183 
	`¥ötf
("%d\n", 
p‹ts
[
p‹t_ödex
].
≤o
);

1187 
	`Àave_¸
(
é_£m
, 16);

1188 
	`Àave_¸
(
bm_£m
, 16);

1189 
my_sigs
 = 
	`ƒk_evít_waô
(
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
));

1190 
	`íãr_¸
(
bm_£m
, 16);

1191 
	`íãr_¸
(
é_£m
, 16);

1194 if(
my_sigs
 == 0)

1196 
	`ƒk_öt_dißbÀ
();

1197 
	`ƒk_Àd_£t
(
RED_LED
);

1199 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error callingÇrk_event_wait (withoutÅimeout)\r\n"));

1201 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
) )

1203 if(
DEBUG_TL
 == 2)

1204 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): ReceivedÅhe dataárrived signal\r\n"));

1209 
	`ƒk_öt_dißbÀ
();

1210 
	`ƒk_Àd_£t
(
RED_LED
);

1212 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Unknown signalÑeceived (withoutÅimeout)\r\n"));

1219 if(
DEBUG_TL
 == 2)

1220 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): InsideÅhe sectionÅhatÑelatesÅo 'withÅimeout'Ñeceive\r\n"));

1222 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
)

1224 
	`ƒk_öt_dißbÀ
();

1225 
	`ƒk_Àd_£t
(
RED_LED
);

1227 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error inÑegistering forÇrk_wakeup_signal\r\n"));

1229 if–
	`ƒk_£t_√xt_wakeup
(
sock
[
sock_num
].
timeout
Ë=
NRK_ERROR
)

1231 
	`ƒk_öt_dißbÀ
();

1232 
	`ƒk_Àd_£t
(
RED_LED
);

1234 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): ErrorÑeturned byÇrk_set_next_wakeup\r\n"));

1237 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 =rx_buf_mgr[rbm_ödex].
cou¡TŸÆ
)

1239 if(
DEBUG_TL
 == 2)

1241 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): No segments inÑeceive queue ofÖort "));

1242 
	`¥ötf
("%d\n", 
p‹ts
[
p‹t_ödex
].
≤o
);

1248 
	`Àave_¸
(
é_£m
, 16);

1249 
	`Àave_¸
(
bm_£m
, 16);

1250 
my_sigs
 = 
	`ƒk_evít_waô
(
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
));

1251 
	`íãr_¸
(
bm_£m
, 16);

1252 
	`íãr_¸
(
é_£m
, 16);

1255 if(
my_sigs
 == 0)

1257 
	`ƒk_öt_dißbÀ
();

1258 
	`ƒk_Àd_£t
(
RED_LED
);

1260 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error callingÇrk_event_wait() (withÅimeout)\r\n"));

1262 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
) )

1264 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1265 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1266 if(
DEBUG_TL
 == 2)

1267 
	`ƒk_k¥ötf
(
	`PSTR
("ReceivedÅhe dataárrived signal\r\n"));

1271 if–
my_sigs
 & 
	`SIG
(
ƒk_wakeup_sig«l
) )

1273 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1274 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1276 
	`_ƒk_î∫o_£t
(
SOCKET_TIMEOUT
);

1278 
	`Àave_¸
(
é_£m
, 16);

1279 
	`Àave_¸
(
bm_£m
, 16);

1280  
NULL
;

1284 
	`ƒk_öt_dißbÀ
();

1285 
	`ƒk_Àd_£t
(
RED_LED
);

1287 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Unknown signalÑeceived (withÅimeout)\r\n"));

1298 
buf
 = 
	`ªmove_rx_pq
(
rbm_ödex
);

1299 if(
buf
 =
NULL
)

1301 
	`ƒk_öt_dißbÀ
();

1302 
	`ƒk_Àd_£t
(
RED_LED
);

1304 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Bug found in implementation of data_arrived_signal /Ñx buffer mgmt\r\n"));

1306 
	`ö£π_rx_fq
(
buf
, 
rbm_ödex
, 
FULL
);

1307 
£g
 = &(
buf
 -> seg);

1310 *
Àn
 = 
£g
 -> 
Àngth
;

1311 if(
§cAddr
 !
NULL
)

1312 *
§cAddr
 = 
buf
 -> srcAddr;

1313 if(
§cP‹t
 !
NULL
)

1314 *
§cP‹t
 = 
£g
 -> srcPort;

1315 if(
rssi
 !
NULL
)

1316 *
rssi
 = 
buf
 ->Ñssi;

1318 
	`Àave_¸
(
é_£m
, 16);

1319 
	`Àave_¸
(
bm_£m
, 16);

1320  
£g
 -> 
d©a
;

1321 
	}
}

1324 
öt8_t
 
	$check_ª˚ive_queue
(
öt8_t
 
sock_num
)

1326 
öt8_t
 
rbm_ödex
;

1327 
öt8_t
 
cou¡1
, 
cou¡2
, 
cou¡3
;

1329 
	`íãr_¸
(
bm_£m
, 17);

1330 
	`íãr_¸
(
é_£m
, 17);

1333 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

1335 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1337 
	`Àave_¸
(
é_£m
, 17);

1338 
	`Àave_¸
(
bm_£m
, 17);

1339  
NRK_ERROR
;

1342 if–(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
()Ë|| (sock[sock_num].
pödex
 == -1) )

1344 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1346 
	`Àave_¸
(
é_£m
, 17);

1347 
	`Àave_¸
(
bm_£m
, 17);

1348  
NRK_ERROR
;

1351 
rbm_ödex
 = 
sock
[
sock_num
].
rbmödex
;

1352 
cou¡1
 = 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
;

1353 
cou¡2
 = 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
;

1354 
cou¡3
 = 
	`gë_ö_¥o˚ss_buf_cou¡
(
rbm_ödex
);

1356 
	`Àave_¸
(
é_£m
, 17);

1357 
	`Àave_¸
(
bm_£m
, 17);

1358  
cou¡1
 - 
cou¡2
 - 
cou¡3
;

1359 
	}
}

1361 
öt8_t
 
	$waô_u¡û_£nd_d⁄e
(
öt8_t
 
sock_num
)

1363 
öt8_t
 
p‹t_ödex
;

1364 
ƒk_sig_mask_t
 
my_sigs
;

1366 
	`íãr_¸
(
bm_£m
, 18);

1367 
	`íãr_¸
(
é_£m
, 18);

1370 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

1372 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1374 
	`Àave_¸
(
é_£m
, 18);

1375 
	`Àave_¸
(
bm_£m
, 18);

1376  
NRK_ERROR
;

1379 if–(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
()Ë|| (sock[sock_num].
pödex
 == -1) )

1381 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1383 
	`Àave_¸
(
é_£m
, 18);

1384 
	`Àave_¸
(
bm_£m
, 18);

1385  
NRK_ERROR
;

1390 
p‹t_ödex
 = 
sock
[
sock_num
].
pödex
;

1392 if(
sock
[
sock_num
].
timeout
.
£cs
 =0 && sock[sock_num].timeout.
«no_£cs
 == 0)

1397 
	`Àave_¸
(
é_£m
, 18);

1398 
	`Àave_¸
(
bm_£m
, 18);

1399 
my_sigs
 = 
	`ƒk_evít_waô
–
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) );

1400 
	`íãr_¸
(
bm_£m
, 18);

1401 
	`íãr_¸
(
é_£m
, 18);

1403 if(
my_sigs
 == 0)

1405 
	`ƒk_öt_dißbÀ
();

1406 
	`ƒk_Àd_£t
(
RED_LED
);

1408 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_event_wait() (withoutÅimeout)\r\n"));

1411 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) )

1413 
	`Àave_¸
(
é_£m
, 18);

1414 
	`Àave_¸
(
bm_£m
, 18);

1415  
NRK_OK
;

1420 
	`ƒk_öt_dißbÀ
();

1421 
	`ƒk_Àd_£t
(
RED_LED
);

1423 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): Unknown signalÑeceived (withoutÅimeout)\r\n"));

1429 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
 )

1431 
	`ƒk_öt_dißbÀ
();

1432 
	`ƒk_Àd_£t
(
RED_LED
);

1434 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑegistering forÇrk_wakeup_signal\r\n"));

1436 if–
	`ƒk_£t_√xt_wakeup
(
sock
[
sock_num
].
timeout
Ë=
NRK_ERROR
)

1438 
	`ƒk_öt_dißbÀ
();

1439 
	`ƒk_Àd_£t
(
RED_LED
);

1441 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_set_next_wakeup()\r\n"));

1445 
	`Àave_¸
(
é_£m
, 18);

1446 
	`Àave_¸
(
bm_£m
, 18);

1447 
my_sigs
 = 
	`ƒk_evít_waô
–
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
) );

1448 
	`íãr_¸
(
bm_£m
, 18);

1449 
	`íãr_¸
(
é_£m
, 18);

1451 if(
my_sigs
 == 0)

1453 
	`ƒk_öt_dißbÀ
();

1454 
	`ƒk_Àd_£t
(
RED_LED
);

1456 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_event_wait()\r\n"));

1459 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) )

1461 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1462 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1464 
	`Àave_¸
(
é_£m
, 18);

1465 
	`Àave_¸
(
bm_£m
, 18);

1466  
NRK_OK
;

1469 if–
my_sigs
 & 
	`SIG
(
ƒk_wakeup_sig«l
) )

1471 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1472 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1473 
	`_ƒk_î∫o_£t
(
SOCKET_TIMEOUT
);

1475 
	`Àave_¸
(
é_£m
, 18);

1476 
	`Àave_¸
(
bm_£m
, 18);

1477  
NRK_ERROR
;

1481 
	`ƒk_öt_dißbÀ
();

1482 
	`ƒk_Àd_£t
(
RED_LED
);

1484 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): Unknown signalÑeceived (withÅimeout)\r\n"));

1489 
	`Àave_¸
(
é_£m
, 18);

1490 
	`Àave_¸
(
bm_£m
, 18);

1491  
NRK_ERROR
;

1492 
	}
}

1494 
	$¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
 *
£g
)

1496 
	`¥ötf
("[%d %d %d] ", 
£g
 -> 
§cP‹t
, seg -> 
de°P‹t
, seg -> 
Àngth
);

1498 
	}
}

1500 
	$¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *
£g
)

1502 
öt8_t
 
i
;

1504 
	`¥öt_£g_hódî
(
£g
);

1505 
i
 = 0; i < 
£g
 -> 
Àngth
; i++)

1506 
	`¥ötf
("%d ", (
£g
 -> 
d©a
)[
i
]);

1508 
	`¥ötf
("\r\n");

1509 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/nrk_cfg.h

4 #i‚de‡
__ƒk_cfg_h


5 
	#__ƒk_cfg_h


	)

9 
	#NRK_REPORT_ERRORS


	)

12 
	#NRK_HALT_AND_LOOP_ON_ERROR


	)

21 
	#NRK_STACK_CHECK


	)

26 
	#NRK_NO_POWER_DOWN


	)

32 
	#NRK_MAX_TASKS
 8

	)

35 
	#NRK_TASK_IDLE_STK_SIZE
 128

36 
	#NRK_APP_STACKSIZE
 192

	)

37 
	#NRK_KERNEL_STACKSIZE
 128

	)

38 
	#NRK_MAX_RESOURCE_CNT
 9

	)

42 
	#SLIP_PCP_CEILING
 19

44 
	#NRK_UART_BUF
 1

	)

46 
	#MAX_RX_UART_BUF
 128

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/BufferManager.c

3 
	~<°döt.h
>

4 
	~<ƒk.h
>

5 
	~<ö˛ude.h
>

6 
	~<ulib.h
>

7 
	~<°dio.h
>

8 
	~<hÆ.h
>

9 
	~<ƒk_îr‹.h
>

11 
	~"Buf„rM™agî.h
"

12 
	~"NWEº‹Codes.h
"

13 
	~"Debug.h
"

17 
P‹t
 
p‹ts
[];

18 
¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *);

21 
¥öt_pkt_hódî
();

25 
Re˚iveBuf„rUDP
 
	grx_buf_udp
[
MAX_RX_QUEUE_SIZE
];

26 
öt8_t
 
	gnum_bufs_‰ì
;

28 
TønsmôBuf„r
 
	gtx_buf
[
MAX_TX_QUEUE_SIZE
];

30 
Re˚iveBuf„rM™agî
 
	grx_buf_mgr
[
NUM_PORTS
];

32 
TønsmôBuf„rM™agî
 
	gtx_buf_mgr
;

34 
uöt32_t
 
	gex˚ssPﬁicySëtögs
;

37 
ƒk_£m_t
 *
	gbm_£m
;

40 
	$öôüli£_nw_∑ckë
(
NW_Packë
 *
pkt
)

42 
öt8_t
 
i
;

44 
pkt
 -> 
§c
 = 0;

45 
pkt
 -> 
de°
 = 0;

46 
pkt
 -> 
âl
 = 0;

47 
pkt
 -> 
ty≥
 = 0xFF;

48 
pkt
 -> 
Àngth
 = 0;

49 
pkt
 -> 
¥io
 = 0;

51 
i
 = 0; i < 
MAX_NETWORK_PAYLOAD
; i++)

52 (
pkt
 -> 
d©a
)[
i
] = 0;

55 
	}
}

58 
ölöe
 
	$íãr_¸
(
ƒk_£m_t
 *
£m
, 
öt8_t
 
‚o
)

60 if–
	`ƒk_£m_≥nd
(
£m
Ë=
NRK_ERROR
 )

62 
‚o
)

66 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on initialise_transport_layer_udp()\r\n"));

70 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_next_available_socket()\r\n"));

74 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on create_socket()\r\n"));

78 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_next_available_port()\r\n"));

82 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on check_port_available()\r\n"));

86 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onássign_port()\r\n"));

90 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑelease_port()\r\n"));

94 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on bind()\r\n"));

98 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_rx_queue_size()\r\n"));

102 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on set_rx_queue_size()\r\n"));

106 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑelease_buffer()\r\n"));

110 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on close_socket()\r\n"));

114 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on is_port_associated()\r\n"));

118 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on send()\r\n"));

122 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on set_timeout()\r\n"));

126 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑeceive()\r\n"));

130 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on check_receive_queue()\r\n"));

134 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on wait_until_send_done()\r\n"));

139 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onádd_neighbor()\r\n"));

143 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on shouldIMultihop()\r\n"));

147 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on multihop()\r\n"));

151 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑoute_addr()\r\n"));

154 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑoute_packet()\r\n"));

158 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on sendToGateway()\r\n"));

162 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖkt_type()\r\n"));

166 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÅl_type()\r\n"));

170 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÇw_ctrl_type()\r\n"));

174 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖrocess_app_pkt()\r\n"));

178 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖrocess_nw_ctrl_pkt()\r\n"));

182 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÖrocess_other_pkt()\r\n"));

186 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on build_Msg_Hello()\r\n"));

190 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on build_Msg_NgbList()\r\n"));

194 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÇl_rx_task()\r\n"));

198 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÇl_tx_task()\r\n"));

202 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on create_network_layer_tasks()\r\n"));

206 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on initialise_network_layer()\r\n"));

211 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on initialise_buffer_manager()\r\n"));

215 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on is_excess_policy_valid()\r\n"));

219 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on set_excess_policy()\r\n"));

223 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_excess_policy()\r\n"));

227 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_index_unallocated_rx_buf()\r\n"));

231 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_rx_pq()\r\n"));

235 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_rx_pq()\r\n"));

239 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_rx_fq()\r\n"));

243 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_rx_fq()\r\n"));

247 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_tx_aq()\r\n"));

251 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_tx_aq()\r\n"));

255 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on insert_tx_fq()\r\n"));

259 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending onÑemove_tx_fq()\r\n"));

263 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖending on get_in_process_buf_count()\r\n"));

269 
	`ƒk_k¥ötf
(
	`PSTR
("enter_cr(): Unknown functionÇumber\r\n"));

275 
	}
}

278 
ölöe
 
	$Àave_¸
(
ƒk_£m_t
 *
£m
, 
öt8_t
 
‚o
)

280 if–
	`ƒk_£m_po°
(
£m
Ë=
NRK_ERROR
 )

282 
‚o
)

286 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on initialise_transport_layer_udp()\r\n"));

290 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_next_available_socket()\r\n"));

294 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on create_socket()\r\n"));

298 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_next_available_port()\r\n"));

302 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on check_port_available()\r\n"));

306 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onássign_port()\r\n"));

310 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑelease_port()\r\n"));

314 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on bind()\r\n"));

318 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_rx_queue_size()\r\n"));

322 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on set_rx_queue_size()\r\n"));

326 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑelease_buffer()\r\n"));

330 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on close_socket()\r\n"));

334 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on is_port_associated()\r\n"));

338 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on send()\r\n"));

344 
uöt32_t
 
i
;

345 
	`ƒk_öt_dißbÀ
();

346 
i
 = 0; i < 30000000L; i++)

348 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on set_timeout()\r\n"));

349 
	`¥ötf
("%d ", 
	`ƒk_î∫o_gë
());

355 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑeceive()\r\n"));

359 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on check_receive_queue()\r\n"));

363 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on wait_until_send_done()\r\n"));

368 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onádd_neighbor()\r\n"));

372 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on shouldIMultihop()\r\n"));

376 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on multihop()\r\n"));

380 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑoute_addr()\r\n"));

383 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑoute_packet()\r\n"));

387 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on sendToGateway()\r\n"));

391 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖkt_type()\r\n"));

395 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÅl_type()\r\n"));

399 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÇw_ctrl_type()\r\n"));

403 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖrocess_app_pkt()\r\n"));

407 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖrocess_nw_ctrl_pkt()\r\n"));

411 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÖrocess_other_pkt()\r\n"));

415 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on build_Msg_Hello()\r\n"));

419 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on build_Msg_NgbList()\r\n"));

423 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÇl_rx_task()\r\n"));

427 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÇl_tx_task()\r\n"));

431 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on create_network_layer_tasks()\r\n"));

435 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on initialise_network_layer()\r\n"));

440 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on initialise_buffer_manager()\r\n"));

444 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on is_excess_policy_valid()\r\n"));

448 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on set_excess_policy()\r\n"));

452 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_excess_policy()\r\n"));

456 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_index_unallocated_rx_buf()\r\n"));

460 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_rx_pq()\r\n"));

464 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_rx_pq()\r\n"));

468 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_rx_fq()\r\n"));

472 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_rx_fq()\r\n"));

476 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_tx_aq()\r\n"));

480 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_tx_aq()\r\n"));

484 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on insert_tx_fq()\r\n"));

488 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting onÑemove_tx_fq()\r\n"));

492 
	`ƒk_k¥ötf
(
	`PSTR
("Error semÖosting on get_in_process_buf_count()\r\n"));

498 
	`ƒk_k¥ötf
(
	`PSTR
("leave_cr(): Unknown functionÇumber\r\n"));

504 
	}
}

506 
	$öôüli£_buf„r_m™agî
()

508 
öt8_t
 
i
;

511 
i
 = 0; i < 
MAX_RX_QUEUE_SIZE
; i++)

513 
rx_buf_udp
[
i
].
°©us
 = 
UNALLOCATED
;

514 
rx_buf_udp
[
i
].
√xt
 = 
NULL
;

516 
num_bufs_‰ì
 = 
MAX_RX_QUEUE_SIZE
;

519 
i
 = 0; i < 
NUM_PORTS
; i++)

521 
rx_buf_mgr
[
i
].
pid
 = 
INVALID_PID
;

522 
rx_buf_mgr
[
i
].
pödex
 = -1;

523 
rx_buf_mgr
[
i
].
hód_fq
 = 
NULL
;

524 
rx_buf_mgr
[
i
].
èû_fq
 = 
NULL
;

525 
rx_buf_mgr
[
i
].
hód_pq
 = 
NULL
;

526 
rx_buf_mgr
[
i
].
èû_pq
 = 
NULL
;

527 
rx_buf_mgr
[
i
].
cou¡TŸÆ
 = 0;

528 
rx_buf_mgr
[
i
].
cou¡Fªe
 = 0;

532 
tx_buf_mgr
.
hód_fq
 = 
NULL
;

533 
tx_buf_mgr
.
èû_fq
 = 
NULL
;

534 
tx_buf_mgr
.
hód_aq
 = 
NULL
;

535 
tx_buf_mgr
.
èû_aq
 = 
NULL
;

536 
tx_buf_mgr
.
cou¡_fq
 = 0;

537 
tx_buf_mgr
.
cou¡_aq
 = 0;

540 
i
 = 0; i < 
MAX_TX_QUEUE_SIZE
; i++)

542 
tx_buf
[
i
].
°©us
 = 
EMPTY
;

543 
tx_buf
[
i
].
√xt
 = 
NULL
;

544 
	`öôüli£_nw_∑ckë
–&(
tx_buf
[
i
].
pkt
) );

545 
	`ö£π_tx_fq
–&(
tx_buf
[
i
]) );

549 
ex˚ssPﬁicySëtögs
 = 0;

551 
bm_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

552 if(
bm_£m
 =
NULL
)

554 
	`ƒk_öt_dißbÀ
();

555 
	`ƒk_Àd_£t
(
RED_LED
);

557 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_buffer_manager(): Error creatingÅhe semaphore\r\n"));

560 if(
DEBUG_BM
 == 2)

562 
	`ƒk_k¥ötf
(
	`PSTR
("InitialÅx buffer\r\n"));

563 
	`¥öt_tx_buf„r
();

567 
	}
}

569 
ölöe
 
	$¥öt_tx_buf„r
()

571 
öt8_t
 
i
;

573 
	`ƒk_k¥ötf
(
	`PSTR
("Transmit Buffer: "));

574 if(
tx_buf_mgr
.
hód_fq
 =
NULL
)

575 
	`¥ötf
("-1 ");

577 
	`¥ötf
("%d ", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
hód_fq
));

579 if(
tx_buf_mgr
.
èû_fq
 =
NULL
)

580 
	`¥ötf
("-1 ");

582 
	`¥ötf
("%d ", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
èû_fq
));

584 if(
tx_buf_mgr
.
hód_aq
 =
NULL
)

585 
	`¥ötf
("-1 ");

587 
	`¥ötf
("%d ", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
hód_aq
));

589 if(
tx_buf_mgr
.
èû_aq
 =
NULL
)

590 
	`¥ötf
("-1\n");

592 
	`¥ötf
("%d\n", 
	`c⁄vît_±r_to_ödex
(
tx_buf_mgr
.
èû_aq
));

594 
i
 = 0; i < 
MAX_TX_QUEUE_SIZE
; i++)

595 
	`¥öt_pkt
(&(
tx_buf
[
i
].
pkt
));

598 
	}
}

600 
	$¥öt_rx_buf„rs
(
uöt8_t
 
p‹t
)

602 
öt8_t
 
rbm_ödex
;

603 
Re˚iveBuf„rUDP
 *
buf
;

605 
rbm_ödex
 = 
	`p‹t_to_rbm_ödex
(
p‹t
);

607 if(
DEBUG_BM
 == 0)

609 
	`ƒk_k¥ötf
(
	`PSTR
("BM:Ñbm_index = "));

610 
	`¥ötf
("%d\r\n", 
rbm_ödex
);

612 
	`ƒk_k¥ötf
(
	`PSTR
("Port queue:\r\n"));

613 
buf
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

614 
buf
 !
NULL
)

616 
	`¥ötf
("%d ", 
buf
 -> 
§cAddr
);

617 
	`¥öt_£g
–&(
buf
 -> 
£g
) );

622 
	}
}

624 
ölöe
 
öt8_t
 
	$c⁄vît_±r_to_ödex
(
TønsmôBuf„r
 *
±r
)

626 
öt8_t
 
i
;

628 
i
 = 0; i < 
MAX_TX_QUEUE_SIZE
; i++)

629 if(
±r
 =&
tx_buf
[
i
])

632  
i
;

633 
	}
}

635 
ölöe
 
öt8_t
 
	$is_ex˚ss_pﬁicy_vÆid
(
öt8_t
 
¥ef
)

637 
¥ef
)

639 
OVERWRITE
:

640 
DROP
:

641  
TRUE
;

643  
FALSE
;

644 
	}
}

646 
öt8_t
 
	$£t_ex˚ss_pﬁicy
(
öt8_t
 
¥io
, i¡8_à
¥ef
)

648 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
 || 
	`is_ex˚ss_pﬁicy_vÆid
(
¥ef
Ë=
FALSE
)

650 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

651  
NRK_ERROR
;

654 
	`íãr_¸
(
bm_£m
, 39);

656 if(
¥ef
 =
DROP
)

657 
ex˚ssPﬁicySëtögs
 |(
uöt32_t
)1 << 
¥io
;

659 
ex˚ssPﬁicySëtögs
 &~–(
uöt32_t
)1 << 
¥io
 );

661 
	`Àave_¸
(
bm_£m
, 39);

663  
NRK_OK
;

664 
	}
}

666 
öt8_t
 
	$gë_ex˚ss_pﬁicy
(
öt8_t
 
¥io
)

668 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
)

670 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

671  
NRK_ERROR
;

674 
	`íãr_¸
(
bm_£m
, 40);

677 if–((
ex˚ssPﬁicySëtögs
 >> 
¥io
Ë& ((
uöt32_t
)1)) == 0 )

679 
	`Àave_¸
(
bm_£m
, 40);

680  
OVERWRITE
;

683 
	`Àave_¸
(
bm_£m
, 40);

684  
DROP
;

685 
	}
}

687 
öt8_t
 
	$gë_ödex_u«Œoˇãd_rx_buf
()

689 
öt8_t
 
i
;

691 
i
 = 0; i < 
MAX_RX_QUEUE_SIZE
; i++)

692 if(
rx_buf_udp
[
i
].
°©us
 =
UNALLOCATED
)

693  
i
;

695  
NRK_ERROR
;

696 
	}
}

698 
ölöe
 
öt8_t
 
	$p‹t_to_rbm_ödex
(
uöt8_t
 
p‹t
)

700 
öt8_t
 
i
;

702 
i
 = 0; i < 
NUM_PORTS
; i++)

703 if(
rx_buf_mgr
[
i
].
pödex
 != -1)

704 if(
p‹ts
[
rx_buf_mgr
[
i
].
pödex
].
≤o
 =
p‹t
)

705  
i
;

708  
NRK_ERROR
;

709 
	}
}

711 
ölöe
 
öt8_t
 
	$p‹t_to_p‹t_ödex
(
uöt8_t
 
p‹t
)

713 
öt8_t
 
i
;

715 
i
 = 0; i < 
NUM_PORTS
; i++)

716 if(
p‹ts
[
i
].
≤o
 =
p‹t
)

717  
i
;

720  
NRK_ERROR
;

721 
	}
}

723 
	$ö£π_rx_pq
(
Tøn•‹t_Segmít_UDP
 *
£g
, 
öt8_t
 
¥io
, 
uöt16_t
 
addr
, i¡8_à
rssi
)

725 
öt8_t
 
rbm_ödex
;

726 
Re˚iveBuf„rUDP
 *
buf
, *
±r
, *
¥ev
;

728 
rbm_ödex
 = 
	`p‹t_to_rbm_ödex
(
£g
 -> 
de°P‹t
);

730 if(
DEBUG_BM
 == 2)

732 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): DestPort = "));

733 
	`¥ötf
("%d\r\n", 
£g
 -> 
de°P‹t
);

735 
buf
 = 
	`ªmove_rx_fq
(
rbm_ödex
, 
EMPTY
);

738 
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

739 
¥ev
 = 
NULL
;

742 
±r
 !
NULL
)

744 if(
±r
 -> 
¥io
 <Örio)

747 
¥ev
 = 
±r
;

748 
±r
 =Öå -> 
√xt
;

751 if(
DEBUG_BM
 == 2)

753 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): AfterÖtrÜoop\r\n"));

756 if(
buf
 !
NULL
)

758 if(
DEBUG_BM
 == 2)

760 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): There is space\r\n"));

764 
buf
 -> 
£g
 = *seg;

765 
buf
 -> 
°©us
 = 
FULL
;

766 
buf
 -> 
¥io
 =Örio;

767 
buf
 -> 
§cAddr
 = 
addr
;

768 
buf
 -> 
rssi
 =Ñssi;

769 
buf
 -> 
√xt
 = 
±r
;

772 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =
NULL
)

774 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =Ñx_buf_mgr[rbm_ödex].
èû_pq
 = 
buf
;

776 if(
¥ev
 =
NULL
)

777 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 = 
buf
;

780 
¥ev
 -> 
√xt
 = 
buf
;

781 if(
¥ev
 =
rx_buf_mgr
[
rbm_ödex
].
èû_pq
)

782 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 = 
buf
;

786 if(
DEBUG_BM
 == 2)

788 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): BeforeÑeturning (there is space)\r\n"));

799 if(
DEBUG_BM
 == 2)

801 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): No space\r\n"));

805 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =
NULL
)

807 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 != 0)

809 
	`ƒk_öt_dißbÀ
();

810 
	`ƒk_Àd_£t
(
RED_LED
);

812 
	`ƒk_k¥ötf
(
	`PSTR
("insert_rx_pq(): Bug found in implementation of countFree inÑx_buf_mgr\r\n"));

814 if(
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 !
NULL
)

816 
	`ƒk_öt_dißbÀ
();

817 
	`ƒk_Àd_£t
(
RED_LED
);

819 
	`ƒk_k¥ötf
(
	`PSTR
("insert_rx_pq(): Bug found in implementation ofÅail_pq inÑx_buf_mgr\r\n"));

822 if(
DEBUG_BM
 == 2)

824 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): BeforeÑeturning. No space butÖort queueálsoÉmpty\r\n"));

833 if(
DEBUG_BM
 == 2)

835 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Possibility ofÑeplacement\r\n"));

837 if–(
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 <Örio )

841 if(
DEBUG_BM
 == 2)

843 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 1\r\n"));

846 
Re˚iveBuf„rUDP
 *
qå
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

848 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =rx_buf_mgr[rbm_ödex].
èû_pq
)

851 if(
DEBUG_BM
 == 2)

853 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 2\r\n"));

855 
qå
 -> 
£g
 = *seg;

856 
qå
 -> 
¥io
 =Örio;

857 
qå
 -> 
§cAddr
 = 
addr
;

858 
qå
 -> 
rssi
 =Ñssi;

864 if(
DEBUG_BM
 == 2)

866 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Before qtrÜoop\r\n"));

869 
qå
 -> 
√xt
 !
rx_buf_mgr
[
rbm_ödex
].
èû_pq
)

870 
qå
 = qå -> 
√xt
;

872 if(
DEBUG_BM
 == 2)

874 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): After qtrÜoop\r\n"));

878 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
£g
 = *seg;

879 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 =Örio;

880 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
§cAddr
 = 
addr
;

881 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
rssi
 =Ñssi;

884 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
√xt
 = 
±r
;

885 if(
¥ev
 =
NULL
)

886 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =Ñx_buf_mgr[rbm_ödex].
èû_pq
;

888 
¥ev
 -> 
√xt
 = 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
;

890 
qå
 -> 
√xt
 = 
NULL
;

891 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 = 
qå
;

896 if–(
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 ==Örio )

899 if(
DEBUG_BM
 == 2)

901 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 3\r\n"));

904 if–((
ex˚ssPﬁicySëtögs
 >> 
¥io
Ë& ((
uöt32_t
)1)Ë=
OVERWRITE
)

906 if(
DEBUG_BM
 == 2)

908 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 4\r\n"));

911 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
£g
 = *seg;

912 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
¥io
 =Örio;

913 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
§cAddr
 = 
addr
;

914 (
rx_buf_mgr
[
rbm_ödex
].
èû_pq
Ë-> 
rssi
 =Ñssi;

920 if(
DEBUG_BM
 == 2)

922 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 5\r\n"));

929 if(
DEBUG_BM
 == 2)

931 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 6\r\n"));

937 if(
DEBUG_BM
 == 2)

939 
	`ƒk_k¥ötf
(
	`PSTR
("BM: insert_rx_pq(): Inside 7\r\n"));

942 
	}
}

944 
Re˚iveBuf„rUDP
* 
	$ªmove_rx_pq
(
öt8_t
 
rbm_ödex
)

947 
Re˚iveBuf„rUDP
 *
±r
;

949 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =
NULL
)

951  
NULL
;

954 if(
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =rx_buf_mgr[rbm_ödex].
èû_pq
)

955 
rx_buf_mgr
[
rbm_ödex
].
èû_pq
 = 
NULL
;

957 
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
;

959 
rx_buf_mgr
[
rbm_ödex
].
hód_pq
 =Ñx_buf_mgr[rbm_ödex].hód_pq -> 
√xt
;

961  
±r
;

962 
	}
}

965 
	$ö£π_rx_fq
(
Re˚iveBuf„rUDP
 *
buf
, 
öt8_t
 
rbm_ödex
, i¡8_à
°©us
)

968 if(
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =
NULL
)

970 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =Ñx_buf_mgr[rbm_ödex].
èû_fq
 = 
buf
;

971 
buf
 -> 
√xt
 = 
NULL
;

975 
rx_buf_mgr
[
rbm_ödex
].
èû_fq
 -> 
√xt
 = 
buf
;

976 
buf
 -> 
√xt
 = 
NULL
;

977 
rx_buf_mgr
[
rbm_ödex
].
èû_fq
 = 
buf
;

980 if(
°©us
 =
EMPTY
)

982 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
++;

983 
buf
 -> 
°©us
 = 
EMPTY
;

987 
	}
}

990 
Re˚iveBuf„rUDP
* 
	$ªmove_rx_fq
(
öt8_t
 
rbm_ödex
, i¡8_à
°©us
)

993 
Re˚iveBuf„rUDP
 *
±r
;

994 
Re˚iveBuf„rUDP
 *
¥ev
 = 
NULL
;

996 if(
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =
NULL
)

997  
NULL
;

999 
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
;

1000 
±r
 !
NULL
)

1002 if(
°©us
 =
EMPTY
)

1004 if(
±r
 -> 
°©us
 =
EMPTY
)

1007 if(
±r
 -> 
°©us
 =
FULL
)

1009 
¥ev
 = 
±r
;

1010 
±r
 =Öå -> 
√xt
;

1012 if(
±r
 =
NULL
)

1013  
NULL
;

1015 if(
¥ev
 =
NULL
)

1017 if(
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =rx_buf_mgr[rbm_ödex].
èû_fq
)

1018 
rx_buf_mgr
[
rbm_ödex
].
èû_fq
 = 
NULL
;

1020 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
 =Ñx_buf_mgr[rbm_ödex].hód_fq -> 
√xt
;

1021 if(
°©us
 =
EMPTY
)

1022 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
--;

1023  
±r
;

1027 
¥ev
 -> 
√xt
 = 
±r
 ->Çext;

1028 if(
°©us
 =
EMPTY
)

1029 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
--;

1030  
±r
;

1031 
	}
}

1034 
öt8_t
 
	$ö£π_tx_aq
(
NW_Packë
 *
pkt
)

1036 
TønsmôBuf„r
 *
buf
 = 
	`ªmove_tx_fq
();

1037 
TønsmôBuf„r
 *
±r
;

1038 
TønsmôBuf„r
 *
¥ev
;

1040 if(
buf
 =
NULL
)

1042  
NRK_ERROR
;

1045 if(
tx_buf_mgr
.
hód_aq
 =
NULL
)

1048 
buf
 -> 
pkt
 = *pkt;

1049 
buf
 -> 
°©us
 = 
FULL
;

1050 
buf
 -> 
¥io
 = 
pkt
 ->Örio;

1051 
buf
 -> 
√xt
 = 
NULL
;

1053 
tx_buf_mgr
.
hód_aq
 =Åx_buf_mgr.
èû_aq
 = 
buf
;

1054 
tx_buf_mgr
.
cou¡_aq
++;

1055  
NRK_OK
;

1059 
±r
 = 
tx_buf_mgr
.
hód_aq
;

1060 
¥ev
 = 
NULL
;

1063 
±r
 !
NULL
)

1065 if(
±r
 -> 
¥io
 < 
pkt
 ->Örio)

1068 
¥ev
 = 
±r
;

1069 
±r
 =Öå -> 
√xt
;

1072 
buf
 -> 
pkt
 = *pkt;

1073 
buf
 -> 
°©us
 = 
FULL
;

1074 
buf
 -> 
¥io
 = 
pkt
 ->Örio;

1075 
buf
 -> 
√xt
 = 
±r
;

1077 if(
¥ev
 =
NULL
)

1078 
tx_buf_mgr
.
hód_aq
 = 
buf
;

1081 
¥ev
 -> 
√xt
 = 
buf
;

1082 if(
¥ev
 =
tx_buf_mgr
.
èû_aq
)

1083 
tx_buf_mgr
.
èû_aq
 = 
buf
;

1087 
tx_buf_mgr
.
cou¡_aq
++;

1089  
NRK_OK
;

1090 
	}
}

1093 
TønsmôBuf„r
* 
	$ªmove_tx_aq
()

1097 
TønsmôBuf„r
 *
±r
;

1099 if(
tx_buf_mgr
.
hód_aq
 =
NULL
)

1101  
NULL
;

1104 if(
tx_buf_mgr
.
hód_aq
 =tx_buf_mgr.
èû_aq
)

1105 
tx_buf_mgr
.
èû_aq
 = 
NULL
;

1107 
±r
 = 
tx_buf_mgr
.
hód_aq
;

1109 
tx_buf_mgr
.
hód_aq
 =Åx_buf_mgr.hód_aq -> 
√xt
;

1110 
tx_buf_mgr
.
cou¡_aq
--;

1112  
±r
;

1113 
	}
}

1115 
	$ö£π_tx_fq
(
TønsmôBuf„r
 *
buf
)

1119 if(
tx_buf_mgr
.
hód_fq
 =
NULL
)

1120 
tx_buf_mgr
.
hód_fq
 =Åx_buf_mgr.
èû_fq
 = 
buf
;

1123 
tx_buf_mgr
.
èû_fq
 -> 
√xt
 = 
buf
;

1124 
tx_buf_mgr
.
èû_fq
 = 
buf
;

1126 
buf
 -> 
°©us
 = 
EMPTY
;

1127 
buf
 -> 
√xt
 = 
NULL
;

1128 
	`öôüli£_nw_∑ckë
(&(
buf
 -> 
pkt
));

1129 
tx_buf_mgr
.
cou¡_fq
++;

1132 
	}
}

1135 
TønsmôBuf„r
* 
	$ªmove_tx_fq
()

1138 
TønsmôBuf„r
 *
±r
;

1140 if(
tx_buf_mgr
.
hód_fq
 =
NULL
)

1141  
NULL
;

1143 if(
tx_buf_mgr
.
hód_fq
 =tx_buf_mgr.
èû_fq
)

1144 
tx_buf_mgr
.
èû_fq
 = 
NULL
;

1146 
±r
 = 
tx_buf_mgr
.
hód_fq
;

1148 
tx_buf_mgr
.
hód_fq
 =Åx_buf_mgr.hód_fq -> 
√xt
;

1149 
tx_buf_mgr
.
cou¡_fq
--;

1151  
±r
;

1152 
	}
}

1155 
öt8_t
 
	$gë_ö_¥o˚ss_buf_cou¡
(
öt8_t
 
rbm_ödex
)

1157 
öt8_t
 
cou¡
 = 0;

1159 
Re˚iveBuf„rUDP
 *
±r
 = 
rx_buf_mgr
[
rbm_ödex
].
hód_fq
;

1161 
±r
 !
NULL
)

1163 if(
±r
 -> 
°©us
 =
FULL
)

1164 
cou¡
++;

1166 
±r
 =Öå -> 
√xt
;

1169  
cou¡
;

1170 
	}
}

1172 
öt8_t
 
	$gë_num_bufs_‰ì
()

1174 
öt8_t
 
n
;

1176 
n
 = 
num_bufs_‰ì
;

1178  
n
;

1179 
	}
}

1182 
	$£t_num_bufs_‰ì
(
öt8_t
 
n
)

1184 
num_bufs_‰ì
 = 
n
;

1186 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/BufferManager.h

4 #i‚de‡
_BUFFER_MANAGER_H


5 
	#_BUFFER_MANAGER_H


	)

7 
	~<°döt.h
>

9 
	~"Tøn•‹tLayîUDP.h
"

10 
	~"Nëw‹kLayî.h
"

16 
	#DEBUG_BM
 0

17 

	)

18 
	#DEFAULT_RX_QUEUE_SIZE
 1

19 

	)

21 
	#UNALLOCATED
 1

22 
	#EMPTY
 2

23 
	#FULL
 3

24 

	)

29 
	#OVERWRITE
 0

	)

30 
	#DROP
 1

	)

33 
	#MAX_TASK_PRIORITY
 19

	)

37 
	sRe˚iveBuf„rUDP


39 
Tøn•‹t_Segmít_UDP
 
	m£g
;

40 
öt8_t
 
	m°©us
;

41 
öt8_t
 
	m¥io
;

43 
öt8_t
 
	mrssi
;

44 
uöt16_t
 
	m§cAddr
;

45 
Re˚iveBuf„rUDP
 *
	m√xt
;

46 }
	tRe˚iveBuf„rUDP
;

50 
öt8_t
 
	mpid
;

51 
öt8_t
 
	mpödex
;

52 
Re˚iveBuf„rUDP
 *
	mhód_fq
;

53 
Re˚iveBuf„rUDP
 *
	mèû_fq
;

54 
Re˚iveBuf„rUDP
 *
	mhód_pq
;

55 
Re˚iveBuf„rUDP
 *
	mèû_pq
;

56 
öt8_t
 
	mcou¡TŸÆ
;

57 
öt8_t
 
	mcou¡Fªe
;

58 }
	tRe˚iveBuf„rM™agî
;

60 
	sTønsmôBuf„r


62 
NW_Packë
 
	mpkt
;

63 
öt8_t
 
	m°©us
;

64 
öt8_t
 
	m¥io
;

67 
TønsmôBuf„r
 *
	m√xt
;

68 }
	tTønsmôBuf„r
;

72 
TønsmôBuf„r
 *
	mhód_fq
;

73 
TønsmôBuf„r
 *
	mèû_fq
;

74 
TønsmôBuf„r
 *
	mhód_aq
;

75 
TønsmôBuf„r
 *
	mèû_aq
;

76 
öt8_t
 
	mcou¡_aq
;

77 
öt8_t
 
	mcou¡_fq
;

78 }
	tTønsmôBuf„rM™agî
;

84 
öôüli£_buf„r_m™agî
();

94 
öt8_t
 
is_ex˚ss_pﬁicy_vÆid
(öt8_à
¥ef
);

103 
öt8_t
 
£t_ex˚ss_pﬁicy
(öt8_à
¥io
, i¡8_à
¥ef
);

116 
öt8_t
 
gë_ex˚ss_pﬁicy
(öt8_à
¥io
);

128 
öt8_t
 
gë_ödex_u«Œoˇãd_rx_buf
();

139 
öt8_t
 
p‹t_to_rbm_ödex
(
uöt8_t
 
p‹t
);

148 
öt8_t
 
p‹t_to_p‹t_ödex
(
uöt8_t
 
p‹t
);

157 
ö£π_rx_pq
(
Tøn•‹t_Segmít_UDP
 *
£g
, 
öt8_t
 
¥io
, 
uöt16_t
 
addr
, i¡8_à
rssi
);

171 
Re˚iveBuf„rUDP
* 
ªmove_rx_pq
(
öt8_t
 
rbm_ödex
);

180 
ö£π_rx_fq
(
Re˚iveBuf„rUDP
 *
buf
, 
öt8_t
 
rbm_ödex
, i¡8_à
°©us
);

193 
Re˚iveBuf„rUDP
* 
ªmove_rx_fq
(
öt8_t
 
rbm_ödex
, i¡8_à
°©us
);

204 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
 *
pkt
);

215 
TønsmôBuf„r
* 
ªmove_tx_aq
();

226 
ö£π_tx_fq
(
TønsmôBuf„r
 *
buf
);

235 
TønsmôBuf„r
* 
ªmove_tx_fq
();

245 
öt8_t
 
gë_ö_¥o˚ss_buf_cou¡
(öt8_à
rbm_ödex
);

254 
öt8_t
 
gë_num_bufs_‰ì
();

263 
£t_num_bufs_‰ì
(
öt8_t
 
n
);

272 
¥öt_tx_buf„r
();

281 
öt8_t
 
c⁄vît_±r_to_ödex
(
TønsmôBuf„r
 *
±r
);

282 
¥öt_rx_buf„rs
(
uöt8_t
 
p‹t
);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Debug.c

1 
	~<ƒk.h
>

2 
	~<ö˛ude.h
>

3 
	~<ulib.h
>

4 
	~<°dio.h
>

5 
	~<avr/¶ìp.h
>

6 
	~<hÆ.h
>

7 
	~<°döt.h
>

9 
	~"Debug.h
"

12 
	$go_öto_∑nic
(*
°r
)

15 
	`ƒk_öt_dißbÀ
();

17 
	`ƒk_Àd_£t
(
RED_LED
);

19 
	`¥ötf
("PANIC: %s. Thi†shouldÇevî h≠≥n\n", 
°r
);

21 
	}
}

23 
	$¥öt_nw_°ack_î∫o
(
öt8_t
 
n
)

25 
n
)

28 
	`ƒk_k¥ötf
(
	`PSTR
("MaximumÇeighborÜimitÑeached\r\n"));

32 
	`ƒk_k¥ötf
(
	`PSTR
("No socket descriptorávailable\r\n"));

36 
	`ƒk_k¥ötf
(
	`PSTR
("Unsupported socketÅype\r\n"));

40 
	`ƒk_k¥ötf
(
	`PSTR
("Port is unavailable\r\n"));

44 
	`ƒk_k¥ötf
(
	`PSTR
("Invalid socket descriptor\r\n"));

48 
	`ƒk_k¥ötf
(
	`PSTR
("Invalid call made\r\n"));

52 
	`ƒk_k¥ötf
(
	`PSTR
("NoÖortsávailable\r\n"));

56 
	`ƒk_k¥ötf
(
	`PSTR
("InvalidárgumentsÖassed\r\n"));

60 
	`ƒk_k¥ötf
(
	`PSTR
("Error in calculatingÉndianness\r\n"));

64 
	`ƒk_k¥ötf
(
	`PSTR
("NoÑeceive buffersávailable\r\n"));

68 
	`ƒk_k¥ötf
(
	`PSTR
("NoÅransmit buffersávailable\r\n"));

72 
	`ƒk_k¥ötf
(
	`PSTR
("SocketÅimeout\r\n"));

76 
	`ƒk_k¥ötf
(
	`PSTR
("Unmapped socket\r\n"));

80 
	`ƒk_k¥ötf
(
	`PSTR
("NoÖortÉlementávailable inÖortárray\r\n"));

84 
	`ƒk_k¥ötf
(
	`PSTR
("NoÑbmÉlementávailable inÑbmárray\r\n"));

88 
	`ƒk_k¥ötf
(
	`PSTR
("UnknownÉrrorÇumberÖassed\r\n"));

93 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Debug.h

1 #i‚de‡
_DEBUG_H


2 
	#_DEBUG_H


	)

5 
go_öto_∑nic
(*
°r
);

15 
¥öt_nw_°ack_î∫o
(
öt8_t
 
n
);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NWErrorCodes.h

5 #i‚de‡
_NW_ERROR_CODES_H


6 
	#_NW_ERROR_CODES_H


	)

8 
	#MAX_NEIGHBOR_LIMIT_REACHED
 1

	)

9 
	#NO_SOCKET_DESC_AVAILABLE
 2

	)

10 
	#UNSUPPORTED_SOCK_TYPE
 3

	)

11 
	#PORT_UNAVAILABLE
 4

	)

12 
	#INVALID_SOCKET
 5

	)

13 
	#INVALID_CALL
 6

	)

14 
	#NO_PORTS_AVAILABLE
 7

	)

15 
	#INVALID_ARGUMENT
 8

	)

16 
	#ERROR_ENDIAN
 9

	)

17 
	#NO_RX_BUFFERS_AVAILABLE
 10

	)

18 
	#NO_TX_BUFFERS_AVAILABLE
 11

	)

19 
	#SOCKET_TIMEOUT
 12

	)

20 
	#UNMAPPED_SOCKET
 13

	)

21 
	#NO_PORT_ELEMENT_AVAILABLE
 14

	)

22 
	#NO_RBM_ELEMENT_AVAILABLE
 15

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NWStackConfig.c

3 
	~"NWSèckC⁄fig.h
"

4 
	~"NWEº‹Codes.h
"

5 
	~<°döt.h
>

6 
	~<ƒk.h
>

7 
	~<ö˛ude.h
>

8 
	~<ulib.h
>

9 
	~<°dio.h
>

10 
	~<avr/¶ìp.h
>

11 
	~<hÆ.h
>

12 
	~<ƒk_îr‹.h
>

13 
	~<°dlib.h
>

14 
	~<m©h.h
>

16 
	#DEBUG_NWSC
 2

	)

22 
öôüli£_å™•‹t_œyî_udp
();

25 
öt8_t
 
ídü¬ess
();

28 
öôüli£_buf„r_m™agî
();

31 
öôüli£_√tw‹k_œyî
();

34 
go_öto_∑nic
(*);

37 
bmac_èsk_c⁄fig
();

40 
öôüli£_£rül_communiˇti⁄
();

43 
	$ƒk_öô_nw_°ack
()

45 if(
	`ídü¬ess
(Ë=
ERROR_ENDIAN
)

47 
	`ƒk_öt_dißbÀ
();

48 
	`ƒk_Àd_£t
(
RED_LED
);

50 
	`ƒk_k¥ötf
(
	`PSTR
("Error in calculatingÉndianness in init_nw_stack()"));

54 
	`§™d
(
NODE_ADDR
);

56 
	`öôüli£_£rül_communiˇti⁄
();

57 if(
DEBUG_NWSC
 == 2)

58 
	`ƒk_k¥ötf
(
	`PSTR
("Serial communications initalized\r\n"));

60 
	`öôüli£_buf„r_m™agî
();

61 if(
DEBUG_NWSC
 == 2)

62 
	`ƒk_k¥ötf
(
	`PSTR
("Buffer manager initialised\r\n"));

64 
	`öôüli£_å™•‹t_œyî_udp
();

65 if(
DEBUG_NWSC
 == 2)

66 
	`ƒk_k¥ötf
(
	`PSTR
("TransportÜayer initialised\r\n"));

68 
	`bmac_èsk_c⁄fig
();

69 if(
DEBUG_NWSC
 == 2)

70 
	`ƒk_k¥ötf
(
	`PSTR
("LinkÜayer initialised\r\n"));

72 
	`öôüli£_√tw‹k_œyî
();

73 if(
DEBUG_NWSC
 == 2)

74 
	`ƒk_k¥ötf
(
	`PSTR
("NetworkÜayer initialised\r\n"));

77 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NWStackConfig.h

4 #i‚de‡
_NW_STACK_CONFIG_H


5 
	#_NW_STACK_CONFIG_H


	)

7 
	~"NWEº‹Codes.h
"

10 
	#MAX_APP_PAYLOAD
 40

11 
	#MAX_SERIAL_PAYLOAD
 32

12 
	#MAX_GATEWAY_PAYLOAD
 40

13 
	#MAX_RX_QUEUE_SIZE
 8

15 
	#MAX_TX_QUEUE_SIZE
 4

16 
	#DEFAULT_EXCESS_POLICY
 
DROP


17 

	)

20 
	#NUM_PORTS
 4

21 

	)

23 
	#CONNECTED_TO_GATEWAY
 
TRUE


24 
	#MAX_NGBS
 5

25 
	#HELLO_PERIOD
 2

26 
	#MAX_NETWORK_DIAMETER
 20

27 
	#NGB_LIST_PERIOD
 6

28 
	#TIMEOUT_COUNTER
 5

29 
	#MAX_NODES
 5

30 

	)

32 
	#MAX_PRIORITY
 31

	)

33 
	#LOW_PRIORITY
 1

	)

34 
	#NORMAL_PRIORITY
 2

	)

35 
	#HIGH_PRIORITY
 3

	)

38 
ƒk_öô_nw_°ack
();

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NetworkLayer.c

4 
	~"Tøn•‹tLayîUDP.h
"

5 
	~"Nëw‹kLayî.h
"

6 
	~"Buf„rM™agî.h
"

7 
	~"Sîül.h
"

8 
	~"NWEº‹Codes.h
"

9 
	~"Debug.h
"

11 
	~<ƒk.h
>

12 
	~<ö˛ude.h
>

13 
	~<ulib.h
>

14 
	~<°dio.h
>

15 
	~<avr/¶ìp.h
>

16 
	~<hÆ.h
>

17 
	~<bmac.h
>

18 
	~<ƒk_îr‹.h
>

19 
	~<°döt.h
>

20 
	~<°dlib.h
>

24 
ƒk_£m_t
 *
é_£m
;

25 
P‹t
 
p‹ts
[];

27 
öt8_t
 
is_p‹t_assocüãd
(
öt16_t
 
p‹t
);

28 
¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
*);

29 
¥öt_£g
(
Tøn•‹t_Segmít_UDP
*);

32 
ƒk_£m_t
 *
bm_£m
;

33 
Re˚iveBuf„rM™agî
 
rx_buf_mgr
[];

35 
ö£π_rx_pq
(
Tøn•‹t_Segmít_UDP
*, 
öt8_t
, 
uöt16_t
, int8_t);

36 
TønsmôBuf„r
* 
ªmove_tx_aq
();

37 
ö£π_tx_fq
(
TønsmôBuf„r
*);

38 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

39 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

40 
öt8_t
 
p‹t_to_p‹t_ödex
(
uöt8_t
);

41 
¥öt_tx_buf„r
();

45 
∑ck_Msg_NgbLi°
(
uöt8_t
 *, 
Msg_NgbLi°
 *);

46 
∑ck_Msg_Hñlo
(
uöt8_t
 *, 
Msg_Hñlo
 *);

47 
∑ck_NodeToG©ewaySîül_Packë_hódî
(
uöt8_t
 *, 
NodeToG©ewaySîül_Packë
 *);

48 
∑ck_TL_UDP_hódî
(
uöt8_t
 *, 
Tøn•‹t_Segmít_UDP
*);

49 
∑ck_NW_Packë_hódî
(
uöt8_t
 *,
NW_Packë
*);

51 
u≈ack_Msg_NgbLi°
(
Msg_NgbLi°
*, 
uöt8_t
 *);

52 
u≈ack_Msg_Hñlo
(
Msg_Hñlo
 *, 
uöt8_t
 *);

53 
u≈ack_TL_UDP_hódî
(
Tøn•‹t_Segmít_UDP
 *, 
uöt8_t
 *);

54 
u≈ack_NW_Packë_hódî
(
NW_Packë
*, 
uöt8_t
 *);

57 
£ndToSîül
(
uöt8_t
 *, 
öt8_t
);

58 
¥ötBuf„r
(
uöt8_t
 *, 
öt8_t
);

61 
go_öto_∑nic
(*);

64 
öt8_t
 
bmac_tx_∑ckë_íqueue
(
uöt8_t
 *, uint8_t);

67 
Neighb‹Li°
 
	g∆
;

68 
RoutögTabÀ
 
	gπ
[
MAX_NODES
];

70 
uöt8_t
 
	grx_buf
[
RF_BUFFER_SIZE
];

71 
NW_Packë
 
	gpkt_rx
;

73 
uöt8_t
 
	gtx_buf
[
SIZE_NW_PACKET
];

74 
NW_Packë
 
	gpkt_tx
;

76 
uöt8_t
 
	gto_gw_buf
[
SIZE_NODETOGATEWAYSERIAL_PACKET
];

77 
NodeToG©ewaySîül_Packë
 
	g¡g_pkt
;

79 
uöt16_t
 
	gDEFAULT_GATEWAY
;

80 
öt8_t
 
	gROUTING_ALGORITHM
;

81 
öt8_t
 
	gFLOODING_TYPE
;

82 
öt8_t
 
	gP_DISTRIBUTION
;

85 
Tøn•‹t_Segmít_UDP
 
	gudp_£g
;

86 
Msg_Hñlo
 
	gmh
;

87 
Msg_NgbLi°
 
	gm∆i°
;

88 
Neighb‹Li°
 
	g∆i°
;

91 
Msg_Hñlo
 
	gmhe
;

92 
Msg_NgbLi°
 
	gmn
;

93 
Tøn•‹t_Segmít_UDP
 
	g£g
;

95 
Msg_RoutögTabÀ
 
	gmπ
;

99 
ƒk_èsk_ty≥
 
	gNL_RX_TASK
;

100 
NRK_STK
 
	g∆_rx_èsk_°ack
[
NRK_APP_STACKSIZE
];

101 
∆_rx_èsk
();

103 
ƒk_èsk_ty≥
 
	gNL_TX_TASK
;

104 
NRK_STK
 
	g∆_tx_èsk_°ack
[
NRK_APP_STACKSIZE
];

105 
∆_tx_èsk
();

107 
ƒk_£m_t
 *
	g∆_£m
;

110 
ölöe
 
öt8_t
 
	$add_√ighb‹
(
Neighb‹
 
n
)

112 
öt8_t
 
i
;

113 
öt8_t
 
found
 = 
FALSE
;

120 
	`íãr_¸
(
∆_£m
, 19);

121 
i
 = 0; i < 
MAX_NGBS
; i++)

124 if(
∆
.
ngbs
[
i
].
addr
 =
n
.addr)

126 
found
 = 
TRUE
;

128 
∆
.
ngbs
[
i
].
œ°Rï‹t
 = 
TIMEOUT_COUNTER
;

129 
∆
.
ngbs
[
i
].
isNew
 = 
FALSE
;

130 
∆
.
ngbs
[
i
].
rssi
 = 
n
.rssi;

132 if(
∆
.
ngbs
[
i
].
addr
 !
BCAST_ADDR
)

134 
∆
.
ngbs
[
i
].
œ°Rï‹t
--;

135 if(
∆
.
ngbs
[
i
].
œ°Rï‹t
 == 0)

137 
∆
.
ngbs
[
i
].
addr
 = 
BCAST_ADDR
;

138 
∆
.
ngbs
[
i
].
rssi
 = 0;

139 
∆
.
ngbs
[
i
].
isNew
 = 
FALSE
;

140 
∆
.
cou¡
--;

145 if(
found
 =
TRUE
)

147 
	`Àave_¸
(
∆_£m
, 19);

148  
NRK_OK
;

152 if(
∆
.
cou¡
 =
MAX_NGBS
)

154 
	`_ƒk_î∫o_£t
(
MAX_NEIGHBOR_LIMIT_REACHED
);

156 
	`Àave_¸
(
∆_£m
, 19);

157  
NRK_ERROR
;

161 
i
 = 0; i < 
MAX_NGBS
; i++)

163 if(
∆
.
ngbs
[
i
].
addr
 =
BCAST_ADDR
)

165 
n
.
œ°Rï‹t
 = 
TIMEOUT_COUNTER
;

166 
n
.
isNew
 = 
TRUE
;

167 
∆
.
ngbs
[
i
] = 
n
;

168 
∆
.
cou¡
++;

173 if(
i
 =
MAX_NGBS
)

175 
	`ƒk_öt_dißbÀ
();

176 
	`ƒk_Àd_£t
(
RED_LED
);

178 
	`ƒk_k¥ötf
(
	`PSTR
("add_neighbor(): Bug found in implementation of MAX_NGBS\r\n"));

181 
	`Àave_¸
(
∆_£m
, 19);

182  
NRK_OK
;

183 
	}
}

186 
ölöe
 
öt8_t
 
	$shouldIMu…ih›
(
NW_Packë
 *
pkt
)

188 
pkt
 -> 
âl
--;

190 if(
pkt
 -> 
âl
 == 0)

191  
MULTIHOP_NO
;

193  
MULTIHOP_YES
;

194 
	}
}

196 
ölöe
 
	$mu…ih›
(
NW_Packë
 *
pkt
)

198 if–
	`shouldIMu…ih›
(
pkt
Ë=
MULTIHOP_YES
 )

200 
	`íãr_¸
(
bm_£m
, 21);

201 if–
	`ö£π_tx_aq
(
pkt
Ë=
NRK_ERROR
 )

203 
	`ªc‹d_tx_queue_fuŒ
(
pkt
);

205 
	`Àave_¸
(
bm_£m
, 21);

207 if(
DEBUG_NL
 == 2)

209 
	`ƒk_k¥ötf
(
	`PSTR
("NL: multihop(): InsertedÖacket. "));

210 
	`¥öt_tx_buf„r
();

215 
	}
}

217 
ölöe
 
uöt16_t
 
	$rouã_addr
(
uöt16_t
 
addr
)

219 
öt8_t
 
i
;

222 if(
addr
 =
BCAST_ADDR
)

223  
BCAST_ADDR
;

225 
	`íãr_¸
(
∆_£m
, 34);

227 
i
 = 0; i < 
MAX_NODES
; i++)

229 if(
π
[
i
].
de°
 !
BCAST_ADDR
)

230 if(
π
[
i
].
de°
 =
addr
)

232 
	`Àave_¸
(
∆_£m
, 34);

233  
π
[
i
].
√xtH›
;

238 
	`Àave_¸
(
∆_£m
, 34);

239  
BCAST_ADDR
;

240 
	}
}

242 
	$rouã_∑ckë
(
NW_Packë
 *
pkt
)

244 
pkt
 -> 
âl
--;

245 if(
pkt
 -> 
âl
 == 0)

249 
pkt
 -> 
¥evH›
 = 
NODE_ADDR
;

250 
pkt
 -> 
√xtH›
 = 
	`rouã_addr
’kà-> 
de°
);

252 
	`íãr_¸
(
bm_£m
, 23);

253 if–
	`ö£π_tx_aq
(
pkt
Ë=
NRK_ERROR
 )

255 
	`ªc‹d_tx_queue_fuŒ
(
pkt
);

257 
	`Àave_¸
(
bm_£m
, 23);

260 
	}
}

262 
öt8_t
 
	$£ndToG©eway
(
uöt8_t
 *
±r
, 
öt8_t
 
Àn
)

264 
uöt8_t
 
gw_buf
[
SIZE_NODETOGATEWAYSERIAL_PACKET
] = {0};

266 if(
Àn
 <0 ||Üí > 
MAX_SERIAL_PAYLOAD
 || 
±r
 =
NULL
 || 
CONNECTED_TO_GATEWAY
 =
FALSE
)

268 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

269  
NRK_ERROR
;

273 
gw_buf
[0] = 
SERIAL_APPLICATION
;

274 
gw_buf
[1] = 
Àn
;

275 
	`mem˝y
(
gw_buf
 + 
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
, 
±r
, 
Àn
);

277 
	`£ndToSîül
(
gw_buf
, 
SIZE_NODETOGATEWAYSERIAL_PACKET
);

280  
NRK_OK
;

281 
	}
}

283 
ölöe
 
uöt8_t
 
	$pkt_ty≥
(
NW_Packë
 *
pkt
)

285 
pkt
 -> 
ty≥
)

287 
UDP
:

288  
APPLICATION
;

290 
HELLO
:

291 
NGB_LIST
:

292 
ROUTE_CONFIG
:

293  
NW_CONTROL
;

296  
INVALID
;

297 
	}
}

299 
ölöe
 
uöt8_t
 
	$é_ty≥
(
uöt8_t
 
ty≥
)

301 if(
ty≥
 =
UDP
)

302  
UDP
;

304  
INVALID
;

305 
	}
}

307 
ölöe
 
uöt8_t
 
	$nw_˘æ_ty≥
(
uöt8_t
 
ty≥
)

309 
ty≥
)

311 
HELLO
:

312  
HELLO
;

314 
NGB_LIST
:

315  
NGB_LIST
;

317 
ROUTE_CONFIG
:

318  
ROUTE_CONFIG
;

320  
INVALID
;

321 
	}
}

323 
	$¥o˚ss_≠p_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
)

325 
öt8_t
 
ªt
;

327 if(
DEBUG_NL
 >= 1)

329 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Entered\r\n"));

330 
	`ƒk_k¥ötf
(
	`PSTR
("NLÖrocess_app_pkt(): Received from "));

331 
	`¥öt_pkt_hódî
(
pkt
);

341 if(
	`é_ty≥
(
pkt
 -> 
ty≥
Ë=
UDP
)

344 
	`u≈ack_TL_UDP_hódî
(&
udp_£g
, 
pkt
 -> 
d©a
);

346 
	`mem˝y
(
udp_£g
.
d©a
, 
pkt
 -> d©®+ 
SIZE_TRANSPORT_UDP_HEADER
, 
MAX_APP_PAYLOAD
);

349 if(
	`is_p‹t_assocüãd
(
udp_£g
.
de°P‹t
Ë=
TRUE
)

351 
öt8_t
 
p‹t_ödex
;

353 
	`íãr_¸
(
bm_£m
, 28);

354 
	`íãr_¸
(
é_£m
, 28);

357 if(
DEBUG_NL
 == 2)

362 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Before inserting intoÖort queue\r\n"));

364 
	`ö£π_rx_pq
(&
udp_£g
, 
pkt
 -> 
¥io
,Ökà-> 
§c
, 
rssi
);

365 if(
DEBUG_NL
 == 2)

367 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): After inserting intoÖort queue\r\n"));

370 
p‹t_ödex
 = 
	`p‹t_to_p‹t_ödex
(
udp_£g
.
de°P‹t
);

371 if(
p‹t_ödex
 =
NRK_ERROR
)

373 
	`ƒk_öt_dißbÀ
();

374 
	`ƒk_Àd_£t
(
RED_LED
);

376 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

378 
ªt
 = 
	`ƒk_evít_sig«l
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
);

380 if(
ªt
 =
NRK_ERROR
)

382 if(
	`ƒk_î∫o_gë
() == 1)

384 
	`ƒk_öt_dißbÀ
();

385 
	`ƒk_Àd_£t
(
RED_LED
);

387 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): Bug detected in implementation ofÖort signals\r\n"));

394 if(
DEBUG_NL
 == 0)

396 
	`ƒk_k¥ötf
(
	`PSTR
("UnassociatedÖort found: "));

397 
	`¥ötf
("%u\n", 
udp_£g
.
de°P‹t
);

400 
	`ªc‹d_u«ssocüãd_sockë_pkt
(
pkt
);

403 
	`Àave_¸
(
é_£m
, 28);

404 
	`Àave_¸
(
bm_£m
, 28);

409 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_app_pkt(): UnsupportedÅransportÜayerÅype detected = "));

410 
	`¥ötf
("%d\r\n", 
pkt
 -> 
ty≥
);

413 
	}
}

415 
	$¥o˚ss_nw_˘æ_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
)

417 
öt8_t
 
ªt
;

418 
öt8_t
 
i
;

420 if(
DEBUG_NL
 >= 1)

421 
	`ƒk_k¥ötf
(
	`PSTR
("NL: EnteredÖrocess_nw_ctrl_pkt()\n"));

423  
	`nw_˘æ_ty≥
(
pkt
 -> 
ty≥
) )

425 
HELLO
:

428 
	`u≈ack_Msg_Hñlo
(&
mh
, 
pkt
 -> 
d©a
);

429 
mh
.
n
.
rssi
 =Ñssi;

430 
ªt
 = 
	`add_√ighb‹
(
mh
.
n
);

431 if(
ªt
 =
NRK_ERROR
)

433 
	`ªc‹d_max_ngb_limô_ªached
(
pkt
);

435 if(
DEBUG_NL
 >= 1)

437 
	`ƒk_k¥ötf
(
	`PSTR
("Received HELLO msg from: "));

438 
	`¥ötf
("%d ", 
mh
.
n
.
addr
);

439 
	`ƒk_k¥ötf
(
	`PSTR
("with RSSI = "));

440 
	`¥ötf
("%d\r\n",
mh
.
n
.
rssi
);

445 
NGB_LIST
:

447 if(
pkt
 -> 
§c
 =
NODE_ADDR
)

451 
	`u≈ack_Msg_NgbLi°
(&
m∆i°
, 
pkt
 -> 
d©a
);

452 
∆i°
 = 
m∆i°
.
∆
;

454 if(
DEBUG_NL
 >= 1)

456 
öt8_t
 
i
;

457 
	`¥ötf
("NL: Re˚ived NGB_LIST msg from %d wôh cou¡ = %d\n", 
∆i°
.
my_addr
,Çli°.
cou¡
);

458 
i
 = 0; i < 
MAX_NGBS
; i++)

460 if(
∆i°
.
ngbs
[
i
].
addr
 !
BCAST_ADDR
)

461 
	`¥ötf
("%u, ", 
∆i°
.
ngbs
[
i
].
addr
);

463 
	`¥ötf
("\r\n");

467 
	`rouã_∑ckë
(
pkt
);

469 if(
CONNECTED_TO_GATEWAY
 =
TRUE
)

472 
¡g_pkt
.
ty≥
 = 
SERIAL_NGB_LIST
;

473 
¡g_pkt
.
Àngth
 = 
SIZE_MSG_NGB_LIST
;

475 
	`∑ck_Msg_NgbLi°
(
¡g_pkt
.
d©a
, &
m∆i°
);

478 
	`∑ck_NodeToG©ewaySîül_Packë_hódî
(
to_gw_buf
, &
¡g_pkt
);

480 
	`mem˝y
(
to_gw_buf
 + 
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
, 
¡g_pkt
.
d©a
, 
MAX_SERIAL_PAYLOAD
);

483 if(
DEBUG_NL
 >= 1)

485 
	`ƒk_k¥ötf
(
	`PSTR
("SendingÖacketÅo gateway\r\n"));

487 
	`£ndToSîül
(
to_gw_buf
, 
SIZE_NODETOGATEWAYSERIAL_PACKET
);

492 
ROUTE_CONFIG
:

494 
	`u≈ack_Msg_RoutögTabÀ
(&
mπ
, 
pkt
 -> 
d©a
);

495 
	`íãr_¸
(
∆_£m
, 34);

496 
DEFAULT_GATEWAY
 = 
mπ
.
dg
;

497 
	`Àave_¸
(
∆_£m
, 34);

499 if(
DEBUG_NL
 == 0)

501 
	`ƒk_k¥ötf
(
	`PSTR
("Receivedá ROUTE_CONFIG message\r\n"));

502 
i
 = 0; i < 
MAX_NODES
; i++)

504 
	`¥ötf
("%d -> %d [%d, %d]\r\n", 
mπ
.
node
, mπ.
π
[
i
].
de°
, mπ.π[i].
√xtH›
, mπ.π[i].
co°
);

508 if(
mπ
.
node
 =
NODE_ADDR
)

518 
	`£t_RoutögTabÀ
(&
mπ
);

522 
	`rouã_∑ckë
(
pkt
);

528 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Örocess_nw_ctrl_pkt(): UnsupportedÇetwork control messageÑeceived = "));

529 
	`¥ötf
("%u\n", 
pkt
 -> 
ty≥
);

535 
	}
}

537 
	$¥o˚ss_Ÿhî_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
)

540 
	}
}

543 
ölöe
 
	$buûd_Msg_Hñlo
(
Msg_Hñlo
 *
m
)

545 (
m
 -> 
n
).
addr
 = (
uöt16_t
)
NODE_ADDR
;

546 (
m
 -> 
n
).
rssi
 = (m ->Ç).
œ°Rï‹t
 = (m ->Ç).
isNew
 = 0;

549 
pkt_tx
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

550 
pkt_tx
.
de°
 = (
uöt16_t
)
BCAST_ADDR
;

551 
pkt_tx
.
√xtH›
 = (
uöt16_t
)
BCAST_ADDR
;

552 
pkt_tx
.
¥evH›
 = (
uöt16_t
)
NODE_ADDR
;

554 
pkt_tx
.
âl
 = 1;

555 
pkt_tx
.
ty≥
 = (
uöt8_t
)
HELLO
;

556 
pkt_tx
.
Àngth
 = 
SIZE_MSG_HELLO
;

557 
pkt_tx
.
¥io
 = 
NORMAL_PRIORITY
;

559 
	`∑ck_Msg_Hñlo
(
pkt_tx
.
d©a
, 
m
);

561 
	}
}

563 
ölöe
 
	$buûd_Msg_NgbLi°
(
Msg_NgbLi°
 *
m
)

565 
	`íãr_¸
(
∆_£m
, 32);

566 
m
 -> 
∆
 =Çl;

567 
	`Àave_¸
(
∆_£m
, 32);

570 
pkt_tx
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

571 
	`íãr_¸
(
∆_£m
, 25);

572 
pkt_tx
.
de°
 = 
DEFAULT_GATEWAY
;

573 
	`Àave_¸
(
∆_£m
, 25);

574 
pkt_tx
.
√xtH›
 = 
	`rouã_addr
’kt_tx.
de°
);

575 
pkt_tx
.
¥evH›
 = (
uöt16_t
)
NODE_ADDR
;

577 
pkt_tx
.
âl
 = 
MAX_NETWORK_DIAMETER
;

578 
pkt_tx
.
ty≥
 = (
uöt8_t
)
NGB_LIST
;

579 
pkt_tx
.
Àngth
 = 
SIZE_MSG_NGB_LIST
;

580 
pkt_tx
.
¥io
 = 
NORMAL_PRIORITY
;

582 
	`∑ck_Msg_NgbLi°
(
pkt_tx
.
d©a
, 
m
);

585 
	}
}

588 
	$∆_rx_èsk
()

590 
uöt8_t
 
Àn
;

591 
öt8_t
 
rssi
;

592 
uöt8_t
 *
loˇl_rx_buf
;

593 
öt8_t
 
vÆ
;

594 
öt8_t
 
Êag
;

596 
ƒk_time_t
 
°¨t
, 
íd
, 
ñ≠£d
;

598 if(
DEBUG_NL
 >= 1)

600 
	`ƒk_k¥ötf
(
	`PSTR
("NL_RX_TASK PID = "));

601 
	`¥ötf
("%d\r\n",
	`ƒk_gë_pid
());

605 
	`ƒk_time_gë
(&
°¨t
);

606 
íd
.
£cs
 = 
°¨t
.secs;

607 
íd
.
«no_£cs
 = 
°¨t
.nano_secs;

610 
vÆ
 = 
	`bmac_öô
(25);

611 if(
vÆ
 =
NRK_ERROR
)

613 
	`ƒk_öt_dißbÀ
();

614 
	`ƒk_Àd_£t
(
RED_LED
);

616 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned by bmac_init()\r\n"));

620 
vÆ
 = 
	`bmac_rx_pkt_£t_buf„r
(
rx_buf
, 
RF_BUFFER_SIZE
);

621 if(
vÆ
 =
NRK_ERROR
)

623 
	`ƒk_öt_dißbÀ
();

624 
	`ƒk_Àd_£t
(
RED_LED
);

626 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned by bmac_rx_pkt_set_buffer()\r\n"));

633 if(
CONNECTED_TO_GATEWAY
 =
TRUE
)

635 
	`ƒk_time_gë
(&
íd
);

636 
vÆ
 = 
	`ƒk_time_sub
(&
ñ≠£d
, 
íd
, 
°¨t
);

637 
	`ƒk_time_com∑˘_«nos
(&
ñ≠£d
);

638 if(
ñ≠£d
.
£cs
 >
NGB_LIST_PERIOD
)

640 
¡g_pkt
.
ty≥
 = 
SERIAL_NGB_LIST
;

641 
¡g_pkt
.
Àngth
 = 
SIZE_MSG_NGB_LIST
;

642 
	`íãr_¸
(
∆_£m
, 34);

643 
	`∑ck_Msg_NgbLi°
(
¡g_pkt
.
d©a
, &
∆
);

644 
	`Àave_¸
(
∆_£m
, 34);

645 
	`∑ck_NodeToG©ewaySîül_Packë_hódî
(
to_gw_buf
, &
¡g_pkt
);

646 
	`mem˝y
(
to_gw_buf
 + 
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
, 
¡g_pkt
.
d©a
, 
MAX_SERIAL_PAYLOAD
);

647 if(
DEBUG_NL
 == 2)

649 
	`ƒk_k¥ötf
(
	`PSTR
("Sending own NGB_LIST messageÅo gateway\r\n"));

651 
	`£ndToSîül
(
to_gw_buf
, 
SIZE_NODETOGATEWAYSERIAL_PACKET
);

654 
°¨t
.
£cs
 = 
íd
.secs;

655 
°¨t
.
«no_£cs
 = 
íd
.nano_secs;

659 if(
DEBUG_NL
 >= 1)

661 
	`ƒk_k¥ötf
(
	`PSTR
("Waiting forÇextÖkt fromÜinkÜayer\r\n"));

664 
Êag
 = 0;

666 
	`bmac_rx_pkt_ªady
() == 0)

668 
vÆ
 = 
	`bmac_waô_u¡û_rx_pkt
();

669 if(
DEBUG_NL
 == 2)

671 
	`ƒk_k¥ötf
(
	`PSTR
("NL: bmac_wait_until_rx_packet()Ñeturned "));

672 
	`¥ötf
("%d\n", 
vÆ
);

679 
loˇl_rx_buf
 = 
	`bmac_rx_pkt_gë
(&
Àn
,&
rssi
);

680 if(
loˇl_rx_buf
 =
NULL
)

682 
	`ƒk_k¥ötf
(
	`PSTR
("NL: NULLÑeturned by bmac_rx_pkt_get()\r\n"));

685 } 
loˇl_rx_buf
 =
NULL
);

688 if(
Àn
 !
SIZE_NW_PACKET
)

699 if(
DEBUG_NL
 >= 1)

701 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_rx_task(): WrongÜength ofÖacketÑeceived: "));

702 
	`¥ötf
("%d\r\n", 
Àn
);

704 
Êag
 = 1;

707 
	`ƒk_Àd_£t
(
GREEN_LED
);

709 if(
DEBUG_NL
 == 2)

711 
öt8_t
 
i
;

712 
	`ƒk_k¥ötf
(
	`PSTR
("NL: Contents ofÑeceivedÖacketáre\r\n"));

713 
	`¥ötf
("[");

714 
i
 = 0; i < 
Àn
; i++)

715 
	`¥ötf
("%d ", 
loˇl_rx_buf
[
i
]);

716 
	`¥ötf
("]\r\n");

718 if(
Êag
 == 1)

720 
	`bmac_rx_pkt_ªÀa£
();

721 
	`ƒk_Àd_˛r
(
GREEN_LED
);

726 
	`u≈ack_NW_Packë_hódî
(&
pkt_rx
, 
loˇl_rx_buf
);

728 
	`mem˝y
(
pkt_rx
.
d©a
, 
loˇl_rx_buf
 + 
SIZE_NW_PACKET_HEADER
, 
MAX_NETWORK_PAYLOAD
);

730 
	`bmac_rx_pkt_ªÀa£
();

733 if(
	`pkt_ty≥
(&
pkt_rx
Ë=
APPLICATION
)

736 if(
pkt_rx
.
de°
 =
NODE_ADDR
 ||Ökt_rx.de° =
BCAST_ADDR
)

737 
	`¥o˚ss_≠p_pkt
(&
pkt_rx
, 
rssi
);

740 if(
pkt_rx
.
√xtH›
 =
NODE_ADDR
)

742 if(
pkt_rx
.
§c
 =
NODE_ADDR
)

744 
	`ƒk_öt_dißbÀ
();

745 
	`ƒk_Àd_£t
(
RED_LED
);

748 
	`ƒk_k¥ötf
(
	`PSTR
("RoutingÅable corruptedát "));

749 
	`¥ötf
("%d\r\n", 
NODE_ADDR
);

753 
	`rouã_∑ckë
(&
pkt_rx
);

756 if(
pkt_rx
.
√xtH›
 =
BCAST_ADDR
)

757 
	`rouã_∑ckë
(&
pkt_rx
);

763 if(
	`pkt_ty≥
(&
pkt_rx
Ë=
NW_CONTROL
)

766 if(
pkt_rx
.
de°
 =
NODE_ADDR
 ||Ökt_rx.de° =
BCAST_ADDR
)

767 
	`¥o˚ss_nw_˘æ_pkt
(&
pkt_rx
, 
rssi
);

770 if(
pkt_rx
.
√xtH›
 =
NODE_ADDR
)

772 if(
pkt_rx
.
§c
 =
NODE_ADDR
)

774 
	`ƒk_öt_dißbÀ
();

775 
	`ƒk_Àd_£t
(
RED_LED
);

778 
	`ƒk_k¥ötf
(
	`PSTR
("RoutingÅable corruptedát "));

779 
	`¥ötf
("%d\r\n", 
NODE_ADDR
);

783 
	`rouã_∑ckë
(&
pkt_rx
);

786 if(
pkt_rx
.
√xtH›
 =
BCAST_ADDR
)

787 
	`rouã_∑ckë
(&
pkt_rx
);

793 
	`ƒk_k¥ötf
(
	`PSTR
("NL: UnknownÖktÅypeÑeceived = "));

794 
	`¥ötf
("%d\r\n", 
	`pkt_ty≥
(&
pkt_rx
));

798 
	`ƒk_Àd_˛r
(
GREEN_LED
);

802 
	}
}

805 
	$∆_tx_èsk
()

807 
TønsmôBuf„r
 *
±r
 = 
NULL
;

808 
ƒk_sig_t
 
tx_d⁄e_sig«l
;

809 
öt8_t
 
ªt
;

810 
öt8_t
 
p‹t_ödex
;

811 
öt8_t
 
£¡
;

812 
öt8_t
 
isAµliˇti⁄
;

815 
ƒk_time_t
 
timeout
;

816 
ƒk_time_t
 
°¨t
;

817 
ƒk_time_t
 
íd
;

818 
ƒk_time_t
 
ñ≠£d
;

821 !
	`bmac_°¨ãd
()Ë
	`ƒk_waô_u¡û_√xt_≥riod
();

824 
tx_d⁄e_sig«l
 = 
	`bmac_gë_tx_d⁄e_sig«l
();

826 if–
	`ƒk_sig«l_ªgi°î
(
tx_d⁄e_sig«l
Ë=
NRK_ERROR
 )

828 
	`ƒk_öt_dißbÀ
();

829 
	`ƒk_Àd_£t
(
RED_LED
);

831 
	`ƒk_k¥ötf
(
	`PSTR
("NL: Error whileÑegistering forÅhe bmax_tx_done_signal\r\n"));

835 
	`ƒk_time_gë
(&
°¨t
);

836 
íd
.
£cs
 = 
°¨t
.secs;

837 
íd
.
«no_£cs
 = 
°¨t
.nano_secs;

838 
£¡
 = 0;

841 if–
	`bmac_£t_rf_powî
(10Ë=
NRK_ERROR
)

843 
	`ƒk_Àd_£t
(
RED_LED
);

844 
	`ƒk_öt_dißbÀ
();

846 
	`ƒk_k¥ötf
(
	`PSTR
("Error settingÅheÅransmitÖower\r\n"));

850 
isAµliˇti⁄
 = 
FALSE
;

852 
ªt
 = 
	`ƒk_time_sub
(&
ñ≠£d
, 
íd
, 
°¨t
);

853 if(
ªt
 == 0)

855 
	`ƒk_öt_dißbÀ
();

856 
	`ƒk_Àd_£t
(
RED_LED
);

858 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned byÇrk_time_sub\r\n"));

861 
	`ƒk_time_com∑˘_«nos
(&
ñ≠£d
);

863 if(
ñ≠£d
.
£cs
 >
HELLO_PERIOD
)

865 
£¡
++;

866 
	`buûd_Msg_Hñlo
(&
mhe
);

867 if(
DEBUG_NL
 == 2)

869 
	`ƒk_k¥ötf
(
	`PSTR
("After building Msg_Hello,Öacket = "));

870 
	`¥öt_pkt
(&
pkt_tx
);

873 
	`íãr_¸
(
bm_£m
, 34);

874 
ªt
 = 
	`ö£π_tx_aq
(&
pkt_tx
);

875 
	`Àave_¸
(
bm_£m
, 34);

877 if(
DEBUG_NL
 == 2)

879 
	`ƒk_k¥ötf
(
	`PSTR
("build_Msg_Hello() insertedÖacket."));

880 
	`¥öt_tx_buf„r
();

884 if(
ªt
 =
NRK_ERROR
 && 
DEBUG_NL
 == 2)

886 
	`ƒk_k¥ötf
(
	`PSTR
("HELLO msg wasÇot inserted intoÅheÅransmit queue\r\n"));

889 
°¨t
.
£cs
 = 
íd
.secs;

890 
°¨t
.
«no_£cs
 = 
íd
.nano_secs;

893 if(
£¡
 >= 3)

895 
	`buûd_Msg_NgbLi°
(&
mn
);

897 
	`íãr_¸
(
bm_£m
, 34);

898 
ªt
 = 
	`ö£π_tx_aq
(&
pkt_tx
);

899 
	`Àave_¸
(
bm_£m
, 34);

901 if(
DEBUG_NL
 == 2)

903 
	`ƒk_k¥ötf
(
	`PSTR
("build_Msg_NgbList() insertedÖacket."));

904 
	`¥öt_tx_buf„r
();

908 if(
ªt
 =
NRK_ERROR
 && 
DEBUG_NL
 == 2)

910 
	`ƒk_k¥ötf
(
	`PSTR
("NGB_LIST msg wasÇot inserted intoÅheÅransmit queue\r\n"));

913 
£¡
 = 0;

917 if(
	`ønd
() % 2 == 0)

918 
	`cﬁÀ˘_queue_°©i°ics
();

920 
	`íãr_¸
(
bm_£m
, 34);

921 
±r
 = 
	`ªmove_tx_aq
();

922 
	`Àave_¸
(
bm_£m
, 34);

924 if(
±r
 =
NULL
)

926 if(
DEBUG_NL
 == 2)

927 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Transmit queue isÉmpty\r\n"));

930 
	`ƒk_time_gë
(&
íd
);

932 
	`ƒk_waô_u¡û_√xt_≥riod
();

936 if(
DEBUG_NL
 == 2)

938 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): PacketÑemoved. Packet = "));

940 
	`¥öt_pkt
–&(
±r
 -> 
pkt
) );

946 if–(
	`pkt_ty≥
(&(
±r
 -> 
pkt
)Ë=
APPLICATION
Ë&& (’å ->Ökt).
§c
 =
NODE_ADDR
) )

949 
	`u≈ack_TL_UDP_hódî
(&
£g
, (
±r
 -> 
pkt
).
d©a
);

950 
	`mem˝y
(
£g
.
d©a
, (
±r
 -> 
pkt
).d©®+ 
SIZE_TRANSPORT_UDP_HEADER
, 
MAX_APP_PAYLOAD
);

952 if(
DEBUG_NL
 == 2)

954 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): Segment Removed = "));

955 
	`¥öt_£g
(&
£g
);

957 
isAµliˇti⁄
 = 
TRUE
;

961 
	`∑ck_NW_Packë_hódî
(
tx_buf
, &(
±r
 -> 
pkt
));

963 
	`mem˝y
(
tx_buf
 + 
SIZE_NW_PACKET_HEADER
, (
±r
 -> 
pkt
).
d©a
, 
MAX_NETWORK_PAYLOAD
);

965 
	`íãr_¸
(
bm_£m
, 34);

966 
	`ö£π_tx_fq
(
±r
);

967 
	`Àave_¸
(
bm_£m
, 34);

968 if(
DEBUG_NL
 == 2)

970 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): ReleasedÅransmit buffer back into queue\n"));

971 
	`¥öt_tx_buf„r
();

976 
ªt
 = 
	`bmac_tx_pkt_n⁄blockög
(
tx_buf
, 
SIZE_NW_PACKET
);

977 if(
ªt
 =
NRK_ERROR
)

978 if(
	`ƒk_evít_waô
(
	`SIG
(
tx_d⁄e_sig«l
)) == 0)

980 
	`ƒk_öt_dißbÀ
();

981 
	`ƒk_Àd_£t
(
RED_LED
);

983 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned byÇrk_event_wait(tx_done_signal)\r\n"));

985 }
ªt
 =
NRK_ERROR
);

988 
timeout
.
£cs
 = 10;

989 
timeout
.
«no_£cs
 = 0;

990 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
 )

992 
	`ƒk_öt_dißbÀ
();

993 
	`ƒk_Àd_£t
(
RED_LED
);

995 
	`ƒk_k¥ötf
(
	`PSTR
("NL:nl_tx(): ErrorÑegistering forÇrk_wakeup_signal\r\n"));

997 if–
	`ƒk_£t_√xt_wakeup
(
timeout
Ë=
NRK_ERROR
)

999 
	`ƒk_öt_dißbÀ
();

1000 
	`ƒk_Àd_£t
(
RED_LED
);

1002 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx(): ErrorÑeturned byÇrk_set_next_wakeup()\r\n"));

1004 
	`ƒk_Àd_£t
(
BLUE_LED
);

1005 
ªt
 = 
	`ƒk_evít_waô
 (
	`SIG
(
tx_d⁄e_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
));

1006 if(
ªt
 == 0)

1008 
	`ƒk_öt_dißbÀ
();

1009 
	`ƒk_Àd_£t
(
RED_LED
);

1011 
	`ƒk_k¥ötf
(
	`PSTR
("NL: ErrorÑeturned byÇrk_event_wait(tx_done_signal)\r\n"));

1013 if(
ªt
 & 
	`SIG
(
tx_d⁄e_sig«l
))

1015 if(
isAµliˇti⁄
 =
TRUE
)

1017 
	`íãr_¸
(
é_£m
, 34);

1018 
p‹t_ödex
 = 
	`p‹t_to_p‹t_ödex
(
£g
.
§cP‹t
);

1020 if(
p‹t_ödex
 =
NRK_ERROR
)

1022 
	`ƒk_öt_dißbÀ
();

1023 
	`ƒk_Àd_£t
(
RED_LED
);

1025 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task: Bug detected in implementation ofÖortÉlementárray\r\n"));

1028 if(
	`ƒk_evít_sig«l
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
Ë=
NRK_ERROR
)

1030 if(
	`ƒk_î∫o_gë
() == 1)

1032 
	`ƒk_öt_dißbÀ
();

1033 
	`ƒk_Àd_£t
(
RED_LED
);

1035 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task: Bug detected in creating signals inÖortÉlementárray\r\n"));

1038 
	`Àave_¸
(
é_£m
, 34);

1046 if(
ªt
 & 
	`SIG
(
ƒk_wakeup_sig«l
))

1052 
	`ƒk_k¥ötf
(
	`PSTR
("BMAC didÇotÅransmitÅheÖacket within specifiedÅime\r\n"));

1057 
	`ƒk_öt_dißbÀ
();

1058 
	`ƒk_Àd_£t
(
RED_LED
);

1060 
	`ƒk_k¥ötf
(
	`PSTR
("NL:Çl_tx_task(): Unknown signal caught\r\n"));

1063 
	`ƒk_Àd_˛r
(
BLUE_LED
);

1065 
	`ƒk_time_gë
(&
íd
);

1070 
	}
}

1072 
öt8_t
 
	$£t_routög_Æg‹ôhm
(
öt8_t
 
¥ef
, i¡8_à
ty≥
, i¡8_à
pdi°
)

1074 
¥ef
)

1076 
LINK_STATE
:

1079 
FLOODING
:

1081 
ty≥
)

1083 
TTL_BASED
:

1086 
PROBABILISTIC
:

1088 
pdi°
)

1090 
RANDOM
:

1091 
GAUSSIAN
:

1096 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1097  
NRK_ERROR
;

1105 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1106  
NRK_ERROR
;

1114 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1115  
NRK_ERROR
;

1119 
	`íãr_¸
(
∆_£m
, 19);

1120 
ROUTING_ALGORITHM
 = 
¥ef
;

1121 if(
¥ef
 =
FLOODING
)

1123 
FLOODING_TYPE
 = 
ty≥
;

1124 if(
ty≥
 =
PROBABILISTIC
)

1126 
P_DISTRIBUTION
 = 
pdi°
;

1129 
	`Àave_¸
(
∆_£m
, 19);

1131  
NRK_OK
;

1132 
	}
}

1134 
	$¸óã_√tw‹k_œyî_èsks
()

1136 
NL_RX_TASK
.
èsk
 = 
∆_rx_èsk
;

1137 
NL_RX_TASK
.
Ptos
 = (*Ë&
∆_rx_èsk_°ack
[
NRK_APP_STACKSIZE
 - 1];

1138 
NL_RX_TASK
.
Pbos
 = (*Ë&
∆_rx_èsk_°ack
[0];

1139 
NL_RX_TASK
.
¥io
 = 19;

1140 
NL_RX_TASK
.
Fú°A˘iv©i⁄
 = 
TRUE
;

1141 
NL_RX_TASK
.
Ty≥
 = 
BASIC_TASK
;

1142 
NL_RX_TASK
.
SchTy≥
 = 
PREEMPTIVE
;

1144 
NL_RX_TASK
.
˝u_ª£rve
.
£cs
 = 0;

1145 
NL_RX_TASK
.
˝u_ª£rve
.
«no_£cs
 = 700 * 
NANOS_PER_MS
;

1146 
NL_RX_TASK
.
≥riod
.
£cs
 = 1;

1147 
NL_RX_TASK
.
≥riod
.
«no_£cs
 = 0;

1150 
NL_RX_TASK
.
off£t
.
£cs
 = 0;

1151 
NL_RX_TASK
.
off£t
.
«no_£cs
= 0;

1152 
	`ƒk_a˘iv©e_èsk
 (&
NL_RX_TASK
);

1155 
NL_TX_TASK
.
èsk
 = 
∆_tx_èsk
;

1156 
NL_TX_TASK
.
Ptos
 = (*Ë&
∆_tx_èsk_°ack
[
NRK_APP_STACKSIZE
 - 1];

1157 
NL_TX_TASK
.
Pbos
 = (*Ë&
∆_tx_èsk_°ack
[0];

1158 
NL_TX_TASK
.
¥io
 = 18;

1159 
NL_TX_TASK
.
Fú°A˘iv©i⁄
 = 
TRUE
;

1160 
NL_TX_TASK
.
Ty≥
 = 
BASIC_TASK
;

1161 
NL_TX_TASK
.
SchTy≥
 = 
PREEMPTIVE
;

1163 
NL_TX_TASK
.
˝u_ª£rve
.
£cs
 = 0;

1164 
NL_TX_TASK
.
˝u_ª£rve
.
«no_£cs
 = 500 * 
NANOS_PER_MS
;

1165 
NL_TX_TASK
.
≥riod
.
£cs
 = 1;

1166 
NL_TX_TASK
.
≥riod
.
«no_£cs
 = 0;

1168 
NL_TX_TASK
.
off£t
.
£cs
 = 0;

1169 
NL_TX_TASK
.
off£t
.
«no_£cs
= 0;

1170 
	`ƒk_a˘iv©e_èsk
 (&
NL_TX_TASK
);

1172 if(
DEBUG_NL
 == 2)

1173 
	`ƒk_k¥ötf
(
	`PSTR
("create_network_layer_tasks(): NetworkÜayerÅask creation done\r\n"));

1174 
	}
}

1177 
	$öôüli£_√tw‹k_œyî
()

1179 
öt8_t
 
i
;

1182 
∆
.
cou¡
 = 0;

1183 
∆
.
my_addr
 = 
NODE_ADDR
;

1184 
i
 = 0; i < 
MAX_NGBS
; i++)

1185 
∆
.
ngbs
[
i
].
addr
 = 
BCAST_ADDR
;

1187 
DEFAULT_GATEWAY
 = 
BCAST_ADDR
;

1188 
ROUTING_ALGORITHM
 = 
DEFAULT_ROUTING_ALGORITHM
;

1189 
FLOODING_TYPE
 = 
DEFAULT_FLOODING_TYPE
;

1190 
P_DISTRIBUTION
 = 
DEFAULT_PDISTRIBUTION
;

1192 
	`öôüli£_routög_èbÀ
();

1194 
∆_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

1195 if(
∆_£m
 =
NULL
)

1197 
	`ƒk_öt_dißbÀ
();

1198 
	`ƒk_Àd_£t
(
RED_LED
);

1200 
	`ƒk_k¥ötf
(
	`PSTR
("NL: Error creating semaphore in initialise_network_layer()\r\n"));

1203 
	`¸óã_√tw‹k_œyî_èsks
();

1206 
	}
}

1208 
	$öôüli£_routög_èbÀ
()

1210 
öt8_t
 
i
;

1212 
i
 = 0; i < 
MAX_NODES
; i++)

1214 
π
[
i
].
de°
 = 
BCAST_ADDR
;

1215 
π
[
i
].
√xtH›
 = 
BCAST_ADDR
;

1216 
π
[
i
].
co°
 = 
INFINITY
;

1219 
	}
}

1221 
	$£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
m
)

1223 
öt8_t
 
i
;

1225 
	`íãr_¸
(
∆_£m
, 34);

1226 
	`öôüli£_routög_èbÀ
();

1227 
DEFAULT_GATEWAY
 = 
m
 -> 
dg
;

1228 
i
 = 0; i < 
MAX_NODES
; i++)

1230 
π
[
i
] = 
m
 ->Ñt[i];

1232 
	`Àave_¸
(
∆_£m
, 34);

1234 
	}
}

1236 
	$¥öt_pkt_hódî
(
NW_Packë
 *
pkt
)

1238 
	`¥ötf
("[%u %u %u %u %d %u %d %d]", 
pkt
 -> 
§c
,Ökà-> 
de°
,Ökà-> 
¥evH›
,Ökà-> 
√xtH›
,Ökà-> 
âl
,Ökà-> 
ty≥
,Ökà-> 
Àngth
,Ökà-> 
¥io
);

1241 
	}
}

1243 
	$¥öt_pkt
(
NW_Packë
 *
pkt
)

1245 
öt8_t
 
i
;

1247 
	`¥öt_pkt_hódî
(
pkt
);

1248 
i
 = 0; i < 
pkt
 -> 
Àngth
; i++)

1249 
	`¥ötf
("%u ", (
pkt
 -> 
d©a
)[
i
]);

1251 
	`¥ötf
("\r\n");

1254 
	}
}

1256 
	$¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπbl
)

1258 
öt8_t
 
i
;

1260 
	`ƒk_k¥ötf
(
	`PSTR
("RoutingÅable for "));

1261 
	`¥ötf
("%d\r\n", 
mπbl
 -> 
node
);

1263 
i
 = 0; i < 
MAX_NODES
; i++)

1265 if((
mπbl
 -> 
π
[
i
]).
de°
 =
BCAST_ADDR
)

1268 
	`¥ötf
("%d -> %d [nh = ", 
mπbl
 -> 
node
, (mπb»-> 
π
[
i
]).
de°
);

1269 if((
mπbl
 -> 
π
[
i
]).
√xtH›
 =
INVALID_ADDRESS
)

1270 
	`¥ötf
("INV, ");

1272 
	`¥ötf
("%d, ", (
mπbl
 -> 
π
[
i
]).
√xtH›
);

1274 if((
mπbl
 -> 
π
[
i
]).
co°
 !
INFINITY
)

1275 
	`¥ötf
("di° = %d]\r\n", (
mπbl
 -> 
π
[
i
]).
co°
);

1277 
	`¥ötf
("dist = INF]\r\n");

1280 
	}
}

1282 
	$ªc‹d_tx_queue_fuŒ
(
NW_Packë
 *
pkt
)

1286 
	}
}

1288 
	$ªc‹d_u«ssocüãd_sockë_pkt
(
NW_Packë
 *
pkt
)

1291 
	}
}

1293 
	$ªc‹d_max_ngb_limô_ªached
(
NW_Packë
 *
pkt
)

1296 
	}
}

1298 
	$cﬁÀ˘_queue_°©i°ics
()

1301 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NetworkLayer.h

5 #i‚de‡
_NETWORK_LAYER_H


6 
	#_NETWORK_LAYER_H


	)

8 
	~"NWSèckC⁄fig.h
"

9 
	~<°döt.h
>

10 
	~"Tøn•‹tLayîUDP.h
"

12 
	#TRUE
 1

	)

13 
	#FALSE
 0

	)

14 
	#DEBUG_NL
 0

15 

	)

18 
	#MAX_NETWORK_PAYLOAD
 
MAX_TRANSPORT_UDP_SEG


19 
	#BCAST_ADDR
 65535

20 

	)

22 
	#LINK_STATE
 1

23 
	#FLOODING
 2

	)

24 
	#PROBABILISTIC
 1

25 
	#TTL_BASED
 2

	)

26 
	#RANDOM
 1

27 
	#GAUSSIAN
 2

	)

29 
	#DEFAULT_ROUTING_ALGORITHM
 
LINK_STATE


	)

30 
	#DEFAULT_FLOODING_TYPE
 
TTL_BASED


	)

31 
	#DEFAULT_PDISTRIBUTION
 
RANDOM


	)

34 
	#SIZE_NEIGHBOR
 5

	)

35 
	#SIZE_NEIGHBORLIST
 (3 + 
MAX_NGBS
 * 
SIZE_NEIGHBOR
)

	)

37 
	#SIZE_MSG_HELLO
 
SIZE_NEIGHBOR


	)

38 
	#SIZE_MSG_NGB_LIST
 
SIZE_NEIGHBORLIST


	)

40 
	#SIZE_NW_PACKET_HEADER
 12

	)

41 
	#SIZE_NW_PACKET
 (
SIZE_NW_PACKET_HEADER
 + 
MAX_NETWORK_PAYLOAD
)

	)

43 
	#SIZE_ROUTING_TABLE_ENTRY
 5

	)

44 
	#SIZE_ROUTING_TABLE
 (
SIZE_ROUTING_TABLE_ENTRY
 * 
MAX_NODES
)

	)

45 
	#SIZE_MSG_ROUTING_TABLE
 (4 + 
SIZE_ROUTING_TABLE
)

	)

47 
	#RF_BUFFER_SIZE
 92

48 

	)

50 
	#APPLICATION
 0x00

51 
	#NW_CONTROL
 0x80

52 

	)

54 
	#HELLO
 0x80

55 
	#NGB_LIST
 0x88

56 
	#ROUTE_CONFIG
 0x90

57 
	#INVALID
 0xFF

58 

	)

60 
	#UDP
 0x00

61 

	)

63 
	#MULTIHOP_YES
 
TRUE


	)

64 
	#MULTIHOP_NO
 
FALSE


	)

66 
	#INFINITY
 100

	)

67 
	#INVALID_ADDRESS
 
BCAST_ADDR


	)

74 
uöt16_t
 
	maddr
;

75 
öt8_t
 
	mrssi
;

76 
öt8_t
 
	mœ°Rï‹t
;

77 
öt8_t
 
	misNew
;

78 }
	tNeighb‹
;

83 
uöt16_t
 
	mmy_addr
;

84 
Neighb‹
 
	mngbs
[
MAX_NGBS
];

85 
öt8_t
 
	mcou¡
;

86 }
	tNeighb‹Li°
;

91 
Neighb‹
 
	mn
;

92 }
	tMsg_Hñlo
;

97 
Neighb‹Li°
 
	m∆
;

98 }
	tMsg_NgbLi°
;

103 
uöt16_t
 
	m§c
;

104 
uöt16_t
 
	mde°
;

105 
uöt16_t
 
	m¥evH›
;

106 
uöt16_t
 
	m√xtH›
;

107 
öt8_t
 
	mâl
;

108 
uöt8_t
 
	mty≥
;

113 
öt8_t
 
	mÀngth
;

114 
öt8_t
 
	m¥io
;

115 
uöt8_t
 
	md©a
[
MAX_NETWORK_PAYLOAD
];

116 }
	tNW_Packë
;

121 
uöt16_t
 
	mde°
;

122 
uöt16_t
 
	m√xtH›
;

123 
uöt8_t
 
	mco°
;

124 }
	tRoutögTabÀ
;

128 
uöt16_t
 
	mdg
;

129 
uöt16_t
 
	mnode
;

130 
RoutögTabÀ
 
	mπ
[
MAX_NODES
];

131 }
	tMsg_RoutögTabÀ
;

134 
öt8_t
 
add_√ighb‹
(
Neighb‹
 
n
);

147 
öt8_t
 
shouldIMu…ih›
(
NW_Packë
 *
pkt
);

156 
mu…ih›
(
NW_Packë
 *
pkt
);

166 
uöt16_t
 
rouã_addr
(uöt16_à
addr
);

175 
rouã_∑ckë
(
NW_Packë
 *
pkt
);

184 
öt8_t
 
£ndToG©eway
(
uöt8_t
 *
buf
, i¡8_à
Àn
);

199 
uöt8_t
 
pkt_ty≥
(
NW_Packë
 *
pkt
);

208 
uöt8_t
 
é_ty≥
(uöt8_à
ty≥
);

217 
uöt8_t
 
nw_˘æ_ty≥
(uöt8_à
ty≥
);

226 
¥o˚ss_≠p_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
);

238 
¥o˚ss_nw_˘æ_pkt
(
NW_Packë
 *
pkt
, 
öt8_t
 
rssi
);

254 
¸óã_√tw‹k_œyî_èsks
();

263 
öôüli£_√tw‹k_œyî
();

272 
ªc‹d_tx_queue_fuŒ
(
NW_Packë
 *
pkt
);

281 
ªc‹d_u«ssocüãd_sockë_pkt
(
NW_Packë
 *
pkt
);

290 
ªc‹d_max_ngb_limô_ªached
(
NW_Packë
 *
pkt
);

299 
cﬁÀ˘_queue_°©i°ics
();

309 
öt8_t
 
£t_routög_Æg‹ôhm
(öt8_à
¥ef
, i¡8_à
ty≥
, i¡8_à
pdi°
);

326 
£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπ
);

329 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπ
);

338 
öt8_t
 
gë_routög_èbÀ
(
RoutögTabÀ
 *
π
);

349 
¥öt_pkt_hódî
(
NW_Packë
 *
pkt
);

358 
¥öt_pkt
(
NW_Packë
 *
pkt
);

367 
öôüli£_routög_èbÀ
();

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Pack.c

2 
	~"Pack.h
"

3 
	~"NWEº‹Codes.h
"

7 
öt8_t
 
	gídün
;

10 
öt8_t
 
	$ídü¬ess
()

12 
uöt16_t
 
n
 = 0x0102;

13 
uöt8_t
 *
±r
 = (uöt8_t*)(&
n
);

15 if(
±r
[0] == 2 &&Ötr[1] == 1)

17 
ídün
 = 
LITTLE_ENDIAN
;

18  
LITTLE_ENDIAN
;

20 if(
±r
[0] == 1 &&Ötr[1] == 2)

22 
ídün
 = 
BIG_ENDIAN
;

23  
BIG_ENDIAN
;

25  
ERROR_ENDIAN
;

26 
	}
}

29 
	$∑ck_Neighb‹
(
uöt8_t
 *
de°
, 
Neighb‹
 *
n
)

31 if(
ídün
 =
LITTLE_ENDIAN
)

33 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) + 1 );

34 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) );

38 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) );

39 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
addr
)) + 1 );

42 
de°
[2] = 
n
 -> 
rssi
;

43 
de°
[3] = 
n
 -> 
œ°Rï‹t
;

44 
de°
[4] = 
n
 -> 
isNew
;

47 
	}
}

49 
	$∑ck_Msg_Hñlo
(
uöt8_t
 *
de°
, 
Msg_Hñlo
 *
m
)

51 
	`∑ck_Neighb‹
(
de°
, &(
m
 -> 
n
));

53 
	}
}

55 
	$∑ck_Neighb‹Li°
(
uöt8_t
 *
de°
, 
Neighb‹Li°
 *
n
)

57 
uöt8_t
 
i
,
j
;

59 if(
ídün
 =
LITTLE_ENDIAN
)

61 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) + 1 );

62 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) );

66 
de°
[0] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) );

67 
de°
[1] = *–(
uöt8_t
*)(&(
n
 -> 
my_addr
)) + 1 );

71 
i
 = 0, 
j
 = 2; i < 
MAX_NGBS
; i++, j +
SIZE_NEIGHBOR
)

72 
	`∑ck_Neighb‹
–
de°
 + 
j
, &(
n
 -> 
ngbs
[
i
]) );

74 
de°
[27] = 
n
 -> 
cou¡
;

77 
	}
}

79 
	$∑ck_Msg_NgbLi°
(
uöt8_t
 *
de°
, 
Msg_NgbLi°
 *
m
)

81 
	`∑ck_Neighb‹Li°
(
de°
, &(
m
 -> 
∆
));

83 
	}
}

85 
	$∑ck_RoutögTabÀE¡ry
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 *
π
)

87 if(
ídün
 =
LITTLE_ENDIAN
)

89 
de°
[0] = *–(
uöt8_t
*)(&(
π
 -> dest)) + 1 );

90 
de°
[1] = *–(
uöt8_t
*)(&(
π
 -> dest)) );

92 
de°
[2] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) + 1 );

93 
de°
[3] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) );

97 
de°
[0] = *–(
uöt8_t
*)(&(
π
 -> dest)) );

98 
de°
[1] = *–(
uöt8_t
*)(&(
π
 -> dest)) + 1 );

100 
de°
[2] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) );

101 
de°
[3] = *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)) + 1 );

103 
de°
[4] = 
π
 -> 
co°
;

105 
	}
}

107 
	$∑ck_RoutögTabÀ
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 
π
[])

109 
öt8_t
 
i
,
j
;

111 
i
 = 0, 
j
 = 0; i < 
MAX_NODES
; i++, j +
SIZE_ROUTING_TABLE_ENTRY
)

113 
	`∑ck_RoutögTabÀE¡ry
(
de°
 + 
j
, &
π
[
i
]);

116 
	}
}

117 
	$∑ck_Msg_RoutögTabÀ
(
uöt8_t
 *
de°
, 
Msg_RoutögTabÀ
 *
m
)

119 if(
ídün
 =
LITTLE_ENDIAN
)

121 
de°
[0] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) + 1 );

122 
de°
[1] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) );

124 
de°
[2] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) + 1 );

125 
de°
[3] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) );

130 
de°
[0] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) );

131 
de°
[1] = *–(
uöt8_t
*)(&(
m
 -> 
dg
)) + 1 );

133 
de°
[2] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) );

134 
de°
[3] = *–(
uöt8_t
*)(&(
m
 -> 
node
)) + 1 );

137 
	`∑ck_RoutögTabÀ
(
de°
 + 4, 
m
 -> 
π
);

139 
	}
}

141 
	$∑ck_NW_Packë_hódî
(
uöt8_t
 *
de°
, 
NW_Packë
 *
pkt
)

143 if(
ídün
 =
LITTLE_ENDIAN
)

145 
de°
[0] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 );

146 
de°
[1] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) );

148 
de°
[2] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) + 1 );

149 
de°
[3] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) );

151 
de°
[4] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) + 1 );

152 
de°
[5] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) );

154 
de°
[6] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) + 1 );

155 
de°
[7] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) );

161 
de°
[0] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) );

162 
de°
[1] = *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 );

164 
de°
[2] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) );

165 
de°
[3] = *–(
uöt8_t
*)(&(
pkt
 -> dest)) + 1 );

167 
de°
[4] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) );

168 
de°
[5] = *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)) + 1 );

170 
de°
[6] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) );

171 
de°
[7] = *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)) + 1 );

175 
de°
[8] = 
pkt
 -> 
âl
;

176 
de°
[9] = 
pkt
 -> 
ty≥
;

177 
de°
[10] = 
pkt
 -> 
Àngth
;

178 
de°
[11] = 
pkt
 -> 
¥io
;

181 
	}
}

183 
	$∑ck_NodeToG©ewaySîül_Packë_hódî
(
uöt8_t
 *
de°
, 
NodeToG©ewaySîül_Packë
 *
pkt
)

185 
de°
[0] = 
pkt
 -> 
ty≥
;

186 
de°
[1] = 
pkt
 -> 
Àngth
;

189 
	}
}

191 
	$∑ck_G©ewayToNodeSîül_Packë_hódî
(
uöt8_t
 *
de°
, 
G©ewayToNodeSîül_Packë
 *
pkt
)

193 
de°
[0] = 
pkt
 -> 
ty≥
;

194 
de°
[1] = 
pkt
 -> 
Àngth
;

197 
	}
}

199 
	$∑ck_TL_UDP_hódî
(
uöt8_t
 *
de°
, 
Tøn•‹t_Segmít_UDP
* 
£g
)

201 
de°
[0] = 
£g
 -> 
§cP‹t
;

202 
de°
[1] = 
£g
 -> 
de°P‹t
;

203 
de°
[2] = 
£g
 -> 
Àngth
;

206 
	}
}

211 
	$u≈ack_TL_UDP_hódî
(
Tøn•‹t_Segmít_UDP
* 
£g
, 
uöt8_t
 *
§c
)

213 
£g
 -> 
§cP‹t
 = 
§c
[0];

214 
£g
 -> 
de°P‹t
 = 
§c
[1];

215 
£g
 -> 
Àngth
 = 
§c
[2];

218 
	}
}

220 
	$u≈ack_Neighb‹
(
Neighb‹
 *
n
, 
uöt8_t
* 
§c
)

222 if(
ídün
 =
LITTLE_ENDIAN
)

224 *–(
uöt8_t
*)(&(
n
 -> 
addr
)ËË
§c
[1];

225 *–(
uöt8_t
*)(&(
n
 -> 
addr
)Ë+ 1 ) = 
§c
[0];

229 *–(
uöt8_t
*)(&(
n
 -> 
addr
)ËË
§c
[0];

230 *–(
uöt8_t
*)(&(
n
 -> 
addr
)Ë+ 1 ) = 
§c
[1];

233 
n
 -> 
rssi
 = 
§c
[2];

234 
n
 -> 
œ°Rï‹t
 = 
§c
[3];

235 
n
 -> 
isNew
 = 
§c
[4];

238 
	}
}

240 
	$u≈ack_Msg_Hñlo
(
Msg_Hñlo
 *
m
, 
uöt8_t
* 
§c
)

242 
	`u≈ack_Neighb‹
(&(
m
 -> 
n
), 
§c
);

244 
	}
}

246 
	$u≈ack_Neighb‹Li°
(
Neighb‹Li°
 *
∆i°
, 
uöt8_t
 *
§c
)

248 
Neighb‹
 
n
;

249 
uöt8_t
 
i
,
j
;

251 if(
ídün
 =
LITTLE_ENDIAN
)

253 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)ËË
§c
[1];

254 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)Ë+ 1 ) = 
§c
[0];

258 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)ËË
§c
[0];

259 *–(
uöt8_t
*)(&(
∆i°
 -> 
my_addr
)Ë+ 1 ) = 
§c
[1];

262 
i
 = 0,
j
 = 2; i < 
MAX_NGBS
; i++, j +
SIZE_NEIGHBOR
)

264 
	`u≈ack_Neighb‹
(&
n
, 
§c
 + 
j
);

265 
∆i°
 -> 
ngbs
[
i
] = 
n
;

267 
∆i°
 -> 
cou¡
 = 
§c
[2 + 
MAX_NGBS
 * 
SIZE_NEIGHBOR
];

270 
	}
}

272 
	$u≈ack_Msg_NgbLi°
(
Msg_NgbLi°
 *
m
, 
uöt8_t
 *
§c
)

274 
	`u≈ack_Neighb‹Li°
(&(
m
 -> 
∆
), 
§c
);

276 
	}
}

278 
	$u≈ack_RoutögTabÀE¡ry
(
RoutögTabÀ
 *
π
, 
uöt8_t
 *
§c
)

280 if(
ídün
 =
LITTLE_ENDIAN
)

282 *–(
uöt8_t
*)(&(
π
 -> 
de°
)ËË
§c
[1];

283 *–(
uöt8_t
*)(&(
π
 -> 
de°
)Ë+ 1 ) = 
§c
[0];

285 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)ËË
§c
[3];

286 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[2];

291 *–(
uöt8_t
*)(&(
π
 -> 
de°
)ËË
§c
[0];

292 *–(
uöt8_t
*)(&(
π
 -> 
de°
)Ë+ 1 ) = 
§c
[1];

294 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)ËË
§c
[2];

295 *–(
uöt8_t
*)(&(
π
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[3];

298 
π
 -> 
co°
 = 
§c
[4];

300 
	}
}

301 
	$u≈ack_RoutögTabÀ
(
RoutögTabÀ
 
π
[], 
uöt8_t
 *
§c
)

303 
öt8_t
 
i
, 
j
;

305 
i
 = 0, 
j
 = 0; i < 
MAX_NODES
; i++, j +
SIZE_ROUTING_TABLE_ENTRY
)

307 
	`u≈ack_RoutögTabÀE¡ry
(&
π
[
i
], 
§c
 + 
j
);

310 
	}
}

311 
	$u≈ack_Msg_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
m
, 
uöt8_t
 *
§c
)

313 if(
ídün
 =
LITTLE_ENDIAN
)

315 *–(
uöt8_t
*)(&(
m
 -> 
dg
)ËË
§c
[1];

316 *–(
uöt8_t
*)(&(
m
 -> 
dg
)Ë+ 1 ) = 
§c
[0];

318 *–(
uöt8_t
*)(&(
m
 -> 
node
)ËË
§c
[3];

319 *–(
uöt8_t
*)(&(
m
 -> 
node
)Ë+ 1 ) = 
§c
[2];

323 *–(
uöt8_t
*)(&(
m
 -> 
dg
)ËË
§c
[0];

324 *–(
uöt8_t
*)(&(
m
 -> 
dg
)Ë+ 1 ) = 
§c
[1];

326 *–(
uöt8_t
*)(&(
m
 -> 
node
)ËË
§c
[2];

327 *–(
uöt8_t
*)(&(
m
 -> 
node
)Ë+ 1 ) = 
§c
[3];

330 
	`u≈ack_RoutögTabÀ
(
m
 -> 
π
, 
§c
 + 4);

332 
	}
}

334 
	$u≈ack_NW_Packë_hódî
(
NW_Packë
 *
pkt
, 
uöt8_t
* 
§c
)

336 if(
ídün
 =
LITTLE_ENDIAN
)

338 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) ) = src[1];

339 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 ) = src[0];

341 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)ËË
§c
[3];

342 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)Ë+ 1 ) = 
§c
[2];

344 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)ËË
§c
[5];

345 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)Ë+ 1 ) = 
§c
[4];

347 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)ËË
§c
[7];

348 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[6];

353 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) ) = src[0];

354 *–(
uöt8_t
*)(&(
pkt
 -> 
§c
)) + 1 ) = src[1];

356 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)ËË
§c
[2];

357 *–(
uöt8_t
*)(&(
pkt
 -> 
de°
)Ë+ 1 ) = 
§c
[3];

359 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)ËË
§c
[4];

360 *–(
uöt8_t
*)(&(
pkt
 -> 
¥evH›
)Ë+ 1 ) = 
§c
[5];

362 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)ËË
§c
[6];

363 *–(
uöt8_t
*)(&(
pkt
 -> 
√xtH›
)Ë+ 1 ) = 
§c
[7];

367 
pkt
 -> 
âl
 = 
§c
[8];

368 
pkt
 -> 
ty≥
 = 
§c
[9];

369 
pkt
 -> 
Àngth
 = 
§c
[10];

370 
pkt
 -> 
¥io
 = 
§c
[11];

373 
	}
}

376 
	$u≈ack_NodeToG©ewaySîül_Packë_hódî
(
NodeToG©ewaySîül_Packë
 *
pkt
, 
uöt8_t
 *
§c
)

378 
pkt
 -> 
ty≥
 = 
§c
[0];

379 
pkt
 -> 
Àngth
 = 
§c
[1];

382 
	}
}

384 
	$u≈ack_G©ewayToNodeSîül_Packë_hódî
(
G©ewayToNodeSîül_Packë
 *
pkt
, 
uöt8_t
 *
§c
)

386 
pkt
 -> 
ty≥
 = 
§c
[0];

387 
pkt
 -> 
Àngth
 = 
§c
[1];

390 
	}
}

393 
uöt16_t
 
	$ht⁄
(
uöt16_t
 
ho°
)

395 
uöt16_t
 
nw
;

396 
uöt8_t
 *
§c
;

397 
uöt8_t
 *
de°
;

399 if(
ídün
 =
BIG_ENDIAN
)

400  
ho°
;

402 
§c
 = (
uöt8_t
*)(&
ho°
);

403 
de°
 = (
uöt8_t
*)(&
nw
);

405 
de°
[0] = 
§c
[1];

406 
de°
[1] = 
§c
[0];

408  
nw
;

409 
	}
}

413 
uöt16_t
 
	$¡oh
(
uöt16_t
 
nw
)

415 
uöt16_t
 
ho°
;

416 
uöt8_t
 *
§c
;

417 
uöt8_t
 *
de°
;

419 if(
ídün
 =
BIG_ENDIAN
)

420  
nw
;

422 
§c
 = (
uöt8_t
*)(&
nw
);

423 
de°
 = (
uöt8_t
*)(&
ho°
);

425 
de°
[0] = 
§c
[1];

426 
de°
[1] = 
§c
[0];

428  
ho°
;

429 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Pack.h

5 #i‚de‡
_PACK_H


6 
	#_PACK_H


	)

8 
	~"Nëw‹kLayî.h
"

9 
	~"Tøn•‹tLayîUDP.h
"

10 
	~"Sîül.h
"

11 
	~<°döt.h
>

15 
	#LITTLE_ENDIAN
 1

	)

16 
	#BIG_ENDIAN
 2

	)

19 
öt8_t
 
ídü¬ess
();

33 
∑ck_Neighb‹
(
uöt8_t
*, 
Neighb‹
*);

34 
∑ck_Msg_Hñlo
(
uöt8_t
*, 
Msg_Hñlo
*);

35 
∑ck_Neighb‹Li°
(
uöt8_t
*, 
Neighb‹Li°
*);

36 
∑ck_Msg_NgbLi°
(
uöt8_t
*, 
Msg_NgbLi°
*);

37 
∑ck_RoutögTabÀE¡ry
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 *
π
);

38 
∑ck_RoutögTabÀ
(
uöt8_t
 *
de°
, 
RoutögTabÀ
 
π
[]);

39 
∑ck_Msg_RoutögTabÀ
(
uöt8_t
 *
de°
, 
Msg_RoutögTabÀ
 *
m
);

40 
∑ck_NW_Packë_hódî
(
uöt8_t
*, 
NW_Packë
*);

41 
∑ck_NodeToG©ewaySîül_Packë_hódî
(
uöt8_t
 *
de°
, 
NodeToG©ewaySîül_Packë
 *
pkt
);

42 
∑ck_G©ewayToNodeSîül_Packë_hódî
(
uöt8_t
 *
de°
, 
G©ewayToNodeSîül_Packë
 *
pkt
);

43 
∑ck_TL_UDP_hódî
(
uöt8_t
 *, 
Tøn•‹t_Segmít_UDP
*);

46 
u≈ack_Neighb‹
(
Neighb‹
*, 
uöt8_t
*);

47 
u≈ack_Msg_Hñlo
(
Msg_Hñlo
*, 
uöt8_t
*);

48 
u≈ack_Neighb‹Li°
(
Neighb‹Li°
*, 
uöt8_t
*);

49 
u≈ack_Msg_NgbLi°
(
Msg_NgbLi°
*, 
uöt8_t
*);

50 
u≈ack_RoutögTabÀE¡ry
(
RoutögTabÀ
 *
π
, 
uöt8_t
 *
§c
);

51 
u≈ack_RoutögTabÀ
(
RoutögTabÀ
 
π
[], 
uöt8_t
 *
§c
);

52 
u≈ack_Msg_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
m
, 
uöt8_t
 *
§c
);

53 
u≈ack_NW_Packë_hódî
(
NW_Packë
*, 
uöt8_t
*);

54 
u≈ack_NodeToG©ewaySîül_Packë_hódî
(
NodeToG©ewaySîül_Packë
*, 
uöt8_t
 *);

55 
u≈ack_G©ewayToNodeSîül_Packë_hódî
(
G©ewayToNodeSîül_Packë
*, 
uöt8_t
 *);

56 
u≈ack_TL_UDP_hódî
(
Tøn•‹t_Segmít_UDP
*, 
uöt8_t
 *);

59 
uöt16_t
 
ht⁄
(uint16_t);

60 
uöt16_t
 
¡oh
(uint16_t);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Serial.c

1 
	~"Sîül.h
"

3 
	~<°dio.h
>

4 
	~<°döt.h
>

5 
	~<°dlib.h
>

7 
	~<ƒk.h
>

8 
	~<ö˛ude.h
>

9 
	~<ulib.h
>

10 
	~<avr/¶ìp.h
>

11 
	~<hÆ.h
>

12 
	~<ƒk_îr‹.h
>

13 
	~<ƒk_timî.h
>

14 
	~<¶ù.h
>

16 
	#INFINITY
 100

	)

17 
	#INVALID_ADDRESS
 0

	)

21 
u≈ack_G©ewayToNodeSîül_Packë_hódî
(
G©ewayToNodeSîül_Packë
 *, 
uöt8_t
 *);

22 
∑ck_Msg_RoutögTabÀ
(
uöt8_t
 *, 
Msg_RoutögTabÀ
*);

25 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *);

26 
£t_RoutögTabÀ
(
Msg_RoutögTabÀ
 *);

27 
uöt16_t
 
rouã_addr
(uint16_t);

30 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

31 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

32 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
*);

33 
ƒk_£m_t
 *
bm_£m
;

37 
ƒk_èsk_ty≥
 
	gSERIAL_TASK
;

38 
NRK_STK
 
	g£rül_èsk_°ack
[
NRK_APP_STACKSIZE
];

39 
£rül_èsk
();

41 
uöt8_t
 
	grx_buf
[
SIZE_GATEWAYTONODESERIAL_PACKET
];

42 
G©ewayToNodeSîül_Packë
 
	ggä_pkt
;

44 
Msg_RoutögTabÀ
 
	gmπ
;

45 
NW_Packë
 
	gnw_pkt
;

46 
uöt8_t
 
	gtx_buf
[
SIZE_NW_PACKET
];

92 
	$£ndToSîül
(
uöt8_t
 *
buf
, 
öt8_t
 
Àn
)

94  
	`¶ù_°¨ãd
 (Ë=
NRK_ERROR
 )

96 
	`ƒk_waô_u¡û_√xt_≥riod
();

99 if(
DEBUG_SR
 == 2)

101 
	`ƒk_k¥ötf
(
	`PSTR
("Calling slip_tx\r\n"));

104 if–
	`¶ù_tx
 (
buf
, 
Àn
Ë=
NRK_ERROR
 )

106 
	`ƒk_öt_dißbÀ
();

107 
	`ƒk_Àd_£t
(
RED_LED
);

110 
	`ƒk_k¥ötf
(
	`PSTR
("Error sending out NGB_LIST message over serial\r\n"));

115 
	}
}

117 
	$¥ötBuf„r
(
uöt8_t
 *
buf
, 
öt8_t
 
Àn
)

119 
Àn
 > 0)

121 
	`¥ötf
("%d ", *
buf
);

122 
buf
++;

123 
Àn
--;

125 
	`¥ötf
("\n\n");

127 
	}
}

130 
uöt8_t
 
	$£rül_pkt_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
)

132 
pkt
 -> 
ty≥
)

134 
SERIAL_APPLICATION
:

135  
SERIAL_APPLICATION
;

137 
SERIAL_ROUTE_CONFIG
:

138  
SERIAL_NW_CONTROL
;

141  
INVALID
;

142 
	}
}

144 
uöt8_t
 
	$£rül_nw_˘æ_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
)

146 
pkt
 -> 
ty≥
)

148 
SERIAL_ROUTE_CONFIG
:

149  
SERIAL_ROUTE_CONFIG
;

153 
	`¥ötf
("Bug detected in implementation ofÖacketÅype\n");

155  
INVALID
;

156 
	}
}

158 
	$¥o˚ss_£rül_≠p_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
)

160 
öt8_t
 
i
;

161 
	`¥ötf
("ReceivedánápplicationÜayerÖacket\n");

162 
i
 = 0; i < 
pkt
 -> 
Àngth
; i++)

164 
	`¥ötf
("%c", 
pkt
 -> 
d©a
[
i
]);

166 
	`¥ötf
("\r\n");

169 
	}
}

171 
	$¥o˚ss_£rül_nw_˘æ_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
)

173 
öt8_t
 
i
;

174 
öt8_t
 
ªt
;

176 if(
DEBUG_SR
 == 0)

178 
	`¥ötf
("InsideÖrocess_serial_nw_ctrl_pkt()\r\n");

181 
	`£rül_nw_˘æ_ty≥
(
pkt
))

183 
SERIAL_ROUTE_CONFIG
:

184 
	`u≈ack_Msg_RoutögTabÀ
(&
mπ
, 
pkt
 -> 
d©a
);

185 
mπ
.
dg
 = 
NODE_ADDR
;

187 if(
DEBUG_SR
 == 0)

189 
	`¥öt_RoutögTabÀ
(&
mπ
);

192 if(
mπ
.
node
 =
NODE_ADDR
)

194 
	`£t_RoutögTabÀ
(&
mπ
);

199 
nw_pkt
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

200 
nw_pkt
.
de°
 = 
mπ
.
node
;

201 
nw_pkt
.
√xtH›
 = 
	`rouã_addr
(
mπ
.
node
);

202 
nw_pkt
.
¥evH›
 = (
uöt16_t
)
NODE_ADDR
;

203 
nw_pkt
.
âl
 = 
MAX_NETWORK_DIAMETER
;

204 
nw_pkt
.
ty≥
 = (
uöt8_t
)
ROUTE_CONFIG
;

205 
nw_pkt
.
Àngth
 = 
SIZE_MSG_ROUTING_TABLE
;

206 
nw_pkt
.
¥io
 = 
NORMAL_PRIORITY
;

208 
	`∑ck_Msg_RoutögTabÀ
(
nw_pkt
.
d©a
, &
mπ
);

211 
	`íãr_¸
(
bm_£m
, 34);

212 
ªt
 = 
	`ö£π_tx_aq
(&
nw_pkt
);

213 if(
ªt
 =
NRK_ERROR
)

215 
	`Àave_¸
(
bm_£m
, 34);

216 
	`ƒk_waô_u¡û_√xt_≥riod
();

220 
	`Àave_¸
(
bm_£m
, 34);

231 
	}
}

234 
	$£rül_èsk
()

236 
öt8_t
 
ªt
;

238 if(
DEBUG_SR
 == 0)

240 
	`ƒk_k¥ötf
(
	`PSTR
("Inside serial_task. Task PID = "));

241 
	`¥ötf
("%d\r\n", 
	`ƒk_gë_pid
());

245 
	`¶ù_öô
 (
°dö
, 
°dout
, 0, 0);

250 if(
DEBUG_SR
 == 1)

252 
	`ƒk_k¥ötf
(
	`PSTR
("SL: Waiting foráÖacket fromÅhe gateway\r\n"));

254 
ªt
 = 
	`¶ù_rx
 (
rx_buf
, 
SIZE_GATEWAYTONODESERIAL_PACKET
);

255 i‡(
ªt
 > 0)

257 if(
DEBUG_SR
 == 0)

259 
	`ƒk_k¥ötf
(
	`PSTR
("Receivedá message fromÅhe gateway\r\n"));

260 
	`¥ötBuf„r
(
rx_buf
, 
SIZE_GATEWAYTONODESERIAL_PACKET
);

262 
	`u≈ack_G©ewayToNodeSîül_Packë_hódî
(&
gä_pkt
, 
rx_buf
);

263 
	`mem˝y
(
gä_pkt
.
d©a
, 
rx_buf
 + 
SIZE_GATEWAYTONODESERIAL_PACKET_HEADER
, 
MAX_GATEWAY_PAYLOAD
);

264 if(
DEBUG_SR
 == 0)

266 
	`ƒk_k¥ötf
(
	`PSTR
("Unpacked gatewaytonodeÖacket = "));

267 
	`¥öt_gä_pkt
(&
gä_pkt
);

270 
	`£rül_pkt_ty≥
(&
gä_pkt
))

272 
SERIAL_APPLICATION
:

273 
	`¥o˚ss_£rül_≠p_pkt
(&
gä_pkt
);

276 
SERIAL_NW_CONTROL
:

277 
	`¥o˚ss_£rül_nw_˘æ_pkt
(&
gä_pkt
);

280 
INVALID
:

282 
	`¥ötf
("£rül_èsk(): InvÆidÖackëÅy≥Ñe˚ived = %d\n", 
gä_pkt
.
ty≥
);

288 
	`ƒk_k¥ötf
(
	`PSTR
("FailedÅoÑeceiveá SLIP message from gateway\r\n"));

294 
	}
}

297 
	$¸óã_£rül_èsk
()

299 
SERIAL_TASK
.
èsk
 = 
£rül_èsk
;

300 
SERIAL_TASK
.
Ptos
 = (*Ë&
£rül_èsk_°ack
[
NRK_APP_STACKSIZE
 - 1];

301 
SERIAL_TASK
.
Pbos
 = (*Ë&
£rül_èsk_°ack
[0];

302 
SERIAL_TASK
.
¥io
 = 17;

303 
SERIAL_TASK
.
Fú°A˘iv©i⁄
 = 
TRUE
;

304 
SERIAL_TASK
.
Ty≥
 = 
BASIC_TASK
;

305 
SERIAL_TASK
.
SchTy≥
 = 
PREEMPTIVE
;

307 
SERIAL_TASK
.
˝u_ª£rve
.
£cs
 = 0;

308 
SERIAL_TASK
.
˝u_ª£rve
.
«no_£cs
 = 200 * 
NANOS_PER_MS
;

309 
SERIAL_TASK
.
≥riod
.
£cs
 = 0;

310 
SERIAL_TASK
.
≥riod
.
«no_£cs
 = 250 * 
NANOS_PER_MS
;

313 
SERIAL_TASK
.
off£t
.
£cs
 = 0;

314 
SERIAL_TASK
.
off£t
.
«no_£cs
= 0;

315 if(
CONNECTED_TO_GATEWAY
 =
TRUE
)

316 
	`ƒk_a˘iv©e_èsk
 (&
SERIAL_TASK
);

318 if(
DEBUG_SR
 == 0)

320 
	`ƒk_k¥ötf
(
	`PSTR
("SerialÅaskáctivated\r\n"));

322 
	}
}

324 
	$öôüli£_£rül_communiˇti⁄
()

326 
	`¸óã_£rül_èsk
();

329 
	}
}

331 
	$¥öt_gä_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
)

333 
öt8_t
 
i
;

334 
	`¥öt_gä_pkt_hódî
(
pkt
);

336 
i
 = 0; i < 
pkt
 -> 
Àngth
; i++)

338 
	`¥ötf
("%d ", 
pkt
 -> 
d©a
[
i
]);

340 
	`¥ötf
("\r\n");

343 
	}
}

346 
	$¥öt_gä_pkt_hódî
(
G©ewayToNodeSîül_Packë
 *
pkt
)

348 
	`ƒk_k¥ötf
(
	`PSTR
("["));

349 
	`¥ötf
("%d %d]", 
pkt
 -> 
ty≥
,Ökà-> 
Àngth
);

352 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Serial.h

5 #i‚de‡
_SERIAL_H


6 
	#_SERIAL_H


	)

8 
	~"NWSèckC⁄fig.h
"

9 
	~"Nëw‹kLayî.h
"

10 
	~<°döt.h
>

11 
	~<¶ù.h
>

13 
	#DEBUG_SR
 0

14 

	)

23 
	#SERIAL_APPLICATION
 0x00

24 
	#SERIAL_NW_CONTROL
 0x80

25 

	)

27 
	#SERIAL_NGB_LIST
 0x80

28 
	#SERIAL_ROUTE_CONFIG
 0x80

29 
	#INVALID
 0xFF

30 

	)

31 
	#SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
 2

	)

32 
	#SIZE_NODETOGATEWAYSERIAL_PACKET
 (
SIZE_NODETOGATEWAYSERIAL_PACKET_HEADER
 + 
MAX_SERIAL_PAYLOAD
)

	)

34 
	#SIZE_GATEWAYTONODESERIAL_PACKET_HEADER
 2

	)

35 
	#SIZE_GATEWAYTONODESERIAL_PACKET
 (
SIZE_GATEWAYTONODESERIAL_PACKET_HEADER
 + 
MAX_GATEWAY_PAYLOAD
)

	)

40 
uöt8_t
 
	mty≥
;

47 
öt8_t
 
	mÀngth
;

48 
uöt8_t
 
	md©a
[
MAX_SERIAL_PAYLOAD
];

50 }
	tNodeToG©ewaySîül_Packë
;

54 
uöt8_t
 
	mty≥
;

60 
öt8_t
 
	mÀngth
;

61 
uöt8_t
 
	md©a
[
MAX_GATEWAY_PAYLOAD
];

62 }
	tG©ewayToNodeSîül_Packë
;

65 
£ndToSîül
(
uöt8_t
 *
buf
, 
öt8_t
 
Àngth
);

76 
¥ötBuf„r
(
uöt8_t
 *
buf
, 
öt8_t
 
Àn
);

87 
¸óã_£rül_èsk
();

88 
uöt8_t
 
£rül_pkt_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
);

89 
uöt8_t
 
£rül_nw_˘æ_ty≥
(
G©ewayToNodeSîül_Packë
 *
pkt
);

90 
¥o˚ss_£rül_≠p_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
);

91 
¥o˚ss_£rül_nw_˘æ_pkt
(
G©ewayToNodeSîül_Packë
 *
pkt
);

92 
¥öt_gä_pkt
(
G©ewayToNodeSîül_Packë
*);

93 
¥öt_gä_pkt_hódî
(
G©ewayToNodeSîül_Packë
 *
pkt
);

94 
¥öt_RoutögTabÀ
(
Msg_RoutögTabÀ
 *
mπbl
);

95 
öôüli£_£rül_communiˇti⁄
();

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/TransportLayerUDP.c

3 
	~"Tøn•‹tLayîUDP.h
"

4 
	~"Nëw‹kLayî.h
"

5 
	~"Buf„rM™agî.h
"

6 
	~"NWEº‹Codes.h
"

7 
	~<ƒk.h
>

8 
	~<ö˛ude.h
>

9 
	~<ulib.h
>

10 
	~<°dio.h
>

11 
	~<avr/¶ìp.h
>

12 
	~<hÆ.h
>

13 
	~<ƒk_îr‹.h
>

14 
	~<°döt.h
>

19 
Sockë
 
	gsock
[
NUM_PORTS
];

21 
P‹t
 
	gp‹ts
[
NUM_PORTS
];

23 
öt8_t
 
	géayî_öô_d⁄e
;

25 
Tøn•‹t_Segmít_UDP
 
	gudp_£g
;

26 
NW_Packë
 
	gpkt
;

28 
ƒk_£m_t
 *
	gé_£m
;

33 
Re˚iveBuf„rM™agî
 
rx_buf_mgr
[];

34 
öt8_t
 
num_bufs_‰ì
;

35 
Re˚iveBuf„rUDP
 
rx_buf_udp
[];

36 
TønsmôBuf„r
 
tx_buf
[];

37 
TønsmôBuf„rM™agî
 
tx_buf_mgr
;

38 
ƒk_£m_t
 *
bm_£m
;

40 
íãr_¸
(
ƒk_£m_t
 *, 
öt8_t
);

41 
Àave_¸
(
ƒk_£m_t
 *, 
öt8_t
);

42 
öt8_t
 
gë_num_bufs_‰ì
();

43 
ö£π_rx_fq
(
Re˚iveBuf„rUDP
*, 
öt8_t
, int8_t);

44 
öt8_t
 
ö£π_tx_aq
(
NW_Packë
 *);

45 
öt8_t
 
gë_ö_¥o˚ss_buf_cou¡
(int8_t);

46 
Re˚iveBuf„rUDP
* 
ªmove_rx_pq
(
öt8_t
);

47 
¥öt_tx_buf„r
();

50 
uöt16_t
 
rouã_addr
(uint16_t);

51 
ƒk_£m_t
 *
∆_£m
;

54 
∑ck_TL_UDP_hódî
(
uöt8_t
*, 
Tøn•‹t_Segmít_UDP
*);

57 
go_öto_∑nic
(
öt8_t
 *);

60 
	$öôüli£_å™•‹t_œyî_udp
()

62 
öt8_t
 
i
;

65 
i
 = 0; i < 
NUM_PORTS
; i++)

67 
sock
[
i
].
pödex
 = -1;

68 
sock
[
i
].
rbmödex
 = -1;

69 
sock
[
i
].
pid
 = 
INVALID_PID
;

70 
sock
[
i
].
timeout
.
£cs
 = 0;

71 
sock
[
i
].
timeout
.
«no_£cs
 = 0;

73 
p‹ts
[
i
].
≤o
 = 
INVALID_PORT
;

77 
é_£m
 = 
	`ƒk_£m_¸óã
(1,
MAX_TASK_PRIORITY
);

78 if(
é_£m
 =
NULL
)

80 
	`ƒk_öt_dißbÀ
();

81 
	`ƒk_Àd_£t
(
RED_LED
);

83 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_transport_layer_udp(): Error creatingÅhe semaphore\r\n"));

86 if(
NUM_PORTS
 > 
MAX_PORTS
)

88 
	`ƒk_öt_dißbÀ
();

89 
	`ƒk_Àd_£t
(
RED_LED
);

91 
	`ƒk_k¥ötf
(
	`PSTR
("initialise_transport_layer_udp(): Too manyÖorts opened in system\r\n"));

95 
éayî_öô_d⁄e
 = 1;

97 
	}
}

99 
öt8_t
 
	$gë_√xt_avaûabÀ_sockë
()

101 
öt8_t
 
i
;

104 
i
 = 0; i < 
NUM_PORTS
; i++)

106 if(
sock
[
i
].
pid
 =
INVALID_PID
)

107  
i
;

109 
	`_ƒk_î∫o_£t
(
NO_SOCKET_DESC_AVAILABLE
);

111  
NRK_ERROR
;

112 
	}
}

115 
öt8_t
 
	$¸óã_sockë
(
öt8_t
 
ty≥
)

117 
öt8_t
 
ªsu…
;

119 
	`íãr_¸
(
é_£m
, 3);

121 if(
éayî_öô_d⁄e
 != 1)

123 
	`ƒk_öt_dißbÀ
();

124 
	`ƒk_Àd_£t
(
RED_LED
);

126 
	`ƒk_k¥ötf
(
	`PSTR
("create_socket(): TransportÜayerÇot initialised\r\n"));

129 
ty≥
)

131 
SOCK_DGRAM
:

132 
SOCK_IPC
:

133 
SOCK_RAW
:

134 
ªsu…
 = 
	`gë_√xt_avaûabÀ_sockë
();

135 if(
ªsu…
 !
NRK_ERROR
)

137 
sock
[
ªsu…
].
pid
 = 
	`ƒk_gë_pid
();

138 
sock
[
ªsu…
].
ty≥
 =Åype;

143 
	`_ƒk_î∫o_£t
(
UNSUPPORTED_SOCK_TYPE
);

144 
ªsu…
 = 
NRK_ERROR
;

147 
	`Àave_¸
(
é_£m
, 3);

148  
ªsu…
;

149 
	}
}

152 
uöt8_t
 
	$gë_√xt_avaûabÀ_p‹t
()

154 
uöt16_t
 
i
;

155 
öt8_t
 
j
;

157 
i
 = 
EPHEMERAL_PORT_NUM_START
; i <
MAX_PORT_NUM
; i++)

160 
j
 = 0; j < 
NUM_PORTS
; j++)

161 if(
p‹ts
[
j
].
≤o
 =
i
)

164 if(
j
 =
NUM_PORTS
)

165  
i
;

171 
	`_ƒk_î∫o_£t
(
NO_PORTS_AVAILABLE
);

172  
INVALID_PORT
;

173 
	}
}

175 
öt8_t
 
	$check_p‹t_avaûabÀ
(
uöt8_t
 
±
)

177 
öt8_t
 
i
;

179 
i
 = 0; i < 
NUM_PORTS
; i++)

180 if(
p‹ts
[
i
].
≤o
 =
±
)

183 if(
i
 =
NUM_PORTS
)

184  
NRK_OK
;

186 
	`_ƒk_î∫o_£t
(
PORT_UNAVAILABLE
);

187  
NRK_ERROR
;

188 
	}
}

190 
	$assign_p‹t
(
öt8_t
 
pödex
, 
uöt8_t
 
±
)

192 
öt8_t
 
ªt1
, 
ªt2
;

195 
p‹ts
[
pödex
].
≤o
 = 
±
;

196 
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
 = 
	`ƒk_sig«l_¸óã
();

197 
p‹ts
[
pödex
].
d©a_¨rived_sig«l
 = 
	`ƒk_sig«l_¸óã
();

199 if–
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
 =
NRK_ERROR
 )

201 
	`ƒk_öt_dißbÀ
();

202 
	`ƒk_Àd_£t
(
RED_LED
);

204 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe send_done signal\r\n"));

207 if–
p‹ts
[
pödex
].
d©a_¨rived_sig«l
 =
NRK_ERROR
 )

209 
	`ƒk_öt_dißbÀ
();

210 
	`ƒk_Àd_£t
(
RED_LED
);

212 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe data_arrived signal\r\n"));

215 
ªt1
 = 
	`ƒk_sig«l_ªgi°î
(
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
);

216 
ªt2
 = 
	`ƒk_sig«l_ªgi°î
(
p‹ts
[
pödex
].
d©a_¨rived_sig«l
);

218 if(
ªt1
 =
NRK_ERROR
)

220 
	`ƒk_öt_dißbÀ
();

221 
	`ƒk_Àd_£t
(
RED_LED
);

223 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): ErrorÑegisteringÅhe send_done signal\r\n"));

226 if(
ªt2
 =
NRK_ERROR
)

228 
	`ƒk_öt_dißbÀ
();

229 
	`ƒk_Àd_£t
(
RED_LED
);

231 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): ErrorÑegisteringÅhe data_arrived signal\r\n"));

235 
	}
}

237 
	$ªÀa£_p‹t
(
öt8_t
 
pödex
)

239 
öt8_t
 
ªt1
, 
ªt2
;

242 
p‹ts
[
pödex
].
≤o
 = 
INVALID_PID
;

243 
ªt1
 = 
	`ƒk_sig«l_dñëe
(
p‹ts
[
pödex
].
£nd_d⁄e_sig«l
);

244 
ªt2
 = 
	`ƒk_sig«l_dñëe
(
p‹ts
[
pödex
].
d©a_¨rived_sig«l
);

246 if(
ªt1
 =
NRK_ERROR
)

248 
	`ƒk_öt_dißbÀ
();

249 
	`ƒk_Àd_£t
(
RED_LED
);

251 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe send_done signal\r\n"));

254 if(
ªt2
 =
NRK_ERROR
)

256 
	`ƒk_öt_dißbÀ
();

257 
	`ƒk_Àd_£t
(
RED_LED
);

259 
	`ƒk_k¥ötf
(
	`PSTR
("assign_port(): Error creatingÅhe data_arrived signal\r\n"));

263 
	}
}

265 
öt8_t
 
	$gë_ödex_u«ssig√d_p‹t_ñemít
()

267 
öt8_t
 
i
;

269 
i
 = 0; i < 
NUM_PORTS
; i++)

270 if(
p‹ts
[
i
].
≤o
 =
INVALID_PORT
)

271  
i
;

273 
	`_ƒk_î∫o_£t
(
NO_PORT_ELEMENT_AVAILABLE
);

274  
NRK_ERROR
;

275 
	}
}

277 
öt8_t
 
	$gë_ödex_u«ssig√d_rbm_ñemít
()

279 
öt8_t
 
i
;

281 
i
 = 0; i < 
NUM_PORTS
; i++)

282 if(
rx_buf_mgr
[
i
].
pödex
 == -1)

283  
i
;

285 
	`_ƒk_î∫o_£t
(
NO_RBM_ELEMENT_AVAILABLE
);

286  
NRK_ERROR
;

287 
	}
}

289 
uöt8_t
 
	$gë_p‹t_num
(
öt8_t
 
sock_num
)

292 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

294 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

295  
INVALID_PORT
;

298 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

300 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

301  
INVALID_PORT
;

304 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

306 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

307  
INVALID_PORT
;

310 if(
sock
[
sock_num
].
pödex
 == -1)

312 
	`_ƒk_î∫o_£t
(
UNMAPPED_SOCKET
);

313  
INVALID_PORT
;

316  
p‹ts
[
sock
[
sock_num
].
pödex
].
≤o
;

317 
	}
}

320 
öt8_t
 
	$böd
(
öt8_t
 
sock_num
, 
öt16_t
 
p‹t
)

322 
öt8_t
 
buf_ödex
;

323 
öt8_t
 
p‹t_ödex
;

324 
öt8_t
 
rbm_ödex
;

325 
öt8_t
 
i
;

326 
öt8_t
 
size
;

328 
	`íãr_¸
(
bm_£m
, 8);

329 
	`íãr_¸
(
é_£m
, 8);

331 if(
éayî_öô_d⁄e
 != 1)

333 
	`ƒk_öt_dißbÀ
();

334 
	`ƒk_Àd_£t
(
RED_LED
);

336 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): TransportÜayerÇot initialised\r\n"));

340 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

342 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

344 
	`Àave_¸
(
é_£m
, 8);

345 
	`Àave_¸
(
bm_£m
, 8);

346  
NRK_ERROR
;

349 if(
p‹t
 <0 ||Ö‹à> 
MAX_PORT_NUM
)

351 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

353 
	`Àave_¸
(
é_£m
, 8);

354 
	`Àave_¸
(
bm_£m
, 8);

355  
NRK_ERROR
;

358 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

360 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

362 
	`Àave_¸
(
é_£m
, 8);

363 
	`Àave_¸
(
bm_£m
, 8);

364  
NRK_ERROR
;

367 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

369 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

371 
	`Àave_¸
(
é_£m
, 8);

372 
	`Àave_¸
(
bm_£m
, 8);

373  
NRK_ERROR
;

376 if(
sock
[
sock_num
].
rbmödex
 != -1)

378 
	`_ƒk_î∫o_£t
(
INVALID_CALL
);

380 
	`Àave_¸
(
é_£m
, 8);

381 
	`Àave_¸
(
bm_£m
, 8);

382  
NRK_ERROR
;

385 if(
	`check_p‹t_avaûabÀ
((
uöt8_t
)
p‹t
Ë=
FALSE
)

387 
	`Àave_¸
(
é_£m
, 8);

388 
	`Àave_¸
(
bm_£m
, 8);

389  
NRK_ERROR
;

392 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

394 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

396 
	`Àave_¸
(
é_£m
, 8);

397 
	`Àave_¸
(
bm_£m
, 8);

398  
NRK_ERROR
;

401 if(
sock
[
sock_num
].
pödex
 != -1)

403 
	`ƒk_öt_dißbÀ
();

404 
	`ƒk_Àd_£t
(
RED_LED
);

406 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

410 
size
 = 
DEFAULT_RX_QUEUE_SIZE
;

417 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

418 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

420 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

422 
	`ƒk_öt_dißbÀ
();

423 
	`ƒk_Àd_£t
(
RED_LED
);

425 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

429 
	`assign_p‹t
(
p‹t_ödex
, (
uöt8_t
)
p‹t
);

432 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

433 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

436 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

437 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

440 
i
 = 1; i <
size
; i++)

442 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

443 if(
buf_ödex
 =
NRK_ERROR
)

445 
	`ƒk_öt_dißbÀ
();

446 
	`ƒk_Àd_£t
(
RED_LED
);

448 
	`ƒk_k¥ötf
(
	`PSTR
("bind(): Bug found in implementation ofÇum_bufs_free\r\n"));

451 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

452 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

453 
num_bufs_‰ì
--;

456 
	`Àave_¸
(
é_£m
, 8);

457 
	`Àave_¸
(
bm_£m
, 8);

458  
NRK_OK
;

459 
	}
}

461 
öt8_t
 
	$gë_rx_queue_size
(
öt8_t
 
sock_num
)

463 
öt8_t
 
cou¡
;

465 
	`íãr_¸
(
bm_£m
, 9);

466 
	`íãr_¸
(
é_£m
, 9);

469 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

471 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

473 
	`Àave_¸
(
é_£m
, 9);

474 
	`Àave_¸
(
bm_£m
, 9);

475  
NRK_ERROR
;

478 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

480 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

482 
	`Àave_¸
(
é_£m
, 9);

483 
	`Àave_¸
(
bm_£m
, 9);

484  
NRK_ERROR
;

487 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

489 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

491 
	`Àave_¸
(
é_£m
, 9);

492 
	`Àave_¸
(
bm_£m
, 9);

493  
NRK_ERROR
;

496 if(
sock
[
sock_num
].
pödex
 == -1)

498 
	`Àave_¸
(
é_£m
, 9);

499 
	`Àave_¸
(
bm_£m
, 9);

503 if(
sock
[
sock_num
].
rbmödex
 == -1)

505 
	`ƒk_öt_dißbÀ
();

506 
	`ƒk_Àd_£t
(
RED_LED
);

508 
	`ƒk_k¥ötf
(
	`PSTR
("get_rx_queue_size(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

512 
cou¡
 = 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡TŸÆ
;

514 
	`Àave_¸
(
é_£m
, 9);

515 
	`Àave_¸
(
bm_£m
, 9);

516  
cou¡
;

517 
	}
}

520 
öt8_t
 
	$£t_rx_queue_size
(
öt8_t
 
sock_num
, i¡8_à
size
)

522 
uöt8_t
 
p‹t
;

523 
öt8_t
 
i
;

524 
öt8_t
 
Êag
;

526 
öt8_t
 
buf_ödex
;

527 
öt8_t
 
p‹t_ödex
;

528 
öt8_t
 
rbm_ödex
;

530 
	`íãr_¸
(
bm_£m
, 10);

531 
	`íãr_¸
(
é_£m
, 10);

533 if(
éayî_öô_d⁄e
 != 1)

535 
	`ƒk_öt_dißbÀ
();

536 
	`ƒk_Àd_£t
(
RED_LED
);

538 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): TransportÜayerÇot initialised\r\n"));

541 
Êag
 = 0;

543 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
size
 <= 0)

545 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

547 
	`Àave_¸
(
é_£m
, 10);

548 
	`Àave_¸
(
bm_£m
, 10);

549  
NRK_ERROR
;

552 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

554 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

556 
	`Àave_¸
(
é_£m
, 10);

557 
	`Àave_¸
(
bm_£m
, 10);

558  
NRK_ERROR
;

561 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

563 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

565 
	`Àave_¸
(
é_£m
, 10);

566 
	`Àave_¸
(
bm_£m
, 10);

567  
NRK_ERROR
;

570 if(
sock
[
sock_num
].
pödex
 == -1)

572 
Êag
 = 1;

573 
p‹t
 = 
	`gë_√xt_avaûabÀ_p‹t
();

574 if(
p‹t
 =
INVALID_PORT
)

576 
	`Àave_¸
(
é_£m
, 10);

577 
	`Àave_¸
(
bm_£m
, 10);

578  
NRK_ERROR
;

580 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

582 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

584 
	`Àave_¸
(
é_£m
, 10);

585 
	`Àave_¸
(
bm_£m
, 10);

586  
NRK_ERROR
;

590 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

591 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

593 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

595 
	`ƒk_öt_dißbÀ
();

596 
	`ƒk_Àd_£t
(
RED_LED
);

598 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

602 
	`assign_p‹t
(
p‹t_ödex
, 
p‹t
);

605 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

606 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

609 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

610 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

615 if(
size
 =
DEFAULT_RX_QUEUE_SIZE
)

617 
	`Àave_¸
(
é_£m
, 10);

618 
	`Àave_¸
(
bm_£m
, 10);

619  
size
;

622 
size
 -
DEFAULT_RX_QUEUE_SIZE
;

626 if(
	`gë_num_bufs_‰ì
(Ë< 
size
)

627 
size
 = 
	`gë_num_bufs_‰ì
();

632 
i
 = 1; i <
size
; i++)

634 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

635 if(
buf_ödex
 =
NRK_ERROR
)

637 
	`ƒk_öt_dißbÀ
();

638 
	`ƒk_Àd_£t
(
RED_LED
);

640 
	`ƒk_k¥ötf
(
	`PSTR
("set_rx_queue_size(): Bug found in implementation ofÇum_bufs_free\r\n"));

642 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

643 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

644 
num_bufs_‰ì
--;

647 
	`Àave_¸
(
é_£m
, 10);

648 
	`Àave_¸
(
bm_£m
, 10);

650 if(
Êag
 == 0)

651  
size
 + 
DEFAULT_RX_QUEUE_SIZE
;

653  
size
;

654 
	}
}

656 
öt8_t
 
	$ªÀa£_buf„r
(
öt8_t
 
sock_num
, 
uöt8_t
 *
±r
)

658 
Re˚iveBuf„rUDP
 *
buf
;

660 
	`íãr_¸
(
bm_£m
, 11);

661 
	`íãr_¸
(
é_£m
, 11);

664 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
±r
 =
NULL
)

666 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

668 
	`Àave_¸
(
é_£m
, 11);

669 
	`Àave_¸
(
bm_£m
, 11);

670  
NRK_ERROR
;

672 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

674 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

676 
	`Àave_¸
(
é_£m
, 11);

677 
	`Àave_¸
(
bm_£m
, 11);

678  
NRK_ERROR
;

681 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

683 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

685 
	`Àave_¸
(
é_£m
, 11);

686 
	`Àave_¸
(
bm_£m
, 11);

687  
NRK_ERROR
;

690 if(
sock
[
sock_num
].
pödex
 == -1)

692 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

694 
	`Àave_¸
(
é_£m
, 11);

695 
	`Àave_¸
(
bm_£m
, 11);

696  
NRK_ERROR
;

699 if(
sock
[
sock_num
].
rbmödex
 == -1)

701 
	`ƒk_öt_dißbÀ
();

702 
	`ƒk_Àd_£t
(
RED_LED
);

704 
	`ƒk_k¥ötf
(
	`PSTR
("release_buffer(): Bug discovered in implementation ofÖort /ÑbmÉlementárray\r\n"));

708 
buf
 = 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
hód_fq
;

709 
buf
 !
NULL
)

711 if–(
±r
 =(
buf
 -> 
£g
).
d©a
Ë&& (bu‡-> 
°©us
 =
FULL
) )

713 
buf
 = bu‡-> 
√xt
;

715 if(
buf
 =
NULL
)

717 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

719 
	`Àave_¸
(
é_£m
, 11);

720 
	`Àave_¸
(
bm_£m
, 11);

721  
NRK_ERROR
;

724 
buf
 -> 
°©us
 = 
EMPTY
;

725 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡Fªe
++;

727 
	`Àave_¸
(
é_£m
, 11);

728 
	`Àave_¸
(
bm_£m
, 11);

729  
NRK_OK
;

730 
	}
}

732 
öt8_t
 
	$˛o£_sockë
(
öt8_t
 
sock_num
)

734 
Re˚iveBuf„rUDP
 *
±r
;

736 
	`íãr_¸
(
bm_£m
, 12);

737 
	`íãr_¸
(
é_£m
, 12);

740 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

742 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

744 
	`Àave_¸
(
é_£m
, 12);

745 
	`Àave_¸
(
bm_£m
, 12);

746  
NRK_ERROR
;

748 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
() )

750 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

752 
	`Àave_¸
(
é_£m
, 12);

753 
	`Àave_¸
(
bm_£m
, 12);

754  
NRK_ERROR
;

757 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

759 
sock
[
sock_num
].
pid
 = 
INVALID_PID
;

760 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

761 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

763 
	`Àave_¸
(
é_£m
, 12);

764 
	`Àave_¸
(
bm_£m
, 12);

765  
NRK_OK
;

769 if(
sock
[
sock_num
].
pödex
 != -1)

771 if(
sock
[
sock_num
].
rbmödex
 == -1)

773 
	`ƒk_öt_dißbÀ
();

774 
	`ƒk_Àd_£t
(
RED_LED
);

776 
	`ƒk_k¥ötf
(
	`PSTR
("close_socket(): Bug discovered in implementation ofÖort /rbmÉlementárray\r\n"));

779  (
±r
 = 
	`ªmove_rx_pq
(
sock
[
sock_num
].
rbmödex
)Ë!
NULL
 )

780 
±r
 -> 
°©us
 = 
UNALLOCATED
;

783  (
±r
 = 
	`ªmove_rx_fq
(
sock
[
sock_num
].
rbmödex
, 
EMPTY
)Ë!
NULL
 )

784 
±r
 -> 
°©us
 = 
UNALLOCATED
;

787  (
±r
 = 
	`ªmove_rx_fq
(
sock
[
sock_num
].
rbmödex
,
FULL
)Ë!
NULL
 )

788 
±r
 -> 
°©us
 = 
UNALLOCATED
;

790 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
pid
 = 
INVALID_PID
;

791 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
pödex
 = -1;

792 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡TŸÆ
 = 0;

793 
rx_buf_mgr
[
sock
[
sock_num
].
rbmödex
].
cou¡Fªe
 = 0;

795 
	`ªÀa£_p‹t
(
sock
[
sock_num
].
pödex
);

798 
sock
[
sock_num
].
pödex
 = -1;

799 
sock
[
sock_num
].
rbmödex
 = -1;

800 
sock
[
sock_num
].
pid
 = 
INVALID_PID
;

801 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

802 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

804 
	`Àave_¸
(
é_£m
, 12);

805 
	`Àave_¸
(
bm_£m
, 12);

806  
NRK_OK
;

807 
	}
}

809 
öt8_t
 
	$is_p‹t_assocüãd
(
öt16_t
 
p‹t
)

812 if(
p‹t
 <0 ||Ö‹à> 
MAX_PORT_NUM
)

814 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

815  
NRK_ERROR
;

818 
	`íãr_¸
(
é_£m
, 13);

820 if(
	`check_p‹t_avaûabÀ
((
uöt8_t
)
p‹t
Ë=
NRK_OK
)

822 
	`Àave_¸
(
é_£m
, 13);

823  
FALSE
;

825 
	`Àave_¸
(
é_£m
, 13);

826  
TRUE
;

827 
	}
}

829 
öt8_t
 
	$£nd
(
öt8_t
 
sock_num
, i¡8_à*
±r
, i¡8_à
Àn
, 
öt32_t
 
de°_addr
, 
öt16_t
 
de°_p‹t
, i¡8_à
¥io
)

831 
öt8_t
 
ªsu…
;

833 
	`íãr_¸
(
bm_£m
, 14);

834 
	`íãr_¸
(
é_£m
, 14);

837 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

839 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

841 
	`Àave_¸
(
é_£m
, 14);

842 
	`Àave_¸
(
bm_£m
, 14);

843  
NRK_ERROR
;

846 if(
±r
 =
NULL
 || 
Àn
 <0 ||Üí > 
MAX_APP_PAYLOAD
)

848 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

850 
	`Àave_¸
(
é_£m
, 14);

851 
	`Àave_¸
(
bm_£m
, 14);

852  
NRK_ERROR
;

855 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

857 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

859 
	`Àave_¸
(
é_£m
, 14);

860 
	`Àave_¸
(
bm_£m
, 14);

861  
NRK_ERROR
;

865 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

867 
ƒk_sig_t
 
Œ_tx_d⁄e_sig«l
 = 
	`bmac_gë_tx_d⁄e_sig«l
();

868 if(
	`ƒk_sig«l_ªgi°î
(
Œ_tx_d⁄e_sig«l
Ë=
NRK_ERROR
)

870 
	`ƒk_öt_dißbÀ
();

871 
	`ƒk_Àd_£t
(
RED_LED
);

873 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Error inÑegistering forÜl_tx_done_signal\r\n"));

913  
	`bmac_tx_pkt
(
±r
, 
Àn
) == -1)

915 
ªsu…
 = 
	`ƒk_evít_waô
–
	`SIG
(
Œ_tx_d⁄e_sig«l
) );

918 
	`Àave_¸
(
é_£m
, 14);

919 
	`Àave_¸
(
bm_£m
, 14);

920  
NRK_OK
;

923 if(
de°_addr
 < 0 || 
de°_p‹t
 <0 || de°_p‹à>
MAX_PORT_NUM
)

925 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

927 
	`Àave_¸
(
é_£m
, 14);

928 
	`Àave_¸
(
bm_£m
, 14);

929  
NRK_ERROR
;

932 if(
¥io
 <0 ||Öriÿ> 
MAX_PRIORITY
)

934 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

936 
	`Àave_¸
(
é_£m
, 14);

937 
	`Àave_¸
(
bm_£m
, 14);

938  
NRK_ERROR
;

942 if(
sock
[
sock_num
].
pödex
 == -1)

945 if(
DEBUG_TL
 == 2)

947 
	`¥ötf
("%d ", 
NODE_ADDR
);

948 
	`ƒk_k¥ötf
(
	`PSTR
("called send() withoutá mapping\r\n"));

950 
öt8_t
 
buf_ödex
, 
p‹t_ödex
, 
rbm_ödex
;

951 
uöt8_t
 
p‹t
;

953 if(
	`gë_num_bufs_‰ì
(Ë< 
DEFAULT_RX_QUEUE_SIZE
)

955 
	`Àave_¸
(
é_£m
, 14);

956 
	`Àave_¸
(
bm_£m
, 14);

957 
	`_ƒk_î∫o_£t
(
NO_RX_BUFFERS_AVAILABLE
);

958  
NRK_ERROR
;

961 
p‹t_ödex
 = 
	`gë_ödex_u«ssig√d_p‹t_ñemít
();

962 
rbm_ödex
 = 
	`gë_ödex_u«ssig√d_rbm_ñemít
();

963 
buf_ödex
 = 
	`gë_ödex_u«Œoˇãd_rx_buf
();

965 if(
p‹t_ödex
 =
NRK_ERROR
 || 
rbm_ödex
 == NRK_ERROR)

967 
	`ƒk_öt_dißbÀ
();

968 
	`ƒk_Àd_£t
(
RED_LED
);

970 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Bug detected in implementation ofÖort /ÑbmÉlementárray\r\n"));

973 if(
buf_ödex
 =
NRK_ERROR
)

975 
	`ƒk_öt_dißbÀ
();

976 
	`ƒk_Àd_£t
(
RED_LED
);

978 
	`ƒk_k¥ötf
(
	`PSTR
("send(): Bug detected in implementation ofÇum_bufs_free\r\n"));

981 
p‹t
 = 
	`gë_√xt_avaûabÀ_p‹t
();

984 
	`assign_p‹t
(
p‹t_ödex
, 
p‹t
);

987 
sock
[
sock_num
].
pödex
 = 
p‹t_ödex
;

988 
sock
[
sock_num
].
rbmödex
 = 
rbm_ödex
;

991 
rx_buf_mgr
[
rbm_ödex
].
pödex
 = 
p‹t_ödex
;

992 
rx_buf_mgr
[
rbm_ödex
].
pid
 = 
	`ƒk_gë_pid
();

995 
	`ö£π_rx_fq
(&
rx_buf_udp
[
buf_ödex
], 
rbm_ödex
, 
EMPTY
);

996 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
++;

997 
num_bufs_‰ì
--;

1002 
udp_£g
.
§cP‹t
 = 
p‹ts
[
sock
[
sock_num
].
pödex
].
≤o
;

1003 
udp_£g
.
de°P‹t
 = (
uöt8_t
)
de°_p‹t
;

1004 
udp_£g
.
Àngth
 = 
Àn
;

1005 
	`mem˝y
(
udp_£g
.
d©a
, 
±r
, 
Àn
);

1007 if(
DEBUG_TL
 == 2)

1009 
	`¥ötf
("%d: ", 
NODE_ADDR
);

1010 
	`ƒk_k¥ötf
(
	`PSTR
("sent segment = "));

1011 
	`¥öt_£g
(&
udp_£g
);

1014 
sock
[
sock_num
].
ty≥
)

1016 
SOCK_DGRAM
:

1017 
pkt
.
§c
 = (
uöt16_t
)
NODE_ADDR
;

1018 
pkt
.
de°
 = (
uöt16_t
)
de°_addr
;

1019 
pkt
.
√xtH›
 = 
	`rouã_addr
(
de°_addr
);

1020 
pkt
.
¥evH›
 = 
NODE_ADDR
;

1022 
pkt
.
âl
 = 
MAX_NETWORK_DIAMETER
;

1023 
pkt
.
ty≥
 = 
UDP
;

1024 
pkt
.
Àngth
 = 
SIZE_TRANSPORT_UDP_HEADER
 + 
Àn
;

1025 
pkt
.
¥io
 =Örio;

1026 
	`∑ck_TL_UDP_hódî
(
pkt
.
d©a
, &
udp_£g
);

1027 
	`mem˝y
(
pkt
.
d©a
 + 
SIZE_TRANSPORT_UDP_HEADER
, 
udp_£g
.d©a, 
MAX_APP_PAYLOAD
);

1029 if(
DEBUG_TL
 == 2)

1031 
	`¥ötf
("%d: ",
NODE_ADDR
);

1032 
	`ƒk_k¥ötf
(
	`PSTR
("sentÖacket = "));

1033 
	`¥öt_pkt
(&
pkt
);

1038 
ªsu…
 = 
	`ö£π_tx_aq
(&
pkt
);

1039 if(
DEBUG_TL
 == 2)

1041 
	`ƒk_k¥ötf
("TL: send(): InsertedÖacket.");

1042 
	`¥öt_tx_buf„r
();

1045 if(
ªsu…
 =
NRK_ERROR
)

1046 
	`_ƒk_î∫o_£t
(
NO_TX_BUFFERS_AVAILABLE
);

1048 
	`Àave_¸
(
é_£m
, 14);

1049 
	`Àave_¸
(
bm_£m
, 14);

1050  
ªsu…
;

1053 
SOCK_IPC
:

1054 
	`ö£π_rx_pq
(&
udp_£g
, 
¥io
, 
NODE_ADDR
, 
INVALID_RSSI
);

1055 
	`Àave_¸
(
é_£m
, 14);

1056 
	`Àave_¸
(
bm_£m
, 14);

1060 
	`ƒk_öt_dißbÀ
();

1061 
	`ƒk_Àd_£t
(
RED_LED
);

1064 
	`ƒk_k¥ötf
(
	`PSTR
("TL: send(): Bug discovered in implementation of socketÅype\r\n"));

1068  
NRK_OK
;

1069 
	}
}

1071 
öt8_t
 
	$£t_timeout
(
öt8_t
 
sock_num
, i¡8_à
£cs
, i¡8_à
«no_£cs
)

1073 
	`íãr_¸
(
é_£m
, 15);

1079 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
£cs
 < 0 || 
«no_£cs
 < 0)

1081 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1083 
	`Àave_¸
(
é_£m
, 15);

1084  
NRK_ERROR
;

1087 if(
£cs
 =0 && 
«no_£cs
 == 0)

1089 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1091 
	`Àave_¸
(
é_£m
, 15);

1092  
NRK_ERROR
;

1095 if(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

1097 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1099 
	`Àave_¸
(
é_£m
, 15);

1100  
NRK_ERROR
;

1105 
sock
[
sock_num
].
timeout
.
£cs
 = secs;

1106 
sock
[
sock_num
].
timeout
.
«no_£cs
 =Çano_secs;

1108 
	`Àave_¸
(
é_£m
, 15);

1112  
NRK_OK
;

1113 
	}
}

1115 
uöt8_t
* 
	$ª˚ive
(
öt8_t
 
sock_num
, i¡8_à*
Àn
, 
uöt16_t
 *
§cAddr
, 
uöt8_t
 *
§cP‹t
, i¡8_à*
rssi
)

1117 
ƒk_sig_mask_t
 
my_sigs
;

1118 
Re˚iveBuf„rUDP
 *
buf
;

1119 
Tøn•‹t_Segmít_UDP
 *
£g
;

1120 
öt8_t
 
rbm_ödex
;

1121 
öt8_t
 
p‹t_ödex
;

1123 
	`íãr_¸
(
bm_£m
, 16);

1124 
	`íãr_¸
(
é_£m
, 16);

1127 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
 || 
Àn
 =
NULL
)

1129 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1131 
	`Àave_¸
(
é_£m
, 16);

1132 
	`Àave_¸
(
bm_£m
, 16);

1133  
NULL
;

1136 if–
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
())

1138 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1140 
	`Àave_¸
(
é_£m
, 16);

1141 
	`Àave_¸
(
bm_£m
, 16);

1142  
NULL
;

1145 if(
sock
[
sock_num
].
pödex
 == -1)

1147 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1149 
	`Àave_¸
(
é_£m
, 16);

1150 
	`Àave_¸
(
bm_£m
, 16);

1151  
NULL
;

1155 if(
sock
[
sock_num
].
ty≥
 =
SOCK_RAW
)

1160 if(
sock
[
sock_num
].
rbmödex
 == -1)

1162 
	`ƒk_öt_dißbÀ
();

1163 
	`ƒk_Àd_£t
(
RED_LED
);

1165 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Bug detected in implementation ofÖort/rbmÉlementárray\r\n"));

1169 
rbm_ödex
 = 
sock
[
sock_num
].
rbmödex
;

1170 
p‹t_ödex
 = 
sock
[
sock_num
].
pödex
;

1171 if(
sock
[
sock_num
].
timeout
.
£cs
 =0 && sock[sock_num].timeout.
«no_£cs
 == 0)

1174 if(
DEBUG_TL
 == 2)

1175 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): InsideÅhe sectionÅhatÑelatesÅo 'withoutÅimeout'Ñeceive\r\n"));

1178 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 =rx_buf_mgr[rbm_ödex].
cou¡TŸÆ
)

1180 if(
DEBUG_TL
 == 2)

1182 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): No segments inÑeceive queue ofÖort "));

1183 
	`¥ötf
("%d\n", 
p‹ts
[
p‹t_ödex
].
≤o
);

1187 
	`Àave_¸
(
é_£m
, 16);

1188 
	`Àave_¸
(
bm_£m
, 16);

1189 
my_sigs
 = 
	`ƒk_evít_waô
(
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
));

1190 
	`íãr_¸
(
bm_£m
, 16);

1191 
	`íãr_¸
(
é_£m
, 16);

1194 if(
my_sigs
 == 0)

1196 
	`ƒk_öt_dißbÀ
();

1197 
	`ƒk_Àd_£t
(
RED_LED
);

1199 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error callingÇrk_event_wait (withoutÅimeout)\r\n"));

1201 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
) )

1203 if(
DEBUG_TL
 == 2)

1204 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): ReceivedÅhe dataárrived signal\r\n"));

1209 
	`ƒk_öt_dißbÀ
();

1210 
	`ƒk_Àd_£t
(
RED_LED
);

1212 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Unknown signalÑeceived (withoutÅimeout)\r\n"));

1219 if(
DEBUG_TL
 == 2)

1220 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): InsideÅhe sectionÅhatÑelatesÅo 'withÅimeout'Ñeceive\r\n"));

1222 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
)

1224 
	`ƒk_öt_dißbÀ
();

1225 
	`ƒk_Àd_£t
(
RED_LED
);

1227 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error inÑegistering forÇrk_wakeup_signal\r\n"));

1229 if–
	`ƒk_£t_√xt_wakeup
(
sock
[
sock_num
].
timeout
Ë=
NRK_ERROR
)

1231 
	`ƒk_öt_dißbÀ
();

1232 
	`ƒk_Àd_£t
(
RED_LED
);

1234 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): ErrorÑeturned byÇrk_set_next_wakeup\r\n"));

1237 if(
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
 =rx_buf_mgr[rbm_ödex].
cou¡TŸÆ
)

1239 if(
DEBUG_TL
 == 2)

1241 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): No segments inÑeceive queue ofÖort "));

1242 
	`¥ötf
("%d\n", 
p‹ts
[
p‹t_ödex
].
≤o
);

1248 
	`Àave_¸
(
é_£m
, 16);

1249 
	`Àave_¸
(
bm_£m
, 16);

1250 
my_sigs
 = 
	`ƒk_evít_waô
(
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
));

1251 
	`íãr_¸
(
bm_£m
, 16);

1252 
	`íãr_¸
(
é_£m
, 16);

1255 if(
my_sigs
 == 0)

1257 
	`ƒk_öt_dißbÀ
();

1258 
	`ƒk_Àd_£t
(
RED_LED
);

1260 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Error callingÇrk_event_wait() (withÅimeout)\r\n"));

1262 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
d©a_¨rived_sig«l
) )

1264 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1265 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1266 if(
DEBUG_TL
 == 2)

1267 
	`ƒk_k¥ötf
(
	`PSTR
("ReceivedÅhe dataárrived signal\r\n"));

1271 if–
my_sigs
 & 
	`SIG
(
ƒk_wakeup_sig«l
) )

1273 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1274 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1276 
	`_ƒk_î∫o_£t
(
SOCKET_TIMEOUT
);

1278 
	`Àave_¸
(
é_£m
, 16);

1279 
	`Àave_¸
(
bm_£m
, 16);

1280  
NULL
;

1284 
	`ƒk_öt_dißbÀ
();

1285 
	`ƒk_Àd_£t
(
RED_LED
);

1287 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Unknown signalÑeceived (withÅimeout)\r\n"));

1298 
buf
 = 
	`ªmove_rx_pq
(
rbm_ödex
);

1299 if(
buf
 =
NULL
)

1301 
	`ƒk_öt_dißbÀ
();

1302 
	`ƒk_Àd_£t
(
RED_LED
);

1304 
	`ƒk_k¥ötf
(
	`PSTR
("receive(): Bug found in implementation of data_arrived_signal /Ñx buffer mgmt\r\n"));

1306 
	`ö£π_rx_fq
(
buf
, 
rbm_ödex
, 
FULL
);

1307 
£g
 = &(
buf
 -> seg);

1310 *
Àn
 = 
£g
 -> 
Àngth
;

1311 if(
§cAddr
 !
NULL
)

1312 *
§cAddr
 = 
buf
 -> srcAddr;

1313 if(
§cP‹t
 !
NULL
)

1314 *
§cP‹t
 = 
£g
 -> srcPort;

1315 if(
rssi
 !
NULL
)

1316 *
rssi
 = 
buf
 ->Ñssi;

1318 
	`Àave_¸
(
é_£m
, 16);

1319 
	`Àave_¸
(
bm_£m
, 16);

1320  
£g
 -> 
d©a
;

1321 
	}
}

1324 
öt8_t
 
	$check_ª˚ive_queue
(
öt8_t
 
sock_num
)

1326 
öt8_t
 
rbm_ödex
;

1327 
öt8_t
 
cou¡1
, 
cou¡2
, 
cou¡3
;

1329 
	`íãr_¸
(
bm_£m
, 17);

1330 
	`íãr_¸
(
é_£m
, 17);

1333 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

1335 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1337 
	`Àave_¸
(
é_£m
, 17);

1338 
	`Àave_¸
(
bm_£m
, 17);

1339  
NRK_ERROR
;

1342 if–(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
()Ë|| (sock[sock_num].
pödex
 == -1) )

1344 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1346 
	`Àave_¸
(
é_£m
, 17);

1347 
	`Àave_¸
(
bm_£m
, 17);

1348  
NRK_ERROR
;

1351 
rbm_ödex
 = 
sock
[
sock_num
].
rbmödex
;

1352 
cou¡1
 = 
rx_buf_mgr
[
rbm_ödex
].
cou¡TŸÆ
;

1353 
cou¡2
 = 
rx_buf_mgr
[
rbm_ödex
].
cou¡Fªe
;

1354 
cou¡3
 = 
	`gë_ö_¥o˚ss_buf_cou¡
(
rbm_ödex
);

1356 
	`Àave_¸
(
é_£m
, 17);

1357 
	`Àave_¸
(
bm_£m
, 17);

1358  
cou¡1
 - 
cou¡2
 - 
cou¡3
;

1359 
	}
}

1361 
öt8_t
 
	$waô_u¡û_£nd_d⁄e
(
öt8_t
 
sock_num
)

1363 
öt8_t
 
p‹t_ödex
;

1364 
ƒk_sig_mask_t
 
my_sigs
;

1366 
	`íãr_¸
(
bm_£m
, 18);

1367 
	`íãr_¸
(
é_£m
, 18);

1370 if(
sock_num
 < 0 || sock_num >
NUM_PORTS
)

1372 
	`_ƒk_î∫o_£t
(
INVALID_ARGUMENT
);

1374 
	`Àave_¸
(
é_£m
, 18);

1375 
	`Àave_¸
(
bm_£m
, 18);

1376  
NRK_ERROR
;

1379 if–(
sock
[
sock_num
].
pid
 !
	`ƒk_gë_pid
()Ë|| (sock[sock_num].
pödex
 == -1) )

1381 
	`_ƒk_î∫o_£t
(
INVALID_SOCKET
);

1383 
	`Àave_¸
(
é_£m
, 18);

1384 
	`Àave_¸
(
bm_£m
, 18);

1385  
NRK_ERROR
;

1390 
p‹t_ödex
 = 
sock
[
sock_num
].
pödex
;

1392 if(
sock
[
sock_num
].
timeout
.
£cs
 =0 && sock[sock_num].timeout.
«no_£cs
 == 0)

1397 
	`Àave_¸
(
é_£m
, 18);

1398 
	`Àave_¸
(
bm_£m
, 18);

1399 
my_sigs
 = 
	`ƒk_evít_waô
–
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) );

1400 
	`íãr_¸
(
bm_£m
, 18);

1401 
	`íãr_¸
(
é_£m
, 18);

1403 if(
my_sigs
 == 0)

1405 
	`ƒk_öt_dißbÀ
();

1406 
	`ƒk_Àd_£t
(
RED_LED
);

1408 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_event_wait() (withoutÅimeout)\r\n"));

1411 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) )

1413 
	`Àave_¸
(
é_£m
, 18);

1414 
	`Àave_¸
(
bm_£m
, 18);

1415  
NRK_OK
;

1420 
	`ƒk_öt_dißbÀ
();

1421 
	`ƒk_Àd_£t
(
RED_LED
);

1423 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): Unknown signalÑeceived (withoutÅimeout)\r\n"));

1429 if–
	`ƒk_sig«l_ªgi°î
(
ƒk_wakeup_sig«l
Ë=
NRK_ERROR
 )

1431 
	`ƒk_öt_dißbÀ
();

1432 
	`ƒk_Àd_£t
(
RED_LED
);

1434 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑegistering forÇrk_wakeup_signal\r\n"));

1436 if–
	`ƒk_£t_√xt_wakeup
(
sock
[
sock_num
].
timeout
Ë=
NRK_ERROR
)

1438 
	`ƒk_öt_dißbÀ
();

1439 
	`ƒk_Àd_£t
(
RED_LED
);

1441 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_set_next_wakeup()\r\n"));

1445 
	`Àave_¸
(
é_£m
, 18);

1446 
	`Àave_¸
(
bm_£m
, 18);

1447 
my_sigs
 = 
	`ƒk_evít_waô
–
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
) );

1448 
	`íãr_¸
(
bm_£m
, 18);

1449 
	`íãr_¸
(
é_£m
, 18);

1451 if(
my_sigs
 == 0)

1453 
	`ƒk_öt_dißbÀ
();

1454 
	`ƒk_Àd_£t
(
RED_LED
);

1456 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): ErrorÑeturned byÇrk_event_wait()\r\n"));

1459 if–
my_sigs
 & 
	`SIG
(
p‹ts
[
p‹t_ödex
].
£nd_d⁄e_sig«l
) )

1461 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1462 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1464 
	`Àave_¸
(
é_£m
, 18);

1465 
	`Àave_¸
(
bm_£m
, 18);

1466  
NRK_OK
;

1469 if–
my_sigs
 & 
	`SIG
(
ƒk_wakeup_sig«l
) )

1471 
sock
[
sock_num
].
timeout
.
£cs
 = 0;

1472 
sock
[
sock_num
].
timeout
.
«no_£cs
 = 0;

1473 
	`_ƒk_î∫o_£t
(
SOCKET_TIMEOUT
);

1475 
	`Àave_¸
(
é_£m
, 18);

1476 
	`Àave_¸
(
bm_£m
, 18);

1477  
NRK_ERROR
;

1481 
	`ƒk_öt_dißbÀ
();

1482 
	`ƒk_Àd_£t
(
RED_LED
);

1484 
	`ƒk_k¥ötf
(
	`PSTR
("wait_until_send_done(): Unknown signalÑeceived (withÅimeout)\r\n"));

1489 
	`Àave_¸
(
é_£m
, 18);

1490 
	`Àave_¸
(
bm_£m
, 18);

1491  
NRK_ERROR
;

1492 
	}
}

1494 
	$¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
 *
£g
)

1496 
	`¥ötf
("[%d %d %d] ", 
£g
 -> 
§cP‹t
, seg -> 
de°P‹t
, seg -> 
Àngth
);

1498 
	}
}

1500 
	$¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *
£g
)

1502 
öt8_t
 
i
;

1504 
	`¥öt_£g_hódî
(
£g
);

1505 
i
 = 0; i < 
£g
 -> 
Àngth
; i++)

1506 
	`¥ötf
("%d ", (
£g
 -> 
d©a
)[
i
]);

1508 
	`¥ötf
("\r\n");

1509 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/TransportLayerUDP.h

5 #i‚de‡
_TRANSPORT_LAYER_UDP_H


6 
	#_TRANSPORT_LAYER_UDP_H


	)

8 
	~"NWSèckC⁄fig.h
"

9 
	~<ƒk.h
>

10 
	~<ö˛ude.h
>

11 
	~<°döt.h
>

14 
	#DEBUG_TL
 0

15 

	)

17 
	#SOCK_DGRAM
 1

18 
	#SOCK_SEQPACKET
 2

19 
	#SOCK_RAW
 3

20 
	#SOCK_IPC
 4

21 

	)

22 
	#EPHEMERAL_PORT_NUM_START
 11

23 
	#MAX_PORT_NUM
 255

	)

24 
	#MAX_PORTS
 127

25 

	)

28 
	#SIZE_TRANSPORT_UDP_HEADER
 3

	)

29 
	#MAX_TRANSPORT_UDP_SEG
 (
MAX_APP_PAYLOAD
 + 
SIZE_TRANSPORT_UDP_HEADER
)

	)

31 
	#INVALID_PORT
 0

32 
	#INVALID_PID
 0

33 
	#INVALID_RSSI
 (-120)

	)

39 
uöt8_t
 
	m§cP‹t
;

40 
uöt8_t
 
	mde°P‹t
;

41 
öt8_t
 
	mÀngth
;

42 
uöt8_t
 
	md©a
[
MAX_APP_PAYLOAD
];

44 }
	tTøn•‹t_Segmít_UDP
;

48 
uöt8_t
 
	m≤o
;

49 
ƒk_sig_t
 
	md©a_¨rived_sig«l
;

50 
ƒk_sig_t
 
	m£nd_d⁄e_sig«l
;

52 }
	tP‹t
;

56 
öt8_t
 
	mpödex
;

57 
öt8_t
 
	mrbmödex
;

58 
öt8_t
 
	mpid
;

59 
öt8_t
 
	mty≥
;

60 
ƒk_time_t
 
	mtimeout
;

61 }
	tSockë
;

66 
öôüli£_å™•‹t_œyî_udp
();

75 
öt8_t
 
gë_√xt_avaûabÀ_sockë
();

85 
öt8_t
 
¸óã_sockë
(öt8_à
ty≥
);

96 
uöt8_t
 
gë_√xt_avaûabÀ_p‹t
();

106 
öt8_t
 
check_p‹t_avaûabÀ
(
uöt8_t
 
±
);

116 
assign_p‹t
(
öt8_t
 
pödex
, 
uöt8_t
 
±
);

127 
ªÀa£_p‹t
(
öt8_t
 
pödex
);

136 
öt8_t
 
gë_u«ssig√d_p‹t_ñemít
();

147 
öt8_t
 
gë_u«ssig√d_rbm_ñemít
();

158 
uöt8_t
 
gë_p‹t_num
(
öt8_t
 
sock_num
);

174 
öt8_t
 
böd
(öt8_à
sock_num
, 
öt16_t
 
p‹t
);

193 
öt8_t
 
gë_rx_queue_size
(öt8_à
sock_num
);

208 
öt8_t
 
£t_rx_queue_size
(öt8_à
sock_num
, i¡8_à
size
);

235 
öt8_t
 
ªÀa£_buf„r
(öt8_à
sock_num
, 
uöt8_t
* 
±r
);

254 
öt8_t
 
˛o£_sockë
(öt8_à
sock_num
);

267 
öt8_t
 
is_p‹t_assocüãd
(
öt16_t
 
p‹t
);

278 
öt8_t
 
£nd
(öt8_à
sock_num
, i¡8_à*
±r
, i¡8_à
Àn
, 
öt32_t
 
de°_addr
, 
öt16_t
 
de°_p‹t
, i¡8_à
¥io
);

305 
öt8_t
 
£t_timeout
(öt8_à
sock_num
, i¡8_à
£cs
, i¡8_à
«no_£cs
);

324 
uöt8_t
* 
ª˚ive
(
öt8_t
 
sock_num
, i¡8_à*
Àn
, 
uöt16_t
 *
§cAddr
, uöt8_à*
§cP‹t
, i¡8_à*
rssi
);

350 
öt8_t
 
check_ª˚ive_queue
(öt8_à
sock_num
);

373 
öt8_t
 
waô_u¡û_£nd_d⁄e
(öt8_à
sock_num
);

394 
¥öt_£g_hódî
(
Tøn•‹t_Segmít_UDP
* 
£g
);

395 
¥öt_£g
(
Tøn•‹t_Segmít_UDP
 *
£g
);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/nrk_cfg.h

4 #i‚de‡
__ƒk_cfg_h


5 
	#__ƒk_cfg_h


	)

9 
	#NRK_REPORT_ERRORS


	)

12 
	#NRK_HALT_AND_LOOP_ON_ERROR


	)

21 
	#NRK_STACK_CHECK


	)

26 
	#NRK_NO_POWER_DOWN


	)

32 
	#NRK_MAX_TASKS
 8

	)

35 
	#NRK_TASK_IDLE_STK_SIZE
 128

36 
	#NRK_APP_STACKSIZE
 192

	)

37 
	#NRK_KERNEL_STACKSIZE
 128

	)

38 
	#NRK_MAX_RESOURCE_CNT
 9

	)

42 
	#SLIP_PCP_CEILING
 19

44 
	#NRK_UART_BUF
 1

	)

46 
	#MAX_RX_UART_BUF
 128

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_link/platform/expboard__/rtl_defs.h

27 #i‚de‡
_RTL_DEFS_H_


28 
	#_RTL_DEFS_H_


	)

30 
	#RTL_NRK_TICKS_PER_SLOT
 9

	)

33 
	#RTL_SLOT_TIME_US
 (
US_PER_TICK
*(
RTL_NRK_TICKS_PER_SLOT
))

	)

37 
	#HS_TICKS_PER_SLOT
 (
NANOS_PER_TICK
/125)

	)

48 
	#SLOT_TO_SFD
 (
TX_GUARD_TIME
+
TX_TO_SFD
)

	)

49 
	#GUARD_LOW
 (
SLOT_TO_SFD
-(
HS_TICKS_PER_SLOT
-
SLOT_TO_START
))

	)

50 
	#GUARD_HIGH
 
SLOT_TO_SFD


	)

53 
	#SLOT_TIME
 46896

	)

54 
	#TX_TO_SFD
 2976

	)

55 
	#TX_GUARD_TIME
 4000

	)

56 
	#OS_TICK_TO_TASK_START
 800

	)

59 
	#SFD_TO_NEXT_SLOT_TIME
 (27750)

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_link/platform/firefly2_2/rtl_defs.h

27 #i‚de‡
_RTL_DEFS_H_


28 
	#_RTL_DEFS_H_


	)

30 
	#RTL_NRK_TICKS_PER_SLOT
 9

	)

33 
	#RTL_SLOT_TIME_US
 (
US_PER_TICK
*(
RTL_NRK_TICKS_PER_SLOT
))

	)

37 
	#HS_TICKS_PER_SLOT
 (
NANOS_PER_TICK
/125)

	)

48 
	#SLOT_TO_SFD
 (
TX_GUARD_TIME
+
TX_TO_SFD
)

	)

49 
	#GUARD_LOW
 (
SLOT_TO_SFD
-(
HS_TICKS_PER_SLOT
-
SLOT_TO_START
))

	)

50 
	#GUARD_HIGH
 
SLOT_TO_SFD


	)

53 
	#SLOT_TIME
 46896

	)

54 
	#TX_TO_SFD
 2976

	)

55 
	#TX_GUARD_TIME
 4000

	)

56 
	#OS_TICK_TO_TASK_START
 800

	)

59 
	#SFD_TO_NEXT_SLOT_TIME
 (27750)

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_link/platform/micaZ/rtl_defs.h

27 #i‚de‡
_RTL_DEFS_H_


28 
	#_RTL_DEFS_H_


	)

30 
	#RTL_NRK_TICKS_PER_SLOT
 9

	)

33 
	#RTL_SLOT_TIME_US
 (
US_PER_TICK
*(
RTL_NRK_TICKS_PER_SLOT
))

	)

37 
	#HS_TICKS_PER_SLOT
 (
NANOS_PER_TICK
/125)

	)

48 
	#SLOT_TO_SFD
 (
TX_GUARD_TIME
+
TX_TO_SFD
)

	)

49 
	#GUARD_LOW
 (
SLOT_TO_SFD
-(
HS_TICKS_PER_SLOT
-
SLOT_TO_START
))

	)

50 
	#GUARD_HIGH
 
SLOT_TO_SFD


	)

53 
	#SLOT_TIME
 46896

	)

54 
	#TX_TO_SFD
 2976

	)

56 
	#TX_GUARD_TIME
 4000

	)

57 
	#OS_TICK_TO_TASK_START
 800

	)

59 
	#SFD_TO_NEXT_SLOT_TIME
 (27750)

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rt_link.c

26 
	~<π_lök.h
>

27 
	~<πl_scheduÀr.h
>

28 
	~<πl_debug.h
>

29 
	~<ö˛ude.h
>

30 
	~<ulib.h
>

31 
	~<avr/¶ìp.h
>

32 
	~<avr/wdt.h
>

33 
	~<avr/ì¥om.h
>

34 
	~<°dio.h
>

35 
	~<avr/öãºu±.h
>

36 
	~<ƒk.h
>

37 
	~<ƒk_evíts.h
>

38 
	~<ƒk_timî.h
>

39 
	~<ƒk_îr‹.h
>

40 
	~<πl_defs.h
>

41 
	~<°dlib.h
>

48 
	#LED_SLOT_DEBUG


	)

57 vﬁ©ûê
uöt16_t
 
	gglobÆ_¶Ÿ
;

58 vﬁ©ûê
uöt16_t
 
	gcuºít_globÆ_¶Ÿ
;

59 vﬁ©ûê
uöt16_t
 
	gglobÆ_cy˛e
;

60 
uöt16_t
 
	gœ°_sync_¶Ÿ
;

61 
uöt16_t
 
	g¶Ÿ_°¨t_time
;

63 
öt8_t
 
	gπl_tx_d⁄e_sig«l
;

64 
öt8_t
 
	gπl_rx_pkt_sig«l
;

66 
öt8_t
 
	$πl_gë_tx_d⁄e_sig«l
()

68 if(
	`πl_ªady
()==
NRK_ERROR
)  NRK_ERROR;

69  
πl_tx_d⁄e_sig«l
;

70 
	}
}

73 
öt8_t
 
	$πl_gë_rx_pkt_sig«l
()

75 if(
	`πl_ªady
()==
NRK_ERROR
)  NRK_ERROR;

76  
πl_rx_pkt_sig«l
;

77 
	}
}

80 
öt8_t
 
	$πl_waô_u¡û_tx_d⁄e
 (
uöt8_t
 
¶Ÿ
)

83 
	`ƒk_sig«l_ªgi°î
(
πl_tx_d⁄e_sig«l
);

84 
	`πl_tx_pkt_check
(
¶Ÿ
) != 0)

85 
	`ƒk_evít_waô
 (
	`SIG
(
πl_tx_d⁄e_sig«l
));

86  
NRK_OK
;

87 
	}
}

89 
öt8_t
 
	$πl_waô_u¡û_rx_pkt
 ()

91 
	`ƒk_sig«l_ªgi°î
(
πl_rx_pkt_sig«l
);

92 i‡(
	`πl_rx_pkt_check
() != 0)

93  
NRK_OK
;

94 
	`ƒk_evít_waô
 (
	`SIG
(
πl_rx_pkt_sig«l
));

95  
NRK_OK
;

96 
	}
}

98 
öt8_t
 
	$πl_waô_u¡û_rx_‹_tx
 ()

100 
	`ƒk_sig«l_ªgi°î
(
πl_rx_pkt_sig«l
);

101 
	`ƒk_sig«l_ªgi°î
(
πl_tx_d⁄e_sig«l
);

102 
	`ƒk_evít_waô
 (
	`SIG
(
πl_rx_pkt_sig«l
Ë| SIG(
πl_tx_d⁄e_sig«l
));

103  
NRK_OK
;

104 
	}
}

107 
uöt16_t
 
	$πl_gë_globÆ_¶Ÿ
 ()

109 
uöt16_t
 
¶Ÿ
;

110 
uöt8_t
 
v
;

111 
ƒk_time_t
 
˘
;

113 
	`ƒk_time_gë
 (&
˘
);

116 
v
 = 
	`ƒk_time_sub
 (&
˘
, ct, 
œ°_¶Ÿ_time
);

118 
˘
.
«no_£cs
 +(
uöt32_t
Ë
NANOS_PER_SEC
 *˘.
£cs
;

120 
¶Ÿ
 =

121 
˘
.
«no_£cs
 / ((
uöt32_t
Ë
RTL_SLOT_TIME_US
 *

122 (
uöt32_t
Ë
NANOS_PER_US
);

123 
¶Ÿ
 +
œ°_¶Ÿ
;

124  
¶Ÿ
;

125 
	}
}

127 
öt8_t
 
	$πl_waô_u¡û_globÆ_¶Ÿ
 (
uöt16_t
 
¶Ÿ
)

129  
NRK_ERROR
;

130 
	}
}

132 
öt8_t
 
	$πl_ªady
 ()

134 i‡(
_πl_ªady
 == 1)

135  
NRK_OK
;

137  
NRK_ERROR
;

138 
	}
}

140 
uöt8_t
* 
	$πl_rx_pkt_gë
 (
uöt8_t
 *
Àn
, 
öt8_t
 *
rssi
,uöt8_à*
¶Ÿ
)

142 if(
	`πl_rx_pkt_check
()==0)

144 *
Àn
=0;

145 *
rssi
=0;

146 *
¶Ÿ
=0;

147  
NULL
;

149 *
Àn
=
πl_rfRxInfo
.
Àngth
;

150 *
rssi
=
πl_rfRxInfo
.rssi;

151 *
¶Ÿ
=
πl_rx_¶Ÿ
;

153  
πl_rfRxInfo
.
pPaylﬂd
;

154 
	}
}

156 
uöt16_t
 
	$πl_gë_¶Ÿ
 ()

158  
cuºít_globÆ_¶Ÿ
;

159 
	}
}

170 
uöt8_t
 
	$πl_sync_°©us
 ()

172  
_πl_sync_ok
;

173 
	}
}

183 
uöt8_t
 
	$πl_check_abs_tx_°©us
 ()

185  
πl_abs_tx_ªady
;

186 
	}
}

201 
öt8_t
 
	$πl_tx_abs_pkt
 (
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
abs_¶Ÿ
)

203 
uöt8_t
 
¶Ÿ
;

204 
uöt32_t
 
¶Ÿ_mask
;

207 
¶Ÿ
 = 
abs_¶Ÿ
 % 32;

208 
¶Ÿ_mask
 = ((
uöt32_t
Ë1Ë<< 
¶Ÿ
;

209 i‡(
¶Ÿ_mask
 & 
πl_tdma_tx_mask
)

212 
πl_tx_öfo
[
TDMA_FRAME_SLOTS
+1].
pPaylﬂd

buf
;

213 
πl_tx_öfo
[
TDMA_FRAME_SLOTS
+1].
Àngth

Àn
;

215 
πl_abs_tx_¶Ÿ
 = 
abs_¶Ÿ
;

216 
	`πl_£t_abs_wakeup
 (
abs_¶Ÿ
, 0);

217 
πl_abs_tx_ªady
 = 1;

220 
	}
}

234 
öt8_t
 
	$πl_tx_pkt
 (
uöt8_t
 *
tx_buf
, uöt8_à
Àn
, uöt8_à
¶Ÿ
)

237 i‡(
¶Ÿ
 =
RTL_CONTENTION
) {

238 
¶Ÿ
 = 
	`ønd
 (Ë% 
_πl_c⁄ã¡i⁄_¶Ÿs
;

239 
¶Ÿ
 = (
TDMA_FRAME_SLOTS
 - slot - 1);

240 
_πl_c⁄ã¡i⁄_≥ndög
 = 1;

242 
πl_tx_öfo
[
¶Ÿ
].
pPaylﬂd
 = 
tx_buf
;

243 
πl_tx_öfo
[
¶Ÿ
].
Àngth
 = 
Àn
;

244 
πl_tx_d©a_ªady
 |((
uöt32_t
Ë1 << 
¶Ÿ
);

246 
	}
}

256 
	$πl_rx_pkt_ªÀa£
()

258 
πl_rx_d©a_ªady
 = 0;

259 
	}
}

273 
öt8_t
 
	$πl_tx_pkt_check
(
uöt8_t
 
¶Ÿ
)

275 i‡(
¶Ÿ
 =
RTL_CONTENTION
) {

276  
_πl_c⁄ã¡i⁄_≥ndög
;

278 i‡((
πl_tx_d©a_ªady
 & ((
uöt32_t
Ë1 << 
¶Ÿ
)) != 0)

281 
	}
}

293 
öt8_t
 
	$πl_rx_pkt_check
()

295  
πl_rx_d©a_ªady
;

296 
	}
}

298 
	$πl_£t_ch™√l
 (
uöt8_t
 
ch™
)

300 
πl_∑øm
.
ch™√l
 = 
ch™
;

301 
	`rf_£t_ch™√l
 (
ch™
);

302 
	}
}

305 
uöt8_t
 
	$_πl_rx_sync
 ()

307 
öt8_t
 
n
;

308 
uöt8_t
 
tmp_tokí
;

309 
uöt16_t
 
timeout
,
°¨t_œt
;

310 
uöt16_t
 
timî
;

311 
uöt8_t
 
tdma_°¨t_tick
;

312 
uöt8_t
 
b©ãry_ßve_˙t
;

313 
uöt8_t
 
œ°_ƒk_tick
;

314 
uöt16_t
 
ñ≠£d_time
;

315 
öt16_t
 
tmp_off£t
;

316 vﬁ©ûê
uöt16_t
 
sfd_°¨t_time
;

319 
timî
=0;

320 
b©ãry_ßve_˙t
=0;

324 
πl_rfRxInfo
.
pPaylﬂd
[
GLOBAL_SLOT
]=0xFF;

325 
πl_rfRxInfo
.
pPaylﬂd
[
GLOBAL_SLOT
+1]=0xFF;

326 #ifde‡
LED_DEBUG


327 
	`ƒk_Àd_£t
(1);

329 #ifde‡
GPIO_RX_DEBUG


330 
	`ƒk_gpio_£t
(
NRK_DEBUG_1
);

352 
	`rf_£t_rx
 (&
πl_rfRxInfo
, 
πl_∑øm
.
ch™√l
);

353 
	`rf_pﬁlög_rx_⁄
 ();

354 
n
 = 0;

355 
_πl_sync_ok
 = 0;

356 
œ°_ƒk_tick
=0;

358 
	`_ƒk_£t_√xt_wakeup
(250);

360 (
n
 = 
	`rf_rx_check_sfd
()) == 0) {

362 if(
œ°_ƒk_tick
!=
	`_ƒk_os_timî_gë
())

367 
œ°_ƒk_tick
=
	`_ƒk_os_timî_gë
();

368 
timî
++;

369 if(
timî
>
RTL_TOKEN_TIMEOUT
)

371 
timî
=0;

373 
_πl_time_tokí
=0;

374 
b©ãry_ßve_˙t
++;

375 if(
b©ãry_ßve_˙t
>
RTL_BATTERY_SAVE_TIMEOUT
)

377 
b©ãry_ßve_˙t
=0;

378 
	`ƒk_b©ãry_ßve
();

390 
	`_ƒk_high_•ìd_timî_ª£t
();

392 
sfd_°¨t_time
=
	`_ƒk_high_•ìd_timî_gë
();

393 
tdma_°¨t_tick
=
	`_ƒk_os_timî_gë
();

396 
timeout
 = 
tdma_°¨t_tick
+4;

398 i‡(
n
 != 0) {

399 
n
 = 0;

401 (
n
 = 
	`rf_pﬁlög_rx_∑ckë
 ()) == 0) {

402 i‡(
	`_ƒk_os_timî_gë
 (Ë> 
timeout
)

410 
	`rf_rx_off
 ();

411 i‡(
n
 =1 && 
πl_rfRxInfo
.
Àngth
>0) {

413 
uöt8_t
 
ex∂icô_sync_pkt
;

414 
πl_rx_d©a_ªady
 = 1;

416 
globÆ_¶Ÿ
 = (vﬁ©ûe)
πl_rfRxInfo
.
pPaylﬂd
[
GLOBAL_SLOT
];

417 
globÆ_¶Ÿ
 <<= 8;

418 
globÆ_¶Ÿ
 |(vﬁ©ûe)
πl_rfRxInfo
.
pPaylﬂd
[
GLOBAL_SLOT
 + 1];

420 
tmp_tokí
0x7F & ((vﬁ©ûe)
πl_rfRxInfo
.
pPaylﬂd
[
TIME_SYNC_TOKEN
]);

430 if(
tmp_tokí
>
_πl_time_tokí
 || (_rtl_time_token>110 &&Åmp_token<10))

432 
πl_rx_¶Ÿ
 = (
globÆ_¶Ÿ
 ) % 32;

434 if((
πl_rfRxInfo
.
pPaylﬂd
[
TIME_SYNC_TOKEN
]&0x80)==0 )

442 if((((
uöt32_t
)1<<
πl_rx_¶Ÿ
Ë& 
πl_tdma_rx_mask
)==(uint32_t)0)

443 
	`πl_rx_pkt_ªÀa£
();

445 
	`ƒk_evít_sig«l
 (
πl_rx_pkt_sig«l
);

451 
	`πl_rx_pkt_ªÀa£
();

467 #ifde‡
LED_DEBUG


468 
	`ƒk_Àd_˛r
(1);

471 
πl_rx_¶Ÿ
 = (
globÆ_¶Ÿ
) % 32;

472 
cuºít_globÆ_¶Ÿ
 = 
globÆ_¶Ÿ
-1;

477 
_πl_time_tokí_°©us
=
RTL_TOKEN_NOT_SENT
;

479 
_πl_time_tokí
=
tmp_tokí
;

480 
_πl_sync_ok
 = 1;

481 
	`_πl_˛r_abs_wakeup
 (
œ°_sync_¶Ÿ
);

485 if(
globÆ_¶Ÿ
>=
MAX_SLOTS
 || global_slot<2)

486 
œ°_sync_¶Ÿ
=
MAX_SLOTS
-2;

488 
œ°_sync_¶Ÿ
 = 
globÆ_¶Ÿ
-2;

501 
	`πl_£t_abs_wakeup
 (
œ°_sync_¶Ÿ
, 0);

502 
	`_πl_˛ór_sched_ˇche
 ();

503 #ifde‡
GPIO_RX_DEBUG


504 
	`ƒk_gpio_˛r
(
NRK_DEBUG_1
);

513 #ifde‡
RTL_DEBUG


519 
	`_ƒk_os_timî_°›
();

520 
	`_ƒk_os_timî_ª£t
();

521 
	`_ƒk_os_timî_£t
(7);

522 
	`ƒk_high_•ìd_timî_waô
(0,
SFD_TO_NEXT_SLOT_TIME
);

523 
	`_ƒk_os_timî_ª£t
();

524 
	`_ƒk_os_timî_°¨t
();

525 
	`_ƒk_high_•ìd_timî_ª£t
();

529 
¶Ÿ_°¨t_time
=
	`_ƒk_high_•ìd_timî_gë
();

541  
_πl_sync_ok
;

542 
	}
}

556 
	$_πl_rx
 (
uöt8_t
 
¶Ÿ
)

558 
uöt8_t
 
n
;

559 
uöt16_t
 
tmp
;

560 vﬁ©ûê
uöt16_t
 
timeout
;

563 #ifde‡
GPIO_RX_DEBUG


564 
	`ƒk_gpio_£t
(
NRK_DEBUG_1
);

567 #ifde‡
LED_DEBUG


568 
	`ƒk_Àd_£t
(1);

570 
	`rf_£t_rx
 (&
πl_rfRxInfo
, 
πl_∑øm
.
ch™√l
);

571 
	`rf_pﬁlög_rx_⁄
 ();

575 
timeout
 = 
	`_ƒk_os_timî_gë
();

576 
timeout
+=4;

577 
n
 = 0;

578 (
n
 = 
	`rf_rx_check_sfd
()) == 0) {

580 i‡(
	`_ƒk_os_timî_gë
(Ë> 
timeout
) {

581 
	`rf_rx_off
 ();

582 #ifde‡
GPIO_RX_DEBUG


583 
	`ƒk_gpio_˛r
(
NRK_DEBUG_1
);

585 #ifde‡
LED_DEBUG


586 
	`ƒk_Àd_˛r
(1);

595 
timeout
 = 
	`_ƒk_os_timî_gë
 ();

601 
timeout
 = 
	`_ƒk_os_timî_gë
();

602 
timeout
 += 5;

603 i‡(
n
 != 0) {

604 
n
 = 0;

606 (
n
 = 
	`rf_pﬁlög_rx_∑ckë
 ()) == 0) {

607 i‡(
	`_ƒk_os_timî_gë
 (Ë> 
timeout
) {

617 
	`rf_rx_off
 ();

618 i‡(
n
 == 1) {

619 
uöt8_t
 
ex∂icô_sync_pkt
;

623 
πl_rx_d©a_ªady
 = 1;

624 
πl_rx_¶Ÿ
 = 
¶Ÿ
;

625 
tmp
 = 
πl_rfRxInfo
.
pPaylﬂd
[
GLOBAL_SLOT
];

626 
tmp
 <<= 8;

627 
tmp
 |
πl_rfRxInfo
.
pPaylﬂd
[
GLOBAL_SLOT
 + 1];

628 if(
tmp
!=
globÆ_¶Ÿ
)

634 
globÆ_¶Ÿ
=
tmp
;

638 i‡(
rx_ˇŒback
 !
NULL
)

639 
	`rx_ˇŒback
 (
¶Ÿ
);

641 if((
πl_rfRxInfo
.
pPaylﬂd
[
TIME_SYNC_TOKEN
]&0x80)==0)

647 
	`ƒk_evít_sig«l
 (
πl_rx_pkt_sig«l
);

653 
	`πl_rx_pkt_ªÀa£
();

656 #ifde‡
RTL_DEBUG


657 
	`πl_debug_dr›≥d_pkt
();

661 #ifde‡
LED_DEBUG


662 
	`ƒk_Àd_˛r
 (1);

664 #ifde‡
GPIO_RX_DEBUG


665 
	`ƒk_gpio_˛r
(
NRK_DEBUG_1
);

668 
	}
}

679 
	$_πl_tx
 (
uöt8_t
 
¶Ÿ
)

681 
öt8_t
 
ex∂icô_tsync
;

683 i‡(
	`πl_sync_°©us
 () == 0)

685 i‡(
tx_ˇŒback
 !
NULL
)

686 
	`tx_ˇŒback
 (
¶Ÿ
);

689 
πl_rfTxInfo
.
pPaylﬂd
=
πl_tx_öfo
[
¶Ÿ
].pPayload;

690 
πl_rfTxInfo
.
Àngth
=
πl_tx_öfo
[
¶Ÿ
].length;

692 
πl_rfTxInfo
.
pPaylﬂd
[
GLOBAL_SLOT
] = (
globÆ_¶Ÿ
 >> 8);

693 
πl_rfTxInfo
.
pPaylﬂd
[
GLOBAL_SLOT
 + 1] = (
globÆ_¶Ÿ
 & 0xFF);

698 
πl_rfTxInfo
.
pPaylﬂd
[
TIME_SYNC_TOKEN
]
_πl_time_tokí
;

699 
ex∂icô_tsync
=0;

701 if(
πl_rfTxInfo
.
Àngth
==
PKT_DATA_START
 )

703 
ex∂icô_tsync
=1;

704 
πl_rfTxInfo
.
pPaylﬂd
[
TIME_SYNC_TOKEN
]|= 0x80;

709 #ifde‡
GPIO_TX_DEBUG


710 
	`ƒk_gpio_£t
 (
NRK_DEBUG_1
);

712 #ifde‡
LED_DEBUG


713 
	`ƒk_Àd_£t
(0);

716 
	`rf_tx_tdma_∑ckë
 (&
πl_rfTxInfo
,
¶Ÿ_°¨t_time
, 
πl_∑øm
.
tx_gu¨d_time
);

717 
πl_tx_d©a_ªady
 &~((
uöt32_t
Ë1 << 
¶Ÿ
);

718 i‡(
¶Ÿ
 >(
TDMA_FRAME_SLOTS
 - 
_πl_c⁄ã¡i⁄_¶Ÿs
))

719 
_πl_c⁄ã¡i⁄_≥ndög
 = 0;

722 if(
ex∂icô_tsync
==0)

723 
	`ƒk_evít_sig«l
 (
πl_tx_d⁄e_sig«l
);

725 #ifde‡
LED_DEBUG


726 
	`ƒk_Àd_˛r
 (0);

728 #ifde‡
GPIO_TX_DEBUG


729 
	`ƒk_gpio_˛r
 (
NRK_DEBUG_1
);

731 
	}
}

733 
	$πl_£t_cy˛e_ˇŒback
 (*
Â
)

735 
cy˛e_ˇŒback
 = 
Â
;

736 
	}
}

738 
	$πl_£t_¶Ÿ_ˇŒback
 (*
Â
)

740 
¶Ÿ_ˇŒback
 = 
Â
;

741 
	}
}

743 
	$πl_£t_rx_ˇŒback
 (*
Â
)

745 
rx_ˇŒback
 = 
Â
;

746 
	}
}

748 
	$πl_£t_tx_ˇŒback
 (*
Â
)

750 
tx_ˇŒback
 = 
Â
;

751 
	}
}

753 
	$πl_£t_abs_ˇŒback
 (*
Â
)

755 
abs_ˇŒback
 = 
Â
;

756 
	}
}

758 
	$πl_£t_tx_powî
 (
uöt8_t
 
pwr
)

760 
	`rf_tx_powî
 (
pwr
);

761 
	}
}

763 
	$πl_£t_c⁄ã¡i⁄
 (
uöt8_t
 
¶Ÿs
, uöt8_à
øã
)

765 
uöt8_t
 
i
;

767 
_πl_c⁄ã¡i⁄_¶Ÿs
 = 
¶Ÿs
;

768 i‡(
¶Ÿs
 != 0) {

769 
i
 = 31; i > (31 - 
¶Ÿs
); i--) {

771 
	`πl_£t_scheduÀ
 (
RTL_RX
, 
i
, 
øã
);

772 
	`πl_£t_scheduÀ
 (
RTL_TX
, 
i
, 
øã
);

775 
	}
}

777 
öt8_t
 
	$πl_rx_pkt_£t_buf„r
(
uöt8_t
 *
buf
, uöt8_à
size
)

780 if(
size
==0 || 
buf
==
NULL
Ë 
NRK_ERROR
;

781 
πl_rfRxInfo
.
pPaylﬂd
 = 
buf
;

782 
πl_rfRxInfo
.
max_Àngth
 = 
size
;

784  
NRK_OK
;

785 
	}
}

797 
	$πl_öô
 (
πl_node_mode_t
 
mode
)

799 
uöt8_t
 
i
;

800 
uöt16_t
 
a
,
b
;

802 
πl_rx_pkt_sig«l
=
	`ƒk_sig«l_¸óã
();

803 if(
πl_rx_pkt_sig«l
==
NRK_ERROR
)

805 
	`ƒk_k¥ötf
(
	`PSTR
("RT-Link ERROR: creatingÑx signal failed\r\n"));

806 
	`ƒk_kî√l_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
,
ƒk_cur_èsk_TCB
->
èsk_ID
);

807  
NRK_ERROR
;

809 
πl_tx_d⁄e_sig«l
=
	`ƒk_sig«l_¸óã
();

810 if(
πl_tx_d⁄e_sig«l
==
NRK_ERROR
)

812 
	`ƒk_k¥ötf
(
	`PSTR
("RT-Link ERROR: creatingÅx signal failed\r\n"));

813 
	`ƒk_kî√l_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
,
ƒk_cur_èsk_TCB
->
èsk_ID
);

814  
NRK_ERROR
;

818 
πl_rfRxInfo
.
pPaylﬂd
 = 
NULL
;

819 
πl_rfRxInfo
.
max_Àngth
 = 0;

823 
	`_ƒk_high_•ìd_timî_°¨t
();

827 #ifde‡
RTL_DEBUG


828 
	`πl_debug_öô
();

831 
_πl_time_tokí_°©us
=
RTL_TOKEN_NOT_SENT
;

832 
_πl_time_tokí
=0;

833 
œ°_sync_¶Ÿ
=0;

834 
globÆ_cy˛e
 = 0;

835 
globÆ_¶Ÿ
 = 1025;

836 
_πl_sync_ok
 = 0;

837 
πl_node_mode
 = 
mode
;

838 
πl_rx_d©a_ªady
 = 0;

839 
πl_tx_d©a_ªady
 = 0;

840 
_πl_c⁄ã¡i⁄_¶Ÿs
 = 0;

841 
_πl_c⁄ã¡i⁄_≥ndög
 = 0;

844 
rx_ˇŒback
 = 
NULL
;

845 
tx_ˇŒback
 = 
NULL
;

846 
abs_ˇŒback
 = 
NULL
;

847 
¶Ÿ_ˇŒback
 = 
NULL
;

848 
cy˛e_ˇŒback
 = 
NULL
;

850 
πl_∑øm
.
mobûe_sync_timeout
 = 100;

851 
πl_∑øm
.
rx_timeout
 = 8000;

860 
πl_∑øm
.
tx_gu¨d_time
 = 
TX_GUARD_TIME
;

862 
πl_∑øm
.
ch™√l
 = 10;

863 
πl_∑øm
.
mac_addr
 = 0x1980;

865 
i
 = 0; i < 16; i++) {

866 
πl_sched
[
i
] = 0;

867 
πl_sched
[
i
] = 0;

869 
πl_tdma_rx_mask
 = 0;

870 
πl_tdma_tx_mask
 = 0;

871 
πl_rx_d©a_ªady
 = 0;

872 
πl_tx_d©a_ªady
 = 0;

875 
	`_πl_˛r_abs_Æl_wakeup
 ();

880 
	`rf_öô
 (&
πl_rfRxInfo
, 
πl_∑øm
.
ch™√l
, 0x2420,Ñé_∑øm.
mac_addr
);

882 
	}
}

885 
	$πl_°¨t
 ()

894 if(
πl_node_mode
==
RTL_COORDINATOR
)

898 if((
πl_tdma_tx_mask
 & 0x1)==0 || (
πl_sched
[0]&0x0F)>4)

900 
	`πl_£t_scheduÀ
–
RTL_TX
, 0, 4 );

905 
	`_πl_˛ór_sched_ˇche
 ();

906 
_πl_ªady
 = 2;

908 
	}
}

910 
	$πl_nw_èsk
 ()

912 
uöt8_t
 
¶Ÿ
;

913 
uöt32_t
 
¶Ÿ_mask
;

914 
uöt8_t
 
i
, 
k
, 
vÆ
, 
j
, 
‰ames
;

915 
öt8_t
 
n
;

916 
uöt8_t
 
timeout
;

917 
uöt16_t
 
√xt_¶Ÿ_off£t
, 
tmp
;

918 
uöt8_t
 
blök
,
skù_rxtx
;

920 
blök
 = 0;

924 
_πl_ªady
 = 0;

927 
	`ƒk_waô_u¡û_√xt_≥riod
 ();

928 }(vﬁ©ûe)
_πl_ªady
 == 0);

929 
_πl_ªady
 = 1;

932 
skù_rxtx
=0;

933 
œ°_¶Ÿ
 = 0;

934 
	`ƒk_time_gë
 (&
œ°_¶Ÿ_time
);

940 
¶Ÿ_°¨t_time
=
	`_ƒk_high_•ìd_timî_gë
();

941 
	`ƒk_time_gë
 (&
œ°_¶Ÿ_time
);

942 
œ°_¶Ÿ
 = 
globÆ_¶Ÿ
;

943 i‡(
œ°_¶Ÿ
 == 1025)

944 
œ°_¶Ÿ
 = 0;

946 
cuºít_globÆ_¶Ÿ
 = 
globÆ_¶Ÿ
;

947 i‡(
globÆ_¶Ÿ
 >
MAX_SLOTS
) {

948 
globÆ_¶Ÿ
 = 0;

949 
globÆ_cy˛e
++;

950 i‡(
cy˛e_ˇŒback
 !
NULL
)

951 
	`cy˛e_ˇŒback
 (
globÆ_cy˛e
);

952 
	`_πl_˛ór_sched_ˇche
 ();

954 i‡(
πl_node_mode
 =
RTL_COORDINATOR
) {

955 
_πl_sync_ok
 = 1;

959 i‡(
¶Ÿ_ˇŒback
 !
NULL
)

960 
	`¶Ÿ_ˇŒback
 (
globÆ_¶Ÿ
);

962 i‡(
πl_node_mode
 =
RTL_MOBILE
 ){

963 i‡–
globÆ_¶Ÿ
==
œ°_sync_¶Ÿ
+1 )

971 
	`_πl_rx_sync
 () == 0);

978 i‡(
	`_πl_m©ch_abs_wakeup
 (
globÆ_¶Ÿ
) == 1) {

981 i‡(
abs_ˇŒback
 !
NULL
)

982 
	`abs_ˇŒback
 (
globÆ_¶Ÿ
);

985 
√xt_¶Ÿ_off£t
 = 
	`πl_gë_¶Ÿs_u¡û_√xt_wakeup
 (
globÆ_¶Ÿ
);

988 
tmp
 = 
	`_πl_gë_√xt_abs_wakeup
 (
globÆ_¶Ÿ
);

989 i‡(
tmp
 != 0) {

990 i‡(
√xt_¶Ÿ_off£t
 == 0)

991 
√xt_¶Ÿ_off£t
 = 
tmp
;

992 i‡(
tmp
 < 
√xt_¶Ÿ_off£t
)

993 
√xt_¶Ÿ_off£t
 = 
tmp
;

997 i‡(
√xt_¶Ÿ_off£t
 == 0) {

998 
√xt_¶Ÿ_off£t
 = 
MAX_SLOTS
 - 
globÆ_¶Ÿ
;

1000 #ifde‡
TXT_DEBUG


1001 
	`¥ötf
 ("%d,%d,%d\r\n", 
globÆ_¶Ÿ
, global_slot % 32,

1002 
√xt_¶Ÿ_off£t
);

1005 
¶Ÿ
 = 
globÆ_¶Ÿ
 % 32;

1006 
¶Ÿ_mask
 = ((
uöt32_t
Ë1Ë<< 
¶Ÿ
;

1010 i‡(
πl_node_mode
 =
RTL_COORDINATOR
 && 
globÆ_¶Ÿ
==0)

1012 
_πl_time_tokí
++;

1013 if(
_πl_time_tokí
>127) _rtl_time_token=0;

1015 i‡(
πl_node_mode
 =
RTL_COORDINATOR
 && 
¶Ÿ
==0 )

1016 
_πl_time_tokí_°©us
=
RTL_TOKEN_NOT_SENT
;

1021 i‡(
_πl_time_tokí_°©us
==
RTL_TOKEN_NOT_SENT
)

1024 if(
¶Ÿ_mask
 & 
πl_tdma_tx_mask
 )

1026 if((
¶Ÿ_mask
 & 
πl_tx_d©a_ªady
) == 0)

1031 
πl_tsync_tx
.
pPaylﬂd
=
πl_tsync_buf
;

1033 
πl_tsync_buf
[
TIME_SYNC_TOKEN
]|=0x80;

1034 
πl_tsync_tx
.
Àngth
=
PKT_DATA_START
;

1035 if(
¶Ÿ
>(
TDMA_FRAME_SLOTS
-
_πl_c⁄ã¡i⁄_¶Ÿs
))

1037 if(
_πl_c⁄ã¡i⁄_≥ndög
==0)

1040 
	`πl_tx_pkt
 (&
πl_tsync_tx
,πl_tsync_tx.
Àngth
, 
RTL_CONTENTION
);

1045 
	`πl_tx_pkt
 (&
πl_tsync_tx
,πl_tsync_tx.
Àngth
, 
¶Ÿ
);

1050 
_πl_time_tokí_°©us
=
RTL_TOKEN_SENT
;

1056 if(
globÆ_¶Ÿ
!=
œ°_sync_¶Ÿ
)

1060 i‡(
¶Ÿ_mask
 & 
πl_tx_d©a_ªady
 & 
πl_tdma_tx_mask
)

1062 
	`_πl_tx
 (
¶Ÿ
);

1066 i‡((
¶Ÿ_mask
 & 
πl_tdma_rx_mask
Ë&& (
πl_rx_d©a_ªady
 == 0))

1068 
	`_πl_rx
 (
¶Ÿ
);

1070 i‡(
globÆ_¶Ÿ
 =
πl_abs_tx_¶Ÿ
) {

1072 
	`_πl_tx
 (
TDMA_FRAME_SLOTS
 + 1);

1073 
πl_abs_tx_ªady
 = 0;

1081 if(
globÆ_¶Ÿ
==
œ°_sync_¶Ÿ
 && 
πl_node_mode
!=
RTL_COORDINATOR
)

1083 
globÆ_¶Ÿ
++;

1084 
	`ƒk_waô_u¡û_ticks
(5);

1088 
globÆ_¶Ÿ
 +
√xt_¶Ÿ_off£t
;

1090 #ifde‡
LED_SLOT_DEBUG


1091 
	`ƒk_Àd_˛r
(0);

1094 #ifde‡
GPIO_SLOT_DEBUG


1095 
	`ƒk_gpio_˛r
(
NRK_DEBUG_0
);

1097 
	`ƒk_waô_u¡û_√xt_n_≥riods
 (
√xt_¶Ÿ_off£t
);

1098 #ifde‡
LED_SLOT_DEBUG


1099 
	`ƒk_Àd_£t
(0);

1101 #ifde‡
GPIO_SLOT_DEBUG


1102 
	`ƒk_gpio_£t
(
NRK_DEBUG_0
);

1109 
	}
}

1113 
	$πl_èsk_c⁄fig
 ()

1115 
πl_èsk
.
èsk
 = 
πl_nw_èsk
;

1116 
	`ƒk_èsk_£t_°k
–&
πl_èsk
, 
πl_èsk_°ack
, 
RT_LINK_STACK_SIZE
);

1117 
πl_èsk
.
¥io
 = 20;

1118 
πl_èsk
.
Fú°A˘iv©i⁄
 = 
TRUE
;

1119 
πl_èsk
.
Ty≥
 = 
BASIC_TASK
;

1120 
πl_èsk
.
SchTy≥
 = 
PREEMPTIVE
;

1121 
πl_èsk
.
≥riod
.
£cs
 = 0;

1122 
πl_èsk
.
≥riod
.
«no_£cs
 = 
RTL_NRK_TICKS_PER_SLOT
 * 
NANOS_PER_TICK
;

1124 
πl_èsk
.
˝u_ª£rve
.
£cs
 = 0;

1125 
πl_èsk
.
˝u_ª£rve
.
«no_£cs
 = 0;

1126 
πl_èsk
.
off£t
.
£cs
 = 0;

1127 
πl_èsk
.
off£t
.
«no_£cs
 = 0;

1128 
	`ƒk_a˘iv©e_èsk
 (&
πl_èsk
);

1129 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rt_link.h

30 #i‚de‡
_RT_LINK_H


31 
	#_RT_LINK_H


	)

32 
	~<ö˛ude.h
>

33 
	~<basic_rf.h
>

34 
	~<ƒk.h
>

35 
	~<ƒk_cfg.h
>

37 
	#RT_LINK_STACK_SIZE
 128

	)

39 
	#MAX_RTL_PKT_SIZE
 
RF_MAX_PAYLOAD_SIZE


	)

41 
	#RTL_TOKEN_NOT_SENT
 0

	)

42 
	#RTL_TOKEN_SENT
 1

	)

44 
	#RTL_TOKEN_TIMEOUT
 10000

	)

46 
	#RTL_BATTERY_SAVE_TIMEOUT
 5

	)

50 
	#MAX_SLOTS
 1024

	)

52 #i‚de‡
MAX_ABS_WAKEUP


53 
	#MAX_ABS_WAKEUP
 4

	)

56 
	#TDMA_FRAME_SLOTS
 32

	)

58 
	#RTL_CONTENTION
 33

	)

61 
	#_RTL_SYNC_WAKEUP_SLOT
 (
MAX_SLOTS
-10)

	)

64 
ƒk_èsk_ty≥
 
	gπl_èsk
;

65 
NRK_STK
 
	gπl_èsk_°ack
[
RT_LINK_STACK_SIZE
];

71 
	mGLOBAL_SLOT
=0,

75 
	mTIME_SYNC_TOKEN
=2,

76 
	mPKT_DATA_START
=3

77 } 
	tπl_pkt_fõld_t
;

81 
	mRTL_MOBILE
,

82 
	mRTL_FIXED
,

83 
	mRTL_COORDINATOR


84 } 
	tπl_node_mode_t
;

86 
πl_node_mode_t
 
	gπl_node_mode
;

90 
uöt16_t
 
	gœ°_¶Ÿ
;

91 
ƒk_time_t
 
	gœ°_¶Ÿ_time
;

94 
πl_èsk_c⁄fig
 ();

97 
uöt8_t
 
πl_sync_°©us
();

100 
πl_öô
(
πl_node_mode_t
 
mode
);

101 
πl_°¨t
();

102 
πl_£t_tx_powî
(
uöt8_t
 
pwr
);

103 
πl_£t_ch™√l
(
uöt8_t
 
ch™
);

107 
öt8_t
 
πl_tx_pkt_check
(
uöt8_t
 
¶Ÿ
);

108 
öt8_t
 
πl_tx_pkt
 (
uöt8_t
 *
buf
, uöt8_à
Àn
, uöt8_à
¶Ÿ
);

109 
öt8_t
 
πl_tx_abs_pkt
 (
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
abs_¶Ÿ
);

110 
öt8_t
 
πl_waô_u¡û_tx_d⁄e
(
uöt8_t
 
¶Ÿ
);

114 
öt8_t
 
πl_rx_pkt_check
();

115 
uöt8_t
* 
πl_rx_pkt_gë
 (uöt8_à*
Àn
, 
öt8_t
 *
rssi
, uöt8_à*
¶Ÿ
);

116 
πl_rx_pkt_ªÀa£
();

117 
öt8_t
 
πl_waô_u¡û_rx_pkt
();

118 
öt8_t
 
πl_rx_pkt_£t_buf„r
(
uöt8_t
 *
buf
, uöt8_à
size
);

122 
öt8_t
 
πl_gë_tx_d⁄e_sig«l
();

123 
öt8_t
 
πl_gë_rx_pkt_sig«l
();

127 
uöt16_t
 
πl_gë_globÆ_¶Ÿ
();

128 
uöt8_t
 
	g_πl_sync_ok
;

129 vﬁ©ûê
uöt8_t
 
	g_πl_ªady
;

132 
πl_nw_èsk
();

133 
öt8_t
 
πl_ªady
();

136 
uöt8_t
 
	g_πl_time_tokí
;

137 
uöt8_t
 
	g_πl_time_tokí_°©us
;

140 
RF_TX_INFO
 
	gπl_tsync_tx
;

141 
uöt8_t
 
	gπl_tsync_buf
[
PKT_DATA_START
];

143 
uöt8_t
 
	g_πl_c⁄ã¡i⁄_≥ndög
;

144 
uöt8_t
 
	g_πl_c⁄ã¡i⁄_¶Ÿs
;

147 
RF_RX_INFO
 
	gπl_rfRxInfo
;

148 
uöt8_t
 
	gπl_rx_d©a_ªady
;

149 vﬁ©ûê
uöt8_t
 
	gπl_rx_¶Ÿ
;

151 vﬁ©ûê
uöt8_t
 
	gπl_rx_buf
[
RF_MAX_PAYLOAD_SIZE
];

154 vﬁ©ûê
RF_TX_INFO
 
	gπl_rfTxInfo
;

157 
öt8_t
 
	mÀngth
;

158 
uöt8_t
 *
	mpPaylﬂd
;

159 } 
	tRTL_TX_INFO
;

162 
RTL_TX_INFO
 
	gπl_tx_öfo
[
TDMA_FRAME_SLOTS
+1];

164 
uöt16_t
 
	gπl_abs_tx_¶Ÿ
;

165 
uöt8_t
 
	gπl_abs_tx_ªady
;

166 
uöt32_t
 
	gπl_tx_d©a_ªady
;

169 
uöt16_t
 
πl_gë_¶Ÿ
();

171 
_πl_tx
 (
uöt8_t
 
¶Ÿ
);

173 
_πl_rx
 (
uöt8_t
 
¶Ÿ
);

175 
uöt8_t
 
_πl_rx_sync
 ();

178 
	mRTL_RX
,

179 
	mRTL_TX
,

180 } 
	tπl_rx_tx_t
;

183 
uöt16_t
 
	mmac_addr
;

184 
uöt8_t
 
	mch™√l
;

185 
uöt8_t
 
	mpowî
;

186 
uöt16_t
 
	mtx_gu¨d_time
;

187 
uöt16_t
 
	mrx_timeout
;

188 
uöt8_t
 
	mmobûe_sync_timeout
;

189 } 
	tπl_∑øm_t
;

191 
πl_∑øm_t
 
	gπl_∑øm
;

206 
uöt32_t
 
	gπl_tdma_rx_mask
;

207 
uöt32_t
 
	gπl_tdma_tx_mask
;

211 (*
rx_ˇŒback
)(
uöt8_t
 
¶Ÿ
);

212 (*
tx_ˇŒback
)(
uöt8_t
 
¶Ÿ
);

213 (*
abs_ˇŒback
)(
uöt16_t
 
globÆ_¶Ÿ
);

214 (*
¶Ÿ_ˇŒback
)(
uöt16_t
 
globÆ_¶Ÿ
);

215 (*
cy˛e_ˇŒback
)(
uöt16_t
 
globÆ_cy˛e
);

217 
	`πl_£t_abs_ˇŒback
(*
Â
);

218 
	`πl_£t_rx_ˇŒback
(*
Â
);

219 
	`πl_£t_tx_ˇŒback
(*
Â
);

220 
	`πl_£t_cy˛e_ˇŒback
(*
Â
);

221 
	`πl_£t_¶Ÿ_ˇŒback
(*
Â
);

226 
öt8_t
 
	`πl_£t_abs_wakeup
 (
uöt16_t
 
¶Ÿ
, 
uöt8_t
 
ª≥©
);

227 
	`πl_˛r_abs_wakeup
 (
uöt16_t
 
¶Ÿ
);

228 
	`πl_£t_c⁄ã¡i⁄
(
uöt8_t
 
¶Ÿ
, uöt8_à
øã
);

229 
öt8_t
 
	`πl_£t_scheduÀ
 (
πl_rx_tx_t
 
rx_tx
, 
uöt8_t
 
¶Ÿ
, uöt8_à
scheduÀ
);

230 
öt8_t
 
	`πl_˛r_scheduÀ
 (
πl_rx_tx_t
 
rx_tx
, 
uöt8_t
 
¶Ÿ
);

231 
öt8_t
 
	`πl_gë_scheduÀ
 (
uöt8_t
 
¶Ÿ
);

232 
uöt16_t
 
	`πl_gë_¶Ÿs_u¡û_√xt_wakeup
 (uöt16_à
cuºít_¶Ÿ
);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rtl_debug.c

27 
	~<πl_debug.h
>

28 
	~<ƒk.h
>

29 
	~<ö˛ude.h
>

31 
	$πl_debug_time_upd©e
(
uöt16_t
 
off£t
)

33 
πl_dri·_øã
=
off£t
-
¥ev_off£t
;

34 
¥ev_off£t
=
off£t
;

35 
	}
}

37 
öt16_t
 
	$πl_debug_time_gë_dri·
()

39  
πl_dri·_øã
;

40 
	}
}

42 
	$πl_debug_öô
()

44 
uöt8_t
 
i
;

45 
i
=0; i<
MAX_PKT_LOG
/8; i++ )

46 
pkt_log
[
i
]=0xFF;

47 
i
=0; i<
MAX_TSYNC_LOG
/8; i++ )

48 
tsync_log
[
i
]=0xFF;

49 
_dbg_ödex
=0;

50 
¥ev_off£t
=0;

51 
	}
}

53 
uöt8_t
 
	$bô_cou¡
(
uöt8_t
 
n
)

55 
n
 = (n & 0x55) + ((n>>1) & 0x55);

56 
n
 = (n & 0x33) + ((n>>2) & 0x33);

57 
n
 = (n & 0x0F) + ((n>>4) & 0x0F);

58  
n
;

59 
	}
}

61 
uöt8_t
 
	$πl_debug_gë_pkt_loss
()

63 
uöt8_t
 
i
,
j
,
˙t
,
tmp
;

64 
˙t
=0;

65 
i
=0; i<
MAX_PKT_LOG
/8; i++ )

66 
˙t
+=
	`bô_cou¡
(
pkt_log
[
i
]);

67  
˙t
;

68 
	}
}

70 
uöt8_t
 
	$πl_debug_gë_tsync_loss
()

72 
uöt8_t
 
i
,
j
,
˙t
,
tmp
;

73 
˙t
=0;

74 
i
=0; i<
MAX_TSYNC_LOG
/8; i++ )

75 
˙t
+=
	`bô_cou¡
(
tsync_log
[
i
]);

76  
˙t
;

77 
	}
}

81 
	$πl_debug_rx_pkt
()

83 
uöt8_t
 
off£t
;

84 
off£t
=
_dbg_ödex
/8;

85 
pkt_log
[
off£t
]|=(1<<(7-(
_dbg_ödex
%8)));

86 
_dbg_ödex
++;

87 if(
_dbg_ödex
>
MAX_PKT_LOG
) _dbg_index=0;

88 
	}
}

90 
	$πl_debug_dr›≥d_pkt
()

92 
uöt8_t
 
off£t
;

93 
off£t
=
_dbg_ödex
/8;

94 
pkt_log
[
off£t
]&=~(1<<(7-(
_dbg_ödex
%8)));

95 
_dbg_ödex
++;

96 if(
_dbg_ödex
>
MAX_PKT_LOG
) _dbg_index=0;

97 
	}
}

99 
uöt8_t
 
	$πl_debug_gë_tsync_dñay
(
uöt8_t
 
ödex
)

102 if(
ödex
<
MAX_TSYNC_LOG
Ë 
tsync_dñay
[index];

104 
	}
}

107 
	$πl_debug_rx_tsync
()

109 
uöt8_t
 
off£t
;

110 
off£t
=
_tsync_ödex
/8;

111 
tsync_log
[
off£t
]|=(1<<(7-(
_tsync_ödex
%8)));

112 
tsync_dñay
[
_tsync_ödex
]=0;

113 
_tsync_ödex
++;

114 if(
_tsync_ödex
>
MAX_TSYNC_LOG
) _tsync_index=0;

115 
	}
}

117 
	$πl_debug_dr›≥d_tsync
(
uöt8_t
 
dñay
)

119 
uöt8_t
 
off£t
;

120 
off£t
=
_tsync_ödex
/8;

121 
tsync_log
[
off£t
]&=~(1<<(7-(
_tsync_ödex
%8)));

122 
tsync_dñay
[
_tsync_ödex
]=
dñay
;

123 
_tsync_ödex
++;

124 if(
_tsync_ödex
>
MAX_TSYNC_LOG
) _tsync_index=0;

125 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rtl_debug.h

27 #i‚de‡
_RT_DEBUG_H


28 
	#_RT_DEBUG_H


	)

30 
	~<ƒk.h
>

31 
	~<ö˛ude.h
>

33 
	#MAX_PKT_LOG
 64

	)

34 
	#MAX_TSYNC_LOG
 8

	)

36 
uöt16_t
 
	g¥ev_off£t
;

37 
uöt16_t
 
	gπl_dri·_øã
;

39 
uöt8_t
 
	g_tsync_ödex
;

40 
uöt8_t
 
	g_dbg_ödex
;

41 
uöt8_t
 
	gpkt_log
[
MAX_PKT_LOG
/8];

42 
uöt8_t
 
	gtsync_log
[
MAX_TSYNC_LOG
];

43 
uöt8_t
 
	gtsync_dñay
[
MAX_TSYNC_LOG
];

45 
πl_debug_öô
();

46 
öt16_t
 
πl_debug_time_gë_dri·
();

47 
πl_debug_time_upd©e
(
uöt16_t
 
off£t
);

48 
uöt8_t
 
πl_debug_gë_pkt_loss
();

49 
uöt8_t
 
πl_debug_gë_tsync_loss
();

50 
uöt8_t
 
πl_debug_gë_tsync_dñay
(uöt8_à
ödex
);

51 
πl_debug_rx_pkt
();

52 
πl_debug_dr›≥d_pkt
();

54 
πl_debug_rx_tsync
();

55 
πl_debug_dr›≥d_tsync
(
uöt8_t
 
dñay
);

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rtl_scheduler.c

27 
	~<π_lök.h
>

28 
	~<πl_scheduÀr.h
>

29 
	~<ö˛ude.h
>

30 
	~<ƒk_îr‹.h
>

55 
öt8_t
 
	$πl_£t_scheduÀ
 (
πl_rx_tx_t
 
rx_tx
, 
uöt8_t
 
¶Ÿ
, uöt8_à
sched
)

57 
uöt32_t
 
t_mask
;

58 
uöt8_t
 
d¶Ÿ
;

59 i‡(
sched
 > 15 || 
¶Ÿ
 > 31)

60  
NRK_ERROR
;

61 
t_mask
 = 0;

62 
t_mask
 = ((
uöt32_t
Ë1Ë<< 
¶Ÿ
;

63 i‡(
rx_tx
 =
RTL_RX
)

64 
πl_tdma_rx_mask
 |
t_mask
;

66 
πl_tdma_tx_mask
 |
t_mask
;

67 
d¶Ÿ
 = 
¶Ÿ
 >> 1;

68 i‡(
¶Ÿ
 % 2 == 0) {

69 
πl_sched
[
d¶Ÿ
] =Ñtl_sched[dslot] & 0xF0;

70 
πl_sched
[
d¶Ÿ
] =Ñé_sched[d¶Ÿ] | 
sched
;

73 
πl_sched
[
d¶Ÿ
] =Ñtl_sched[dslot] & 0x0F;

74 
πl_sched
[
d¶Ÿ
] =Ñé_sched[d¶Ÿ] | ((
sched
 << 4) & 0xF0);

76  
NRK_OK
;

84 
	}
}

99 
öt8_t
 
	$πl_gë_scheduÀ
 (
uöt8_t
 
¶Ÿ
)

101 
uöt8_t
 
d¶Ÿ
;

103 i‡(
¶Ÿ
 > 31)

104  
NRK_ERROR
;

106 
d¶Ÿ
 = 
¶Ÿ
 >> 1;

107 i‡(
¶Ÿ
 % 2 == 0)

108  (
πl_sched
[
d¶Ÿ
] & 0x0F);

110  (
πl_sched
[
d¶Ÿ
] >> 4);

111 
	}
}

126 
öt8_t
 
	$πl_˛r_scheduÀ
 (
πl_rx_tx_t
 
rx_tx
, 
uöt8_t
 
¶Ÿ
)

128 
uöt32_t
 
t_mask
;

129 
uöt8_t
 
d¶Ÿ
;

130 i‡(
¶Ÿ
 > 31)

131  
NRK_ERROR
;

132 
t_mask
 = 0;

133 
t_mask
 = 1 << 
¶Ÿ
;

134 i‡(
rx_tx
 =
RTL_RX
)

135 
πl_tdma_rx_mask
 &~
t_mask
;

137 
πl_tdma_tx_mask
 &~
t_mask
;

138 
d¶Ÿ
 = 
¶Ÿ
 >> 1;

139 i‡(
¶Ÿ
 % 2 == 0)

140 
πl_sched
[
d¶Ÿ
] =Ñtl_sched[dslot] & 0xF0;

142 
πl_sched
[
d¶Ÿ
] =Ñtl_sched[dslot] & 0x0F;

143 
	}
}

150 
	$_πl_˛r_abs_Æl_wakeup
 ()

152 
uöt8_t
 
i
;

153 
i
 = 0; i < 
MAX_ABS_WAKEUP
; i++)

154 
πl_abs_wakeup
[
i
] = 
MAX_SLOTS
 + 1;

155 
	}
}

173 
öt8_t
 
	$πl_£t_abs_wakeup
 (
uöt16_t
 
¶Ÿ
, 
uöt8_t
 
ª≥©
)

175 
uöt8_t
 
i
;

176 
uöt16_t
 
tmp
;

177 
i
 = 0; i < 
MAX_ABS_WAKEUP
; i++) {

178 
tmp
=
πl_abs_wakeup
[
i
]&0x7FFF;

179 i‡(
tmp
 > 
MAX_SLOTS
) {

180 
πl_abs_wakeup
[
i
] = 
¶Ÿ
;

181 if(
ª≥©
Ë
πl_abs_wakeup
[
i
]|=0x8000;

182  
NRK_OK
;

185  
NRK_ERROR
;

186 
	}
}

193 
	$_πl_˛r_abs_wakeup
 (
uöt16_t
 
¶Ÿ
)

195 
uöt8_t
 
i
;

197 
i
 = 0; i < 
MAX_ABS_WAKEUP
; i++) {

198 
uöt16_t
 
tmp
;

199 
tmp
=
πl_abs_wakeup
[
i
]&0x7FFF;

200 i‡(
tmp
 =
¶Ÿ
) {

201 
πl_abs_wakeup
[
i
] = 
MAX_SLOTS
 + 1;

206 
	}
}

216 
uöt8_t
 
	$_πl_m©ch_abs_wakeup
 (
uöt16_t
 
globÆ_¶Ÿ
)

218 
uöt8_t
 
i
;

219 
i
 = 0; i < 
MAX_ABS_WAKEUP
; i++) {

220 
uöt16_t
 
tmp
;

221 
tmp
=
πl_abs_wakeup
[
i
]&0x7FFF;

222 i‡(
tmp
 =
globÆ_¶Ÿ
)

225 if–
πl_abs_wakeup
[
i
]<=0x8000 )

228 
	`_πl_˛r_abs_wakeup
(
globÆ_¶Ÿ
);

234 
	}
}

249 
uöt16_t
 
	$_πl_gë_√xt_abs_wakeup
 (
uöt16_t
 
globÆ_¶Ÿ
)

251 
uöt8_t
 
i
;

252 
öt16_t
 
mö
;

253 
öt16_t
 
tmp
;

254 
mö
 = 
MAX_SLOTS
 +1;

256 
i
 = 0; i < 
MAX_ABS_WAKEUP
; i++) {

257 if((
πl_abs_wakeup
[
i
]&0x7FFF)<
MAX_SLOTS
)

259 
tmp
 = (
πl_abs_wakeup
[
i
]&0x7FFFË- 
globÆ_¶Ÿ
;

260 i‡(
tmp
 > 0 &&Åm∞< 
mö
)

261 
mö
 = 
tmp
;

264 i‡(
mö
 =
MAX_SLOTS
 +1)

265 
mö
 = 0;

266  
mö
;

267 
	}
}

276 
	$_πl_˛ór_sched_ˇche
 ()

278 
uöt8_t
 
i
;

280 
i
 = 0; i < 32; i++) {

281 
πl_sched_ˇche
[
i
] = 0;

283 
	}
}

296 
uöt16_t
 
	$πl_gë_¶Ÿs_u¡û_√xt_wakeup
 (
uöt16_t
 
cuºít_¶Ÿ
)

298 
uöt16_t
 
abs_¶Ÿ
;

299 
uöt16_t
 
mö_¶Ÿ
;

300 
uöt8_t
 
ã°_¶Ÿ
;

301 
uöt8_t
 
ã°_‰ame
;

302 
uöt8_t
 
‰ame_öc
;

305 
mö_¶Ÿ
 = 
MAX_SLOTS
 + 1;

306 
ã°_¶Ÿ
 = 0;Åest_slot < 32;Åest_slot++) {

307 
uöt8_t
 
s
;

308 
s
 = 
	`πl_gë_scheduÀ
 (
ã°_¶Ÿ
);

309 i‡(
s
 == 0)

311 
s
--;

313 
ã°_‰ame
 = 
πl_sched_ˇche
[
ã°_¶Ÿ
];

314 
‰ame_öc
 = 
	`_πl_pow
 (2, 
s
);

316 
abs_¶Ÿ
 = (((
uöt16_t
Ë
ã°_‰ame
Ë<< 5Ë+ 
ã°_¶Ÿ
;

317 i‡(
abs_¶Ÿ
 <
cuºít_¶Ÿ
)

318 
ã°_‰ame
 +
‰ame_öc
;

320 } 
abs_¶Ÿ
 <
cuºít_¶Ÿ
);

321 
πl_sched_ˇche
[
ã°_¶Ÿ
] = 
ã°_‰ame
;

323 i‡(
abs_¶Ÿ
 - 
cuºít_¶Ÿ
 < 
mö_¶Ÿ
 &&ábs_¶Ÿ < 
MAX_SLOTS
 + 1)

324 
mö_¶Ÿ
 = 
abs_¶Ÿ
 - 
cuºít_¶Ÿ
;

327 i‡(
mö_¶Ÿ
 > 
MAX_SLOTS
)

329  
mö_¶Ÿ
;

330 
	}
}

342 
uöt8_t
 
	$_πl_pow
 (
uöt8_t
 
x
, uöt8_à
y
)

344 
uöt8_t
 
acc
, 
i
;

345 i‡(
y
 == 0)

347 
acc
 = 
x
;

348 
i
 = 0; i < 
y
 - 1; i++)

349 
acc
 =ác¯* 
x
;

350  
acc
;

351 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rtl_scheduler.h

27 #i‚de‡
_RTL_SCHEDULER_H_


28 
	#_RTL_SCHEDULER_H_


	)

31 
uöt8_t
 
	gπl_sched
[16];

32 
uöt8_t
 
	gπl_sched_ˇche
[32];

33 
uöt16_t
 
	gπl_abs_wakeup
[
MAX_ABS_WAKEUP
];

36 
_πl_˛r_abs_Æl_wakeup
 ();

37 
uöt16_t
 
_πl_gë_√xt_abs_wakeup
 (uöt16_à
globÆ_¶Ÿ
);

38 
uöt8_t
 
_πl_m©ch_abs_wakeup
 (
uöt16_t
 
globÆ_¶Ÿ
);

40 
uöt8_t
 
_πl_pow
 (uöt8_à
x
, uöt8_à
y
);

41 
_πl_˛ór_sched_ˇche
 ();

	@/home/gopikannan/Downloads/nano-RK/src/net/rt_net/rt_packet.h

27 #i‚de‡
_RT_PACKET_H


28 
	#_RT_PACKET_H


	)

35 
	mGLOBAL_SLOT
=0,

39 
	mTIME_SYNC_TOKEN
=2,

40 
	mPKT_DATA_START
=3

41 } 
	tπl_pkt_fõld_t
;

	@/home/gopikannan/Downloads/nano-RK/src/net/slip/slip.c

27 
	~"¶ù.h
"

28 
	~<ƒk_evíts.h
>

29 
	~<ƒk_îr‹.h
>

30 
	~<ƒk_cfg.h
>

33 
FILE
 *
	gg_dv_ö
, *
	gg_dv_out
;

34 
boﬁ
 
	gg_echo
;

35 
uöt8_t
 
	gg_dñay
;

36 
öt8_t
 
	g_¶ù_°¨ãd
 = 
NRK_ERROR
;

37 
ƒk_£m_t
 *
	g¶ù_tx_£m
;

39 
öt8_t
 
	$¶ù_öô
 (
FILE
 * 
devi˚_ö
, FILE * 
devi˚_out
, 
boﬁ
 
echo
,

40 
uöt8_t
 
dñay
)

42 
g_dv_ö
 = 
devi˚_ö
;

43 
g_dv_out
 = 
devi˚_out
;

44 
g_echo
 = 
echo
;

45 
g_dñay
 = 
dñay
;

48 #i‚de‡
UART_PCP_CEILING


49 
	#UART_PCP_CEILING
 255

	)

51 
¶ù_tx_£m
 = 
	`ƒk_£m_¸óã
 (1, 
UART_PCP_CEILING
);

52 i‡(
¶ù_tx_£m
 =
NRK_ERROR
)

53 
	`ƒk_kî√l_îr‹_add
 (
NRK_SEMAPHORE_CREATE_ERROR
, 
	`ƒk_gë_pid
 ());

55 
_¶ù_°¨ãd
 = 
NRK_OK
;

56  
NRK_OK
;

57 
	}
}

59 
	$put_byã
 (
uöt8_t
 
c
)

61 i‡(
g_dñay
 > 0)

62 
	`ƒk_•ö_waô_us
 (
g_dñay
 * 1000);

63 
	`Âutc
 (
c
, 
g_dv_out
);

64 i‡(
g_echo
) {

67 
	}
}

69 
uöt8_t
 
	$gë_byã
 ()

71  
	`fgëc
 (
g_dv_ö
);

72 
	}
}

74 
öt8_t
 
	$¶ù_tx
 (
uöt8_t
 * 
buf
, uöt8_à
size
)

76 
uöt8_t
 
i
;

77 
öt8_t
 
v
;

78 
uöt8_t
 
checksum
;

82 i‡(
size
 > 128) {

83 
	`_ƒk_î∫o_£t
 (3);

84  
NRK_ERROR
;

87 
v
 = 
	`ƒk_£m_≥nd
 (
¶ù_tx_£m
);

88 i‡(
v
 =
NRK_ERROR
) {

89 
	`ƒk_k¥ötf
 (
	`PSTR
 ("SLIP TX ERROR: AccessÅo semaphore failed\r\n"));

90 
	`_ƒk_î∫o_£t
 (1);

91  
NRK_ERROR
;

95 
	`put_byã
 (
START
);

96 
	`put_byã
 (
size
);

98 
checksum
 = 0;

101 
i
 = 0; i < 
size
; i++) {

102 i‡(
buf
[
i
] =
END
 || buf[i] =
ESC
)

103 
	`put_byã
 (
ESC
);

104 
	`put_byã
 (
buf
[
i
]);

105 
checksum
 +
buf
[
i
];

110 
checksum
 &= 0x7F;

112 
	`put_byã
 (
checksum
);

113 
	`put_byã
 (
END
);

114 
v
 = 
	`ƒk_£m_po°
 (
¶ù_tx_£m
);

115 i‡(
v
 =
NRK_ERROR
) {

116 
	`ƒk_k¥ötf
 (
	`PSTR
 ("SLIP TX ERROR: Release of semaphore failed\r\n"));

117 
	`_ƒk_î∫o_£t
 (2);

118  
NRK_ERROR
;

120  
NRK_OK
;

121 
	}
}

123 
öt8_t
 
	$¶ù_°¨ãd
 ()

125  
_¶ù_°¨ãd
;

126 
	}
}

128 
öt8_t
 
	$¶ù_rx
 (
uöt8_t
 * 
buf
, uöt8_à
max_Àn
)

130 
uöt8_t
 
c
;

131 
uöt8_t
 
ödex
, 
œ°_c
;

132 
uöt8_t
 
ª˚ived
, 
checksum
, 
size
;

133 
öt8_t
 
v
;

134 
ƒk_sig_t
 
my_u¨t_rx_sig«l
;

135 
ƒk_sig_mask_t
 
sm
;

137 
my_u¨t_rx_sig«l
=
	`ƒk_u¨t_rx_sig«l_gë
();

139 i‡(
my_u¨t_rx_sig«l
 =
NRK_ERROR
)

140 
	`ƒk_k¥ötf
 (
	`PSTR
 ("SLIP RXÉrror: Get Signal\r\n"));

142 
v
=
	`ƒk_sig«l_ªgi°î
 (
my_u¨t_rx_sig«l
);

143 if(
v
==
NRK_ERROR
Ë
	`ƒk_k¥ötf
–
	`PSTR
( "SLIP RXÉrror:Çrk_signal_register\r\n" ));

145 
ª˚ived
 = 0;

150 
	`ƒk_u¨t_d©a_ªady
 (
NRK_DEFAULT_UART
) != 0) {

152 
c
 = 
	`gëch¨
 ();

153 i‡(
c
 =
START
)

156 
sm
 = 
	`ƒk_evít_waô
 (
	`SIG
 (
my_u¨t_rx_sig«l
));

157 
c
 = 
	`gëch¨
 ();

158 i‡(
c
 =
START
)

162 
size
 = 
	`gë_byã
 ();

163 
checksum
 = 0;

165 
	`ƒk_u¨t_d©a_ªady
 (
NRK_DEFAULT_UART
) != 0) {

166 
œ°_c
 = 
c
;

167 
c
 = 
	`gëch¨
 ();

170 
c
) {

174 
END
:

181 i‡(
ª˚ived
) {

183 
checksum
 &= 0x7f;

184 i‡(
œ°_c
 =
checksum
)

185  
ª˚ived
;

187  
NRK_ERROR
;

193 
ESC
:

195 
œ°_c
 = 
c
;

196 if–
	`ƒk_u¨t_d©a_ªady
 (
NRK_DEFAULT_UART
)==0 )

197 
sm
 = 
	`ƒk_evít_waô
 (
	`SIG
 (
my_u¨t_rx_sig«l
));

198 
c
 = 
	`gë_byã
 ();

203 
c
) {

204 
END
:

205 
c
 = 
END
;

207 
ESC
:

208 
c
 = 
ESC
;

215 i‡(
ª˚ived
 < 
max_Àn
 &&Ñe˚ived < 
size
) {

216 
buf
[
ª˚ived
++] = 
c
;

217 
checksum
 +
c
;

221 
sm
 = 
	`ƒk_evít_waô
 (
	`SIG
 (
my_u¨t_rx_sig«l
));

225 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/slip/slip.h

27 #i‚de‡
_SLIP_H_


28 
	#_SLIP_H_


	)

30 
	~<°dio.h
>

31 
	~<°dboﬁ.h
>

32 
	~<°döt.h
>

33 
	~<ƒk.h
>

35 
	#ESC
 219

	)

36 
	#END
 192

	)

37 
	#START
 193

	)

39 
öt8_t
 
¶ù_°¨ãd
();

40 
öt8_t
 
¶ù_öô
–
FILE
 *
devi˚_ö
, FILE *
devi˚_out
, 
boﬁ
 
echo
, 
uöt8_t
 
dñay
 );

41 
öt8_t
 
¶ù_tx
(
uöt8_t
 *
buf
, uöt8_à
size
);

42 
öt8_t
 
¶ù_rx
(
uöt8_t
 *
buf
, uöt8_à
max_Àn
);

43 
put_byã
(
uöt8_t
 
c
);

44 
uöt8_t
 
gë_byã
();

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/firefly2/widom_gpio.h

40 #i‚de‡
_WIDOM_GPIO_H


41 
	#_WIDOM_GPIO_H


	)

48 #ifde‡
WD_MBD


50 
	#SYNC_PIN
 4

	)

51 
	#wd_öô_sync_pö
() { \

52 
DDRB
 &~
	`BM
(
SYNC_PIN
); \

53 
PORTB
 |
	`BM
(
SYNC_PIN
); \

54 }

	)

56 
	#wd_gë_sync_pö
(Ë(
PINB
 & 
	`BM
(
SYNC_PIN
))

	)

60 
	#wd_öô_sync_pö
()

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/firefly2/widom_timer.c

40 
	~<ö˛ude.h
>

41 
	~<ƒk.h
>

42 
	~<widom_timî.h
>

43 
	~<widom.h
>

49 
	$wd_°¨t_high_•ìd_timî
()

52 
TCCR1A
 = 0;

53 
TCNT1
 = (
uöt16_t
)0;

54 
OCR1A
 = 0;

55 
TCCR1B
 = 
WD_TCLK_CPU_DIV
;

56 
	}
}

66 
	$wd_£t_high_•ìd_timî_öãºu±
(
uöt16_t
 
sö˚_˛ktks
, uöt16_à
time_öãrvÆ_˛ktks
 )

68 
TIFR
&=~
	`BM
(
OCF1A
);

69 
OCR1A
 = (
uöt16_t
)(
sö˚_˛ktks
+
time_öãrvÆ_˛ktks
);

70 
TIMSK
|=
	`BM
(
OCIE1A
);

71 
	}
}

78 
	$wd_˛r_high_•ìd_timî_öãºu±
( )

80 
TCNT1
 = 0;

81 
OCR1AL
 = 0;

82 
TIFR
&=~
	`BM
(
OCF1A
);

83 
TIMSK
&=~
	`BM
(
OCIE1A
);

84 
	}
}

91 
ölöe
 
	$wd_ª£t_time
()

93 
TCNT1
 = (
uöt16_t
)0;

94 
	}
}

99 
	$SIGNAL
(
SIG_OUTPUT_COMPARE1A
)

101 
	`wd_öt_timî_h™dÀr
();

102 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/firefly2/widom_timer.h

40 #i‚de‡
_WIDOM_TIMER_H


41 
	#_WIDOM_TIMER_H


	)

43 
	#WD_TCLK_CPU_DIV
 
TIMER0_PRESCALE_8


	)

45 #i‡
WD_TCLK_CPU_DIV
 =
TIMER0_PRESCALE_1


47 
	#WD_CLOCK_TICK_TIME
 0.000000125

	)

50 #i‡
WD_TCLK_CPU_DIV
 =
TIMER0_PRESCALE_8


52 
	#WD_CLOCK_TICK_TIME
 0.000001

	)

60 
	#x
 
TCNT1


	)

71 
wd_°¨t_high_•ìd_timî
();

80 
wd_£t_high_•ìd_timî_öãºu±
(
uöt16_t
 
sö˚_˛ktks
, uöt16_à
time_öãrvÆ_˛ktks
 );

87 
wd_˛r_high_•ìd_timî_öãºu±
();

94 
ölöe
 
wd_ª£t_time
();

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/micaZ/widom_gpio.h

40 #i‚de‡
_WIDOM_GPIO_H


41 
	#_WIDOM_GPIO_H


	)

49 
	#wd_öô_sync_pö
()

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/micaZ/widom_timer.c

10 
	~<ö˛ude.h
>

11 
	~<ƒk.h
>

12 
	~<widom_timî.h
>

13 
	~<widom.h
>

18 
	$wd_°¨t_high_•ìd_timî
()

21 
TCCR1A
 = 0;

22 
TCNT1
 = (
uöt16_t
)0;

23 
OCR1A
 = 0;

24 
TCCR1B
 = 
WD_TCLK_CPU_DIV
;

25 
	}
}

35 
	$wd_£t_high_•ìd_timî_öãºu±
(
uöt16_t
 
sö˚_˛ktks
, uöt16_à
time_öãrvÆ_˛ktks
 )

37 
TIFR
&=~
	`BM
(
OCF1A
);

38 
OCR1A
 = (
uöt16_t
)(
sö˚_˛ktks
+
time_öãrvÆ_˛ktks
);

39 
TIMSK
|=
	`BM
(
OCIE1A
);

40 
	}
}

47 
	$wd_˛r_high_•ìd_timî_öãºu±
( )

49 
TCNT1
 = 0;

50 
OCR1AL
 = 0;

51 
TIFR
&=~
	`BM
(
OCF1A
);

52 
TIMSK
&=~
	`BM
(
OCIE1A
);

53 
	}
}

60 
ölöe
 
	$wd_ª£t_time
()

62 
TCNT1
 = (
uöt16_t
)0;

63 
	}
}

68 
	$SIGNAL
(
SIG_OUTPUT_COMPARE1A
)

70 
	`wd_öt_timî_h™dÀr
();

71 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/micaZ/widom_timer.h

40 #i‚de‡
_WIDOM_TIMER_H


41 
	#_WIDOM_TIMER_H


	)

43 
	#WD_TCLK_CPU_DIV
 
TIMER0_PRESCALE_8


	)

45 #i‡
WD_TCLK_CPU_DIV
 =
TIMER0_PRESCALE_1


47 
	#WD_CLOCK_TICK_TIME
 0.000000136

	)

50 #i‡
WD_TCLK_CPU_DIV
 =
TIMER0_PRESCALE_8


52 
	#WD_CLOCK_TICK_TIME
 0.000001085

	)

60 
	#x
 
TCNT1


	)

71 
wd_°¨t_high_•ìd_timî
();

79 
wd_£t_high_•ìd_timî_öãºu±
(
uöt16_t
 
sö˚_˛ktks
, uöt16_à
time_öãrvÆ_˛ktks
 );

93 
wd_˛r_high_•ìd_timî_öãºu±
();

100 
ölöe
 
wd_ª£t_time
();

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/radio/cc2420/widom_linx_rf.c

35 
	~<widom.h
>

36 
	~"widom_löx_rf.h
"

38 #ifde‡
WD_USES_RADIO_RXLINX


40 
uöt8_t
 
	glöxrf_°©e
;

43 
	#BV
–
_v¨
, 
_bô_ödex
 ) (!(!(_v¨ & 
	`BM
(_bô_ödex))))

	)

44 
	#CB
(
_v¨
,
_bô_ödex
Ë((_v¨Ë&(~
	`BM
(_bô_ödex)))

	)

45 
	#SB
(
_v¨
,
_bô_ödex
Ë((_v¨Ë|(~
	`BM
(_bô_ödex)))

	)

50 
	$löxrf_öô
()

52 
	`¥ötf
("11");

56 
	`ƒk_gpio_dúe˘i⁄
 (
RX_DATA
, 
NRK_PIN_INPUT
);

59 
	`ƒk_gpio_dúe˘i⁄
 (
TX_PDN
, 
NRK_PIN_OUTPUT
);

60 
	`ƒk_gpio_dúe˘i⁄
 (
TX_DATA
, 
NRK_PIN_OUTPUT
);

61 
	`ƒk_gpio_dúe˘i⁄
 (
RX_PDN
, 
NRK_PIN_OUTPUT
);

63 
SFIOR
 |
	`BM
(
PUD
);

73 
	`ƒk_gpio_dúe˘i⁄
 (
SDI
, 
NRK_PIN_OUTPUT
);

74 
	`ƒk_gpio_dúe˘i⁄
 (
CLK
, 
NRK_PIN_OUTPUT
);

75 
	`ƒk_gpio_dúe˘i⁄
 (
CSN
, 
NRK_PIN_OUTPUT
);

78 
	`ƒk_gpio_øw_dúe˘i⁄
 ( 
DDRB
, 6, 
NRK_PIN_INPUT
 );

79 
	`ƒk_gpio_øw_dúe˘i⁄
 ( 
DDRB
, 7, 
NRK_PIN_INPUT
 );

82 
	`ƒk_gpio_dúe˘i⁄
 (
NRK_GPIO34
, 
NRK_PIN_OUTPUT
);

85 
	`ƒk_gpio_£t
(
RX_PDN
);

88 
	`ƒk_gpio_£t
(
TX_PDN
);

91 
	`löxrf_£t_tx_powî
(
TX_POWER_MAX
);

94 
	`ƒk_gpio_˛r
(
NRK_GPIO34
);

97 
	`löxrf_£t_pŸ
(
THR1_LEVEL_CHANNEL
, 
RSSI_THR1
);

100 
	`löxrf_£t_pŸ
(
THR2_LEVEL_CHANNEL
, 
RSSI_THR2
);

102 
löxrf_°©e
=1;

103 
	}
}

120 
ölöe
 
uöt8_t
 
	$löxrf_rssi_thr1
() {

121  !(!
	`ƒk_gpio_øw_gë
(
PINB
, 7));

122 
	}
}

128 
ölöe
 
uöt8_t
 
	$löxrf_rssi_thr2
() {

129  !(!
	`ƒk_gpio_øw_gë
(
PINB
, 7));

130 
	}
}

136 
uöt8_t
 
	$löxrf_°¨ãd
(Ë{  
löxrf_°©e
; 
	}
}

141 
	$löxrf_rx_⁄
(Ë{ 
	`ƒk_gpio_£t
(
RX_PDN
); 
	}
}

146 
	$löxrf_rx_off
(Ë{ 
	`ƒk_gpio_˛r
(
RX_PDN
); 
	}
}

151 
	$löxrf_tx_⁄
(Ë{ 
	`ƒk_gpio_£t
(
TX_PDN
); 
	}
}

156 
	$löxrf_tx_off
(Ë{ 
	`ƒk_gpio_˛r
(
TX_PDN
);
	}
}

161 
uöt8_t
 
	$löxrf_rx_ªad
(Ë{  
	`ƒk_gpio_gë
(
RX_DATA
); 
	}
}

166 
	$löxrf_tx_wrôe
(
uöt8_t
 
vÆ
)

168 if(
vÆ
==1Ë
	`ƒk_gpio_£t
(
TX_DATA
);

169 
	`ƒk_gpio_˛r
(
TX_DATA
);

170 
	}
}

175 
	$löxrf_£t_pŸ
(
uöt8_t
 
ch™√l
, uöt8_à
sˇÀ
)

177 
öt8_t
 
i
;

178 
uöt16_t
 
pŸ_c⁄f
 = ((
ch™√l
Ë<< 8Ë+ 
sˇÀ
;

180 
	`ƒk_gpio_˛r
(
CSN
);

181 
	`ƒk_gpio_˛r
(
CLK
);

182 
i
=10; i>=0; i--) {

183 
	`hÆWaô
(50);

184 i‡–
	`BV
(
pŸ_c⁄f
, 
i
Ë=0Ë
	`ƒk_gpio_˛r
(
SDI
);

185 
	`ƒk_gpio_£t
(
SDI
);

186 
	`hÆWaô
(50);

187 
	`ƒk_gpio_£t
(
CLK
);

188 
	`hÆWaô
(100);

189 
	`ƒk_gpio_˛r
(
CLK
);

191 
	`ƒk_gpio_£t
(
CSN
);

192 
	`ƒk_gpio_£t
(
CLK
);

193 
	}
}

198 
	$löxrf_£t_tx_powî
(
uöt8_t
 
sˇÀ
)

200 
	`löxrf_£t_pŸ
(
TX_POWER_CHANNEL
, 
sˇÀ
);

201 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/radio/cc2420/widom_linx_rf.h

35 
	~"widom.h
"

37 #i‚de‡
_WIDOM_LINX_RF_H


38 
	#_WIDOM_LINX_RF_H


	)

40 #ifde‡
WD_USES_RADIO_RXLINX


43 
	#TX_PDN
 
NRK_ADC_INPUT_6


	)

44 
	#TX_DATA
 
NRK_ADC_INPUT_5


	)

45 
	#RX_PDN
 
NRK_ADC_INPUT_4


	)

46 
	#RX_DATA
 
NRK_ADC_INPUT_3


	)

47 
	#RX_RSSI
 
ADC_INPUT_2


	)

49 
	#SDI
 
NRK_ADC_INPUT_7


	)

50 
	#CLK
 
NRK_ADC_INPUT_6


	)

51 
	#SDO
 
NRK_GPIO28


	)

52 
	#CSN
 
NRK_ADC_INPUT_1


	)

55 
	#RFLINX_PORT
 
PORTF


	)

56 
	#RFLINX_DDR
 
DDRF


	)

57 
	#RFLINX_PIN
 
PINF


	)

60 
	#TX_POWER_CHANNEL
 0

61 
	#THR1_LEVEL_CHANNEL
 1

62 
	#THR2_LEVEL_CHANNEL
 2

63 

	)

65 
	#TX_POWER_MAX
 0xFF

	)

66 
	#TX_POWER_MIN
 0

	)

69 
	#RSSI_THR1
 110

	)

70 
	#RSSI_THR2
 130

	)

72 
	~<ö˛ude.h
>

73 
	~<ƒk.h
>

78 
löxrf_öô
();

90 
ölöe
 
uöt8_t
 
löxrf_rssi_thr1
();

97 
ölöe
 
uöt8_t
 
löxrf_rssi_thr2
();

102 
uöt8_t
 
löxrf_°¨ãd
();

107 
löxrf_rx_⁄
();

112 
löxrf_rx_off
();

117 
löxrf_tx_⁄
();

122 
löxrf_tx_off
();

127 
uöt8_t
 
löxrf_rx_ªad
();

132 
löxrf_tx_wrôe
(
uöt8_t
 
vÆ
);

137 
löxrf_£t_pŸ
(
uöt8_t
 
ch™√l
, uöt8_à
sˇÀ
);

142 
löxrf_£t_tx_powî
(
uöt8_t
 
sˇÀ
);

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/radio/cc2420/widom_rf.c

40 
	~<ö˛ude.h
>

41 
	~<widom.h
>

42 
	~<widom_rf.h
>

43 
	~<widom_löx_rf.h
>

44 
	~<ulib.h
>

45 
	~<ƒk.h
>

47 
	#SIZE_FCS
 2

	)

48 
	#SIZE_SYNC_PKT_PAYLOAD
 3

	)

50 
	#SYNC_PKT_TYPE
 0xAA

	)

51 
	#BCAST_ADDR
 0xFFFF

	)

53 
	#CC2420_DEF_FCF
 0x0821

54 

	)

55 
öt8_t
 
	gsync_£q_˙t
=1;

57 
öt8_t
 
	gtxSeqNumbî
=0;

62 
	$wdrf_öô
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
)

65 #ifde‡
WD_USES_RADIO_RXLINX


67 
	`löxrf_öô
();

70 
	`cc2420rf_öô
(
pRRI
, 
ch™√l
);

73 
	`DISABLE_FIFOP_INT
();

74 
	}
}

80 
	$wdrf_ã°_mode
()

82 #i‚de‡
WD_USES_RADIO_RXLINX


83 
	`cc2420rf_ã°_mode
();

85 
	}
}

90 
	$wdrf_d©a_mode
() {

91 #i‚de‡
WD_USES_RADIO_RXLINX


92 
	`cc2420rf_d©a_mode
();

94 
	}
}

100 
	$wdrf_ˇºõr_⁄
()

102 #i‚de‡
WD_USES_RADIO_RXLINX


103 
	`cc2420rf_ˇºõr_⁄
();

105 
	`löxrf_tx_wrôe
(1);

107 
	}
}

112 
	$wdrf_ˇºõr_off
()

114 #i‚de‡
WD_USES_RADIO_RXLINX


115 
	`cc2420rf_ˇºõr_off
();

117 
	`löxrf_tx_wrôe
(0);

119 
	}
}

124 
	$wdrf_°p
()

126 #i‚de‡
WD_USES_RADIO_RXLINX


127 
	`cc2420rf_°p
();

129 
	`löxrf_tx_wrôe
(0);

131 
	}
}

136 
	$wdrf_£t_rcv
()

138 #i‚de‡
WD_USES_RADIO_RXLINX


139 
	`cc2420rf_£t_rcv
();

140 
	`hÆWaô
(256);

142 
	`cc2420rf_£t_rcv
();

145 
	}
}

150 
	$wdrf_Êush_rx_fifo
()

152 
	`cc2420rf_Êush_rx_fifo
();

153 
	}
}

158 
ölöe
 
	$wdrf_Êush_tx_fifo
()

160 
	`cc2420rf_Êush_tx_fifo
();

161 
	}
}

170 
ölöe
 
boﬁ
 
	$wdrf_cˇ
()

172 #i‚de‡
WD_USES_RADIO_RXLINX


173  (
CCA_IS_1
);

175  !(
	`löxrf_rssi_thr1
());

177 
	}
}

186 
ölöe
 
boﬁ
 
	$wdrf_sfd
()

188  (
SFD_IS_1
);

189 
	}
}

191 
ölöe
 
	$wdrf_£t_ch™√l
–
uöt8_t
 
ch™√l
 )

193 #i‚de‡
WD_USES_RADIO_RXLINX


194 
	`cc2420rf_£t_ch™√l
–
ch™√l
 );

196 
	}
}

203 
	$wdrf_£t_powî
(
uöt8_t
 
powî
)

205 #i‚de‡
WD_USES_RADIO_RXLINX


206 
	`cc2420rf_£t_powî
(
powî
);

208 
	}
}

213 
	$wdrf_£t_cˇ_thr
(
öt8_t
 
cˇ_thr
)

215 #i‚de‡
WD_USES_RADIO_RXLINX


216 
	`cc2420rf_£t_cˇ_thr
(
cˇ_thr
);

218 
	}
}

229 
uöt8_t
 
	$wdrf_tx_sync_∑ckë
()

231 
uöt8_t
 
∑ckëLígth
, 
ty≥
=
SYNC_PKT_TYPE
;

235 
	`FASTSPI_STROBE
 (
CC2420_SRFOFF
);

238 
	`wdrf_Êush_rx_fifo
();

239 
	`wdrf_Êush_tx_fifo
();

242 
	`DISABLE_GLOBAL_INT
();

244 
	`FASTSPI_STROBE
 (
CC2420_STXON
);

246 i‡(
sync_£q_˙t
 <= 0) sync_seq_cnt=1;

249 
∑ckëLígth
 = 
SIZE_SYNC_PKT_PAYLOAD
 + 
SIZE_FCS
;

250 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
∑ckëLígth
, 1);

251 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
∑ckëLígth
, 1);

252 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
ty≥
, 1);

253 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
sync_£q_˙t
, 1);

256 !
SFD_IS_1
);

259 
SFD_IS_1
);

260 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

262 
sync_£q_˙t
++;

264 
	`ENABLE_GLOBAL_INT
();

266 
	}
}

277 
öt8_t
 
	$wdrf_pﬁl_synch_∑ckë_rx
()

279 
uöt8_t
 
ty≥
, 
£q
;

280 
uöt8_t
 
Àngth
;

281 
uöt8_t
 
pFoŸî
[2];

283 i‡(
FIFOP_IS_1
) {

286 if((
FIFOP_IS_1
Ë&& (!(
FIFO_IS_1
))) {

287 
	`wdrf_Êush_rx_fifo
();

292 
	`FASTSPI_READ_FIFO_BYTE
(
Àngth
);

293 
	`FASTSPI_READ_FIFO_BYTE
(
Àngth
);

294 
Àngth
 &
RF_LENGTH_MASK
;

297 i‡(
Àngth
 !
SIZE_SYNC_PKT_PAYLOAD
+
SIZE_FCS
) {

298 
	`wdrf_Êush_rx_fifo
();

303 
	`FASTSPI_READ_FIFO_BYTE
(
ty≥
);

304 i‡(
ty≥
 =
SYNC_PKT_TYPE
) {

307 
	`FASTSPI_READ_FIFO_BYTE
(
£q
);

310 
	`FASTSPI_READ_FIFO_NO_WAIT
((
uöt8_t
*Ë
pFoŸî
, 2);

311 
rfSëtögs
.
pRxInfo
->
rssi
 = 
pFoŸî
[0];

314 i‡(
pFoŸî
[1] & 
RF_CRC_OK_BM
) {

315  
£q
;

317 
	`wdrf_Êush_rx_fifo
();

322 
	`wdrf_Êush_rx_fifo
();

327 
	}
}

348 
uöt8_t
 
	$wdrf_tx_∑ckë
(
RF_TX_INFO
 *
pRTI
) {

349 
uöt16_t
 
‰ameC⁄åﬁFõld
, 
∑nId
=
BCAST_ADDR
, 
myAddr
=
NODE_ADDR
;

350 
uöt8_t
 
∑ckëLígth
;

351 
uöt8_t
 
checksum
,
i
;

354 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

355 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

358 
	`FASTSPI_STROBE
 (
CC2420_SRFOFF
);

361 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

362 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

364 
checksum
=0;

365 
i
=0; i<
pRTI
->
Àngth
; i++ )

368 
checksum
+=
pRTI
->
pPaylﬂd
[
i
];

373 
∑ckëLígth
 = 
pRTI
->
Àngth
 + 
RF_PACKET_OVERHEAD_SIZE
 + 
CHECKSUM_OVERHEAD
;

374 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*)&
∑ckëLígth
, 1);

375 
‰ameC⁄åﬁFõld
 = 
CC2420_DEF_FCF
;

376 
‰ameC⁄åﬁFõld
 = 
RF_FCF_NOACK
;

377 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
‰ameC⁄åﬁFõld
, 2);

378 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
txSeqNumbî
, 1);

379 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
∑nId
, 2);

380 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
pRTI
->
de°Addr
, 2);

381 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
myAddr
, 2);

382 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë
pRTI
->
pPaylﬂd
,ÖRTI->
Àngth
);

383 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
checksum
, 1);

385 
	`FASTSPI_STROBE
 (
CC2420_STXON
);

389 i‡(
i
 > 
WD_MAX_PKT_SIZE
) {

392 
i
++;

393 
	`hÆWaô
(
BYTE_TIME_us
);

394 } !
SFD_IS_1
);

396 
SFD_IS_1
);

398 
	`wdrf_Êush_rx_fifo
();

400 
	`FASTSPI_STROBE
 (
CC2420_SRFOFF
);

402 
	`wdrf_£t_rcv
();

404 
txSeqNumbî
++;

409 
	}
}

414 
ölöe
 
	$wdrf_pﬁlög_rx_⁄
()

416 
	`FASTSPI_STROBE
(
CC2420_SRXON
);

417 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

418 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

419 
	}
}

424 
ölöe
 
öt8_t
 
	$wdrf_pﬁlög_rx_∑ckë
()

427  
	`rf_pﬁlög_rx_∑ckë
();

428 
	}
}

440 
ölöe
 
	$cc2420rf_öô
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
)

442 
	`rf_öô
(
pRRI
, 
ch™√l
, 0x1111, 
NODE_ADDR
);

445 
	`DISABLE_GLOBAL_INT
();

449 
	`FASTSPI_SETREG
(
CC2420_RSSI
, 0xE580);

451 
	`FASTSPI_SETREG
(
CC2420_TXCTRL
, 0x80FF);

452 
	`FASTSPI_SETREG
(
CC2420_RXCTRL1
, 0x0A56);

454 
	`wdrf_Êush_rx_fifo
();

457 
	`ENABLE_GLOBAL_INT
();

458 
	}
}

463 
ölöe
 
	$cc2420rf_Êush_rx_fifo
()

465 
uöt8_t
 
tmp
;

467 
	`FASTSPI_READ_FIFO_BYTE
(
tmp
);

468 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

469 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

470 
	}
}

475 
ölöe
 
	$cc2420rf_Êush_tx_fifo
()

477 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

478 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

479 
	}
}

485 
ölöe
 
	$cc2420rf_ã°_mode
()

487 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

495 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL1
, 0x0508);

496 
	`FASTSPI_SETREG
(
CC2420_DACTST
, 0x1800);

497 
	`cc2420rf_Êush_rx_fifo
();

498 
	}
}

503 
ölöe
 
	$cc2420rf_d©a_mode
() {

504 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

505 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL1
, 0x0500);

506 
	`FASTSPI_SETREG
(
CC2420_DACTST
, 0);

507 
	`cc2420rf_Êush_rx_fifo
();

508 
	}
}

514 
ölöe
 
	$cc2420rf_ˇºõr_⁄
()

516 
	`FASTSPI_STROBE
(
CC2420_STXON
);

517 
	}
}

522 
ölöe
 
	$cc2420rf_ˇºõr_off
()

524 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

525 
	}
}

530 
ölöe
 
	$cc2420rf_°p
()

532 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

533 
	}
}

538 
ölöe
 
	$cc2420rf_£t_rcv
()

540 
	`FASTSPI_STROBE
(
CC2420_SRXON
);

541 
	}
}

548 
ölöe
 
	$cc2420rf_£t_ch™√l
–
uöt8_t
 
ch™√l
 )

550 
uöt16_t
 
f
;

553 
f
 = (
uöt16_t
Ë(
ch™√l
 - 11);

554 
f
 = f + (f << 2);

555 
f
 = f + 357 + 0x4000;

558 
	`FASTSPI_SETREG
(
CC2420_FSCTRL
, 
f
);

559 
	}
}

566 
ölöe
 
	$cc2420rf_£t_powî
(
uöt8_t
 
powî
)

568 
uöt8_t
 
ªg_vÆ
;

570 i‡(
powî
 > 31) ;

573 
ªg_vÆ
=0xA0E0;

574 
ªg_vÆ
ªg_vÆ | (
powî
 & 
CC2420_TXCTRL_PAPWR_MASK
);

576 
	`FASTSPI_SETREG
(
CC2420_TXCTRL
, 
ªg_vÆ
);

577 
	}
}

582 
ölöe
 
	$cc2420rf_£t_cˇ_thr
(
öt8_t
 
cˇ_thr
)

584 
uöt16_t
 
ªg_vÆ
 = (
cˇ_thr
<<
CC2420_RSSI_CCA_THRESH
) | 0x80;

586 
	`FASTSPI_SETREG
(
CC2420_RSSI
, 
ªg_vÆ
);

587 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/radio/cc2420/widom_rf.h

40 #i‚de‡
_WIDOM_RF_H


41 
	#_WIDOM_RF_H


	)

43 
	~<ö˛ude.h
>

44 
	~<widom.h
>

45 
	~<ƒk.h
>

46 
	~<basic_rf.h
>

49 
	#WD_MAX_PKT_SIZE
 128

	)

51 
	#WD_MAX_SYNC_PKT_SIZE
 30

	)

53 
	#BYTE_TIME_us
 32

	)

56 
	#WD_CHANNEL
 25

	)

58 
	#WD_SYNC_CHANNEL
 
WD_CHANNEL


	)

60 
	#WD_DATA_CHANNEL
 
WD_CHANNEL


	)

63 
	#WD_MAX_MSG_LEN_us
 4224

64 

	)

65 
	#CC2420_TXCTRL_DFT_VAL
 0xA0FF

	)

67 
	#CC2420_TXCTRL_PAPWR
 0

69 
	#CC2420_TXCTRL_PAPWR_MASK
 0x1F

	)

72 
	#CC2420_RSSI_CCA_THRESH
 8

73 

	)

82 
wdrf_öô
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
);

88 
wdrf_ã°_mode
();

93 
wdrf_d©a_mode
();

99 
wdrf_ˇºõr_⁄
();

104 
wdrf_ˇºõr_off
();

109 
wdrf_°p
();

114 
wdrf_£t_rcv
();

119 
wdrf_Êush_rx_fifo
();

124 
wdrf_Êush_tx_fifo
();

129 
ölöe
 
boﬁ
 
wdrf_cˇ
();

138 
ölöe
 
boﬁ
 
wdrf_sfd
();

143 
ölöe
 
wdrf_£t_ch™√l
–
uöt8_t
 
ch™√l
 );

150 
wdrf_£t_powî
(
uöt8_t
 
powî
);

155 
wdrf_£t_cˇ_thr
(
öt8_t
 
cˇ_thr
);

166 
uöt8_t
 
wdrf_tx_sync_∑ckë
();

177 
öt8_t
 
wdrf_pﬁl_synch_∑ckë_rx
();

198 
uöt8_t
 
wdrf_tx_∑ckë
(
RF_TX_INFO
 *
pRTI
);

203 
ölöe
 
wdrf_pﬁlög_rx_⁄
();

208 
ölöe
 
öt8_t
 
wdrf_pﬁlög_rx_∑ckë
();

220 
ölöe
 
cc2420rf_öô
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
);

225 
ölöe
 
cc2420rf_Êush_rx_fifo
();

230 
ölöe
 
cc2420rf_Êush_tx_fifo
();

236 
ölöe
 
cc2420rf_ã°_mode
();

242 
ölöe
 
cc2420rf_d©a_mode
();

248 
ölöe
 
cc2420rf_ˇºõr_⁄
();

253 
ölöe
 
cc2420rf_ˇºõr_off
();

258 
ölöe
 
cc2420rf_°p
();

263 
ölöe
 
cc2420rf_£t_rcv
();

268 
ölöe
 
cc2420rf_£t_ch™√l
–
uöt8_t
 
ch™√l
 );

275 
ölöe
 
cc2420rf_£t_powî
(
uöt8_t
 
powî
);

280 
ölöe
 
cc2420rf_£t_cˇ_thr
(
öt8_t
 
cˇ_thr
);

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/widom.c

40 
	~<ö˛ude.h
>

41 
	~<ulib.h
>

42 
	~<ƒk.h
>

43 
	~<ƒk_timî.h
>

44 
	~<ƒk_evíts.h
>

45 
	~<ƒk_îr‹.h
>

46 
	~<°dio.h
>

47 
	~<widom.h
>

48 
	~<widom_rf.h
>

49 
	~<widom_timî.h
>

50 
	~<widom_gpio.h
>

52 #i‡
WD_VERSION
 =
WD_MBD_EXT_SYNC


53 
	~<widom_gpio.h
>

57 #i‡
WD_VERSION
 !
WD_MBD_RFLINX
 && WD_VERSION !
WD_MBD_CC2420


58 c⁄° 
uöt16_t
 
	gWD_INTER_NEXT_SYNC
 = ( ((((
WD_SYNC_PERIOD_us
/1000Ë+ 1)*1000)-
WD_MAX_BLOCKING_TIME_us
-
WD_SYNC_PULSE_RX_SWX_us
-
WD_SYNC_WITH_MASTER_MAX_ERROR
Ë/ 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

64 c⁄° 
uöt16_t
 
	gH
 = ( 
H_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

65 c⁄° 
uöt16_t
 
	gG
 = ( 
G_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

66 #i‚de‡
WD_MBD


67 c⁄° 
uöt16_t
 
	gETG
 = ( 
ETG_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

70 #ifde‡
WD_MBD


71 c⁄° 
uöt16_t
 
	gE
 = ( 
E_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

72 c⁄° 
uöt16_t
 
	gF
 = ( 
F_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

73 c⁄° 
uöt16_t
 
	gTRX
 = ( 
TRX_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

74 c⁄° 
uöt16_t
 
	gTTX
 = ( 
TTX_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

75 c⁄° 
uöt16_t
 
	gTCS
 = ( 
TCS_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

76 c⁄° 
uöt16_t
 
	gH2
 = ( (2*
H_us
Ë/ 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

77 c⁄° 
uöt16_t
 
	gH3
 = ( (3*
H_us
Ë/ 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

78 c⁄° 
uöt16_t
 
	gG2
 = ( (2*
G_us
Ë/ 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

79 c⁄° 
uöt16_t
 
	gCMSG
 = ( (
CMSG_us
Ë/ 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

82 c⁄° 
uöt16_t
 
	gC_SYNC
 = ( (
CSYNCMSG_us
Ë/ 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

85 vﬁ©ûê
uöt8_t
 
	gtx_∑ckë
 = 
Ál£
;

87 vﬁ©ûê
uöt16_t
 
	g¥io
=
INVALID_PRIO
;

89 vﬁ©ûê
uöt16_t
 
	gwö√r_¥io
=
INVALID_PRIO
;

91 vﬁ©ûê
öt32_t
 
	gtx_œ°_ªsu…
 = -1;

93 vﬁ©ûê
öt8_t
 
	grx_œ°_ªsu…
 = -1;

95 
RF_TX_INFO
 
	gtx_pkt_öfo
;

98 vﬁ©ûê
öt8_t
 
	grx_∑ckë
 = -1;

100 
RF_RX_INFO
 
	grx_pkt_öfo
;

103 
ƒk_sig_t
 
	gwd_rx_pkt_öfo_sig«l
;

105 
ƒk_sig_t
 
	gwd_tx_pkt_öfo_sig«l
;

107 #i‡
WD_VERSION
 =
WD_MBD_CC2420
 || WD_VERSION =
WD_MBD_RFLINX


108 
uöt8_t
 
	g°©e
=1;

109 
uöt8_t
 
	gånmtCou¡î
=0;

119 
ölöe
 
öt8_t
 
	$wd_waô_sync
()

121 #ifde‡
WD_SBD


122 
öt8_t
 
n
;

123 
uöt16_t
 
˙t
;

127 
	`wdrf_d©a_mode
( );

129 
	`wdrf_£t_rcv
();

131 
˙t
=0;

133 i‡(
˙t
 > (
WD_SYNC_MAX_WAIT_TIME_us
/
BYTE_TIME_us
)) {

134 
	`wdrf_Êush_rx_fifo
();

136  
NRK_ERROR
;

138 
	`hÆWaô
(
BYTE_TIME_us
);

139 
˙t
++;

140 } 
	`wdrf_sfd
(Ë=
Ál£
);

141 
	`wd_ª£t_time
();

142 
˙t
=0;

143 (
n
 = 
	`wdrf_pﬁl_synch_∑ckë_rx
 ()) == 0) {

144 i‡(
˙t
 > 
WD_MAX_SYNC_PKT_SIZE
) {

145 
	`wdrf_Êush_rx_fifo
();

146  
NRK_ERROR
;

148 
	`hÆWaô
(
BYTE_TIME_us
);

149 
˙t
++;

152 
	`wdrf_Êush_rx_fifo
();

156 i‡(
n
<0Ë 
NRK_ERROR
;

157  
NRK_OK
;

159 #i‡
WD_VERSION
 =
WD_MBD_EXT_SYNC


160 
öt8_t
 
°©e
, 
√w_°©e
;

162 
°©e
 = 
	`wd_gë_sync_pö
();

165 
√w_°©e
 = 
	`wd_gë_sync_pö
();

166 } 
√w_°©e
 =
°©e
);

168 
	`wd_ª£t_time
();

173  
NRK_OK
;

175 
	}
}

184 
ölöe
 
öt8_t
 
	$wd_waô_rx_pkt_öfo
()

186 
öt8_t
 
n
;

187 
uöt16_t
 
˙t
=0;

189 i‡(
rx_∑ckë
 < 0 )  
NRK_ERROR
;

191 (
n
 = 
	`wdrf_sfd
()) == 0) {

192 i‡(
˙t
 > 
WD_PKT_MAX_WAIT_TIME_10us
) {

193 
	`wdrf_Êush_rx_fifo
();

194  
NRK_ERROR
;

196 
	`hÆWaô
(10);

197 
˙t
++;

199 i‡(
n
 != 0) {

200 
n
 = 0;

202 
˙t
=0;

203 (
n
 = 
	`wdrf_pﬁlög_rx_∑ckë
 ()) == 0) {

204 i‡(
˙t
 > 
WD_MAX_PKT_SIZE
) {

205 
	`wdrf_Êush_rx_fifo
();

208 
	`hÆWaô
(
BYTE_TIME_us
);

209 
˙t
++;

213 i‡(
n
 =1Ë 
NRK_OK
;

214  
NRK_ERROR
;

215 
	}
}

224 
ölöe
 
	$wd_waô_u¡û
–
uöt16_t
 
whí_˛ktks
 ) {

226 i‡(
x
 >
whí_˛ktks
) ;

228 
	}
}

235 
ölöe
 
	$wd_ˇºõr_⁄_u¡û
–
uöt16_t
 
whí_˛ktks
 ) {

236 
	`wdrf_ˇºõr_⁄
();

237 
	`wd_waô_u¡û
(
whí_˛ktks
);

238 
	`wdrf_ˇºõr_off
();

239 
	}
}

248 
ölöe
 
boﬁ
 
	$wd_ˇºõr_£n£_u¡û
–
uöt16_t
 
whí_˛ktks
 ) {

249 
boﬁ
 
ˇºõr
=
Ál£
;

250 
	`wdrf_£t_rcv
();

251 
	`hÆWaô
(100);

253 i‡(
	`wdrf_cˇ
()==
Ál£
Ë
ˇºõr
 = 
åue
;

254 i‡(
x
 >
whí_˛ktks
) ;

257  
ˇºõr
;

258 
	}
}

264 
öt8_t
 
	$wd_öô
(
uöt8_t
 
ch™√l
)

266 
	`wdrf_öô
(&
rx_pkt_öfo
, 
ch™√l
);

267 #i‡
WD_VERSION
 !
WD_MBD_RFLINX
 && WD_VERSION !
WD_MBD_CC2420


268 
	`¥ötf
("WD_SYNC_PERIOD=%u m†WD_INTER_NEXT_SYNC=%u\r\n", (
WD_SYNC_PERIOD_us
/1000+1), (
WD_INTER_NEXT_SYNC
));

270 
	`wd_°¨t_high_•ìd_timî
();

272 
	`wd_öô_sync_pö
();

274 
	`ƒk_öt_dißbÀ
();

276 
	`wdrf_d©a_mode
();

278 
wd_rx_pkt_öfo_sig«l
=
	`ƒk_sig«l_¸óã
();

279 if(
wd_rx_pkt_öfo_sig«l
==
NRK_ERROR
) {

280 
	`ƒk_k¥ötf
(
	`PSTR
("WD ERROR: creatingÑx signal failed\r\n"));

281  
NRK_ERROR
;

283 
wd_tx_pkt_öfo_sig«l
=
	`ƒk_sig«l_¸óã
();

284 if(
wd_tx_pkt_öfo_sig«l
==
NRK_ERROR
)

286 
	`ƒk_k¥ötf
(
	`PSTR
("WD ERROR: creatingÅx signal failed\r\n"));

287  
NRK_ERROR
;

290 #i‡
WD_VERSION
 !
WD_MBD_RFLINX
 && WD_VERSION !
WD_MBD_CC2420


292 
	`ƒk_Àd_£t
(
RED_LED
);

294 } 
	`wd_waô_sync
(Ë!
NRK_OK
);

295 
	`ƒk_Àd_˛r
(
RED_LED
);

297 
	`wd_£t_high_•ìd_timî_öãºu±
(0, 
WD_INTER_NEXT_SYNC
);

300 
	`ƒk_öt_íabÀ
();

302  
NRK_OK
;

303 
	}
}

312 
öt8_t
 
	$wd_°¨ãd
()

314 i‡(
wd_tx_pkt_öfo_sig«l
 !
NRK_ERROR
)  1;

316 
	}
}

325 
ölöe
 
boﬁ
 
	$wd_do_tou∫amít
()

328 
uöt8_t
 
i
=0;

330 
boﬁ
 
wö√r
=
åue
;

332 
uöt8_t
 
pbô_i
;

334 
boﬁ
 
cs
=
Ál£
;

336 
	`wdrf_ã°_mode
();

338 dÿ{ 
wö√r
=
tx_∑ckë
; } 0);

340 #ifde‡
WD_SBD


342 
	`wd_waô_u¡û
(
C_SYNC
);

345 
i
 = 0; i < 
NPRIOBITS
; i++) {

346 
pbô_i
 = 
	`wd_¥io_bô
(
¥io
, 
i
);

347 
	`wd_wö√r_¥io
 (
wö√r_¥io
, 
i
, 
pbô_i
);

348 i‡(
pbô_i
 =
DOMINANT_BIT
 && 
wö√r
 =
åue
) {

349 
	`wd_ˇºõr_⁄_u¡û
 ( 
H
 + (H+
G
)*
i
 + 
C_SYNC
 );

351 
cs
 = 
	`wd_ˇºõr_£n£_u¡û
 ( 
H
 + (H+
G
)*
i
 + 
C_SYNC
 );

353 i‡(
pbô_i
 =
RECESSIVE_BIT
 && 
cs
 =
åue
) {

354 
wö√r
 = 
Ál£
;

355 
	`wd_wö√r_¥io
 (
wö√r_¥io
, 
i
, 
DOMINANT_BIT
);

358 i‡–
i
 < 
NPRIOBITS
-1 ) {

359 
	`wd_waô_u¡û
–
G
 + 
H
 + (H+G)*
i
 + 
C_SYNC
 );

361 
	`wdrf_d©a_mode
( );

364 i‡(
wö√r
==
Ál£
) {

365 
	`wdrf_£t_rcv
();

366 
	`wdrf_pﬁlög_rx_⁄
 ();

368 
	`wd_waô_u¡û
–
ETG
 + 
H
 + (H+
G
)*
i
 + 
C_SYNC
 );

373 #ifde‡
WD_MBD


374 #i‡
WD_VERSION
 =
WD_MBD_EXT_SYNC


375 
	`wd_waô_u¡û
(
C_SYNC
);

377 
	`wd_ª£t_time
();

379 
i
 = 0; i < 
NPRIOBITS
; i++) {

381 
pbô_i
 = 
	`wd_¥io_bô
(
¥io
, 
i
);

382 
	`wd_wö√r_¥io
 (
wö√r_¥io
, 
i
, 
pbô_i
);

383 
cs
=
Ál£
;

384 i‡(
pbô_i
 =
DOMINANT_BIT
 && 
wö√r
 =
åue
) {

385 
	`wd_ˇºõr_⁄_u¡û
 ( 
H
 + (
H2
+
G2
)*
i
 );

387 
cs
 = 
	`wd_ˇºõr_£n£_u¡û
 ( 
H
 + (
H2
+
G2
)*
i
);

389 
	`wd_waô_u¡û
–
G
 + 
H
 + (
H2
+
G2
)*
i
 );

391 i‡(
cs
 =
åue
) {

392 
	`wd_ˇºõr_⁄_u¡û
 ( 
H2
 + 
G
 + (H2+
G2
)*
i
 );

394 
cs
 = 
	`wd_ˇºõr_£n£_u¡û
 ( 
H2
 + 
G
 + (H2+
G2
)*
i
 );

397 
	`wd_wö√r_¥io
 (
wö√r_¥io
, 
i
, 
pbô_i
);

398 i‡(
pbô_i
 =
RECESSIVE_BIT
 && 
cs
 =
åue
) {

399 
wö√r
 = 
Ál£
;

400 
	`wd_wö√r_¥io
 (
wö√r_¥io
, 
i
, 
DOMINANT_BIT
);

403 i‡–
i
 < 
NPRIOBITS
-1 ) {

404 
	`wd_waô_u¡û
–
G2
 + 
H2
 + (H2+G2)*
i
 );

406 
	`wd_ª£t_time
();

407 
	`wdrf_d©a_mode
( );

410 i‡(
wö√r
==
Ál£
) {

411 
	`wdrf_£t_rcv
();

412 
	`wdrf_pﬁlög_rx_⁄
 ();

414 
	`wd_waô_u¡û
–
H
 );

419 
tx_œ°_ªsu…
=-1;

420 
rx_œ°_ªsu…
 = -1;

423 i‡(
wö√r
==
åue
) {

429 i‡(
	`wdrf_tx_∑ckë
 (&
tx_pkt_öfo
) == 0) {

430 
tx_∑ckë
=
Ál£
;

431 
tx_œ°_ªsu…
=1;

442 i‡–
	`wd_waô_rx_pkt_öfo
(Ë=
NRK_OK
 ) {

443 
rx_∑ckë
 = 1;

444 
rx_œ°_ªsu…
 = 1;

449 #i‡
WD_VERSION
 =
WD_MBD_CC2420
 || WD_VERSION =
WD_MBD_RFLINX


450 
	`wd_waô_u¡û
(
H
+
CMSG
);

453  
wö√r
;

454 
	}
}

461 #i‡
WD_VERSION
 =
WD_MBD_CC2420
 || WD_VERSION =
WD_MBD_RFLINX


462 
ölöe
 
öt8_t
 
	$wd_mdb_do_¥Ÿocﬁ
()

464 
boﬁ
 
cˇ
, 
ªt
, 
waô_e
=
Ál£
;

468 i‡(
°©e
 == 1) {

470 
	`wdrf_ã°_mode
();

471 
	`wdrf_£t_rcv
();

472 
ånmtCou¡î
=0;

473 
	`wd_waô_u¡û
 (
TCS
 + 
TRX
);

474 
	`wd_ª£t_time
();

475 
°©e
=2;

479 i‡(
°©e
 == 2) {

480 i‡(
x
 >
F
) {

481 
	`wd_ª£t_time
();

482 
°©e
 = 3;

486 i‡(
	`wdrf_cˇ
()==
Ál£
) {

488 
	`wd_ª£t_time
();

490 
cˇ
=
	`wdrf_cˇ
();

491 } 
x
 < 
H3
-
TCS
 && 
cˇ
 =
Ál£
);

492 i‡(
x
 >
H3
-
TCS
) {

493 
	`wd_waô_u¡û
 (
H3
);

495 
	`wd_ª£t_time
();

496 
°©e
 = 8;

497 } 
	`wd_ª£t_time
();

502 i‡(
°©e
 == 3) {

503 i‡(
x
 >
E
 && 
waô_e
 =
Ál£
Ëwaô_ê
åue
;

505 i‡(
waô_e
 =
åue
 && 
tx_∑ckë
 ==Årue) {

506 
waô_e
 = 
Ál£
;

508 
	`wdrf_ˇºõr_⁄
();

509 
	`wd_ª£t_time
();

510 
	`wd_waô_u¡û
(
TTX
);

511 
	`wd_ª£t_time
();

512 
	`wd_waô_u¡û
(
H3
);

513 
	`wdrf_ˇºõr_off
();

514 
	`wd_ª£t_time
();

516 
°©e
 = 8;

520 i‡(
	`wdrf_cˇ
()==
Ál£
) {

521 
waô_e
 = 
Ál£
;

522 
	`wd_ª£t_time
();

523 
	`wd_ˇºõr_⁄_u¡û
–
H3
-
TTX
 );

524 
	`wd_ª£t_time
();

525 
°©e
 = 8;

530 i‡(
°©e
 == 8) {

531 
	`wd_waô_u¡û
 (
G
);

533 
ªt
 = 
	`wd_do_tou∫amít
();

535 
	`wd_ª£t_time
();

536 
ånmtCou¡î
++;

537 
°©e
 = 1;

550 i‡(
°©e
 == 17) {

551 i‡(
x
>=
E
+
TCS
) {

552 
	`wd_ª£t_time
();

553 
°©e
 = 3;

557 i‡(
	`wdrf_cˇ
()==
Ál£
) {

558 
	`wd_ª£t_time
();

559 
	`wd_ˇºõr_⁄_u¡û
–
H3
 );

560 
	`wd_ª£t_time
();

561 
°©e
 = 8;

565 
	}
}

571 
ƒk_sig_t
 
	$wd_gë_tx_sig«l
()

573  
wd_tx_pkt_öfo_sig«l
;

574 
	}
}

584 
öt8_t
 
	$wd_tx_∑ckë
(
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
¥i‹ôy
)

586 i‡(
	`wd_tx_∑ckë_íqueue
(
buf
, 
Àn
, 
¥i‹ôy
)==
NRK_OK
Ë 
	`wd_waô_u¡û_tx_∑ckë
();

587  
NRK_ERROR
;

588 
	}
}

597 
öt8_t
 
	$wd_tx_∑ckë_íqueue
(
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
¥i‹ôy
)

599 
öt8_t
 
ªt
=
NRK_ERROR
;

601 
	`ƒk_öt_dißbÀ
();

603 i‡(
tx_∑ckë
==
Ál£
) {

604 
tx_pkt_öfo
.
pPaylﬂd
=
buf
;

605 
tx_pkt_öfo
.
Àngth
=
Àn
;

606 
tx_∑ckë
 = 
åue
;

607 
¥io
 = 
¥i‹ôy
;

608 
ªt
=
NRK_OK
;

611 
	`ƒk_öt_íabÀ
();

613  
ªt
;

614 
	}
}

623 
öt8_t
 
	$wd_rx_pkt_£t_buf„r
(
uöt8_t
 *
buf
, uöt8_à
size
)

625 if(
buf
==
NULL
Ë 
NRK_ERROR
;

626 
rx_pkt_öfo
.
pPaylﬂd
 = 
buf
;

627 
rx_pkt_öfo
.
max_Àngth
 = 
size
;

628 
rx_∑ckë
=0;

629  
NRK_OK
;

630 
	}
}

639 
uöt8_t
 *
	$wd_rx_pkt_gë
(
uöt8_t
 *
Àn
, uöt8_à*
rssi
)

641 if(
	`wd_rx_pkt_ªady
()==
NRK_OK
)

643 *
Àn
=0;

644 *
rssi
=0;

645  
NULL
;

647 *
Àn
=
rx_pkt_öfo
.
Àngth
;

648 *
rssi
=
rx_pkt_öfo
.rssi;

649  
rx_pkt_öfo
.
pPaylﬂd
;

650 
	}
}

659 
öt8_t
 
	$wd_rx_pkt_ªady
()

661 
boﬁ
 
ªt
;

662 
	`ƒk_öt_dißbÀ
();

663 
ªt
=
rx_∑ckë
;

664 
	`ƒk_öt_íabÀ
();

665 i‡(
ªt
==1Ë 
NRK_OK
;

666  
NRK_ERROR
;

667 
	}
}

675 
öt8_t
 
	$wd_rx_pkt_ªÀa£
()

677 
	`ƒk_öt_dißbÀ
();

678 
rx_∑ckë
=0;

679 
	`ƒk_öt_íabÀ
();

680  
NRK_OK
;

681 
	}
}

690 
öt8_t
 
	$wd_waô_u¡û_tx_∑ckë
()

692 
ƒk_sig_mask_t
 
evít
;

694 
	`ƒk_sig«l_ªgi°î
(
wd_tx_pkt_öfo_sig«l
);

695 
evít
=
	`ƒk_evít_waô
 (
	`SIG
(
wd_tx_pkt_öfo_sig«l
));

698 if((
evít
 & 
	`SIG
(
wd_tx_pkt_öfo_sig«l
)Ë=0 )  
NRK_ERROR
;

700  
NRK_OK
;

701 
	}
}

710 
öt8_t
 
	$wd_waô_u¡û_rx_∑ckë
()

712 
ƒk_sig_mask_t
 
evít
;

714 
	`ƒk_sig«l_ªgi°î
(
wd_rx_pkt_öfo_sig«l
);

715 
evít
=
	`ƒk_evít_waô
 (
	`SIG
(
wd_rx_pkt_öfo_sig«l
));

718 if((
evít
 & 
	`SIG
(
wd_rx_pkt_öfo_sig«l
)Ë=0 )  
NRK_ERROR
;

720  
NRK_OK
;

721 
	}
}

729 
uöt16_t
 
	$wd_gë_wö√r
()

731 
uöt16_t
 
w¥io
;

732 
	`ƒk_öt_dißbÀ
();

733 
w¥io
 = 
wö√r_¥io
;

734 
	`ƒk_öt_íabÀ
();

735  
w¥io
;

736 
	}
}

741 
öt8_t
 
	$wd_£t_ch™√l
(
uöt8_t
 
ch™√l
 )

743 
	`wdrf_£t_ch™√l
–
ch™√l
 );

744 
	}
}

751 
öt8_t
 
	$wd_£t_rf_powî
(
uöt8_t
 
powî
)

753 
	`wdrf_£t_powî
 ( 
powî
 );

754 
	}
}

759 
öt8_t
 
	$wd_£t_cˇ_thªsh
(
öt8_t
 
cˇ_thªsh
)

761 
	`wdrf_£t_cˇ_thr
 ( 
cˇ_thªsh
 );

762 
	}
}

768 
ölöe
 
	$wd_öt_timî_h™dÀr
()

770 
boﬁ
 
wö√r
;

774 
	`ƒk_öt_dißbÀ
();

777 
	`wdrf_Êush_rx_fifo
();

781 i‡(
	`wd_waô_sync
(Ë=
NRK_OK
) {

784 
wö√r
 = 
	`wd_do_tou∫amít
();

785 i‡(
wö√r
 =
åue
) {

786 i‡(
tx_œ°_ªsu…
 == 1) {

787 
	`ƒk_Àd_toggÀ
(
RED_LED
);

788 
	`ƒk_evít_sig«l
 ( 
wd_tx_pkt_öfo_sig«l
 );

791 i‡(
rx_œ°_ªsu…
 == 1) {

792 
	`ƒk_evít_sig«l
 ( 
wd_rx_pkt_öfo_sig«l
 );

797 
	`ƒk_öt_íabÀ
();

798 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/widom.h

40 #i‚de‡
_WIDOM_H


41 
	#_WIDOM_H


	)

43 
	~<widom_rf.h
>

51 
	#WD_SBD_CC2420
 1

52 
	#WD_SBD_RFLINX
 2

53 

	)

55 
	#WD_MBD_RFLINX
 3

56 
	#WD_MBD_CC2420
 5

57 
	#WD_MBD_EXT_SYNC
 4

58 

	)

60 
	#WD_VERSION
 
WD_SBD_CC2420


	)

63 #i‡
WD_VERSION
 =
WD_SBD_CC2420
 || WD_VERSION =
WD_SBD_RFLINX


64 
	#WD_SBD


	)

65 #i‡
WD_VERSION
 =
WD_SBD_RFLINX


66 
	#WD_USES_RADIO_RXLINX


	)

69 #i‡
WD_VERSION
 =
WD_MBD_EXT_SYNC
 || WD_VERSION =
WD_MBD_RFLINX
 || WD_VERSION =
WD_MBD_CC2420


70 
	#WD_MBD


	)

71 #i‡
WD_VERSION
 =
WD_MBD_RFLINX


72 
	#WD_USES_RADIO_RXLINX


	)

81 
	#DOMINANT_BIT
 0

	)

82 
	#RECESSIVE_BIT
 1

	)

85 
	#WD_MAX_BLOCKING_TIME_us
 150

86 
	#WD_SYNC_PULSE_RX_SWX_us
 256

87 

	)

88 #ifde‡
WD_SBD


89 
	#WD_SYNC_WITH_MASTER_MAX_ERROR
 400

91 #ifde‡
WD_MBD


	)

92 
	#WD_SYNC_WITH_MASTER_MAX_ERROR
 50

94 

	)

96 
	#NPRIOBITS
 3

	)

97 
	#MAX_NUM_PRIO_BITS
 16

	)

98 
	#INVALID_PRIO_INDEX
 
MAX_NUM_PRIO_BITS


	)

99 
	#INVALID_PRIO
 0xFFFF

	)

103 #i‡
WD_VERSION
 =
WD_SBD_CC2420
 || WD_VERSION =
WD_MBD_EXT_SYNC


106 
	#H_us
 320

107 
	#G_us
 60

108 
	#ETG_us
 400

109 

	)

111 #i‡
WD_VERSION
 =
WD_SBD_RFLINX


114 
	#H_us
 100

115 
	#G_us
 100

116 
	#ETG_us
 400

117 

	)

119 #i‡
WD_VERSION
 =
WD_MBD_RFLINX


122 
	#H_us
 166

123 
	#G_us
 111

124 
	#E_us
 56

125 
	#F_us
 9321

126 

	)

127 
	#TRX_us
 0

128 
	#TTX_us
 0

129 
	#TCS_us
 50

130 

	)

133 #i‡
WD_VERSION
 =
WD_MBD_CC2420


136 
	#H_us
 2119

137 
	#G_us
 921

138 
	#E_us
 496

139 
	#F_us
 39016

140 

	)

141 
	#TRX_us
 0

142 
	#TTX_us
 0

143 
	#TCS_us
 486

144 

	)

145 
	#MAX_TC
 100

	)

149 
	#CMSG_us
 
WD_MAX_MSG_LEN_us


150 
	#CSYNCMSG_us
 352

151 

	)

153 #ifde‡
WD_SBD


158 
	#WD_SYNC_PERIOD_us
 (((
NPRIOBITS
-1Ë* (
H_us
+
G_us
)+H_us+
ETG_us
)+
WD_MAX_MSG_LEN_us
+
WD_MAX_BLOCKING_TIME_us
+
WD_SYNC_PULSE_RX_SWX_us
+
WD_SYNC_WITH_MASTER_MAX_ERROR
)

	)

161 
	#WD_SYNC_MAX_WAIT_TIME_us
 1800

	)

165 #i‡
WD_VERSION
 =
WD_MBD_EXT_SYNC


169 
	#WD_SYNC_PERIOD_us
 10000

	)

174 
	#WD_PKT_MAX_WAIT_TIME_10us
 100

	)

185 
	#wd_¥io_bô
–
_¥i‹ôy
, 
_ödex
 ) (!(!(_¥i‹ôy & (1 << ((
NPRIOBITS
 - 1Ë- _ödex)))))

	)

190 
	#wd_wö√r_¥io
–
_v¨
, 
_bô_ödex
, 
_bô_vÆ
 ) { \

191 i‡(
_bô_vÆ
Ë((
_v¨
Ë|–
	`BM
(
_bô_ödex
))); \

192 ((
_v¨
Ë&(~
	`BM
(
_bô_ödex
))); \

193 }

	)

204 
öt8_t
 
wd_öô
(
uöt8_t
 
ch™√l
);

213 
öt8_t
 
wd_°¨ãd
();

218 
ƒk_sig_t
 
wd_gë_tx_sig«l
();

228 
öt8_t
 
wd_tx_∑ckë
(
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
¥i‹ôy
);

237 
öt8_t
 
wd_tx_∑ckë_íqueue
(
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
¥i‹ôy
);

246 
öt8_t
 
wd_waô_u¡û_tx_∑ckë
();

255 
öt8_t
 
wd_rx_pkt_£t_buf„r
(
uöt8_t
 *
buf
, uöt8_à
size
);

264 
uöt8_t
 *
wd_rx_pkt_gë
(uöt8_à*
Àn
, uöt8_à*
rssi
);

273 
öt8_t
 
wd_rx_pkt_ªady
();

281 
öt8_t
 
wd_rx_pkt_ªÀa£
();

290 
öt8_t
 
wd_waô_u¡û_rx_∑ckë
();

298 
uöt16_t
 
wd_gë_wö√r
();

303 
öt8_t
 
wd_£t_ch™√l
(
uöt8_t
 
ch™√l
);

310 
öt8_t
 
wd_£t_rf_powî
(
uöt8_t
 
powî
);

315 
öt8_t
 
wd_£t_cˇ_thªsh
(öt8_à
thªsh
);

330 
ölöe
 
öt8_t
 
wd_waô_sync
();

339 
ölöe
 
öt8_t
 
wd_waô_rx_pkt
();

348 
ölöe
 
wd_waô_u¡û
–
uöt16_t
 
whí_˛ktks
 );

355 
ölöe
 
wd_ˇºõr_⁄_u¡û
–
uöt16_t
 
whí_˛ktks
 );

364 
ölöe
 
boﬁ
 
wd_ˇºõr_£n£_u¡û
–
uöt16_t
 
whí_˛ktks
 );

378 
ölöe
 
boﬁ
 
wd_do_tou∫amít
();

384 
ölöe
 
uöt8_t
 
wd_mdb_do_¥Ÿocﬁ
();

390 
ölöe
 
wd_öt_timî_h™dÀr
();

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/hal/atmega128/wd_timer.c

41 
	~<ö˛ude.h
>

42 
	~<ƒk.h
>

43 
	~<wd_timî.h
>

44 
	~<wd_timî_˝u_˛k.h
>

46 
uöt16_t
 
	glogiˇl_time
 = 0;

47 
uöt16_t
 
	g≥riodic_time_off£t
 = 0;

48 
boﬁ
 
	gis_≥riodic_íabÀd
=
Ál£
;

50 
uöt16_t
 
	gÆ¨m_time
 = 0;

51 
boﬁ
 
	gis_Æ¨m_£t
 = 
Ál£
;

52 
uöt8_t
 
	gÆ¨m_ty≥
 = 0;

54 
uöt16_t
 
	gWD_CLOCK_TICKS
 = 
WD_CLOCK_TICK_TIME
/
CPU_CLOCK_TICK_TIME
;

60 
	$wd_timî_°¨t
()

62 
	`ƒk_öt_dißbÀ
();

64 
≥riodic_time_off£t
 = 0;

65 
logiˇl_time
 = 0;

66 
Æ¨m_time
 = 0;

67 
Æ¨m_ty≥
 = 0;

68 
is_Æ¨m_£t
 = 
Ál£
;

69 
is_≥riodic_íabÀd
 = 
Ál£
;

71 #i‡
USE_TIMER_COUNTER
 == 1

72 
TCCR1A
 = 0;

73 
TCNT1
 = 0;

74 
TIFR
&=~
	`BM
(
OCF1A
);

75 
TIMSK
|=
	`BM
(
OCIE1A
);

76 
OCR1A
 = (
uöt16_t
)(
WD_CLOCK_TICKS
);

77 
TCCR1B
 = 
TIMER_CLK_DIV1
;

78 
TCCR1B
 |
	`BM
(
WGM12
);

79 #ñi‡
USE_TIMER_COUNTER
 == 3

80 
TCCR3A
 = 0;

81 
TCNT3
 = 0;

82 
ETIFR
&=~
	`BM
(
OCF3A
);

83 
ETIMSK
|=
	`BM
(
OCIE3A
);

84 
OCR3A
 = (
uöt16_t
)(
WD_CLOCK_TICKS
);

85 
TCCR3B
 = 
TCLK_CPU_DIV
;

86 
TCCR3B
 |
	`BM
(
WGM32
);

91 
	`ƒk_öt_íabÀ
();

92 
	}
}

100 
	$wd_timî_°›
()

102 #i‡
USE_TIMER_COUNTER
 == 1

103 
TIFR
&=~
	`BM
(
OCF1A
);

104 
TIMSK
&=~
	`BM
(
TOIE1
);

105 
TIMSK
&=~
	`BM
(
OCIE1A
);

106 
TCNT1
 = 0;

107 #ñi‡
USE_TIMER_COUNTER
 == 3

108 
ETIFR
&=~
	`BM
(
OCF3A
);

109 
ETIMSK
&=~
	`BM
(
TOIE3
);

110 
ETIMSK
&=~
	`BM
(
OCIE3A
);

111 
TCNT3
 = 0;

115 
	}
}

129 
	$wd_timî_°¨t_≥riodic
(
uöt16_t
 
off£t_˛ktks
)

131 
≥riodic_time_off£t
 = (
uöt16_t
)(
off£t_˛ktks
);

132 
is_≥riodic_íabÀd
 = 
åue
;

133 
	}
}

140 
	$wd_timî_°›_≥riodic
()

142 
is_≥riodic_íabÀd
 = 
Ál£
;

143 
	}
}

150 
uöt16_t
 
	$wd_timî_logiˇl_time_gë
()

152  
logiˇl_time
;

153 
	}
}

160 
	$wd_timî_logiˇl_time_£t
(
uöt16_t
 
time_˛kTks
)

162 
logiˇl_time
 = 
time_˛kTks
;

163 
	}
}

170 
	$wd_timî_logiˇl_time_ª£t
()

172 
logiˇl_time
=0;

173 
	}
}

185 
	$wd_timî_£t_Æ¨m
(
uöt32_t
 
whí_˛kTks
, 
uöt8_t
 
ty≥
)

187 
Æ¨m_time
 = 
whí_˛kTks
;

188 
Æ¨m_ty≥
 = 
ty≥
;

189 
is_Æ¨m_£t
 = 
åue
;

190 
	}
}

197 
	$wd_timî_ˇn˚l_Æ¨m
()

199 
is_Æ¨m_£t
 = 
Ál£
;

200 
	}
}

207 
boﬁ
 
	$wd_timî_is_Æ¨m_£t
()

209  
is_Æ¨m_£t
;

210 
	}
}

215 #i‡
USE_TIMER_COUNTER
 == 1

216 
	$SIGNAL
(
SIG_OUTPUT_COMPARE1A
)

217 #ñi‡
USE_TIMER_COUNTER
 == 3

218 
	$SIGNAL
(
SIG_OUTPUT_COMPARE3A
)

223 
boﬁ
 
do_Æ¨m_ˇŒback
=
Ál£
;

227 
logiˇl_time
++;

229 i‡(
is_Æ¨m_£t
 =
åue
) {

230 i‡(
logiˇl_time
 >
Æ¨m_time
-1) {

231 
is_Æ¨m_£t
 = 
Ál£
;

232 
	`Æ¨m_ˇŒback
(
Æ¨m_ty≥
);

236 i‡(
is_≥riodic_íabÀd
 =
åue
) {

237 i‡(
≥riodic_time_off£t
 > 0)Öeriodic_time_offset--;

238 
	`≥riodic_ˇŒback
();

241 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/hal/atmega128/wd_timer.h

36 #i‚de‡
_WD_TIMER_H


37 
	#_WD_TIMER_H


	)

39 
	~<hÆ.h
>

40 
	~<wd_timî_˝u_˛k.h
>

45 
	#WD_CLOCK_TICK_TIME
 0.000032

	)

48 
ölöe
 
Æ¨m_ˇŒback
(
uöt8_t
 
Æ¨m_ty≥
);

49 
ölöe
 
≥riodic_ˇŒback
();

61 
wd_timî_°¨t
();

69 
wd_timî_°›
();

76 
wd_timî_°¨t_≥riodic
(
uöt16_t
 
off£t_˛ktks
);

83 
wd_timî_°›_≥riodic
();

90 
uöt16_t
 
wd_timî_logiˇl_time_gë
();

97 
wd_timî_logiˇl_time_£t
(
uöt16_t
 
time_˛kTks
);

104 
wd_timî_logiˇl_time_ª£t
();

118 
wd_timî_£t_Æ¨m
(
uöt32_t
 
whí_˛kTks
, 
uöt8_t
 
ty≥
);

125 
wd_timî_ˇn˚l_Æ¨m
();

132 
boﬁ
 
wd_timî_is_Æ¨m_£t
();

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/hal/atmega1281/wd_timer.c

41 
	~<ö˛ude.h
>

42 
	~<ƒk.h
>

43 
	~<wd_timî.h
>

44 
	~<wd_timî_˝u_˛k.h
>

46 
uöt16_t
 
	glogiˇl_time
 = 0;

47 
uöt16_t
 
	g≥riodic_time_off£t
 = 0;

48 
boﬁ
 
	gis_≥riodic_íabÀd
=
Ál£
;

50 
uöt16_t
 
	gÆ¨m_time
 = 0;

51 
boﬁ
 
	gis_Æ¨m_£t
 = 
Ál£
;

52 
uöt8_t
 
	gÆ¨m_ty≥
 = 0;

54 
uöt16_t
 
	gWD_CLOCK_TICKS
 = 
WD_CLOCK_TICK_TIME
/
CPU_CLOCK_TICK_TIME
;

60 
	$wd_timî_°¨t
()

62 
	`ƒk_öt_dißbÀ
();

64 
≥riodic_time_off£t
 = 0;

65 
logiˇl_time
 = 0;

66 
Æ¨m_time
 = 0;

67 
Æ¨m_ty≥
 = 0;

68 
is_Æ¨m_£t
 = 
Ál£
;

69 
is_≥riodic_íabÀd
 = 
Ál£
;

71 #i‡
USE_TIMER_COUNTER
 == 1

72 
TCCR1A
 = 0;

73 
TCNT1
 = 0;

74 
TIFR1
&=~
	`BM
(
OCF1A
);

75 
TIMSK1
|=
	`BM
(
OCIE1A
);

76 
OCR1A
 = (
uöt16_t
)(
WD_CLOCK_TICKS
);

77 
TCCR1B
 = 
TIMER_CLK_DIV1
;

78 
TCCR1B
 |
	`BM
(
WGM12
);

79 #ñi‡
USE_TIMER_COUNTER
 == 3

80 
TCCR3A
 = 0;

81 
TCNT3
 = 0;

82 
TIFR3
&=~
	`BM
(
OCF3A
);

83 
TIMSK3
|=
	`BM
(
OCIE3A
);

84 
OCR3A
 = (
uöt16_t
)(
WD_CLOCK_TICKS
);

85 
TCCR3B
 = 
TCLK_CPU_DIV
;

86 
TCCR3B
 |
	`BM
(
WGM32
);

91 
	`ƒk_öt_íabÀ
();

92 
	}
}

100 
	$wd_timî_°›
()

102 #i‡
USE_TIMER_COUNTER
 == 1

103 
TIFR1
&=~
	`BM
(
OCF1A
);

104 
TIMSK1
&=~
	`BM
(
TOIE1
);

105 
TIMSK1
&=~
	`BM
(
OCIE1A
);

106 
TCNT1
 = 0;

107 #ñi‡
USE_TIMER_COUNTER
 == 3

108 
TIFR3
&=~
	`BM
(
OCF3A
);

109 
TIMSK3
&=~
	`BM
(
TOIE3
);

110 
TIMSK3
&=~
	`BM
(
OCIE3A
);

111 
TCNT3
 = 0;

115 
	}
}

129 
	$wd_timî_°¨t_≥riodic
(
uöt16_t
 
off£t_˛ktks
)

131 
≥riodic_time_off£t
 = (
uöt16_t
)(
off£t_˛ktks
);

132 
is_≥riodic_íabÀd
 = 
åue
;

133 
	}
}

140 
	$wd_timî_°›_≥riodic
()

142 
is_≥riodic_íabÀd
 = 
Ál£
;

143 
	}
}

150 
uöt16_t
 
	$wd_timî_logiˇl_time_gë
()

152  
logiˇl_time
;

153 
	}
}

160 
	$wd_timî_logiˇl_time_£t
(
uöt16_t
 
time_˛kTks
)

162 
logiˇl_time
 = 
time_˛kTks
;

163 
	}
}

170 
	$wd_timî_logiˇl_time_ª£t
()

172 
logiˇl_time
=0;

173 
	}
}

185 
	$wd_timî_£t_Æ¨m
(
uöt32_t
 
whí_˛kTks
, 
uöt8_t
 
ty≥
)

187 
Æ¨m_time
 = 
whí_˛kTks
;

188 
Æ¨m_ty≥
 = 
ty≥
;

189 
is_Æ¨m_£t
 = 
åue
;

190 
	}
}

197 
	$wd_timî_ˇn˚l_Æ¨m
()

199 
is_Æ¨m_£t
 = 
Ál£
;

200 
	}
}

207 
boﬁ
 
	$wd_timî_is_Æ¨m_£t
()

209  
is_Æ¨m_£t
;

210 
	}
}

215 #i‡
USE_TIMER_COUNTER
 == 1

216 
	$SIGNAL
(
SIG_OUTPUT_COMPARE1A
)

217 #ñi‡
USE_TIMER_COUNTER
 == 3

218 
	$SIGNAL
(
SIG_OUTPUT_COMPARE3A
)

226 
logiˇl_time
++;

228 i‡(
is_Æ¨m_£t
 =
åue
) {

229 i‡(
logiˇl_time
 >
Æ¨m_time
-1) {

230 
is_Æ¨m_£t
 = 
Ál£
;

231 
	`Æ¨m_ˇŒback
(
Æ¨m_ty≥
);

235 i‡(
is_≥riodic_íabÀd
 =
åue
) {

236 i‡(
≥riodic_time_off£t
 > 0)Öeriodic_time_offset--;

237 
	`≥riodic_ˇŒback
();

240 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/hal/atmega1281/wd_timer.h

36 #i‚de‡
_WD_TIMER_H


37 
	#_WD_TIMER_H


	)

39 
	~<hÆ.h
>

40 
	~<wd_timî_˝u_˛k.h
>

45 
	#WD_CLOCK_TICK_TIME
 0.000032

	)

48 
ölöe
 
Æ¨m_ˇŒback
(
uöt8_t
 
Æ¨m_ty≥
);

49 
ölöe
 
≥riodic_ˇŒback
();

61 
wd_timî_°¨t
();

69 
wd_timî_°›
();

76 
wd_timî_°¨t_≥riodic
(
uöt16_t
 
off£t_˛ktks
);

83 
wd_timî_°›_≥riodic
();

90 
uöt16_t
 
wd_timî_logiˇl_time_gë
();

97 
wd_timî_logiˇl_time_£t
(
uöt16_t
 
time_˛kTks
);

104 
wd_timî_logiˇl_time_ª£t
();

118 
wd_timî_£t_Æ¨m
(
uöt32_t
 
whí_˛kTks
, 
uöt8_t
 
ty≥
);

125 
wd_timî_ˇn˚l_Æ¨m
();

132 
boﬁ
 
wd_timî_is_Æ¨m_£t
();

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/platform/firefly2/wd_timer_cpu_clk.h

40 #i‚de‡
_WD_TIMER_CPU_CLK_H


41 
	#_WD_TIMER_CPU_CLK_H


	)

43 
	~<hÆ.h
>

46 
	#USE_TIMER_COUNTER
 3

	)

48 
	#TCLK_CPU_DIV
 
TIMER_CLK_DIV8


	)

50 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV1


52 
	#CPU_CLOCK_TICK_TIME
 0.000000125

	)

55 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV8


57 
	#CPU_CLOCK_TICK_TIME
 0.000001

	)

60 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV64


62 
	#CPU_CLOCK_TICK_TIME
 0.000008

	)

65 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV256


67 
	#CPU_CLOCK_TICK_TIME
 0.000032

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/platform/firefly2_2/wd_timer_cpu_clk.h

40 #i‚de‡
_WD_TIMER_CPU_CLK_H


41 
	#_WD_TIMER_CPU_CLK_H


	)

43 
	~<hÆ.h
>

46 
	#USE_TIMER_COUNTER
 3

	)

48 
	#TCLK_CPU_DIV
 
TIMER_CLK_DIV8


	)

50 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV1


52 
	#CPU_CLOCK_TICK_TIME
 0.000000125

	)

55 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV8


57 
	#CPU_CLOCK_TICK_TIME
 0.000001

	)

60 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV64


62 
	#CPU_CLOCK_TICK_TIME
 0.000008

	)

65 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV256


67 
	#CPU_CLOCK_TICK_TIME
 0.000032

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/platform/micaZ/wd_timer_cpu_clk.h

40 #i‚de‡
_BASIC_TIMER_H


41 
	#_BASIC_TIMER_H


	)

43 
	~<hÆ.h
>

46 
	#USE_TIMER_COUNTER
 3

	)

48 
	#TCLK_CPU_DIV
 
TIMER_CLK_DIV8


	)

50 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV1


52 
	#CPU_CLOCK_TICK_TIME
 0.000000136

	)

55 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV8


57 
	#CPU_CLOCK_TICK_TIME
 0.000001085

	)

60 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV64


62 
	#CPU_CLOCK_TICK_TIME
 0.00000868

	)

65 #i‡
TCLK_CPU_DIV
 =
TIMER_CLK_DIV256


67 
	#CPU_CLOCK_TICK_TIME
 0.000034722

	)

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/radio/cc2420/wd_rf.c

36 
	~<ö˛ude.h
>

37 
	~<ulib.h
>

38 
	~<ƒk.h
>

39 
	~<ƒk_îr‹.h
>

40 
	~<widom.h
>

41 
	~<wd_rf.h
>

42 
	~<wd_timî.h
>

44 
	#SIZE_FCS
 2

	)

45 
	#SIZE_SYNC_PKT_PAYLOAD
 3

	)

47 
	#SYNC_PKT_TYPE
 0xAA

	)

48 
	#BCAST_ADDR
 0xFFFF

	)

50 
	#CC2420_DEF_FCF
 0x0821

51 

	)

52 
öt8_t
 
	gsync_£q_˙t
=1;

54 
öt8_t
 
	gtxSeqNumbî
=0;

56 
öt8_t
 
	gcˇ_°©e
;

58 
boﬁ
 
	gfif›_öd
=
Ál£
;

59 
uöt8_t
 
	gwaô_tx
=0;

61 
	#TIME_UNTIL_CCA_VALID_us
 192

	)

62 
uöt16_t
 
	gTIME_UNTIL_CCA_VALID
 = ( 
TIME_UNTIL_CCA_VALID_us
 / 1000000.0Ë/ 
WD_CLOCK_TICK_TIME
 + 1;

64 
	#TIME_UNTIL_START_TX_us
 128

	)

65 
uöt16_t
 
	gTIME_UNTIL_START_TX
 = ( 
TIME_UNTIL_START_TX_us
 / 1000000.0Ë/ 
WD_CLOCK_TICK_TIME
 + 1;

72 
	$wdrf_öô
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
)

74 
	`rf_öô
(
pRRI
, 
ch™√l
, 0x1111, 
NODE_ADDR
);

77 
	`ƒk_öt_dißbÀ
();

81 
	`FASTSPI_SETREG
(
CC2420_RSSI
, 0xE580);

83 
	`FASTSPI_SETREG
(
CC2420_TXCTRL
, 0x80FF);

84 
	`FASTSPI_SETREG
(
CC2420_RXCTRL1
, 0x0A56);

86 
	`wdrf_Êush_rx_fifo
();

89 
	`ƒk_öt_íabÀ
();

92 
	`DISABLE_FIFOP_INT
();

93 
	}
}

98 
ölöe
 
	$wdrf_Êush_rx_fifo
()

100 
uöt8_t
 
tmp
;

102 
	`FASTSPI_READ_FIFO_BYTE
(
tmp
);

103 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

104 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

105 
fif›_öd
=
Ál£
;

106 
	}
}

111 
ölöe
 
	$wdrf_Êush_tx_fifo
()

113 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

114 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

115 
	}
}

122 
ölöe
 
	$wdrf_ã°_mode
()

124 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

132 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL1
, 0x0508);

133 
	`FASTSPI_SETREG
(
CC2420_DACTST
, 0x1800);

134 
	`wdrf_Êush_rx_fifo
();

135 
	}
}

142 
ölöe
 
	$wdrf_d©a_mode
() {

143 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

144 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL1
, 0x0500);

145 
	`FASTSPI_SETREG
(
CC2420_DACTST
, 0);

146 
	`wdrf_Êush_rx_fifo
();

147 
	}
}

153 
ölöe
 
	$wdrf_ˇºõr_⁄
()

155 
	`FASTSPI_STROBE
(
CC2420_STXON
);

156 
	}
}

161 
ölöe
 
	$wdrf_°p
()

163 
	`wd_timî_°›_≥riodic
();

164 
waô_tx
 = 0;

166 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

167 
	}
}

172 
ölöe
 
	$wdrf_£t_rcv
()

174 
	`FASTSPI_STROBE
(
CC2420_SRXON
);

176 
cˇ_°©e
 = -1;

177 
	`wd_timî_°¨t_≥riodic
(
TIME_UNTIL_CCA_VALID
);

178 
	}
}

183 
	$wdrf_£t_ch™√l
–
uöt8_t
 
ch™√l
 )

185 
uöt16_t
 
f
;

187 
	`wdrf_°p
();

190 
f
 = (
uöt16_t
Ë(
ch™√l
 - 11);

191 
f
 = f + (f << 2);

192 
f
 = f + 357 + 0x4000;

195 
	`FASTSPI_SETREG
(
CC2420_FSCTRL
, 
f
);

196 
	}
}

205 
	$wdrf_£t_powî
(
uöt8_t
 
powî
)

207 
uöt16_t
 
ªg_vÆ
;

209 i‡(
powî
 > 31) ;

211 
ªg_vÆ
=0xA0E0;

212 
ªg_vÆ
ªg_vÆ | (
powî
 & 
CC2420_TXCTRL_PAPWR_MASK
);

214 
	`FASTSPI_SETREG
(
CC2420_TXCTRL
, 
ªg_vÆ
);

215 
	}
}

220 
	$wdrf_£t_cˇ_thr
(
öt8_t
 
cˇ_thr
)

222 
uöt16_t
 
ªg_vÆ
 = (
cˇ_thr
<<
CC2420_RSSI_CCA_THRESH
) | 0x80;

224 
	`FASTSPI_SETREG
(
CC2420_RSSI
, 
ªg_vÆ
);

225 
	}
}

236 
ölöe
 
boﬁ
 
	$wdrf_cˇ
()

238  (
CCA_IS_1
);

239 
	}
}

248 
ölöe
 
boﬁ
 
	$wdrf_sfd
()

250  (
SFD_IS_1
);

251 
	}
}

262 
uöt8_t
 
	$wdrf_tx_sync_∑ckë
()

264 
uöt8_t
 
∑ckëLígth
, 
ty≥
=
SYNC_PKT_TYPE
;

268 
	`FASTSPI_STROBE
 (
CC2420_SRFOFF
);

271 
	`wdrf_Êush_rx_fifo
();

272 
	`wdrf_Êush_tx_fifo
();

275 
	`ƒk_öt_dißbÀ
();

277 
	`FASTSPI_STROBE
 (
CC2420_STXON
);

279 i‡(
sync_£q_˙t
 <= 0) sync_seq_cnt=1;

282 
∑ckëLígth
 = 
SIZE_SYNC_PKT_PAYLOAD
 + 
SIZE_FCS
;

283 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
∑ckëLígth
, 1);

284 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
∑ckëLígth
, 1);

285 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
ty≥
, 1);

286 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
sync_£q_˙t
, 1);

289 !
SFD_IS_1
);

292 
SFD_IS_1
);

293 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

295 
sync_£q_˙t
++;

297 
	`ƒk_öt_íabÀ
();

299 
	}
}

321 
uöt8_t
 
	$wdrf_tx_∑ckë
(
RF_TX_INFO
 *
pRTI
) {

322 
uöt16_t
 
‰ameC⁄åﬁFõld
, 
∑nId
=
BCAST_ADDR
, 
myAddr
=
NODE_ADDR
;

323 
uöt8_t
 
∑ckëLígth
;

324 
uöt8_t
 
checksum
,
i
;

327 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

328 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

331 
	`FASTSPI_STROBE
 (
CC2420_SRFOFF
);

334 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

335 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

337 
checksum
=0;

338 
i
=0; i<
pRTI
->
Àngth
; i++ )

341 
checksum
+=
pRTI
->
pPaylﬂd
[
i
];

345 
∑ckëLígth
 = 
pRTI
->
Àngth
 + 
RF_PACKET_OVERHEAD_SIZE
 + 
CHECKSUM_OVERHEAD
;

346 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*)&
∑ckëLígth
, 1);

347 
‰ameC⁄åﬁFõld
 = 
CC2420_DEF_FCF
;

348 
‰ameC⁄åﬁFõld
 = 
RF_FCF_NOACK
;

349 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
‰ameC⁄åﬁFõld
, 2);

350 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
txSeqNumbî
, 1);

351 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
∑nId
, 2);

352 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
pRTI
->
de°Addr
, 2);

353 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
myAddr
, 2);

354 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë
pRTI
->
pPaylﬂd
,ÖRTI->
Àngth
);

355 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
checksum
, 1);

357 
	`FASTSPI_STROBE
 (
CC2420_STXON
);

377 
waô_tx
=1;

378 
	`wd_timî_°¨t_≥riodic
(
TIME_UNTIL_START_TX
);

380 
txSeqNumbî
++;

382  
NRK_OK
;

383 
	}
}

388 
	$wdrf_pﬁlög_rx_⁄
()

390 
	`FASTSPI_STROBE
(
CC2420_SRXON
);

391 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

392 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

393 
	}
}

398 
öt8_t
 
	$wdrf_pﬁlög_rx_∑ckë
()

400 
fif›_öd
=
Ál£
;

403  
	`rf_pﬁlög_rx_∑ckë
();

404 
	}
}

410 
ölöe
 
	$≥riodic_ˇŒback
()

414 i‡(
waô_tx
 == 0) {

415 i‡(
CCA_IS_1
 !
cˇ_°©e
) {

416 
cˇ_°©e
 = (
boﬁ
)
CCA_IS_1
;

417 i‡(
cˇ_°©e
 =
åue
) {

418 
	`wd_do_¥Ÿocﬁ
(
MSG_TYPE_RADIO_CHANNEL_IDLE
);

420 
	`wd_do_¥Ÿocﬁ
(
MSG_TYPE_RADIO_CHANNEL_BUSY
);

423 i‡(
FIFOP_IS_1
 && 
fif›_öd
 =
Ál£
) {

424 i‡(!(
FIFO_IS_1
)) {

425 
	`wdrf_Êush_rx_fifo
();

426 
fif›_öd
 =
åue
;

428 
fif›_öd
=
åue
;

429 
	`wd_do_¥Ÿocﬁ
(
MSG_TYPE_RADIO_END_RX
);

433 i‡(
waô_tx
 =1 && 
SFD_IS_1
) wait_tx = 2;

434 i‡(
waô_tx
 =2 && !
SFD_IS_1
) {

435 
waô_tx
 = 0;

436 
	`wd_do_¥Ÿocﬁ
(
MSG_TYPE_RADIO_END_TX
);

439 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/radio/cc2420/wd_rf.h

36 #i‚de‡
_WIDOM_RF_H


37 
	#_WIDOM_RF_H


	)

39 
	~<ö˛ude.h
>

40 
	~<widom.h
>

41 
	~<ƒk.h
>

42 
	~<basic_rf.h
>

43 
	~<wd_rf.h
>

46 
	#WD_MAX_PKT_SIZE
 128

	)

48 
	#BYTE_TIME_us
 32

	)

51 
	#WD_CHANNEL
 0x0F

	)

53 
	#WD_SYNC_CHANNEL
 
WD_CHANNEL


	)

55 
	#WD_DATA_CHANNEL
 
WD_CHANNEL


	)

58 
	#WD_MAX_MSG_LEN_us
 4224

59 

	)

61 
	#CC2420_TXCTRL_PAPWR
 0

63 
	#CC2420_TXCTRL_PAPWR_MASK
 0x1F

	)

66 
	#CC2420_RSSI_CCA_THRESH
 8

67 

	)

69 
	#WDRF_SAMPLING_PERIOD_us
 32

	)

76 
wdrf_öô
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
);

81 
ölöe
 
wdrf_Êush_rx_fifo
();

86 
ölöe
 
wdrf_Êush_tx_fifo
();

93 
ölöe
 
wdrf_ã°_mode
();

100 
ölöe
 
wdrf_d©a_mode
();

106 
ölöe
 
wdrf_ˇºõr_⁄
();

111 
ölöe
 
wdrf_°p
();

116 
ölöe
 
wdrf_£t_rcv
();

121 
wdrf_£t_ch™√l
–
uöt8_t
 
ch™√l
 );

130 
wdrf_£t_powî
(
uöt8_t
 
powî
);

135 
wdrf_£t_cˇ_thr
(
öt8_t
 
cˇ_thr
);

146 
ölöe
 
boﬁ
 
wdrf_cˇ
();

155 
ölöe
 
boﬁ
 
wdrf_sfd
();

167 
öt8_t
 
wdrf_pﬁl_synch_∑ckë_rx
();

189 
uöt8_t
 
wdrf_tx_∑ckë
(
RF_TX_INFO
 *
pRTI
);

194 
wdrf_pﬁlög_rx_⁄
();

199 
öt8_t
 
wdrf_pﬁlög_rx_∑ckë
();

205 
ölöe
 
≥riodic_ˇŒback
();

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/widom.c

54 
	~<ö˛ude.h
>

55 
	~<ulib.h
>

56 
	~<ƒk.h
>

57 
	~<ƒk_timî.h
>

58 
	~<ƒk_evíts.h
>

59 
	~<ƒk_îr‹.h
>

60 
	~<°dio.h
>

61 
	~<widom.h
>

62 
	~<wd_rf.h
>

63 
	~<wd_timî.h
>

66 
uöt8_t
 
	g°©e
 = 0;

68 
uöt8_t
 
	gi
 = 0;

71 
uöt8_t
 
	gtx_∑ckë
 = 
Ál£
;

73 
uöt16_t
 
	g¥io
=
INVALID_PRIO
;

75 
uöt8_t
 
	g¥io_i
 = 0;

77 
uöt8_t
 
	gwö√r
 = 0;

79 
uöt8_t
 
	gli°í
 = 0;

81 
uöt16_t
 
	gwö√r_¥io
=
INVALID_PRIO
;

83 
RF_TX_INFO
 
	gtx_pkt_öfo
;

86 vﬁ©ûê
öt8_t
 
	grx_∑ckë
 = -1;

88 
RF_RX_INFO
 
	grx_pkt_öfo
;

91 
ƒk_sig_t
 
	gwd_rx_pkt_öfo_sig«l
;

93 
ƒk_sig_t
 
	gwd_tx_pkt_öfo_sig«l
;

96 c⁄° 
uöt32_t
 
	gE
 = ( 
E_us
 / 1000000.0Ë/ 
WD_CLOCK_TICK_TIME
 + 1;

97 c⁄° 
uöt32_t
 
	gF
 = ( 
F_us
 / 1000000.0Ë/ 
WD_CLOCK_TICK_TIME
 + 1 ;

98 c⁄° 
uöt32_t
 
	gH
 = ( 
H_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

99 c⁄° 
uöt32_t
 
	gG
 = ( 
G_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

100 c⁄° 
uöt32_t
 
	gTFCS
 = ( 
TFCS_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

101 c⁄° 
uöt32_t
 
	gSWX
 = ( 
SWX_us
 / 1000000.0 ) / 
WD_CLOCK_TICK_TIME
 + 1;

102 c⁄° 
uöt32_t
 
	gCMSG
 = ( 
CMSG_us
 / 1000000.0Ë/ 
WD_CLOCK_TICK_TIME
 + 1;

103 c⁄° 
uöt32_t
 
	gETG
 = ( 
ETG_us
 / 1000000.0Ë/ 
WD_CLOCK_TICK_TIME
 + 1;

109 
öt8_t
 
	$wd_öô
(
uöt8_t
 
ch™√l
)

112 
	`ƒk_öt_dißbÀ
();

114 
	`wdrf_öô
(&
rx_pkt_öfo
, 
ch™√l
);

116 
rx_∑ckë
=0;

118 
wd_rx_pkt_öfo_sig«l
=
	`ƒk_sig«l_¸óã
();

119 if(
wd_rx_pkt_öfo_sig«l
==
NRK_ERROR
) {

120 
	`ƒk_k¥ötf
(
	`PSTR
("WD ERROR: creatingÑx signal failed\r\n"));

121  
NRK_ERROR
;

123 
wd_tx_pkt_öfo_sig«l
=
	`ƒk_sig«l_¸óã
();

124 if(
wd_tx_pkt_öfo_sig«l
==
NRK_ERROR
)

126 
	`ƒk_k¥ötf
(
	`PSTR
("WD ERROR: creatingÅx signal failed\r\n"));

127  
NRK_ERROR
;

130 
	`wd_£t_a˘ive
();

132  
NRK_OK
;

133 
	}
}

142 
öt8_t
 
	$wd_°¨ãd
()

144 i‡(
wd_tx_pkt_öfo_sig«l
 !
NRK_ERROR
)  1;

146 
	}
}

155 
öt8_t
 
	$wd_£t_idÀ
()

157 i‡(
	`wd_°¨ãd
(Ë=
Ál£
Ë 
NRK_ERROR
;

159 
	`ƒk_öt_dißbÀ
();

161 
	`wdrf_°p
();

162 
	`wd_timî_°›
();

164 
	`ƒk_öt_íabÀ
();

166  
NRK_OK
;

167 
	}
}

175 
öt8_t
 
	$wd_£t_a˘ive
()

177 
	`ƒk_öt_dißbÀ
();

179 i‡(
	`wd_°¨ãd
(Ë=
Ál£
Ë 
NRK_ERROR
;

181 
	`wd_timî_°¨t
();

182 
°©e
=0;

184 
	`ƒk_öt_íabÀ
();

186 
	`wd_do_¥Ÿocﬁ
(
MSG_TYPE_MAC_STATE_ENTER
);

187  
NRK_OK
;

188 
	}
}

190 
	$¥öt_mt
(
uöt8_t
 
mesßgeTy≥
)

192 
mesßgeTy≥
) {

193 
MSG_TYPE_DATA_MSG
:

194 
	`¥ötf
("MSG_TYPE_DATA_MSG");

196 
MSG_TYPE_MAC_QUEUE
:

197 
	`¥ötf
("MAC_QUEUE");

199 
MSG_TYPE_MAC_WAIT_TIME_E
:

200 
	`¥ötf
("MAC_WAIT_TIME_E");

202 
MSG_TYPE_MAC_WAIT_TIME_F
:

203 
	`¥ötf
("MAC_WAIT_TIME_F");

205 
MSG_TYPE_MAC_WAIT_TIME_G
:

206 
	`¥ötf
("MAC_WAIT_TIME_G");

208 
MSG_TYPE_MAC_WAIT_TIME_H
:

209 
	`¥ötf
("MAC_WAIT_TIME_H");

211 
MSG_TYPE_MAC_WAIT_TIME_R
:

212 
	`¥ötf
("MAC_WAIT_TIME_R");

214 
MSG_TYPE_MAC_WAIT_TIME_SWX
:

215 
	`¥ötf
("MAC_WAIT_TIME_SWX");

217 
MSG_TYPE_MAC_WAIT_TIME_TFCS
:

218 
	`¥ötf
("MAC_WAIT_TIME_TFCS");

220 
MSG_TYPE_MAC_WAIT_TIME_ETG
:

221 
	`¥ötf
("MAC_WAIT_TIME_ETG");

223 
MSG_TYPE_MAC_WAIT_TIME_ENDTXRX
:

224 
	`¥ötf
("MAC_WAIT_TIME_ENDTXRX");

226 
MSG_TYPE_MAC_STATE_ENTER
:

227 
	`¥ötf
("MAC_STATE_ENTER");

231 
MSG_TYPE_RADIO_CHANNEL_IDLE
:

232 
	`¥ötf
("RADIO_CHANNEL_IDLE");

234 
MSG_TYPE_RADIO_CHANNEL_BUSY
:

235 
	`¥ötf
("RADIO_CHANNEL_BUSY");

237 
MSG_TYPE_RADIO_END_RX
:

238 
	`¥ötf
("RADIO_END_RX");

240 
MSG_TYPE_RADIO_END_TX
:

241 
	`¥ötf
("RADIO_END_TX");

244 
MSG_TYPE_MAC_DO_ASSERT
:

245 
	`¥ötf
("MAC_DO_ASSERT");

248 
	}
}

258 
ölöe
 
	$wd_do_¥Ÿocﬁ
(
uöt8_t
 
mesßgeTy≥
)

264 
°©e
) {

265 
MAC_STATE_0
:

266 
mesßgeTy≥
) {

267 
MSG_TYPE_MAC_STATE_ENTER
:

268 
	`wd_timî_ˇn˚l_Æ¨m
();

269 
	`wdrf_ã°_mode
();

270 
	`wdrf_£t_rcv
();

271 
	`toSèã
(1);

275 
MAC_STATE_1
:

276 
mesßgeTy≥
) {

277 
MSG_TYPE_MAC_STATE_ENTER
:

278 
	`wd_timî_logiˇl_time_ª£t
();

280 
MSG_TYPE_RADIO_END_RX
:

281 
	`wd_timî_ˇn˚l_Æ¨m
();

282 i‡(
	`wdrf_pﬁlög_rx_∑ckë
() == 1) {

283 
rx_∑ckë
=1;

284 
	`ƒk_evít_sig«l
–
wd_rx_pkt_öfo_sig«l
 );

286 
MSG_TYPE_RADIO_CHANNEL_IDLE
:

287 
	`wd_timî_logiˇl_time_ª£t
();

288 
	`wd_timî_£t_Æ¨m
(
TFCS
, 
MSG_TYPE_MAC_WAIT_TIME_TFCS
);

290 
MSG_TYPE_RADIO_CHANNEL_BUSY
:

291 
	`wd_timî_ˇn˚l_Æ¨m
();

292 
	`wd_timî_logiˇl_time_ª£t
();

294 
MSG_TYPE_MAC_WAIT_TIME_TFCS
:

295 
	`wd_timî_logiˇl_time_ª£t
();

296 
	`toSèã
(2);

300 
MAC_STATE_2
:

301 
mesßgeTy≥
) {

302 
MSG_TYPE_MAC_STATE_ENTER
:

303 
	`wd_timî_£t_Æ¨m
(
F
, 
MSG_TYPE_MAC_WAIT_TIME_F
);

305 
MSG_TYPE_RADIO_END_RX
:

306 
	`wd_timî_ˇn˚l_Æ¨m
();

307 i‡(
	`wdrf_pﬁlög_rx_∑ckë
() == 1) {

308 
rx_∑ckë
=1;

309 
	`ƒk_evít_sig«l
–
wd_rx_pkt_öfo_sig«l
 );

311 
	`wd_timî_logiˇl_time_ª£t
();

312 
	`wd_timî_£t_Æ¨m
(
TFCS
, 
MSG_TYPE_MAC_WAIT_TIME_TFCS
);

313 
	`toSèã
(1);

315 
MSG_TYPE_RADIO_CHANNEL_BUSY
:

316 
	`wd_timî_logiˇl_time_ª£t
();

317 
	`wd_timî_ˇn˚l_Æ¨m
();

318 
	`toSèã
(1);

320 
MSG_TYPE_MAC_WAIT_TIME_F
:

321 
	`wd_timî_logiˇl_time_ª£t
();

322 
	`toSèã
(3);

326 
MAC_STATE_3
:

327 
mesßgeTy≥
) {

328 
MSG_TYPE_MAC_STATE_ENTER
:

329 
	`wd_timî_£t_Æ¨m
(
E
, 
MSG_TYPE_MAC_WAIT_TIME_E
);

331 
MSG_TYPE_RADIO_CHANNEL_BUSY
:

332 
	`wd_timî_ˇn˚l_Æ¨m
();

333 
	`wd_timî_logiˇl_time_ª£t
();

334 
	`toSèã
(5);

336 
MSG_TYPE_RADIO_END_RX
:

337 
	`wd_timî_ˇn˚l_Æ¨m
();

338 i‡(
	`wdrf_pﬁlög_rx_∑ckë
() == 1) {

339 
rx_∑ckë
=1;

340 
	`ƒk_evít_sig«l
–
wd_rx_pkt_öfo_sig«l
 );

342 
	`wd_timî_logiˇl_time_ª£t
();

343 
	`wd_timî_£t_Æ¨m
(
TFCS
, 
MSG_TYPE_MAC_WAIT_TIME_TFCS
);

344 
	`toSèã
(1);

346 
MSG_TYPE_MAC_QUEUE
:

347 
MSG_TYPE_MAC_WAIT_TIME_E
:

348 
	`wd_timî_logiˇl_time_ª£t
();

349 i‡(
tx_∑ckë
==
åue
) {

350 
	`wdrf_°p
();

351 
	`wdrf_ˇºõr_⁄
();

352 
	`toSèã
(4);

357 
MAC_STATE_4
:

358 
mesßgeTy≥
) {

359 
MSG_TYPE_MAC_STATE_ENTER
:

360 
	`wd_timî_£t_Æ¨m
(
SWX
, 
MSG_TYPE_MAC_WAIT_TIME_SWX
);

362 
MSG_TYPE_MAC_WAIT_TIME_SWX
:

363 
	`wd_timî_logiˇl_time_ª£t
();

364 
	`toSèã
(5);

368 
MAC_STATE_5
:

369 
mesßgeTy≥
) {

370 
MSG_TYPE_MAC_STATE_ENTER
:

371 
	`wd_timî_£t_Æ¨m
(
H
, 
MSG_TYPE_MAC_WAIT_TIME_H
);

373 
MSG_TYPE_MAC_WAIT_TIME_H
:

374 
	`wdrf_°p
();

375 
i
=0;

376 i‡(
tx_∑ckë
==
åue
) {

377 
wö√r
=
åue
;

378 
li°í
=
Ál£
;

381 
¥io
 = 
INVALID_PRIO
;

382 
wö√r
=
Ál£
;

383 
li°í
=
åue
;

385 
	`toSèã
(6);

389 
MAC_STATE_6
:

390 
mesßgeTy≥
) {

391 
MSG_TYPE_MAC_STATE_ENTER
:

392 
	`wd_timî_£t_Æ¨m
(
H
+
G
+(G+H)*
i
, 
MSG_TYPE_MAC_WAIT_TIME_G
);

394 
MSG_TYPE_MAC_WAIT_TIME_G
:

395 
¥io_i
 = 
	`wd_¥io_bô
(
¥io
, 
i
);

396 
	`wd_wö√r_¥io
(
wö√r_¥io
, 
i
, 
¥io_i
);

397 i‡(
¥io_i
 =
DOMINANT_BIT
 && 
wö√r
 =
åue
) {

398 
	`wdrf_ˇºõr_⁄
();

401 
	`wdrf_£t_rcv
();

403 
	`toSèã
(7);

407 
MAC_STATE_7
:

408 
mesßgeTy≥
) {

409 
MSG_TYPE_MAC_STATE_ENTER
:

410 
	`wd_timî_£t_Æ¨m
(2*
H
+
G
+(G+H)*
i
, 
MSG_TYPE_MAC_WAIT_TIME_H
);

412 
MSG_TYPE_RADIO_CHANNEL_BUSY
:

414 
	`wd_wö√r_¥io
(
wö√r_¥io
, 
i
, 
DOMINANT_BIT
);

415 
wö√r
=
Ál£
;

417 
MSG_TYPE_MAC_WAIT_TIME_H
:

418 
	`toSèã
(8);

422 
MAC_STATE_8
:

423 
mesßgeTy≥
) {

424 
MSG_TYPE_MAC_STATE_ENTER
:

425 
	`wdrf_°p
();

426 i‡(
i
<
NPRIOBITS
-1) {

427 
i
++;

428 
	`toSèã
(6);

429 } i‡(
i
==
NPRIOBITS
-1) {

431 
	`wdrf_d©a_mode
();

432 i‡(
wö√r
 =
åue
) {

433 
	`toSèã
(9);

435 
	`wdrf_£t_rcv
();

436 
	`wd_timî_£t_Æ¨m
(2*
H
+
G
+(G+H)*(
NPRIOBITS
-1)+ 
ETG
 + 
CMSG
, 
MSG_TYPE_MAC_WAIT_TIME_ENDTXRX
);

437 
	`toSèã
(11);

443 
MAC_STATE_9
:

444 
mesßgeTy≥
) {

445 
MSG_TYPE_MAC_STATE_ENTER
:

447 
	`ƒk_Àd_˛r
(
RED_LED
);

448 
	`ƒk_Àd_£t
(
GREEN_LED
);

449 
	`wd_timî_£t_Æ¨m
(2*
H
+
G
+(G+H)*(
NPRIOBITS
-1Ë+ 
ETG
, 
MSG_TYPE_MAC_WAIT_TIME_ETG
);

451 
MSG_TYPE_MAC_WAIT_TIME_ETG
:

452 
	`wd_timî_£t_Æ¨m
(2*
H
+
G
+(G+H)*(
NPRIOBITS
-1Ë+ 
ETG
 + 
CMSG
, 
MSG_TYPE_MAC_WAIT_TIME_ENDTXRX
);

453 
	`wdrf_tx_∑ckë
 (&
tx_pkt_öfo
);

454 
	`toSèã
(10);

458 
MAC_STATE_10
:

459 
mesßgeTy≥
) {

460 
MSG_TYPE_MAC_STATE_ENTER
:

462 
MSG_TYPE_RADIO_END_TX
:

463 
	`wd_timî_ˇn˚l_Æ¨m
();

464 
	`ƒk_evít_sig«l
 ( 
wd_tx_pkt_öfo_sig«l
 );

465 
MSG_TYPE_MAC_WAIT_TIME_ENDTXRX
:

466 #i‚de‡
CONTINUOUS_SEND


467 
tx_∑ckë
=
Ál£
;

469 
	`wdrf_°p
();

470 
	`toSèã
(0);

474 
MAC_STATE_11
:

475 
mesßgeTy≥
) {

476 
MSG_TYPE_MAC_STATE_ENTER
:

477 i‡(
li°í
 =
Ál£
) {

479 
	`ƒk_Àd_£t
(
RED_LED
);

480 
	`ƒk_Àd_˛r
(
GREEN_LED
);

483 
MSG_TYPE_MAC_WAIT_TIME_ENDTXRX
:

484 
	`wdrf_°p
();

485 
	`toSèã
(0);

487 
MSG_TYPE_RADIO_END_RX
:

488 
	`wd_timî_ˇn˚l_Æ¨m
();

489 
	`wdrf_°p
();

490 i‡(
	`wdrf_pﬁlög_rx_∑ckë
() == 1) {

491 
rx_∑ckë
=1;

492 
	`ƒk_evít_sig«l
–
wd_rx_pkt_öfo_sig«l
 );

494 
	`toSèã
(0);

499 
	}
}

504 
ƒk_sig_t
 
	$wd_gë_tx_sig«l
()

506  
wd_tx_pkt_öfo_sig«l
;

507 
	}
}

517 
öt8_t
 
	$wd_tx_∑ckë
(
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
¥i‹ôy
)

519 i‡(
	`wd_tx_∑ckë_íqueue
(
buf
, 
Àn
, 
¥i‹ôy
)==
NRK_OK
Ë 
	`wd_waô_u¡û_tx_∑ckë
();

520  
NRK_ERROR
;

521 
	}
}

530 
öt8_t
 
	$wd_tx_∑ckë_íqueue
(
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
¥i‹ôy
)

532 
öt8_t
 
ªt
=
NRK_ERROR
;

534 
	`ƒk_öt_dißbÀ
();

536 i‡(
tx_∑ckë
==
Ál£
) {

537 
tx_pkt_öfo
.
pPaylﬂd
=
buf
;

538 
tx_pkt_öfo
.
Àngth
=
Àn
;

539 
tx_∑ckë
 = 
åue
;

540 
¥io
 = 
¥i‹ôy
;

541 
ªt
=
NRK_OK
;

542 i‡(
°©e
 =
MAC_STATE_3
Ë
	`wd_do_¥Ÿocﬁ
(
MSG_TYPE_MAC_QUEUE
);

545 
	`ƒk_öt_íabÀ
();

547  
ªt
;

548 
	}
}

557 
öt8_t
 
	$wd_rx_pkt_£t_buf„r
(
uöt8_t
 *
buf
, uöt8_à
size
)

559 if(
buf
==
NULL
Ë 
NRK_ERROR
;

561 
rx_pkt_öfo
.
pPaylﬂd
 = 
buf
;

562 
rx_pkt_öfo
.
max_Àngth
 = 
size
;

563 
rx_∑ckë
=0;

564  
NRK_OK
;

565 
	}
}

574 
uöt8_t
 *
	$wd_rx_pkt_gë
(
uöt8_t
 *
Àn
, uöt8_à*
rssi
)

576 if(
	`wd_rx_pkt_ªady
()!=
NRK_OK
)

578 *
Àn
=0;

579 *
rssi
=0;

580  
NULL
;

583 *
Àn
=
rx_pkt_öfo
.
Àngth
;

584 *
rssi
=
rx_pkt_öfo
.rssi;

585  
rx_pkt_öfo
.
pPaylﬂd
;

586 
	}
}

595 
öt8_t
 
	$wd_rx_pkt_ªady
()

597 
uöt8_t
 
ªs
=0;

598 
	`ƒk_öt_dißbÀ
();

599 
ªs
=
rx_∑ckë
;

600 
	`ƒk_öt_íabÀ
();

601 i‡(
ªs
==1Ë{ 
NRK_OK
;}

602  
NRK_ERROR
;

603 
	}
}

611 
öt8_t
 
	$wd_rx_pkt_ªÀa£
()

613 
	`ƒk_öt_dißbÀ
();

614 
rx_∑ckë
=0;

615 
	`ƒk_öt_íabÀ
();

616  
NRK_OK
;

617 
	}
}

626 
öt8_t
 
	$wd_waô_u¡û_tx_∑ckë
()

628 
ƒk_sig_mask_t
 
evít
;

630 
	`ƒk_sig«l_ªgi°î
(
wd_tx_pkt_öfo_sig«l
);

631 
evít
=
	`ƒk_evít_waô
 (
	`SIG
(
wd_tx_pkt_öfo_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
));

634 if((
evít
 & 
	`SIG
(
wd_tx_pkt_öfo_sig«l
)Ë=0 )  
NRK_ERROR
;

636  
NRK_OK
;

637 
	}
}

646 
öt8_t
 
	$wd_waô_u¡û_rx_∑ckë
()

648 
ƒk_sig_mask_t
 
evít
;

650 
	`ƒk_sig«l_ªgi°î
(
wd_rx_pkt_öfo_sig«l
);

651 
evít
=
	`ƒk_evít_waô
 (
	`SIG
(
wd_rx_pkt_öfo_sig«l
Ë| SIG(
ƒk_wakeup_sig«l
));

654 if–(
evít
 & 
	`SIG
(
wd_rx_pkt_öfo_sig«l
)Ë=0 )  
NRK_ERROR
;

656  
NRK_OK
;

657 
	}
}

665 
uöt16_t
 
	$wd_gë_wö√r
()

667 
uöt16_t
 
w¥io
;

668 
	`ƒk_öt_dißbÀ
();

669 
w¥io
 = 
wö√r_¥io
;

670 
	`ƒk_öt_íabÀ
();

671  
w¥io
;

672 
	}
}

677 
öt8_t
 
	$wd_£t_ch™√l
(
uöt8_t
 
ch™√l
 )

679 
	`wdrf_£t_ch™√l
–
ch™√l
 );

682 
°©e
=0;

683 
	`wd_do_¥Ÿocﬁ
(
MSG_TYPE_MAC_STATE_ENTER
);

685  
NRK_OK
;

686 
	}
}

693 
öt8_t
 
	$wd_£t_rf_powî
(
uöt8_t
 
powî
)

695 
	`wdrf_£t_powî
 ( 
powî
 );

696  
NRK_OK
;

697 
	}
}

702 
öt8_t
 
	$wd_£t_cˇ_thªsh
(
öt8_t
 
cˇ_thªsh
)

704 
	`wdrf_£t_cˇ_thr
 ( 
cˇ_thªsh
 );

705  
NRK_OK
;

706 
	}
}

708 
ölöe
 
	$Æ¨m_ˇŒback
(
uöt8_t
 
Æ¨m_ty≥
)

710 
	`wd_do_¥Ÿocﬁ
(
Æ¨m_ty≥
);

711 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/net/widom/widom.h

54 #i‚de‡
_WIDOM_H


55 
	#_WIDOM_H


	)

57 
	~<wd_rf.h
>

71 
	#DOMINANT_BIT
 0

	)

72 
	#RECESSIVE_BIT
 1

	)

75 
	#NPRIOBITS
 3

	)

76 
	#MAX_NUM_PRIO_BITS
 16

	)

77 
	#INVALID_PRIO_INDEX
 
MAX_NUM_PRIO_BITS


	)

78 
	#INVALID_PRIO
 0xFFFF

	)

85 
	#E_us
 190

86 
	#F_us
 5301

87 
	#H_us
 961

88 
	#G_us
 440

89 
	#ETG_us
 500

90 
	#TFCS_us
 256

91 
	#SWX_us
 192

92 

	)

93 
	#CMSG_us
 (
WD_MAX_MSG_LEN_us
+100)

94 

	)

104 
öt8_t
 
wd_öô
(
uöt8_t
 
ch™√l
);

113 
öt8_t
 
wd_°¨ãd
();

122 
öt8_t
 
wd_£t_idÀ
();

130 
öt8_t
 
wd_£t_a˘ive
();

135 
ƒk_sig_t
 
wd_gë_tx_sig«l
();

145 
öt8_t
 
wd_tx_∑ckë
(
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
¥i‹ôy
);

154 
öt8_t
 
wd_tx_∑ckë_íqueue
(
uöt8_t
 *
buf
, uöt8_à
Àn
, 
uöt16_t
 
¥i‹ôy
);

163 
öt8_t
 
wd_rx_pkt_£t_buf„r
(
uöt8_t
 *
buf
, uöt8_à
size
);

172 
uöt8_t
 *
wd_rx_pkt_gë
(uöt8_à*
Àn
, uöt8_à*
rssi
);

181 
öt8_t
 
wd_rx_pkt_ªady
();

189 
öt8_t
 
wd_rx_pkt_ªÀa£
();

198 
öt8_t
 
wd_waô_u¡û_tx_∑ckë
();

207 
öt8_t
 
wd_waô_u¡û_rx_∑ckë
();

215 
uöt16_t
 
wd_gë_wö√r
();

220 
öt8_t
 
wd_£t_ch™√l
(
uöt8_t
 
ch™√l
);

227 
öt8_t
 
wd_£t_rf_powî
(
uöt8_t
 
powî
);

232 
öt8_t
 
wd_£t_cˇ_thªsh
(öt8_à
cˇ_thªsh
);

247 
ölöe
 
wd_do_¥Ÿocﬁ
(
uöt8_t
 
mesßgeTy≥
);

255 
	eMAC_STATES
 {

256 
	mMAC_STATE_0
,

257 
	mMAC_STATE_1
,

258 
	mMAC_STATE_2
,

259 
	mMAC_STATE_3
,

260 
	mMAC_STATE_4
,

261 
	mMAC_STATE_5
,

262 
	mMAC_STATE_6
,

263 
	mMAC_STATE_7
,

264 
	mMAC_STATE_8
,

265 
	mMAC_STATE_9
,

266 
	mMAC_STATE_10
,

267 
	mMAC_STATE_11


274 
	eMSG_TYPES
 {

275 
	mMSG_TYPE_DATA_MSG
,

278 
	mMSG_TYPE_MAC_QUEUE
,

279 
	mMSG_TYPE_MAC_WAIT_TIME_E
,

280 
	mMSG_TYPE_MAC_WAIT_TIME_F
,

281 
	mMSG_TYPE_MAC_WAIT_TIME_G
,

282 
	mMSG_TYPE_MAC_WAIT_TIME_H
,

283 
	mMSG_TYPE_MAC_WAIT_TIME_R
,

284 
	mMSG_TYPE_MAC_WAIT_TIME_SWX
,

285 
	mMSG_TYPE_MAC_WAIT_TIME_TFCS
,

286 
	mMSG_TYPE_MAC_WAIT_TIME_ETG
,

287 
	mMSG_TYPE_MAC_WAIT_TIME_ENDTXRX
,

288 
	mMSG_TYPE_MAC_STATE_ENTER
,

291 
	mMSG_TYPE_RADIO_CHANNEL_IDLE
,

292 
	mMSG_TYPE_RADIO_CHANNEL_BUSY
,

293 
	mMSG_TYPE_RADIO_END_RX
,

294 
	mMSG_TYPE_RADIO_END_TX
,

296 
	mMSG_TYPE_MAC_DO_ASSERT


307 
	#wd_¥io_bô
–
_¥i‹ôy
, 
_ödex
 ) (!(!(_¥i‹ôy & (1 << ((
NPRIOBITS
 - 1Ë- _ödex)))))

	)

312 
	#wd_wö√r_¥io
–
_v¨
, 
_bô_ödex
, 
_bô_vÆ
 ) { \

313 i‡(
_bô_vÆ
Ë((
_v¨
Ë|–
	`BM
(
_bô_ödex
))); \

314 ((
_v¨
Ë&(~
	`BM
(
_bô_ödex
))); \

315 }

	)

320 
	#toSèã
–
_√xt_°©e
 ) \

322 
°©e
 = 
MAC_STATE_
##
_√xt_°©e
; \

323 
	`wd_do_¥Ÿocﬁ
(
MSG_TYPE_MAC_STATE_ENTER
); \

324 }

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/hal.h

14 #i‚de‡
HAL_H


15 
	#HAL_H


	)

17 
uöt16_t
 
	tNRK_STK
;

21 
	#SPI_INIT
(Ë\

	)

28 
	#SPI_WAITFOREOTx
(Ë(
U1TCTL
 & 
TXEPT
) == 0)

29 
	#SPI_WAITFOREORx
(Ë(
IFG2
 & 
URXIFG1
) == 0)

30 

	)

31 
	#FASTSPI_TX
(
x
)\

	)

33 
U1TXBUF
 = 
x
;\

34 
	`SPI_WAITFOREOTx
();\

35 
	}
} 0)

37 
	#FASTSPI_RX
(
x
)\

	)

39 
U1TXBUF
 = 0;\

40 
	`SPI_WAITFOREORx
();\

41 
x
 = 
U1RXBUF
;\

42 
	}
} 0)

44 
	#FASTSPI_RX_GARBAGE
()\

	)

46 
U1TXBUF
 = 0;\

47 
	`SPI_WAITFOREORx
();\

48 
U1RXBUF
;\

49 
	}
} 0)

51 
	#FASTSPI_TX_MANY
(
p
,
c
)\

	)

53 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) {\

54 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]);\

56 
	}
} 0)

58 
	#FASTSPI_RX_WORD
(
x
)\

	)

60 
U1TXBUF
 = 0;\

61 
	`SPI_WAITFOREORx
();\

62 
x
 = 
U1RXBUF
 << 8;\

63 
U1TXBUF
 = 0;\

64 
	`SPI_WAITFOREORx
();\

65 
x
 |
U1RXBUF
;\

66 
	}
} 0)

68 
	#FASTSPI_TX_ADDR
(
a
)\

	)

70 
U1TXBUF
 = 
a
;\

71 
	`SPI_WAITFOREOTx
();\

72 
	}
} 0)

74 
	#FASTSPI_RX_ADDR
(
a
)\

	)

76 
U1TXBUF
 = (
a
) | 0x40;\

77 
	`SPI_WAITFOREOTx
();\

78 
	}
} 0)

80 
	`hÆWaô
(
uöt16_t
 
timeout
);

82 
	#ENABLE_GLOBAL_INT
(Ëdÿ{ 
	`eöt
(); 
	}
} 0)

	)

83 
	#DISABLE_GLOBAL_INT
(Ëdÿ{ 
	`döt
(); } 0)

	)

86 
	#ENABLE_UART1_INT
(Ëdÿ{ 
IE2
 |(
	`BM
(
UTXIE1
Ë| BM(
URXIE1
)); } 0)

	)

87 
	#DISABLE_UART1_INT
(Ëdÿ{ 
IE2
 &~(
	`BM
(
UTXIE1
Ë| BM(
URXIE1
)); } 0)

	)

89 
	#ENABLE_UART1_TX_INT
(Ëdÿ{ 
IE2
 |
	`BM
(
UTXIE1
); } 0)

	)

90 
	#DISABLE_UART1_TX_INT
(Ëdÿ{ 
IE2
 &~
	`BM
(
UTXIE1
); } 0)

	)

91 
	#CLEAR_UART1_TX_INT
(Ëdÿ{ 
IFG2
 &~
	`BM
(
UTXIFG1
); } 0)

	)

92 
	#SET_UART1_TX_INT
(Ëdÿ{ 
IFG2
 |
	`BM
(
UTXIFG1
); } 0)

	)

94 
	#ENABLE_UART1_RX_INT
(Ëdÿ{ 
IE2
 |
	`BM
(
URXIE1
); } 0)

	)

95 
	#DISABLE_UART1_RX_INT
(Ëdÿ{ 
IE2
 &~
	`BM
(
URXIE1
); } 0)

	)

96 
	#CLEAR_UART1_RX_INT
(Ëdÿ{ 
IFG2
 &~
	`BM
(
URXIFG1
); } 0)

	)

98 
	#ENABLE_UART0_TX_INT
(Ëdÿ{ 
IE1
 |
	`BM
(
UTXIE0
); } 0)

	)

99 
	#DISABLE_UART0_TX_INT
(Ëdÿ{ 
IE1
 &~
	`BM
(
UTXIE0
); } 0)

	)

100 
	#CLEAR_UART0_TX_INT
(Ëdÿ{ 
IFG1
 &~
	`BM
(
UTXIFG0
); } 0)

	)

101 
	#SET_UART0_TX_INT
(Ëdÿ{ 
IFG1
 |
	`BM
(
UTXIFG0
); } 0)

	)

103 
	#ENABLE_UART0_RX_INT
(Ëdÿ{ 
IE1
 |
	`BM
(
URXIE0
); } 0)

	)

104 
	#DISABLE_UART0_RX_INT
(Ëdÿ{ 
IE1
 &~
	`BM
(
URXIE0
); } 0)

	)

105 
	#CLEAR_UART0_RX_INT
(Ëdÿ{ 
IFG1
 &~
	`BM
(
URXIFG0
); } 0)

	)

108 
	#PWM0_INIT
(
≥riod
Ë\

	)

114 
	#PWM0_SET_PERIOD
(
≥riod
Ëdÿ{ 
	}
} 0)

	)

117 
	#TIMER_CLK_STOP
 0x00

	)

118 
	#TIMER_CLK_DIV1
 0x01

	)

119 
	#TIMER_CLK_DIV8
 0x02

	)

120 
	#TIMER_CLK_DIV64
 0x03

	)

121 
	#TIMER_CLK_DIV256
 0x04

	)

122 
	#TIMER_CLK_DIV1024
 0x05

	)

123 
	#TIMER_CLK_T_FALL
 0x06

	)

124 
	#TIMER_CLK_T_RISE
 0x07

	)

128 
	#PWM0_SET_DUTY_CYCLE
(
dutyCy˛e
Ëdÿ{ } 0)

	)

136 
	#ENABLE_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

137 
	#DISABLE_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

138 
	#CLEAR_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

142 
	#ENABLE_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

143 
	#DISABLE_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

144 
	#CLEAR_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

167 
	#INIT_UART1
(
baudR©e
,
›ti⁄s
Ë\

	)

172 
	#INIT_UART0
(
baudR©e
,
›ti⁄s
Ë\

	)

174 
	}
} 0)

180 
	#UART_BAUDRATE_2K4
 3333

	)

181 
	#UART_BAUDRATE_4K8
 1667

	)

182 
	#UART_BAUDRATE_9K6
 833

	)

183 
	#UART_BAUDRATE_14K4
 556

	)

184 
	#UART_BAUDRATE_19K2
 417

	)

185 
	#UART_BAUDRATE_28K8
 278

	)

186 
	#UART_BAUDRATE_38K4
 208

	)

187 
	#UART_BAUDRATE_57K6
 139

	)

188 
	#UART_BAUDRATE_115K2
 69

	)

189 
	#UART_BAUDRATE_230K4
 35

	)

190 
	#UART_BAUDRATE_250K
 32

	)

191 
	#UART_BAUDRATE_500K
 16

	)

192 
	#UART_BAUDRATE_1M
 8

	)

198 
	#UART_OPT_ONE_STOP_BIT
 0

	)

199 
	#UART_OPT_TWO_STOP_BITS
 0x08

	)

200 
	#UART_OPT_NO_PARITY
 0

	)

201 
	#UART_OPT_EVEN_PARITY
 0x20

	)

202 
	#UART_OPT_ODD_PARITY
 0x30

	)

203 
	#UART_OPT_5_BITS_PER_CHAR
 0

	)

204 
	#UART_OPT_6_BITS_PER_CHAR
 0x02

	)

205 
	#UART_OPT_7_BITS_PER_CHAR
 0x04

	)

206 
	#UART_OPT_8_BITS_PER_CHAR
 0x06

	)

207 
	#UART_OPT_9_BITS_PER_CHAR
 0x0406

	)

214 
	#ENABLE_UART0
(Ë()

	)

215 
	#DISABLE_UART0
(Ë()

	)

216 
	#ENABLE_UART1
(Ë()

	)

217 
	#DISABLE_UART1
(Ë()

	)

224 
	#UART1_WAIT
(Ëdÿ{ 
	}
} 0)

	)

226 
	#UART1_WAIT_RX
(Ëdÿ{ } 0)

	)

228 
	#UART1_SEND
(
x
Ëdÿ{ } 0)

	)

230 
	#UART1_WAIT_AND_SEND
(
x
)\

	)

232 !(
	gIFG2
 & 
	gUTXIFG1
));\

233 
	gTXBUF1
 = ()(
x
);\

236 
	#UART1_RECEIVE
(
x
Ëdÿ{ 
	}
} 0)

	)

238 
	#UART1_WAIT_AND_RECEIVE
(
x
Ëdÿ{ } 0)

	)

241 
	#UART0_WAIT
(Ëdÿ{ } 0)

	)

243 
	#UART0_WAIT_RX
(Ëdÿ{ } 0)

	)

245 
	#UART0_SEND
(
x
Ëdÿ{ } 0)

	)

247 
	#UART0_WAIT_AND_SEND
(
x
Ëdÿ{ } 0)

	)

249 
	#UART0_RECEIVE
(
x
Ëdÿ{ } 0)

	)

251 
	#UART0_WAIT_AND_RECEIVE
(
x
Ëdÿ{ } 0)

	)

257 
	#TIMER0_OFF
 0

	)

258 
	#TIMER0_PRESCALE_1
 1

	)

259 
	#TIMER0_PRESCALE_8
 2

	)

260 
	#TIMER0_PRESCALE_32
 3

	)

261 
	#TIMER0_PRESCALE_64
 4

	)

262 
	#TIMER0_PRESCALE_128
 5

	)

263 
	#TIMER0_PRESCALE_256
 6

	)

264 
	#TIMER0_PRESCALE_1024
 7

	)

266 
	#TIMER0_WGM_0
 0x00

	)

267 
	#TIMER0_WGM_1
 0x40

	)

268 
	#TIMER0_WGM_2
 0x08

	)

269 
	#TIMER0_WGM_3
 0x48

	)

271 
	#TIMER0_COM_0
 0x00

	)

272 
	#TIMER0_COM_1
 0x08

	)

273 
	#TIMER0_COM_2
 0x10

	)

274 
	#TIMER0_COM_3
 0x18

	)

275 
	#TIMER0_COM_4
 0x20

	)

276 
	#TIMER0_COM_5
 0x28

	)

277 
	#TIMER0_COM_6
 0x30

	)

278 
	#TIMER0_COM_7
 0x38

	)

281 
	#TIMER0_SET_CONTROL
(
x
Ëdÿ{ } 0)

	)

283 
	#TIMER0_SET_VALUE
(
x
Ëdÿ{ } 0)

	)

284 
	#TIMER0_READ_VALUE
(
x
Ëdÿ{ } 0)

	)

286 
	#TIMER0_SET_COMPARE_VALUE
(
x
Ëdÿ{ } 0)

	)

287 
	#TIMER0_READ_COMPARE_VALUE
(
x
Ëdÿ{ } 0)

	)

293 
	#NOP
(Ë
asm
 vﬁ©ûê("n›\n\t" ::)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/hal_expboard.h

30 #i‚de‡
HAL_IMEC_H


31 
	#HAL_IMEC_H


	)

33 
	#EXPBOARD_PLATFORM


	)

35 
	#RED_LED
 0

	)

36 
	#GREEN_LED
 1

	)

37 
	#BLUE_LED
 2

	)

38 
	#ORANGE_LED
 3

	)

40 
PORT_INIT
();

42 
	#SPI_ENABLE
(Ë–
P5OUT
 &~
	`BM
(
CSN
) )

43 
	#SPI_DISABLE
(Ë–
P5OUT
 |
	`BM
(
CSN
) )

44 

	)

46 
	#FIFOP_INT_INIT
(Ëdÿ{ 
P2IES
 &~
	`BM
(
FIFO_P
); 
	`CLEAR_FIFOP_INT
(); } 0)

	)

49 
	#ENABLE_FIFOP_INT
(Ëdÿ{ 
P2IE
 |
	`BM
(
FIFO_P
); } 0)

	)

50 
	#DISABLE_FIFOP_INT
(Ëdÿ{ 
P2IE
 &~
	`BM
(
FIFO_P
); } 0)

	)

51 
	#CLEAR_FIFOP_INT
(Ëdÿ{ 
P2IFG
 &~
	`BM
(
FIFO_P
); } 0)

	)

54 
	#ENABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TICIE1
); } 0)

	)

55 
	#DISABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TICIE1
); } 0)

	)

56 
	#CLEAR_SFD_CAPTURE_INT
(Ëdÿ{ 
TIFR
 = 
	`BM
(
ICF1
); } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/include.h

1 #i‚de‡
INCLUDE_H


2 
	#INCLUDE_H


	)

8 
	#PSTR
(
x
Ë
	)
x

31 #i‚de‡
FALSE


32 
	#FALSE
 0

	)

34 #i‚de‡
TRUE


35 
	#TRUE
 1

	)

37 #i‚de‡
NULL


38 
	#NULL
 0

	)

42 
	#BM
(
n
Ë(1 << (n))

	)

43 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

44 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

45 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

46 
	#ABS
(
n
Ë(“ < 0Ë? -“Ë: (n))

	)

49 (*
	tVFPTR
)();

61 
	~<sig«l.h
>

62 
	~<m•430xG461x.h
>

63 
	~<°rög.h
>

67 
	#RAMEND
 0x30ff

68 

	)

70 #ifde‡
STK501


74 #ifde‡
CC2420DB


79 
	~<hÆ.h
>

80 
	~<hÆ_expbﬂrd.h
>

82 
	~<basic_rf.h
>

	@/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/nrk_eeprom.h

1 #i‚de‡
_NRK_EEPROM_H_


2 
	#_NRK_EEPROM_H_


	)

3 
	~<°döt.h
>

5 
öt8_t
 
ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
);

	@/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/nrk_pin_define.h

8 #i‚de‡
NRK_PIN_DEFINE_H


9 
	#NRK_PIN_DEFINE_H


	)

17 
	#ƒk_gpio_øw_£t
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à|
	`BM
(_pö); } 0);}

	)

19 
	#ƒk_gpio_øw_˛r
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à&~
	`BM
(_pö); } 0);}

	)

21 
	#ƒk_gpio_øw_gë
–
_pö_p‹t
, 
_pö
 ) (_pö_p‹à& 
	`BM
(_pö))

	)

23 
	#ƒk_gpio_øw_toggÀ
–
_pö_p‹t
, 
_p‹t
, 
_pö
 ) { \

	)

24 i‡((
	g_pö_p‹t
 & 
BM
(
_pö
))Ëdo{ 
	g_p‹t
 &= ~BM(_pin); } 0); \

25 dÿ{ 
	g_p‹t
 |
BM
(
_pö
); }0); \

29 
	#ƒk_gpio_øw_dúe˘i⁄
–
_dúe˘i⁄_p‹t_«me
, 
_pö
, 
_pö_dúe˘i⁄
 ) {\

	)

30 i‡(
	g_pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) { \

31 
_dúe˘i⁄_p‹t_«me
 &~
BM
–
_pö
 ); \

33 
	g_dúe˘i⁄_p‹t_«me
 |
BM
–
_pö
 ); \

42 
	#DECLARE_NRK_PIN
–
_pö_«me
 )\

	)

43 c⁄° 
uöt8_t
 
NRK_
 ## 
_pö_«me
;

44 
	#NRK_PIN
–
_pö_«me
, 
_pö
 , 
_p‹t
 )\

	)

45 c⁄° 
uöt8_t
 
	gNRK_
 ## 
	g_pö_«me
 = (
_pö
 << 3Ë+ (
_p‹t
 & 0x07);

46 
	#NRK_INVALID_PIN
–
_pö_«me
 )\

	)

47 c⁄° 
uöt8_t
 
	gNRK_
 ## 
	g_pö_«me
 = 
NRK_INVALID_PIN_VAL
;

55 
	#NRK_INVALID_PIN_VAL
 0xFF

	)

60 
	#NRK_PIN_INPUT
 0

	)

61 
	#NRK_PIN_OUTPUT
 1

	)

67 
	#NRK_PORTA
 1

	)

68 
	#NRK_PORTB
 2

	)

69 
	#NRK_PORTC
 3

	)

70 
	#NRK_PORTD
 4

	)

71 
	#NRK_PORTE
 5

	)

72 
	#NRK_PORTF
 6

	)

77 
	#IMP_CS
 0

78 
	#IMP_WR
 1

79 
	#UP_A0_ECG
 4

80 
	#UP_A1_ECG
 5

81 
	#UP_A2_ECG
 6

82 
	#ASIC_CLK
 7

83 

	)

84 
	#ENABLE1
 0

85 
	#START_UP
 1

86 
	#OLD_IMP_STIM_NO_LONGER_USED
 2

87 
	#UP_RESET
 3

88 
	#UP_A0_EEG
 4

89 
	#UP_A1_EEG
 5

90 
	#UP_A2_EEG
 6

91 
	#DR1_RF
 7

92 

	)

93 
	#LED
 0

94 
	#DATA_RF
 1

95 
	#CLK1_RF
 3

96 
	#TXD
 6

97 
	#RXD
 7

98 

	)

99 
	#CS_RF
 1

100 
	#DOUT2_RF
 2

101 
	#CLK2_RF
 3

102 
	#DR2_RF
 4

103 
	#CE_RF
 5

104 
	#PWR_UP_RF
 6

105 

	)

106 
	#MUXA0
 0

107 
	#MUXA1
 1

108 
	#MUXA2
 2

109 
	#MUXA3
 3

110 
	#MUXA4
 4

111 
	#IMP_STIM
 5

112 

	)

113 
	#ASIC_OUT
 0

114 
	#IMP_OUT
 2

115 
	#MISC1
 3

116 
	#MISC2
 4

117 
	#MISC3
 5

118 
	#MISC4
 6

119 

	)

124 
	$DECLARE_NRK_PIN
(
IMP_CS
)

125 
	$DECLARE_NRK_PIN
(
IMP_WR
)

126 
	$DECLARE_NRK_PIN
(
UP_A0_ECG
)

127 
	$DECLARE_NRK_PIN
(
UP_A1_ECG
)

128 
	$DECLARE_NRK_PIN
(
UP_A2_ECG
)

129 
	$DECLARE_NRK_PIN
(
ASIC_CLK
)

130 
	$DECLARE_NRK_PIN
(
ENABLE1
)

131 
	$DECLARE_NRK_PIN
(
START_UP
)

132 
	$DECLARE_NRK_PIN
(
OLD_IMP_STIM_NO_LONGER_USED
)

133 
	$DECLARE_NRK_PIN
(
UP_RESET
)

134 
	$DECLARE_NRK_PIN
(
UP_A0_EEG
)

135 
	$DECLARE_NRK_PIN
(
UP_A1_EEG
)

136 
	$DECLARE_NRK_PIN
(
UP_A2_EEG
)

137 
	$DECLARE_NRK_PIN
(
DR1_RF
)

138 
	$DECLARE_NRK_PIN
(
LED
)

139 
	$DECLARE_NRK_PIN
(
DATA_RF
)

140 
	$DECLARE_NRK_PIN
(
CLK1_RF
)

141 
	$DECLARE_NRK_PIN
(
TXD
)

142 
	$DECLARE_NRK_PIN
(
RXD
)

143 
	$DECLARE_NRK_PIN
(
CS_RF
)

144 
	$DECLARE_NRK_PIN
(
DOUT2_RF
)

145 
	$DECLARE_NRK_PIN
(
CLK2_RF
)

146 
	$DECLARE_NRK_PIN
(
DR2_RF
)

147 
	$DECLARE_NRK_PIN
(
CE_RF
)

148 
	$DECLARE_NRK_PIN
(
PWR_UP_RF
)

149 
	$DECLARE_NRK_PIN
(
MUXA0
)

150 
	$DECLARE_NRK_PIN
(
MUXA0
)

151 
	$DECLARE_NRK_PIN
(
MUXA0
)

152 
	$DECLARE_NRK_PIN
(
MUXA0
)

153 
	$DECLARE_NRK_PIN
(
MUXA0
)

154 
	$DECLARE_NRK_PIN
(
IMP_STIM
)

155 
	$DECLARE_NRK_PIN
(
ASIC_OUT
)

156 
	$DECLARE_NRK_PIN
(
IMP_OUT
)

157 
	$DECLARE_NRK_PIN
(
MISC1
)

158 
	$DECLARE_NRK_PIN
(
MISC2
)

159 
	$DECLARE_NRK_PIN
(
MISC3
)

160 
	$DECLARE_NRK_PIN
(
MISC4
)

	@/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/nrk_platform_time.h

1 #i‚de‡
NRK_PLATFORM_TIME_H


2 
	#NRK_PLATFORM_TIME_H


	)

8 
	#NANOS_PER_TICK
 976563

	)

9 
	#US_PER_TICK
 977

	)

10 
	#TICKS_PER_SEC
 1024

	)

13 #i‚de‡
NRK_SLEEP_WAKEUP_TIME


14 
	#NRK_SLEEP_WAKEUP_TIME
 10

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/expboard/source/hal_wait.c

50 
	~<ö˛ude.h
>

63 
	$hÆWaô
(
uöt16_t
 
timeout
) {

67 
	`NOP
();

68 
	`NOP
();

69 
	`NOP
();

70 
	`NOP
();

71 } --
timeout
);

73 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/expboard/source/nrk_eeprom.c

1 
	~<ƒk_ì¥om.h
>

2 
	~<ƒk_îr‹.h
>

5 
öt8_t
 
	$ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
)

7  
NRK_ERROR
;

8 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/expboard/source/ulib.c

1 
	~<ö˛ude.h
>

2 
	~<ulib.h
>

3 
	~<°dio.h
>

4 
	~<hÆ.h
>

5 
	~<hÆ_expbﬂrd.h
>

6 
	~<ƒk_pö_deföe.h
>

7 
	~<ƒk_îr‹.h
>

9 #ifde‡
NANORK


10 
	~<ƒk_cfg.h
>

13 #ifde‡
NRK_UART_BUF


14 
	~<ƒk_evíts.h
>

16 #i‚de‡
MAX_RX_UART_BUF


17 
	#MAX_RX_UART_BUF
 16

	)

20 
uöt8_t
 
	gu¨t_rx_buf_°¨t
,
	gu¨t_rx_buf_íd
;

21 
	gu¨t_rx_buf
[
MAX_RX_UART_BUF
];

22 
öt8_t
 
	gu¨t_rx_sig«l
;

24 
	$SIGNAL
(
USART1_RX_ve˘
)

26 
c
;

27 
uöt8_t
 
sig
;

28 
	`DISABLE_UART1_RX_INT
();

29 
	`UART1_WAIT_AND_RECEIVE
(
c
);

30 
u¨t_rx_buf
[
u¨t_rx_buf_íd
]=
c
;

32 
u¨t_rx_buf_íd
++;

33 if(
u¨t_rx_buf_íd
==
MAX_RX_UART_BUF
) uart_rx_buf_end=0;

34 
	`ƒk_evít_sig«l
(
u¨t_rx_sig«l
);

35 
	`CLEAR_UART1_RX_INT
();

36 
	`ENABLE_UART1_RX_INT
();

37 
	}
}

39 
	$gëc1
()

41 
tmp
;

43 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)

45 
tmp
=
u¨t_rx_buf
[
u¨t_rx_buf_°¨t
];

46 
u¨t_rx_buf_°¨t
++;

47 if(
u¨t_rx_buf_°¨t
==
MAX_RX_UART_BUF
) uart_rx_buf_start=0;

48 (
tmp
);

51 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

52  
tmp
;

53 
	}
}

55 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

57 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)  1;

59 
	}
}

61 
öt8_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

63 if(
u¨t_rx_sig«l
==0Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

64  
u¨t_rx_sig«l
;

65 
	}
}

69 
öt8_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

72 
	}
}

74 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

76 if(
u¨t_num
==1)

79 if–
IFG2
 & 
	`BM
(
URXIFG1
) )  1;

82 
	}
}

84 
	$gëc1
(){

85 
tmp
;

86 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

87  
tmp
;

88 
	}
}

92 
	$ƒk_k¥ötf
–c⁄° *
addr
)

94 * 
c
 = 
addr
;

95 *
c
) {

96 
	`putch¨
(*
c
);

97 
c
++;

99 
	}
}

101 
	$ƒk_£tup_p‹ts
()

105 
P3DIR
 |= 0x01;

108 
	`ƒk_gpio_øw_dúe˘i⁄
(
P6DIR
,
MISC1
,
NRK_PIN_OUTPUT
);

109 
	`ƒk_gpio_øw_dúe˘i⁄
(
P6DIR
,
MISC2
,
NRK_PIN_OUTPUT
);

110 
	`ƒk_gpio_øw_dúe˘i⁄
(
P6DIR
,
MISC3
,
NRK_PIN_OUTPUT
);

111 
	`ƒk_gpio_øw_dúe˘i⁄
(
P6DIR
,
MISC4
,
NRK_PIN_OUTPUT
);

114 
	`ƒk_gpio_øw_dúe˘i⁄
(
P1DIR
,
ASIC_CLK
,
NRK_PIN_OUTPUT
);

115 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
UP_RESET
,
NRK_PIN_OUTPUT
);

116 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
ENABLE1
,
NRK_PIN_INPUT
);

118 
	`ƒk_gpio_øw_dúe˘i⁄
(
P1DIR
,
UP_A0_ECG
,
NRK_PIN_OUTPUT
);

119 
	`ƒk_gpio_øw_dúe˘i⁄
(
P1DIR
,
UP_A1_ECG
,
NRK_PIN_OUTPUT
);

120 
	`ƒk_gpio_øw_dúe˘i⁄
(
P1DIR
,
UP_A2_ECG
,
NRK_PIN_OUTPUT
);

122 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
UP_A0_EEG
,
NRK_PIN_OUTPUT
);

123 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
UP_A1_EEG
,
NRK_PIN_OUTPUT
);

124 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
UP_A2_EEG
,
NRK_PIN_OUTPUT
);

125 
	}
}

127 
	$ƒk_öô_h¨dw¨e
() {

129 
i
,
j
;

130 
FLL_CTL0
 |
XCAP14PF
;

132 
IFG1
 & 
OFIFG
)

135 
IFG1
 &~
OFIFG
;

136 
i
 = 0x4800; i > 0; i--)

137 
j
++;

140 
SCFQCTL
 = 124;

141 
SCFI0
 |
FLLD_2
;

142 
SCFI0
 |
FN_4
;

143 
SCFI1
 = 0;

144 
FLL_CTL0
 |
DCOPLUS
;

149 
FLL_CTL1
 = 
XT2OFF
;

152 
i
 = 0x1C00; i > 0; i--Ë
j
++;

156 
	}
}

165 
	$NRK_PIN
(
IMP_CS
,IMP_CS,
NRK_PORTA
)

166 
	$NRK_PIN
(
IMP_WR
,IMP_WR,
NRK_PORTA
)

167 
	$NRK_PIN
(
UP_A0_ECG
,UP_A0_ECG,
NRK_PORTA
)

168 
	$NRK_PIN
(
UP_A1_ECG
,UP_A1_ECG,
NRK_PORTA
)

169 
	$NRK_PIN
(
UP_A2_ECG
,UP_A2_ECG,
NRK_PORTA
)

170 
	$NRK_PIN
(
ASIC_CLK
,ASIC_CLK,
NRK_PORTA
)

172 
	$NRK_PIN
(
ENABLE1
,ENABLE1,
NRK_PORTB
)

173 
	$NRK_PIN
(
START_UP
,START_UP,
NRK_PORTB
)

174 
	$NRK_PIN
(
OLD_IMP_STIM_NO_LONGER_USED
,OLD_IMP_STIM_NO_LONGER_USED,
NRK_PORTB
)

175 
	$NRK_PIN
(
UP_RESET
,UP_RESET,
NRK_PORTB
)

176 
	$NRK_PIN
(
UP_A0_EEG
,UP_A0_EEG,
NRK_PORTB
)

177 
	$NRK_PIN
(
UP_A1_EEG
,UP_A1_EEG,
NRK_PORTB
)

178 
	$NRK_PIN
(
UP_A2_EEG
,UP_A2_EEG,
NRK_PORTB
)

179 
	$NRK_PIN
(
DR1_RF
,DR1_RF,
NRK_PORTB
)

181 
	$NRK_PIN
(
LED
,LED,
NRK_PORTC
)

182 
	$NRK_PIN
(
DATA_RF
,DATA_RF,
NRK_PORTC
)

183 
	$NRK_PIN
(
CLK1_RF
,CLK1_RF,
NRK_PORTC
)

184 
	$NRK_PIN
(
TXD
,TXD,
NRK_PORTC
)

185 
	$NRK_PIN
(
RXD
,RXD,
NRK_PORTC
)

187 
	$NRK_PIN
(
CS_RF
,CS_RF,
NRK_PORTD
)

188 
	$NRK_PIN
(
DOUT2_RF
,DOUT2_RF,
NRK_PORTD
)

189 
	$NRK_PIN
(
CLK2_RF
,CLK2_RF,
NRK_PORTD
)

190 
	$NRK_PIN
(
DR2_RF
,DR2_RF,
NRK_PORTD
)

191 
	$NRK_PIN
(
CE_RF
,CE_RF,
NRK_PORTD
)

192 
	$NRK_PIN
(
PWR_UP_RF
,PWR_UP_RF,
NRK_PORTD
)

194 
	$NRK_PIN
(
MUXA0
,MUXA0,
NRK_PORTE
)

195 
	$NRK_PIN
(
MUXA1
,MUXA1,
NRK_PORTE
)

196 
	$NRK_PIN
(
MUXA2
,MUXA2,
NRK_PORTE
)

197 
	$NRK_PIN
(
MUXA3
,MUXA3,
NRK_PORTE
)

198 
	$NRK_PIN
(
MUXA4
,MUXA4,
NRK_PORTE
)

199 
	$NRK_PIN
(
IMP_STIM
,IMP_STIM,
NRK_PORTE
)

201 
	$NRK_PIN
(
ASIC_OUT
,ASIC_OUT,
NRK_PORTF
)

202 
	$NRK_PIN
(
IMP_OUT
,IMP_OUT,
NRK_PORTF
)

203 
	$NRK_PIN
(
MISC1
,MISC1,
NRK_PORTF
)

204 
	$NRK_PIN
(
MISC2
,MISC2,
NRK_PORTF
)

205 
	$NRK_PIN
(
MISC3
,MISC3,
NRK_PORTF
)

206 
	$NRK_PIN
(
MISC4
,MISC4,
NRK_PORTF
)

211 
öt8_t
 
	$ƒk_gpio_£t
(
uöt8_t
 
pö
)

213 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

214 
pö
 & 0x07) {

215 
NRK_PORTA
:

216 dÿ{ 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

217 
NRK_PORTB
:

218 dÿ{ 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

219 
NRK_PORTC
:

220 dÿ{ 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

221 
NRK_PORTD
:

222 dÿ{ 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

223 
NRK_PORTE
:

224 dÿ{ 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

225 
NRK_PORTF
:

226 dÿ{ 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

230 
	}
}

232 
öt8_t
 
	$ƒk_gpio_˛r
(
uöt8_t
 
pö
)

234 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

235 
pö
 & 0x07) {

236 
NRK_PORTA
:

237 dÿ{ 
P1OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

238 
NRK_PORTB
:

239 dÿ{ 
P2OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

240 
NRK_PORTC
:

241 dÿ{ 
P3OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

242 
NRK_PORTD
:

243 dÿ{ 
P4OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

244 
NRK_PORTE
:

245 dÿ{ 
P5OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

246 
NRK_PORTF
:

247 dÿ{ 
P6OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

251 
	}
}

253 
öt8_t
 
	$ƒk_gpio_gë
(
uöt8_t
 
pö
)

255 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

256 
pö
 & 0x07) {

257 
NRK_PORTA
:

258  (
P1IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

259 
NRK_PORTB
:

260  (
P2IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

261 
NRK_PORTC
:

262  (
P3IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

263 
NRK_PORTD
:

264  (
P4IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

265 
NRK_PORTE
:

266  (
P5IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

267 
NRK_PORTF
:

268  (
P6IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

272 
	}
}

274 
öt8_t
 
	$ƒk_gpio_toggÀ
(
uöt8_t
 
pö
)

276 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

277 
pö
 & 0x07) {

278 
NRK_PORTA
:

279 i‡((
P1IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

280 dÿ{ 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

282 dÿ{ 
P1OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

285 
NRK_PORTB
:

286 i‡((
P2IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

287 dÿ{ 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

289 dÿ{ 
P2OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

292 
NRK_PORTC
:

293 i‡((
P3IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

294 dÿ{ 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

296 dÿ{ 
P3OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

299 
NRK_PORTD
:

300 i‡((
P4IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

301 dÿ{ 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

303 dÿ{ 
P4OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

306 
NRK_PORTE
:

307 i‡((
P5IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

308 dÿ{ 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

310 dÿ{ 
P5OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

313 
NRK_PORTF
:

314 i‡((
P6IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

315 dÿ{ 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

317 dÿ{ 
P6OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

323 
	}
}

325 
öt8_t
 
	$ƒk_gpio_dúe˘i⁄
(
uöt8_t
 
pö
, uöt8_à
pö_dúe˘i⁄
)

327 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

328 i‡(
pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) {

329 
pö
 & 0x07) {

330 
NRK_PORTA
:

331 
P1DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

332 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

334 
NRK_PORTB
:

335 
P2DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

336 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

338 
NRK_PORTC
:

339 
P3DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

340 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

342 
NRK_PORTD
:

343 
P4DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

344 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

346 
NRK_PORTE
:

347 
P5DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

348 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

350 
NRK_PORTF
:

351 
P6DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

352 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

357 
pö
 & 0x07) {

358 
NRK_PORTA
:

359 
P1DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

360 
NRK_PORTB
:

361 
P2DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

362 
NRK_PORTC
:

363 
P3DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

364 
NRK_PORTD
:

365 
P4DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

366 
NRK_PORTE
:

367 
P5DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

368 
NRK_PORTF
:

369 
P6DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

374 
	}
}

376 
öt8_t
 
	$ƒk_gpio_puŒups
(
uöt8_t
 
íabÀ
)

378  
NRK_ERROR
;

379 
	}
}

381 
öt8_t
 
	$ƒk_gë_buâ⁄
(
uöt8_t
 
b
)

384  
NRK_ERROR
;

385 
	}
}

387 
öt8_t
 
	$ƒk_Àd_toggÀ
–
Àd
 )

390 if(
Àd
==0Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED
);  1; }

391  
NRK_ERROR
;

392 
	}
}

394 
öt8_t
 
	$ƒk_Àd_˛r
–
Àd
 )

396 if(
Àd
==0Ë{ 
	`ƒk_gpio_£t
(
NRK_LED
);  1; }

397  
NRK_ERROR
;

398 
	}
}

400 
öt8_t
 
	$ƒk_Àd_£t
–
Àd
 )

402 if(
Àd
==0Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED
);  1; }

403  
NRK_ERROR
;

404 
	}
}

406 
	$putc0
(
x
)

408 
	`UART0_WAIT_AND_SEND
(
x
);

409 
	}
}

411 
	$putch¨
(
x
)

413 
	`UART1_WAIT_AND_SEND
(
x
);

415 
	}
}

420 
	$£tup_u¨t0
(
uöt16_t
 
baudøã
)

422 
	}
}

428 
	$£tup_u¨t1
(
uöt16_t
 
baudøã
)

430 
UCTL1
 = 
CHAR
;

431 
UTCTL1
 = 
SSEL1
;

432 
UBR01
=
baudøã
&0xff;

433 
UBR11
=(
baudøã
>>8)&0xff;

434 
UMCTL1
=0x00;

435 
ME2
 |
UTXE1
;

437 
P3SEL
 |= (1<<6);

438 
	}
}

450 
	$ƒk_£tup_u¨t
(
uöt16_t
 
baudøã
)

452 
	`£tup_u¨t1
(
baudøã
);

456 #ifde‡
NRK_UART_BUF


457 
u¨t_rx_sig«l
=
	`ƒk_sig«l_¸óã
();

458 if(
u¨t_rx_sig«l
==0Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

459 
u¨t_rx_buf_°¨t
=0;

460 
u¨t_rx_buf_íd
=0;

461 
	`ENABLE_UART1_RX_INT
();

464 
	}
}

467 
	$gëc0
(){

468 
tmp
;

469 
	`UART0_WAIT_AND_RECEIVE
(
tmp
);

470  
tmp
;

471 
	}
}

473 
	$PORT_INIT
()

481 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/hal.h

27 #i‚de‡
HAL_H


28 
	#HAL_H


	)

30 
uöt8_t
 
	tNRK_STK
;

43 
	#SPI_INIT
() \

45 
SPCR
 = 
	`BM
(
SPE
Ë| BM(
MSTR
); \

46 
SPSR
 = 
	`BM
(
SPI2X
); \

47 } 0)

	)

59 
	#FASTSPI_WAIT
() \

61 !(
SPSR
 & 
	`BM
(
SPIF
))); \

62 } 0)

	)

64 
	#FASTSPI_TX
(
x
) \

66 
SPDR
 = 
x
; \

67 
	`FASTSPI_WAIT
(); \

68 } 0)

	)

70 
	#FASTSPI_RX
(
x
) \

72 
SPDR
 = 0; \

73 
	`FASTSPI_WAIT
(); \

74 
x
 = 
SPDR
; \

75 } 0)

	)

77 
	#FASTSPI_RX_GARBAGE
() \

79 
SPDR
 = 0; \

80 
	`FASTSPI_WAIT
(); \

81 } 0)

	)

83 
	#FASTSPI_TX_WORD_LE
(
x
) \

85 
	`FASTSPI_TX
(
x
); \

86 
	`FASTSPI_TX
((
x
) >> 8); \

87 } 0)

	)

89 
	#FASTSPI_TX_WORD
(
x
) \

91 
	`FASTSPI_TX
(((
uöt16_t
)(
x
)) >> 8); \

92 
	`FASTSPI_TX
((
uöt8_t
)(
x
)); \

93 } 0)

	)

95 
	#FASTSPI_TX_MANY
(
p
,
c
) \

97 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

98 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

100 } 0)

	)

102 
	#FASTSPI_RX_WORD_LE
(
x
) \

104 
SPDR
 = 0; \

105 
	`FASTSPI_WAIT
(); \

106 
x
 = 
SPDR
; \

107 
SPDR
 = 0; \

108 
	`FASTSPI_WAIT
(); \

109 
x
 |
SPDR
 << 8; \

110 } 0)

	)

112 
	#FASTSPI_RX_WORD
(
x
) \

114 
SPDR
 = 0; \

115 
	`FASTSPI_WAIT
(); \

116 
x
 = 
SPDR
 << 8; \

117 
SPDR
 = 0; \

118 
	`FASTSPI_WAIT
(); \

119 
x
 |
SPDR
; \

120 } 0)

	)

122 
	#FASTSPI_RX_MANY
(
p
,
c
) \

124 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

125 
	`FASTSPI_RX
((
p
)[
•iC¡
]); \

127 } 0)

	)

130 
	#FASTSPI_TX_ADDR
(
a
) \

132 
SPDR
 = 
a
; \

133 
	`FASTSPI_WAIT
(); \

134 } 0)

	)

137 
	#FASTSPI_RX_ADDR
(
a
) \

139 
SPDR
 = (
a
) | 0x40; \

140 
	`FASTSPI_WAIT
(); \

141 } 0)

	)

151 
	#FASTSPI_STROBE
(
s
) \

153 
	`SPI_ENABLE
(); \

154 
	`FASTSPI_TX_ADDR
(
s
); \

155 
	`SPI_DISABLE
(); \

156 } 0)

	)

158 
	#FASTSPI_SETREG
(
a
,
v
) \

160 
	`SPI_ENABLE
(); \

161 
	`FASTSPI_TX_ADDR
(
a
); \

162 
	`FASTSPI_TX
((
uöt8_t
Ë((
v
) >> 8)); \

163 
	`FASTSPI_TX
((
uöt8_t
Ë(
v
)); \

164 
	`SPI_DISABLE
(); \

165 } 0)

	)

167 
	#FASTSPI_GETREG
(
a
,
v
) \

169 
	`SPI_ENABLE
(); \

170 
	`FASTSPI_RX_ADDR
(
a
); \

171 
	`FASTSPI_RX_WORD
(
v
); \

172 
	`SPI_DISABLE
(); \

173 } 0)

	)

176 
	#FASTSPI_UPD_STATUS
(
s
) \

178 
	`SPI_ENABLE
(); \

179 
	`FASTSPI_TX_ADDR
(
CC2420_SNOP
); \

180 
s
 = 
SPDR
; \

181 
	`SPI_DISABLE
(); \

182 } 0)

	)

192 
	#FASTSPI_WRITE_FIFO
(
p
,
c
) \

194 
	`SPI_ENABLE
(); \

195 
	`FASTSPI_TX_ADDR
(
CC2420_TXFIFO
); \

196 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

197 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

199 
	`SPI_DISABLE
(); \

200 } 0)

	)

202 
	#FASTSPI_READ_FIFO
(
p
,
c
) \

204 
	`SPI_ENABLE
(); \

205 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

206 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

207 !
FIFO_IS_1
); \

208 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

210 
	`SPI_DISABLE
(); \

211 } 0)

	)

213 
	#FASTSPI_READ_FIFO_BYTE
(
b
) \

215 
	`SPI_ENABLE
(); \

216 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

217 
	`FASTSPI_RX
(
b
); \

218 
	`SPI_DISABLE
(); \

219 } 0)

	)

221 
	#FASTSPI_READ_FIFO_NO_WAIT
(
p
,
c
) \

223 
	`SPI_ENABLE
(); \

224 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

225 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

226 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

228 
	`SPI_DISABLE
(); \

229 } 0)

	)

231 
	#FASTSPI_READ_FIFO_GARBAGE
(
c
) \

233 
	`SPI_ENABLE
(); \

234 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

235 
uöt8_t
 
•iC¡
 = 0; ((•iC¡ < (
c
)Ë&& (
FIFO_IS_1
)); spiCnt++) { \

236 
	`FASTSPI_RX_GARBAGE
(); \

238 
	`SPI_DISABLE
(); \

239 } 0)

	)

255 
	#FASTSPI_WRITE_RAM_LE
(
p
,
a
,
c
,
n
) \

257 
	`SPI_ENABLE
(); \

258 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

259 
	`FASTSPI_TX
((
a
 >> 1) & 0xC0); \

260 
n
 = 0;Ç < (
c
);Ç++) { \

261 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
n
]); \

263 
	`SPI_DISABLE
(); \

264 } 0)

	)

266 
	#FASTSPI_READ_RAM_LE
(
p
,
a
,
c
,
n
) \

268 
	`SPI_ENABLE
(); \

269 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

270 
	`FASTSPI_TX
(((
a
 >> 1) & 0xC0) | 0x20); \

271 
n
 = 0;Ç < (
c
);Ç++) { \

272 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
n
]); \

274 
	`SPI_DISABLE
(); \

275 } 0)

	)

277 
	#FASTSPI_WRITE_RAM
(
p
,
a
,
c
,
n
) \

279 
	`SPI_ENABLE
(); \

280 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

281 
	`FASTSPI_TX
((
a
 >> 1) & 0xC0); \

282 
n
 = 
c
; \

284 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[--
n
]); \

285 } 
n
); \

286 
	`SPI_DISABLE
(); \

287 } 0)

	)

289 
	#FASTSPI_READ_RAM
(
p
,
a
,
c
,
n
) \

291 
	`SPI_ENABLE
(); \

292 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

293 
	`FASTSPI_TX
(((
a
 >> 1) & 0xC0) | 0x20); \

294 
n
 = 
c
; \

296 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[--
n
]); \

297 } 
n
); \

298 
	`SPI_DISABLE
(); \

299 } 0)

	)

305 
	#FASTSPI_RESET_CC2420
() \

307 
	`FASTSPI_SETREG
(
CC2420_MAIN
, 0x0000); \

308 
	`FASTSPI_SETREG
(
CC2420_MAIN
, 0xF800); \

309 } 0)

	)

324 
	#ENABLE_GLOBAL_INT
(Ëdÿ{ 
	`asm
 ("£i\n\t" ::); } 0)

	)

325 
	#DISABLE_GLOBAL_INT
(Ëdÿ{ 
	`asm
 ("˛i\n\t" ::); } 0)

	)

331 
	#ENABLE_UART1_INT
(Ëdÿ{ 
UCSR1B
 |(
	`BM
(
UDRIE1
Ë| BM(
RXCIE1
)); } 0)

	)

332 
	#DISABLE_UART1_INT
(Ëdÿ{ 
UCSR1B
 &~(
	`BM
(
UDRIE1
Ë| BM(
RXCIE1
)); } 0)

	)

334 
	#ENABLE_UART1_TX_INT
(Ëdÿ{ 
UCSR1B
 |
	`BM
(
UDRIE1
); } 0)

	)

335 
	#DISABLE_UART1_TX_INT
(Ëdÿ{ 
UCSR1B
 &~
	`BM
(
UDRIE1
); } 0)

	)

336 
	#CLEAR_UART1_TX_INT
(Ëdÿ{ 
UCSR1A
 &~
	`BM
(
UDRE1
); } 0)

	)

337 
	#SET_UART1_TX_INT
(Ëdÿ{ 
UCSR1A
 |
	`BM
(
UDRE1
); } 0)

	)

339 
	#ENABLE_UART1_RX_INT
(Ëdÿ{ 
UCSR1B
 |
	`BM
(
RXCIE1
); } 0)

	)

340 
	#DISABLE_UART1_RX_INT
(Ëdÿ{ 
UCSR1B
 &~
	`BM
(
RXCIE1
); } 0)

	)

341 
	#CLEAR_UART1_RX_INT
(Ëdÿ{ 
UCSR1A
 &~
	`BM
(
RXC1
); } 0)

	)

349 
	#ENABLE_UART0_TX_INT
(Ëdÿ{ 
UCSR0B
 |
	`BM
(
UDRIE0
); } 0)

	)

350 
	#DISABLE_UART0_TX_INT
(Ëdÿ{ 
UCSR0B
 &~
	`BM
(
UDRIE0
); } 0)

	)

351 
	#CLEAR_UART0_TX_INT
(Ëdÿ{ 
UCSR0A
 &~
	`BM
(
UDRE0
); } 0)

	)

352 
	#SET_UART0_TX_INT
(Ëdÿ{ 
UCSR0A
 |
	`BM
(
UDRE0
); } 0)

	)

354 
	#ENABLE_UART0_RX_INT
(Ëdÿ{ 
UCSR0B
 |
	`BM
(
RXCIE0
); } 0)

	)

355 
	#DISABLE_UART0_RX_INT
(Ëdÿ{ 
UCSR0B
 &~
	`BM
(
RXCIE0
); } 0)

	)

356 
	#CLEAR_UART0_RX_INT
(Ëdÿ{ 
UCSR0A
 &~
	`BM
(
RXC0
); } 0)

	)

373 
	#ADC_INIT
() \

375 
ADCSRA
 = 
	`BM
(
ADPS0
Ë| BM(
ADPS1
Ë| BM(
ADFR
); \

376 
ADMUX
 = 
	`BM
(
REFS0
); \

377 } 0)

	)

389 
	#ADC_SET_CHANNEL
(
ch™√l
Ëdÿ{ 
ADMUX
 = (ADMUX & ~0x1FË| (ch™√l); } 0)

	)

392 
	#ADC_ENABLE
(Ëdÿ{ 
ADCSRA
 |
	`BM
(
ADEN
); } 0)

	)

393 
	#ADC_DISABLE
(Ëdÿ{ 
ADCSRA
 &~
	`BM
(
ADEN
); } 0)

	)

401 
	#ADC_SAMPLE_SINGLE
() \

403 
ADCSRA
 |
	`BM
(
ADSC
); \

404 !(
ADCSRA
 & 0x10)); \

405 } 0)

	)

408 
	#ADC_GET_SAMPLE_10
(
x
) \

410 
x
 = 
ADCL
; \

411 
x
 |
ADCH
 << 8; \

412 } 0)

	)

414 
	#ADC_GET_SAMPLE_8
(
x
) \

416 
x
 = ((
uöt8_t
Ë
ADCL
) >> 2; \

417 
x
 |((
öt8_t
Ë
ADCH
) << 6; \

418 } 0)

	)

445 
	#PWM0_INIT
(
≥riod
) \

447 
OCR0
 = 0; \

448 
TCCR0
 = 
	`BM
(
WGM00
Ë| BM(
COM01
Ë| BM(
COM00
); \

449 
	`PWM0_SET_PERIOD
(
≥riod
); \

450 } 0)

	)

453 
	#PWM0_SET_PERIOD
(
≥riod
Ëdÿ{ 
TCCR0
 = ((TCCR0 & ~0x07Ë| (≥riod)); } 0)

	)

456 
	#TIMER_CLK_STOP
 0x00

	)

457 
	#TIMER_CLK_DIV1
 0x01

	)

458 
	#TIMER_CLK_DIV8
 0x02

	)

459 
	#TIMER_CLK_DIV64
 0x03

	)

460 
	#TIMER_CLK_DIV256
 0x04

	)

461 
	#TIMER_CLK_DIV1024
 0x05

	)

462 
	#TIMER_CLK_T_FALL
 0x06

	)

463 
	#TIMER_CLK_T_RISE
 0x07

	)

466 
	#PWM0_SET_DUTY_CYCLE
(
dutyCy˛e
Ëdÿ{ 
OCR0
 = (dutyCy˛e); } 0)

	)

474 
	#ENABLE_T0_COMPARE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
OCIE0
); } 0)

	)

475 
	#DISABLE_T0_COMPARE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
OCIE0
); } 0)

	)

476 
	#CLEAR_T0_COMPARE_INT
(Ëdÿ{ 
TIFR
 &~
	`BM
(
TOV0
); } 0)

	)

478 
	#ENABLE_T0_OVERFLOW_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TOIE1
); } 0)

	)

479 
	#DISABLE_T0_OVERFLOW_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TOIE1
); } 0)

	)

480 
	#CLEAR_T0_OVERFLOW_INT
(Ëdÿ{ 
TIFR
 &~
	`BM
(
OCF0
)); } 0)

	)

508 
	#INIT_UART1
(
baudR©e
,
›ti⁄s
) \

510 
UBRR1H
 = (
baudR©e
) >> 8; \

511 
UBRR1L
 = (
baudR©e
); \

512 
UCSR1C
 = (
uöt8_t
Ë
›ti⁄s
; \

513 i‡(
›ti⁄s
 > 0xFF) { \

514 
UCSR1B
 |= 0x04; \

516 
UCSR1B
 &= ~0x04; \

518 
UCSR1A
 |
	`BM
(
U2X1
); \

519 } 0)

	)

521 
	#INIT_UART0
(
baudR©e
,
›ti⁄s
) \

523 
UBRR0H
 = (
baudR©e
) >> 8; \

524 
UBRR0L
 = (
baudR©e
); \

525 
UCSR0C
 = (
uöt8_t
Ë
›ti⁄s
; \

526 i‡(
›ti⁄s
 > 0xFF) { \

527 
UCSR0B
 |= 0x04; \

529 
UCSR0B
 &= ~0x04; \

531 
UCSR0A
 |
	`BM
(
U2X0
); \

532 } 0)

	)

535 
	#UART_BAUDRATE_2K4
 416

	)

536 
	#UART_BAUDRATE_4K8
 207

	)

537 
	#UART_BAUDRATE_9K6
 103

	)

538 
	#UART_BAUDRATE_14K4
 68

	)

539 
	#UART_BAUDRATE_19K2
 51

	)

540 
	#UART_BAUDRATE_28K8
 34

	)

541 
	#UART_BAUDRATE_38K4
 25

	)

542 
	#UART_BAUDRATE_57K6
 16

	)

543 
	#UART_BAUDRATE_115K2
 8

	)

544 
	#UART_BAUDRATE_230K4
 3

	)

545 
	#UART_BAUDRATE_250K
 3

	)

550 
	#UART_OPT_ONE_STOP_BIT
 0

	)

551 
	#UART_OPT_TWO_STOP_BITS
 0x08

	)

552 
	#UART_OPT_NO_PARITY
 0

	)

553 
	#UART_OPT_EVEN_PARITY
 0x20

	)

554 
	#UART_OPT_ODD_PARITY
 0x30

	)

555 
	#UART_OPT_5_BITS_PER_CHAR
 0

	)

556 
	#UART_OPT_6_BITS_PER_CHAR
 0x02

	)

557 
	#UART_OPT_7_BITS_PER_CHAR
 0x04

	)

558 
	#UART_OPT_8_BITS_PER_CHAR
 0x06

	)

559 
	#UART_OPT_9_BITS_PER_CHAR
 0x0406

	)

567 
	#ENABLE_UART0
(Ë(
UCSR0B
 |(
	`BM
(
RXEN0
Ë| BM(
TXEN0
)))

	)

568 
	#DISABLE_UART0
(Ë(
UCSR0B
 &~(
	`BM
(
RXEN0
Ë| BM(
TXEN0
)))

	)

569 
	#ENABLE_UART1
(Ë(
UCSR1B
 |(
	`BM
(
RXEN1
Ë| BM(
TXEN1
)))

	)

570 
	#DISABLE_UART1
(Ë(
UCSR1B
 &~(
	`BM
(
RXEN1
Ë| BM(
TXEN1
)))

	)

583 
	#UART1_WAIT
(Ëdÿ{ !(
UCSR1A
 & 
	`BM
(
UDRE1
))); } 0)

	)

585 
	#UART1_WAIT_RX
(Ëdÿ{ !(
UCSR1A
 & 
	`BM
(
RXC1
))); 
	`CLEAR_UART1_RX_INT
(); } 0)

	)

587 
	#UART1_SEND
(
x
Ëdÿ{ 
UDR1
 = (x); } 0)

	)

589 
	#UART1_WAIT_AND_SEND
(
x
Ëdÿ{ 
	`UART1_WAIT
(); 
	`UART1_SEND
(x); } 0)

	)

591 
	#UART1_RECEIVE
(
x
Ëdÿ{ (xË
UDR1
; } 0)

	)

593 
	#UART1_WAIT_AND_RECEIVE
(
x
Ëdÿ{ 
	`UART1_WAIT_RX
(); 
	`UART1_RECEIVE
(x); } 0)

	)

596 
	#UART0_WAIT
(Ëdÿ{ !(
UCSR0A
 & 
	`BM
(
UDRE0
))); 
	`CLEAR_UART0_TX_INT
(); } 0)

	)

598 
	#UART0_WAIT_RX
(Ëdÿ{ !(
UCSR0A
 & 
	`BM
(
RXC0
))); 
	`CLEAR_UART0_RX_INT
(); } 0)

	)

600 
	#UART0_SEND
(
x
Ëdÿ{ 
UDR0
 = (x); } 0)

	)

602 
	#UART0_WAIT_AND_SEND
(
x
Ëdÿ{ 
	`UART0_WAIT
(); 
	`UART0_SEND
(x); } 0)

	)

604 
	#UART0_RECEIVE
(
x
Ëdÿ{ (xË
UDR0
; } 0)

	)

606 
	#UART0_WAIT_AND_RECEIVE
(
x
Ëdÿ{ 
	`UART0_WAIT_RX
(); 
	`UART0_RECEIVE
(x); } 0)

	)

616 
	#TIMER0_OFF
 0

	)

617 
	#TIMER0_PRESCALE_1
 1

	)

618 
	#TIMER0_PRESCALE_8
 2

	)

619 
	#TIMER0_PRESCALE_32
 3

	)

620 
	#TIMER0_PRESCALE_64
 4

	)

621 
	#TIMER0_PRESCALE_128
 5

	)

622 
	#TIMER0_PRESCALE_256
 6

	)

623 
	#TIMER0_PRESCALE_1024
 7

	)

625 
	#TIMER0_WGM_0
 0x00

	)

626 
	#TIMER0_WGM_1
 0x40

	)

627 
	#TIMER0_WGM_2
 0x08

	)

628 
	#TIMER0_WGM_3
 0x48

	)

630 
	#TIMER0_COM_0
 0x00

	)

631 
	#TIMER0_COM_1
 0x08

	)

632 
	#TIMER0_COM_2
 0x10

	)

633 
	#TIMER0_COM_3
 0x18

	)

634 
	#TIMER0_COM_4
 0x20

	)

635 
	#TIMER0_COM_5
 0x28

	)

636 
	#TIMER0_COM_6
 0x30

	)

637 
	#TIMER0_COM_7
 0x38

	)

639 
	#TIMER0_SET_CONTROL
(
x
Ëdÿ{
TCCR0
 = (x); } 0)

	)

641 
	#TIMER0_SET_VALUE
(
x
Ëdÿ{
TCNT0
 = (x); } 0)

	)

642 
	#TIMER0_READ_VALUE
(
x
Ëdÿ{(xË
TCNT0
; } 0)

	)

644 
	#TIMER0_SET_COMPARE_VALUE
(
x
Ëdÿ{
OCR0
 = (x); } 0)

	)

645 
	#TIMER0_READ_COMPARE_VALUE
(
x
Ëdÿ{(xË
OCR0
; } 0)

	)

656 
	#NOP
(Ë
asm
 vﬁ©ûê("n›\n\t" ::)

	)

669 
hÆWaô
(
uöt16_t
 
timeout
);

702 
hÆRfWaôF‹Cry°ÆOscûœt‹
();

716 
hÆRfSëCh™√l
(
uöt8_t
 
ch™√l
);

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/hal_firefly2.h

28 #i‚de‡
HAL_FIREFLY2_H


29 
	#HAL_FIREFLY2_H


	)

31 
	#FIREFLY2_PLATFORM


	)

33 
	#ORANGE_LED
 0

	)

34 
	#BLUE_LED
 1

	)

35 
	#GREEN_LED
 2

	)

36 
	#RED_LED
 3

	)

38 
	#NRK_DEFAULT_UART
 1

	)

56 
	#PORT_INIT
() \

58 
SFIOR
 |
	`BM
(
PUD
); \

59 
DDRB
 = 
	`BM
(
MOSI
Ë| BM(
SCK
Ë| BM(
SPI_SS
); \

60 
PORTB
 = 
	`BM
(
MOSI
Ë| BM(
SCK
Ë| BM(
SPI_SS
); \

61 
DDRC
 = 
	`BM
(
CSN
); \

62 
PORTC
 = 
	`BM
(
CSN
); \

63 
DDRE
 = 
	`BM
(
LED_0
Ë| BM(
LED_1
Ë| BM(
LED_2
Ë| BM(
LED_3
); \

64 
DDRA
 = 
	`BM
(
VREG_EN
Ë| BM(
RESET_N
Ë| BM(
DEBUG_0
Ë| BM(
DEBUG_1
); \

65 
PORTA
 = 
	`BM
(
RESET_N
); \

66 } 0)

	)

72 
	#SPI_ENABLE
(Ë(
PORTC
 &~
	`BM
(
CSN
))

	)

73 
	#SPI_DISABLE
(Ë(
PORTC
 |
	`BM
(
CSN
))

	)

88 
	#FIFO_IS_1
 (!!(
PINC
 & 
	`BM
(
FIFO
)))

	)

89 
	#CCA_IS_1
 (!!(
PIND
 & 
	`BM
(
CCA
)))

	)

90 
	#RESET_IS_1
 (!!(
PINA
 & 
	`BM
(
RESET_N
)))

	)

91 
	#VREG_IS_1
 (!!(
PINA
 & 
	`BM
(
VREG_EN
)))

	)

92 
	#FIFOP_IS_1
 (!!(
PINE
 & 
	`BM
(
FIFOP
)))

	)

93 
	#SFD_IS_1
 (!!(
PIND
 & 
	`BM
(
SFD
)))

	)

96 
	#SET_RESET_ACTIVE
(Ë
PORTA
 &~
	`BM
(
RESET_N
)

	)

97 
	#SET_RESET_INACTIVE
(Ë
PORTA
 |
	`BM
(
RESET_N
)

	)

100 
	#SET_VREG_ACTIVE
(Ë
PORTA
 |
	`BM
(
VREG_EN
)

	)

101 
	#SET_VREG_INACTIVE
(Ë
PORTA
 &~
	`BM
(
VREG_EN
)

	)

115 
	#FIFOP_INT_INIT
(Ëdÿ{ 
EICRA
 |0x03; 
	`CLEAR_FIFOP_INT
(); } 0)

	)

118 
	#ENABLE_FIFOP_INT
(Ëdÿ{ 
EIMSK
 |0x01; } 0)

	)

119 
	#DISABLE_FIFOP_INT
(Ëdÿ{ 
EIMSK
 &~0x01; } 0)

	)

120 
	#CLEAR_FIFOP_INT
(Ëdÿ{ 
EIFR
 = 0x01; } 0)

	)

126 
	#ENABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TICIE1
); } 0)

	)

127 
	#DISABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TICIE1
); } 0)

	)

128 
	#CLEAR_SFD_CAPTURE_INT
(Ëdÿ{ 
TIFR
 = 
	`BM
(
ICF1
); } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/include.h

27 #i‚de‡
INCLUDE_H


28 
	#INCLUDE_H


	)

51 #i‚de‡
FALSE


52 
	#FALSE
 0

	)

54 #i‚de‡
TRUE


55 
	#TRUE
 1

	)

57 #i‚de‡
NULL


58 
	#NULL
 0

	)

62 
	#BM
(
n
Ë(1 << (n))

	)

63 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

64 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

65 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

66 
	#ABS
(
n
Ë(“ < 0Ë? -“Ë: (n))

	)

69 (*
	tVFPTR
)();

75 
	~<avr/io.h
>

76 
	~<avr/pgm•a˚.h
>

77 
	~<avr/sig«l.h
>

78 
	~<°rög.h
>

80 #ifde‡
STK501


84 #ifde‡
CC2420DB


89 
	~<hÆ.h
>

90 
	~<hÆ_fúeÊy2.h
>

91 
	~<hÆ_cc2420.h
>

93 
	~<basic_rf.h
>

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/nrk_eeprom.h

1 #i‚de‡
_NRK_EEPROM_H_


2 
	#_NRK_EEPROM_H_


	)

3 
	~<°döt.h
>

5 
öt8_t
 
ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
);

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/nrk_pin_define.h

28 #i‚de‡
NRK_PIN_DEFINE_H


29 
	#NRK_PIN_DEFINE_H


	)

40 
	#VREG_EN
 5

41 
	#RESET_N
 6

42 
	#DEBUG_0
 3

	)

43 
	#DEBUG_1
 4

	)

44 
	#BUTTON
 7

45 

	)

48 
	#SPI_SS
 0

49 
	#SCK
 1

50 
	#MOSI
 2

51 
	#MISO
 3

52 
	#GPIO26
 4

	)

53 
	#GPIO28
 5

	)

57 
	#CSN
 0

58 
	#FIFO
 1

59 

	)

64 
	#UART1_RXD
 2

65 
	#UART1_TXD
 3

66 
	#SFD
 6

67 
	#UART1_RTS
 5

68 
	#CCA
 4

69 
	#UART1_CTS
 7

70 

	)

75 
	#UART0_RXD
 0

76 
	#UART0_TXD
 1

77 
	#LED_0
 2

78 
	#LED_1
 3

79 
	#LED_2
 4

80 
	#LED_3
 5

81 
	#GPIO34
 6

	)

82 
	#FIFOP
 7

86 
	#ADC_INPUT_0
 0

	)

87 
	#ADC_INPUT_1
 1

88 
	#ADC_INPUT_2
 2

89 
	#ADC_INPUT_3
 3

90 
	#ADC_INPUT_4
 4

91 
	#ADC_INPUT_5
 5

92 
	#ADC_INPUT_6
 6

93 
	#ADC_INPUT_7
 7

94 

	)

111 
	#ƒk_gpio_øw_£t
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à|
	`BM
(_pö); } 0);}

	)

113 
	#ƒk_gpio_øw_˛r
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à&~
	`BM
(_pö); } 0);}

	)

115 
	#ƒk_gpio_øw_gë
–
_pö_p‹t
, 
_pö
 ) (_pö_p‹à& 
	`BM
(_pö))

	)

117 
	#ƒk_gpio_øw_toggÀ
–
_pö_p‹t
, 
_p‹t
, 
_pö
 ) { \

	)

118 i‡((
	g_pö_p‹t
 & 
BM
(
_pö
))Ëdo{ 
	g_p‹t
 &= ~BM(_pin); } 0); \

119 dÿ{ 
	g_p‹t
 |
BM
(
_pö
); }0); \

122 
	#ƒk_gpio_øw_dúe˘i⁄
–
_dúe˘i⁄_p‹t_«me
, 
_pö
, 
_pö_dúe˘i⁄
 ) { \

	)

123 i‡(
	g_pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) { \

124 
_dúe˘i⁄_p‹t_«me
 &~
BM
–
_pö
 ); \

126 
	g_dúe˘i⁄_p‹t_«me
 |
BM
–
_pö
 ); \

136 
	#NRK_INVALID_PIN_VAL
 0xFF

	)

140 
	#NRK_PORTA
 0

	)

141 
	#NRK_PORTB
 1

	)

142 
	#NRK_PORTC
 2

	)

143 
	#NRK_PORTD
 3

	)

144 
	#NRK_PORTE
 4

	)

145 
	#NRK_PORTF
 5

	)

148 
	#NRK_PIN_INPUT
 0

	)

149 
	#NRK_PIN_OUTPUT
 1

	)

159 
	#DECLARE_NRK_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«me;

	)

160 
	#NRK_PIN
–
_pö_«me
, 
_pö
 , 
_p‹t
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê(_pö << 3Ë+ (_p‹à& 0x07);

	)

161 
	#NRK_INVALID_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê
NRK_INVALID_PIN_VAL
;

	)

165 
	$DECLARE_NRK_PIN
–
DEBUG_0
 )

166 
	$DECLARE_NRK_PIN
–
DEBUG_1
 )

167 
	$DECLARE_NRK_PIN
–
BUTTON
 )

169 
	$DECLARE_NRK_PIN
–
SPI_SS
 )

170 
	$DECLARE_NRK_PIN
–
SCK
 )

171 
	$DECLARE_NRK_PIN
–
MOSI
 )

172 
	$DECLARE_NRK_PIN
–
MISO
 )

174 
	$DECLARE_NRK_PIN
–
GPIO28
 )

175 
	$DECLARE_NRK_PIN
–
GPIO26
 )

178 
	$DECLARE_NRK_PIN
–
UART1_RXD
 )

179 
	$DECLARE_NRK_PIN
–
UART1_TXD
 )

180 
	$DECLARE_NRK_PIN
–
SFD
 )

181 
	$DECLARE_NRK_PIN
–
CCA
 )

183 
	$DECLARE_NRK_PIN
–
UART0_RXD
 )

184 
	$DECLARE_NRK_PIN
–
UART0_TXD
 )

185 
	$DECLARE_NRK_PIN
–
FIFOP
 )

186 
	$DECLARE_NRK_PIN
–
LED_0
 )

187 
	$DECLARE_NRK_PIN
–
LED_1
 )

188 
	$DECLARE_NRK_PIN
–
LED_2
 )

189 
	$DECLARE_NRK_PIN
–
LED_3
 )

191 
	$DECLARE_NRK_PIN
–
GPIO34
 )

193 
	$DECLARE_NRK_PIN
–
ADC_INPUT_0
 )

194 
	$DECLARE_NRK_PIN
–
ADC_INPUT_1
 )

195 
	$DECLARE_NRK_PIN
–
ADC_INPUT_2
 )

196 
	$DECLARE_NRK_PIN
–
ADC_INPUT_3
 )

197 
	$DECLARE_NRK_PIN
–
ADC_INPUT_4
 )

198 
	$DECLARE_NRK_PIN
–
ADC_INPUT_5
 )

199 
	$DECLARE_NRK_PIN
–
JTAG_TCK
 )

200 
	$DECLARE_NRK_PIN
–
JTAG_TMS
 )

201 
	$DECLARE_NRK_PIN
–
JTAG_TDO
 )

202 
	$DECLARE_NRK_PIN
–
JTAG_TDI
 )

204 
	$DECLARE_NRK_PIN
–
ADC_INPUT_6
 )

205 
	$DECLARE_NRK_PIN
–
ADC_INPUT_7
 )

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/nrk_platform_time.h

26 #i‚de‡
NRK_PLATFORM_TIME_H


27 
	#NRK_PLATFORM_TIME_H


	)

33 
	#NANOS_PER_TICK
 976563

	)

34 
	#US_PER_TICK
 977

	)

35 
	#TICKS_PER_SEC
 1024

	)

38 #i‚de‡
NRK_SLEEP_WAKEUP_TIME


39 
	#NRK_SLEEP_WAKEUP_TIME
 10

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/source/hal_wait.c

50 
	~<ö˛ude.h
>

63 
	$hÆWaô
(
uöt16_t
 
timeout
) {

67 
	`NOP
();

68 
	`NOP
();

69 
	`NOP
();

70 
	`NOP
();

71 } --
timeout
);

73 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/source/nrk_eeprom.c

1 
	~<ƒk_ì¥om.h
>

2 
	~<avr/ì¥om.h
>

3 
	~<ƒk_îr‹.h
>

6 
öt8_t
 
	$ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
)

8 
uöt8_t
 
checksum
,
˘
;

9 
uöt8_t
 *
buf
;

10 
buf
=
addªss
;

11 
checksum
=
buf
[0]+buf[1]+buf[2]+buf[3];

12 
buf
[3]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)0);

13 
buf
[2]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)1);

14 
buf
[1]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)2);

15 
buf
[0]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)3);

16 
checksum
=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)4);

17 
˘
=
buf
[0];

18 
˘
+=
buf
[1];

19 
˘
+=
buf
[2];

20 
˘
+=
buf
[3];

21 if(
checksum
==
˘
Ë 
NRK_OK
;

23  
NRK_ERROR
;

24 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/source/ulib.c

1 
	~<ö˛ude.h
>

2 
	~<ulib.h
>

3 
	~<°dio.h
>

4 
	~<hÆ.h
>

5 
	~<hÆ_fúeÊy2.h
>

6 
	~<avr/öãºu±.h
>

7 
	~<ƒk_pö_deföe.h
>

8 
	~<ƒk_îr‹.h
>

9 
	~<ƒk_evíts.h
>

11 #ifde‡
NANORK


12 
	~<ƒk_cfg.h
>

15 #ifde‡
NRK_UART_BUF


16 
	~<ƒk_evíts.h
>

18 #i‚de‡
MAX_RX_UART_BUF


19 
	#MAX_RX_UART_BUF
 16

	)

22 
uöt8_t
 
	gu¨t_rx_buf_°¨t
,
	gu¨t_rx_buf_íd
;

23 
	gu¨t_rx_buf
[
MAX_RX_UART_BUF
];

24 
ƒk_sig_t
 
	gu¨t_rx_sig«l
;

26 
	$SIGNAL
(
USART1_RX_ve˘
)

28 
c
;

29 
uöt8_t
 
sig
;

30 
	`˛i
();

31 
	`DISABLE_UART1_RX_INT
();

32 
	`UART1_WAIT_AND_RECEIVE
(
c
);

33 
u¨t_rx_buf
[
u¨t_rx_buf_íd
]=
c
;

35 
u¨t_rx_buf_íd
++;

36 if(
u¨t_rx_buf_íd
==
MAX_RX_UART_BUF
) uart_rx_buf_end=0;

37 
	`ƒk_evít_sig«l
(
u¨t_rx_sig«l
);

38 
	`CLEAR_UART1_RX_INT
();

39 
	`ENABLE_UART1_RX_INT
();

40 
	`£i
();

41 
	}
}

43 
	$gëc1
()

45 
tmp
;

47 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)

49 
tmp
=
u¨t_rx_buf
[
u¨t_rx_buf_°¨t
];

50 
u¨t_rx_buf_°¨t
++;

51 if(
u¨t_rx_buf_°¨t
==
MAX_RX_UART_BUF
) uart_rx_buf_start=0;

52 (
tmp
);

55 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

56  
tmp
;

57 
	}
}

59 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

61 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)  1;

63 
	}
}

65 
ƒk_sig_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

67 if(
u¨t_rx_sig«l
==
NRK_ERROR
Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

68  
u¨t_rx_sig«l
;

69 
	}
}

73 
ƒk_sig_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

75  
NRK_ERROR
;

76 
	}
}

79 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

81 if(
u¨t_num
==1)

83 if–
UCSR1A
 & 
	`BM
(
RXC1
) )  1;

86 
	}
}

88 
	$gëc1
(){

89 
tmp
;

90 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

91  
tmp
;

92 
	}
}

96 
	$ƒk_k¥ötf
–c⁄° *
addr
)

98 
c
;

99 (
c
=
	`pgm_ªad_byã
(
addr
++)))

100 
	`putch¨
(
c
);

101 
	}
}

103 
	$ƒk_£tup_p‹ts
()

105 
	`PORT_INIT
();

106 
	`SPI_INIT
();

107 
	}
}

119 
	$NRK_PIN
–
DEBUG_0
,DEBUG_0, 
NRK_PORTA
 )

120 
	$NRK_PIN
–
DEBUG_1
,DEBUG_1, 
NRK_PORTA
 )

121 
	$NRK_PIN
–
BUTTON
,BUTTON, 
NRK_PORTA
 )

124 
	$NRK_PIN
–
SPI_SS
,SPI_SS, 
NRK_PORTB
 )

125 
	$NRK_PIN
–
SCK
,SCK, 
NRK_PORTB
 )

126 
	$NRK_PIN
–
MOSI
,MOSI, 
NRK_PORTB
 )

127 
	$NRK_PIN
–
MISO
,MISO, 
NRK_PORTB
 )

128 
	$NRK_PIN
–
GPIO26
,4, 
NRK_PORTB
 )

129 
	$NRK_PIN
–
GPIO28
,5, 
NRK_PORTB
 )

133 
	$NRK_PIN
–
UART1_RXD
,UART1_RXD, 
NRK_PORTD
 )

134 
	$NRK_PIN
–
UART1_TXD
,UART1_TXD, 
NRK_PORTD
 )

135 
	$NRK_PIN
–
CCA
,CCA, 
NRK_PORTD
 )

136 
	$NRK_PIN
–
SFD
,SFD, 
NRK_PORTD
 )

140 
	$NRK_PIN
–
UART0_RXD
,UART0_RXD, 
NRK_PORTE
 )

141 
	$NRK_PIN
–
UART0_TXD
,UART0_TXD, 
NRK_PORTE
 )

142 
	$NRK_PIN
–
LED_0
,LED_0, 
NRK_PORTE
 )

143 
	$NRK_PIN
–
LED_1
,LED_1, 
NRK_PORTE
 )

144 
	$NRK_PIN
–
LED_2
,LED_2, 
NRK_PORTE
 )

145 
	$NRK_PIN
–
LED_3
,LED_3, 
NRK_PORTE
 )

146 
	$NRK_PIN
–
GPIO34
,GPIO34, 
NRK_PORTE
 )

147 
	$NRK_PIN
–
FIFOP
, FIFOP, 
NRK_PORTE
 )

152 
	$NRK_PIN
–
ADC_INPUT_0
, ADC_INPUT_0, 
NRK_PORTF
 )

153 
	$NRK_PIN
–
ADC_INPUT_1
, ADC_INPUT_1, 
NRK_PORTF
 )

154 
	$NRK_PIN
–
ADC_INPUT_2
, ADC_INPUT_2, 
NRK_PORTF
 )

155 
	$NRK_PIN
–
ADC_INPUT_3
, ADC_INPUT_3, 
NRK_PORTF
 )

156 
	$NRK_PIN
–
ADC_INPUT_4
, ADC_INPUT_4, 
NRK_PORTF
 )

157 
	$NRK_PIN
–
ADC_INPUT_5
, ADC_INPUT_5, 
NRK_PORTF
 )

158 
	$NRK_PIN
–
ADC_INPUT_6
, ADC_INPUT_6, 
NRK_PORTF
 )

159 
	$NRK_PIN
–
ADC_INPUT_7
, ADC_INPUT_7, 
NRK_PORTF
 )

164 
öt8_t
 
	$ƒk_gpio_£t
(
uöt8_t
 
pö
)

166 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

167 
pö
 & 0x07) {

168 
NRK_PORTA
:

169 dÿ{ 
PORTA
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

170 
NRK_PORTB
:

171 dÿ{ 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

172 
NRK_PORTC
:

173 dÿ{ 
PORTC
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

174 
NRK_PORTD
:

175 dÿ{ 
PORTD
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

176 
NRK_PORTE
:

177 dÿ{ 
PORTE
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

178 
NRK_PORTF
:

179 dÿ{ 
PORTF
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

183 
	}
}

185 
öt8_t
 
	$ƒk_gpio_˛r
(
uöt8_t
 
pö
)

187 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

188 
pö
 & 0x07) {

189 
NRK_PORTA
:

190 dÿ{ 
PORTA
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

191 
NRK_PORTB
:

192 dÿ{ 
PORTB
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

193 
NRK_PORTC
:

194 dÿ{ 
PORTC
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

195 
NRK_PORTD
:

196 dÿ{ 
PORTD
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

197 
NRK_PORTE
:

198 dÿ{ 
PORTE
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

199 
NRK_PORTF
:

200 dÿ{ 
PORTF
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

204 
	}
}

206 
öt8_t
 
	$ƒk_gpio_gë
(
uöt8_t
 
pö
)

208 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

209 
pö
 & 0x07) {

210 
NRK_PORTA
:

211  (
PINA
 & 
	`BM
((
pö
 & 0xF8) >> 3));

212 
NRK_PORTB
:

213  (
PINB
 & 
	`BM
((
pö
 & 0xF8) >> 3));

214 
NRK_PORTC
:

215  (
PINC
 & 
	`BM
((
pö
 & 0xF8) >> 3));

216 
NRK_PORTD
:

217  (
PIND
 & 
	`BM
((
pö
 & 0xF8) >> 3));

218 
NRK_PORTE
:

219  (
PINE
 & 
	`BM
((
pö
 & 0xF8) >> 3));

220 
NRK_PORTF
:

221  (
PINF
 & 
	`BM
((
pö
 & 0xF8) >> 3));

225 
	}
}

227 
öt8_t
 
	$ƒk_gpio_toggÀ
(
uöt8_t
 
pö
)

229 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

230 
pö
 & 0x07) {

231 
NRK_PORTA
:

232 i‡((
PINA
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

233 dÿ{ 
PORTA
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

235 dÿ{ 
PORTA
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

238 
NRK_PORTB
:

239 i‡((
PINB
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

240 dÿ{ 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

242 dÿ{ 
PORTB
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

245 
NRK_PORTC
:

246 i‡((
PINC
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

247 dÿ{ 
PORTC
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

249 dÿ{ 
PORTC
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

252 
NRK_PORTD
:

253 i‡((
PIND
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

254 dÿ{ 
PORTD
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

256 dÿ{ 
PORTD
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

259 
NRK_PORTE
:

260 i‡((
PINE
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

261 dÿ{ 
PORTE
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

263 dÿ{ 
PORTE
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

266 
NRK_PORTF
:

267 i‡((
PINF
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

268 dÿ{ 
PORTF
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

270 dÿ{ 
PORTF
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

276 
	}
}

278 
öt8_t
 
	$ƒk_gpio_dúe˘i⁄
(
uöt8_t
 
pö
, uöt8_à
pö_dúe˘i⁄
)

280 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

281 i‡(
pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) {

282 
pö
 & 0x07) {

283 
NRK_PORTA
:

284 
DDRA
 &~
	`BM
((
pö
 & 0xF8) >> 3);

285 
PORTA
 |
	`BM
((
pö
 & 0xF8) >> 3);

287 
NRK_PORTB
:

288 
DDRB
 &~
	`BM
((
pö
 & 0xF8) >> 3);

289 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

291 
NRK_PORTC
:

292 
DDRC
 &~
	`BM
((
pö
 & 0xF8) >> 3);

293 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

295 
NRK_PORTD
:

296 
DDRD
 &~
	`BM
((
pö
 & 0xF8) >> 3);

297 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

299 
NRK_PORTE
:

300 
DDRE
 &~
	`BM
((
pö
 & 0xF8) >> 3);

301 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

303 
NRK_PORTF
:

304 
DDRF
 &~
	`BM
((
pö
 & 0xF8) >> 3);

305 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

310 
pö
 & 0x07) {

311 
NRK_PORTA
:

312 
DDRA
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

313 
NRK_PORTB
:

314 
DDRB
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

315 
NRK_PORTC
:

316 
DDRC
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

317 
NRK_PORTD
:

318 
DDRD
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

319 
NRK_PORTE
:

320 
DDRE
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

321 
NRK_PORTF
:

322 
DDRF
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

327 
	}
}

329 
öt8_t
 
	$ƒk_gë_buâ⁄
(
uöt8_t
 
b
)

331 if(
b
==0) {

332 –!(
PINA
 & 
	`BM
(
BUTTON
)));

335 
	}
}

337 
öt8_t
 
	$ƒk_Àd_toggÀ
–
Àd
 )

339 if(
Àd
==0Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_0
);  1; }

340 if(
Àd
==1Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_1
);  1; }

341 if(
Àd
==2Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_2
);  1; }

342 if(
Àd
==3Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_3
);  1; }

344 
	}
}

346 
öt8_t
 
	$ƒk_Àd_˛r
–
Àd
 )

348 if(
Àd
==0Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_0
);  1; }

349 if(
Àd
==1Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_1
);  1; }

350 if(
Àd
==2Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_2
);  1; }

351 if(
Àd
==3Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_3
);  1; }

353 
	}
}

355 
öt8_t
 
	$ƒk_Àd_£t
–
Àd
 )

357 if(
Àd
==0Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_0
);  1; }

358 if(
Àd
==1Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_1
);  1; }

359 if(
Àd
==2Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_2
);  1; }

360 if(
Àd
==3Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_3
);  1; }

362 
	}
}

365 
	$IO_SET_E
(
uöt8_t
 
pö
)

367 
PORTE
 |
	`BM
(
pö
);

368 
	}
}

370 
	$IO_CLR_E
(
uöt8_t
 
pö
)

372 
PORTE
 &~
	`BM
(
pö
);

373 
	}
}

375 
	$IO_SET_F
(
uöt8_t
 
pö
)

377 
PORTF
 |
	`BM
(
pö
);

378 
	}
}

380 
	$IO_CLR_F
(
uöt8_t
 
pö
)

382 
PORTF
 &~
	`BM
(
pö
);

383 
	}
}

385 
	$putc0
(
x
)

387 
	`UART0_WAIT_AND_SEND
(
x
);

388 
	}
}

390 
	$putc1
(
x
)

392 
	`UART1_WAIT_AND_SEND
(
x
);

393 
	}
}

395 
	$£tup_u¨t0
(
uöt16_t
 
baudøã
)

398 
	`INIT_UART0
–
baudøã
, (
UART_OPT_NO_PARITY
|
UART_OPT_8_BITS_PER_CHAR
|
UART_OPT_ONE_STOP_BIT
));

399 
	`ENABLE_UART0
();

400 
	}
}

402 
	$£tup_u¨t1
(
uöt16_t
 
baudøã
)

405 
	`INIT_UART1
–
baudøã
, (
UART_OPT_NO_PARITY
|
UART_OPT_8_BITS_PER_CHAR
|
UART_OPT_ONE_STOP_BIT
));

406 
	`ENABLE_UART1
();

407 
	}
}

418 
	$ƒk_£tup_u¨t
(
uöt16_t
 
baudøã
)

421 
	`£tup_u¨t1
(
baudøã
);

424 
°dout
 = 
	`fdev›í
–
putc1
, 
gëc1
);

425 
°dö
 = 
	`fdev›í
–
putc1
, 
gëc1
);

428 #ifde‡
NRK_UART_BUF


429 
u¨t_rx_sig«l
=
	`ƒk_sig«l_¸óã
();

430 if(
u¨t_rx_sig«l
==
NRK_ERROR
Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

431 
u¨t_rx_buf_°¨t
=0;

432 
u¨t_rx_buf_íd
=0;

433 
	`ENABLE_UART1_RX_INT
();

436 
	}
}

441 
	$gëc0
(){

442 
tmp
;

443 
	`UART0_WAIT_AND_RECEIVE
(
tmp
);

444  
tmp
;

445 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/hal.h

28 #i‚de‡
HAL_H


29 
	#HAL_H


	)

32 
uöt8_t
 
	tNRK_STK
;

45 
	#SPI_INIT
() \

47 
SPCR
 = 
	`BM
(
SPE
Ë| BM(
MSTR
); \

48 
SPSR
 = 
	`BM
(
SPI2X
); \

49 } 0)

	)

61 
	#FASTSPI_WAIT
() \

63 !(
SPSR
 & 
	`BM
(
SPIF
))); \

64 } 0)

	)

66 
	#FASTSPI_TX
(
x
) \

68 
SPDR
 = 
x
; \

69 
	`FASTSPI_WAIT
(); \

70 } 0)

	)

72 
	#FASTSPI_RX
(
x
) \

74 
SPDR
 = 0; \

75 
	`FASTSPI_WAIT
(); \

76 
x
 = 
SPDR
; \

77 } 0)

	)

79 
	#FASTSPI_RX_GARBAGE
() \

81 
SPDR
 = 0; \

82 
	`FASTSPI_WAIT
(); \

83 } 0)

	)

85 
	#FASTSPI_TX_WORD_LE
(
x
) \

87 
	`FASTSPI_TX
(
x
); \

88 
	`FASTSPI_TX
((
x
) >> 8); \

89 } 0)

	)

91 
	#FASTSPI_TX_WORD
(
x
) \

93 
	`FASTSPI_TX
(((
uöt16_t
)(
x
)) >> 8); \

94 
	`FASTSPI_TX
((
uöt8_t
)(
x
)); \

95 } 0)

	)

97 
	#FASTSPI_TX_MANY
(
p
,
c
) \

99 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

100 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

102 } 0)

	)

104 
	#FASTSPI_RX_WORD_LE
(
x
) \

106 
SPDR
 = 0; \

107 
	`FASTSPI_WAIT
(); \

108 
x
 = 
SPDR
; \

109 
SPDR
 = 0; \

110 
	`FASTSPI_WAIT
(); \

111 
x
 |
SPDR
 << 8; \

112 } 0)

	)

114 
	#FASTSPI_RX_WORD
(
x
) \

116 
SPDR
 = 0; \

117 
	`FASTSPI_WAIT
(); \

118 
x
 = 
SPDR
 << 8; \

119 
SPDR
 = 0; \

120 
	`FASTSPI_WAIT
(); \

121 
x
 |
SPDR
; \

122 } 0)

	)

124 
	#FASTSPI_RX_MANY
(
p
,
c
) \

126 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

127 
	`FASTSPI_RX
((
p
)[
•iC¡
]); \

129 } 0)

	)

132 
	#FASTSPI_TX_ADDR
(
a
) \

134 
SPDR
 = 
a
; \

135 
	`FASTSPI_WAIT
(); \

136 } 0)

	)

139 
	#FASTSPI_RX_ADDR
(
a
) \

141 
SPDR
 = (
a
) | 0x40; \

142 
	`FASTSPI_WAIT
(); \

143 } 0)

	)

156 
	#ENABLE_GLOBAL_INT
(Ëdÿ{ 
	`asm
 ("£i\n\t" ::); } 0)

	)

157 
	#DISABLE_GLOBAL_INT
(Ëdÿ{ 
	`asm
 ("˛i\n\t" ::); } 0)

	)

163 
	#ENABLE_UART1_INT
(Ëdÿ{ 
UCSR1B
 |(
	`BM
(
UDRIE1
Ë| BM(
RXCIE1
)); } 0)

	)

164 
	#DISABLE_UART1_INT
(Ëdÿ{ 
UCSR1B
 &~(
	`BM
(
UDRIE1
Ë| BM(
RXCIE1
)); } 0)

	)

166 
	#ENABLE_UART1_TX_INT
(Ëdÿ{ 
UCSR1B
 |
	`BM
(
UDRIE1
); } 0)

	)

167 
	#DISABLE_UART1_TX_INT
(Ëdÿ{ 
UCSR1B
 &~
	`BM
(
UDRIE1
); } 0)

	)

168 
	#CLEAR_UART1_TX_INT
(Ëdÿ{ 
UCSR1A
 &~
	`BM
(
UDRE1
); } 0)

	)

169 
	#SET_UART1_TX_INT
(Ëdÿ{ 
UCSR1A
 |
	`BM
(
UDRE1
); } 0)

	)

171 
	#ENABLE_UART1_RX_INT
(Ëdÿ{ 
UCSR1B
 |
	`BM
(
RXCIE1
); } 0)

	)

172 
	#DISABLE_UART1_RX_INT
(Ëdÿ{ 
UCSR1B
 &~
	`BM
(
RXCIE1
); } 0)

	)

173 
	#CLEAR_UART1_RX_INT
(Ëdÿ{ 
UCSR1A
 &~
	`BM
(
RXC1
); } 0)

	)

177 
	#ENABLE_UART0_TX_INT
(Ëdÿ{ 
UCSR0B
 |
	`BM
(
UDRIE0
); } 0)

	)

178 
	#DISABLE_UART0_TX_INT
(Ëdÿ{ 
UCSR0B
 &~
	`BM
(
UDRIE0
); } 0)

	)

179 
	#CLEAR_UART0_TX_INT
(Ëdÿ{ 
UCSR0A
 &~
	`BM
(
UDRE0
); } 0)

	)

180 
	#SET_UART0_TX_INT
(Ëdÿ{ 
UCSR0A
 |
	`BM
(
UDRE0
); } 0)

	)

182 
	#ENABLE_UART0_RX_INT
(Ëdÿ{ 
UCSR0B
 |
	`BM
(
RXCIE0
); } 0)

	)

183 
	#DISABLE_UART0_RX_INT
(Ëdÿ{ 
UCSR0B
 &~
	`BM
(
RXCIE0
); } 0)

	)

184 
	#CLEAR_UART0_RX_INT
(Ëdÿ{ 
UCSR0A
 &~
	`BM
(
RXC0
); } 0)

	)

215 
	#PWM0_INIT
(
≥riod
) \

217 
OCR0
 = 0; \

218 
TCCR0
 = 
	`BM
(
WGM00
Ë| BM(
COM01
Ë| BM(
COM00
); \

219 
	`PWM0_SET_PERIOD
(
≥riod
); \

220 } 0)

	)

223 
	#PWM0_SET_PERIOD
(
≥riod
Ëdÿ{ 
TCCR0
 = ((TCCR0 & ~0x07Ë| (≥riod)); } 0)

	)

226 
	#TIMER_CLK_STOP
 0x00

	)

227 
	#TIMER_CLK_DIV1
 0x01

	)

228 
	#TIMER_CLK_DIV8
 0x02

	)

229 
	#TIMER_CLK_DIV64
 0x03

	)

230 
	#TIMER_CLK_DIV256
 0x04

	)

231 
	#TIMER_CLK_DIV1024
 0x05

	)

232 
	#TIMER_CLK_T_FALL
 0x06

	)

233 
	#TIMER_CLK_T_RISE
 0x07

	)

236 
	#PWM0_SET_DUTY_CYCLE
(
dutyCy˛e
Ëdÿ{ 
OCR0
 = (dutyCy˛e); } 0)

	)

244 
	#ENABLE_T0_COMPARE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
OCIE0
); } 0)

	)

245 
	#DISABLE_T0_COMPARE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
OCIE0
); } 0)

	)

246 
	#CLEAR_T0_COMPARE_INT
(Ëdÿ{ 
TIFR
 &~
	`BM
(
TOV0
); } 0)

	)

248 
	#ENABLE_T0_OVERFLOW_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TOIE1
); } 0)

	)

249 
	#DISABLE_T0_OVERFLOW_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TOIE1
); } 0)

	)

250 
	#CLEAR_T0_OVERFLOW_INT
(Ëdÿ{ 
TIFR
 &~
	`BM
(
OCF0
)); } 0)

	)

278 
	#INIT_UART1
(
baudR©e
,
›ti⁄s
) \

280 
UBRR1H
 = (
baudR©e
) >> 8; \

281 
UBRR1L
 = (
baudR©e
); \

282 
UCSR1C
 = (
uöt8_t
Ë
›ti⁄s
; \

283 i‡(
›ti⁄s
 > 0xFF) { \

284 
UCSR1B
 |= 0x04; \

286 
UCSR1B
 &= ~0x04; \

288 
UCSR1A
 |
	`BM
(
U2X1
); \

289 } 0)

	)

291 
	#INIT_UART0
(
baudR©e
,
›ti⁄s
) \

293 
UBRR0H
 = (
baudR©e
) >> 8; \

294 
UBRR0L
 = (
baudR©e
); \

295 
UCSR0C
 = (
uöt8_t
Ë
›ti⁄s
; \

296 i‡(
›ti⁄s
 > 0xFF) { \

297 
UCSR0B
 |= 0x04; \

299 
UCSR0B
 &= ~0x04; \

301 
UCSR0A
 |
	`BM
(
U2X0
); \

302 } 0)

	)

305 
	#UART_BAUDRATE_2K4
 383

	)

306 
	#UART_BAUDRATE_4K8
 191

	)

307 
	#UART_BAUDRATE_9K6
 95

	)

308 
	#UART_BAUDRATE_14K4
 63

	)

309 
	#UART_BAUDRATE_19K2
 47

	)

310 
	#UART_BAUDRATE_28K8
 31

	)

311 
	#UART_BAUDRATE_38K4
 23

	)

312 
	#UART_BAUDRATE_57K6
 15

	)

314 
	#UART_BAUDRATE_115K2
 7

	)

315 
	#UART_BAUDRATE_230K4
 3

	)

316 
	#UART_BAUDRATE_250K
 3

	)

321 
	#UART_OPT_ONE_STOP_BIT
 0

	)

322 
	#UART_OPT_TWO_STOP_BITS
 0x08

	)

323 
	#UART_OPT_NO_PARITY
 0

	)

324 
	#UART_OPT_EVEN_PARITY
 0x20

	)

325 
	#UART_OPT_ODD_PARITY
 0x30

	)

326 
	#UART_OPT_5_BITS_PER_CHAR
 0

	)

327 
	#UART_OPT_6_BITS_PER_CHAR
 0x02

	)

328 
	#UART_OPT_7_BITS_PER_CHAR
 0x04

	)

329 
	#UART_OPT_8_BITS_PER_CHAR
 0x06

	)

330 
	#UART_OPT_9_BITS_PER_CHAR
 0x0406

	)

338 
	#ENABLE_UART0
(Ë(
UCSR0B
 |(
	`BM
(
RXEN0
Ë| BM(
TXEN0
)))

	)

339 
	#DISABLE_UART0
(Ë(
UCSR0B
 &~(
	`BM
(
RXEN0
Ë| BM(
TXEN0
)))

	)

340 
	#ENABLE_UART1
(Ë(
UCSR1B
 |(
	`BM
(
RXEN1
Ë| BM(
TXEN1
)))

	)

341 
	#DISABLE_UART1
(Ë(
UCSR1B
 &~(
	`BM
(
RXEN1
Ë| BM(
TXEN1
)))

	)

354 
	#UART1_WAIT
(Ëdÿ{ !(
UCSR1A
 & 
	`BM
(
UDRE1
))); } 0)

	)

356 
	#UART1_WAIT_RX
(Ëdÿ{ !(
UCSR1A
 & 
	`BM
(
RXC1
))); 
	`CLEAR_UART1_RX_INT
(); } 0)

	)

358 
	#UART1_SEND
(
x
Ëdÿ{ 
UDR1
 = (x); } 0)

	)

360 
	#UART1_WAIT_AND_SEND
(
x
Ëdÿ{ 
	`UART1_WAIT
(); 
	`UART1_SEND
(x); } 0)

	)

362 
	#UART1_RECEIVE
(
x
Ëdÿ{ (xË
UDR1
; } 0)

	)

364 
	#UART1_WAIT_AND_RECEIVE
(
x
Ëdÿ{ 
	`UART1_WAIT_RX
(); 
	`UART1_RECEIVE
(x); } 0)

	)

367 
	#UART0_WAIT
(Ëdÿ{ !(
UCSR0A
 & 
	`BM
(
UDRE0
))); 
	`CLEAR_UART0_TX_INT
(); } 0)

	)

369 
	#UART0_WAIT_RX
(Ëdÿ{ !(
UCSR0A
 & 
	`BM
(
RXC0
))); 
	`CLEAR_UART0_RX_INT
(); } 0)

	)

371 
	#UART0_SEND
(
x
Ëdÿ{ 
UDR0
 = (x); } 0)

	)

373 
	#UART0_WAIT_AND_SEND
(
x
Ëdÿ{ 
	`UART0_WAIT
(); 
	`UART0_SEND
(x); } 0)

	)

375 
	#UART0_RECEIVE
(
x
Ëdÿ{ (xË
UDR0
; } 0)

	)

377 
	#UART0_WAIT_AND_RECEIVE
(
x
Ëdÿ{ 
	`UART0_WAIT_RX
(); 
	`UART0_RECEIVE
(x); } 0)

	)

387 
	#TIMER0_OFF
 0

	)

388 
	#TIMER0_PRESCALE_1
 1

	)

389 
	#TIMER0_PRESCALE_8
 2

	)

390 
	#TIMER0_PRESCALE_32
 3

	)

391 
	#TIMER0_PRESCALE_64
 4

	)

392 
	#TIMER0_PRESCALE_128
 5

	)

393 
	#TIMER0_PRESCALE_256
 6

	)

394 
	#TIMER0_PRESCALE_1024
 7

	)

396 
	#TIMER0_WGM_0
 0x00

	)

397 
	#TIMER0_WGM_1
 0x40

	)

398 
	#TIMER0_WGM_2
 0x08

	)

399 
	#TIMER0_WGM_3
 0x48

	)

401 
	#TIMER0_COM_0
 0x00

	)

402 
	#TIMER0_COM_1
 0x08

	)

403 
	#TIMER0_COM_2
 0x10

	)

404 
	#TIMER0_COM_3
 0x18

	)

405 
	#TIMER0_COM_4
 0x20

	)

406 
	#TIMER0_COM_5
 0x28

	)

407 
	#TIMER0_COM_6
 0x30

	)

408 
	#TIMER0_COM_7
 0x38

	)

410 
	#TIMER0_SET_CONTROL
(
x
Ëdÿ{
TCCR0
 = (x); } 0)

	)

412 
	#TIMER0_SET_VALUE
(
x
Ëdÿ{
TCNT0
 = (x); } 0)

	)

413 
	#TIMER0_READ_VALUE
(
x
Ëdÿ{(xË
TCNT0
; } 0)

	)

415 
	#TIMER0_SET_COMPARE_VALUE
(
x
Ëdÿ{
OCR0
 = (x); } 0)

	)

416 
	#TIMER0_READ_COMPARE_VALUE
(
x
Ëdÿ{(xË
OCR0
; } 0)

	)

427 
	#NOP
(Ë
asm
 vﬁ©ûê("n›\n\t" ::)

	)

440 
hÆWaô
(
uöt16_t
 
timeout
);

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/hal_firefly2_2.h

27 #i‚de‡
HAL_FIREFLY2_2_H


28 
	#HAL_FIREFLY2_2_H


	)

30 
	#FIREFLY2_2_PLATFORM


	)

32 
	#NRK_DEFAULT_UART
 1

	)

34 
	#RED_LED
 3

	)

35 
	#GREEN_LED
 2

	)

36 
	#BLUE_LED
 1

	)

37 
	#ORANGE_LED
 0

	)

40 
PORT_INIT
();

46 
	#SPI_ENABLE
(Ë(
PORTC
 &~
	`BM
(
CSN
))

	)

47 
	#SPI_DISABLE
(Ë(
PORTC
 |
	`BM
(
CSN
))

	)

60 
	#FIFOP_INT_INIT
(Ëdÿ{ 
EICRA
 |0x03; 
	`CLEAR_FIFOP_INT
(); } 0)

	)

63 
	#ENABLE_FIFOP_INT
(Ëdÿ{ 
EIMSK
 |0x01; } 0)

	)

64 
	#DISABLE_FIFOP_INT
(Ëdÿ{ 
EIMSK
 &~0x01; } 0)

	)

65 
	#CLEAR_FIFOP_INT
(Ëdÿ{ 
EIFR
 = 0x01; } 0)

	)

71 
	#ENABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TICIE1
); } 0)

	)

72 
	#DISABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TICIE1
); } 0)

	)

73 
	#CLEAR_SFD_CAPTURE_INT
(Ëdÿ{ 
TIFR
 = 
	`BM
(
ICF1
); } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/include.h

28 #i‚de‡
INCLUDE_H


29 
	#INCLUDE_H


	)

52 #i‚de‡
FALSE


53 
	#FALSE
 0

	)

55 #i‚de‡
TRUE


56 
	#TRUE
 1

	)

58 #i‚de‡
NULL


59 
	#NULL
 0

	)

63 
	#BM
(
n
Ë(1 << (n))

	)

64 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

65 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

66 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

67 
	#ABS
(
n
Ë(“ < 0Ë? -“Ë: (n))

	)

70 (*
	tVFPTR
)();

76 
	~<avr/io.h
>

77 
	~<avr/pgm•a˚.h
>

78 
	~<avr/öãºu±.h
>

79 
	~<°rög.h
>

83 
	~<hÆ.h
>

84 
	~<hÆ_fúeÊy2_2.h
>

85 
	~<hÆ_cc2420.h
>

87 
	~<basic_rf.h
>

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/nrk_eeprom.h

1 #i‚de‡
_NRK_EEPROM_H_


2 
	#_NRK_EEPROM_H_


	)

3 
	~<°döt.h
>

6 
	#EE_MAC_ADDR_0
 0

	)

7 
	#EE_MAC_ADDR_1
 1

	)

8 
	#EE_MAC_ADDR_2
 2

	)

9 
	#EE_MAC_ADDR_3
 3

	)

10 
	#EE_MAC_ADDR_CHKSUM
 4

	)

11 
	#EE_CHANNEL
 5

	)

12 
	#EE_LOAD_IMG_PAGES
 6

	)

13 
	#EE_CURRENT_IMAGE_CHECKSUM
 7

	)

14 
	#EE_AES_KEY
 8

	)

16 
öt8_t
 
ªad_ì¥om_lﬂd_img_∑ges
(
uöt8_t
 *
lﬂd_∑ges
);

17 
öt8_t
 
wrôe_ì¥om_lﬂd_img_∑ges
(
uöt8_t
 *
lﬂd_∑ges
);

18 
öt8_t
 
ªad_ì¥om_´s_key
(
uöt8_t
 *
´s_key
);

19 
öt8_t
 
wrôe_ì¥om_´s_key
(
uöt8_t
 *
´s_key
);

20 
öt8_t
 
ªad_ì¥om_mac_addªss
(
uöt32_t
 *
mac_addr
);

21 
öt8_t
 
ªad_ì¥om_ch™√l
(
uöt8_t
 *
ch™
);

22 
uöt8_t
 
ƒk_ì¥om_ªad_byã
–
uöt16_t
 
addr
 );

23 
öt8_t
 
ƒk_ì¥om_wrôe_byã
–
uöt16_t
 
addr
, 
uöt8_t
 
vÆue
 );

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/nrk_pin_define.h

28 #i‚de‡
NRK_PIN_DEFINE_H


29 
	#NRK_PIN_DEFINE_H


	)

40 
	#VREG_EN
 5

41 
	#RESET_N
 6

42 
	#DEBUG_0
 3

	)

43 
	#DEBUG_1
 4

	)

44 
	#BUTTON
 7

45 

	)

48 
	#SPI_SS
 0

49 
	#SCK
 1

50 
	#MOSI
 2

51 
	#MISO
 3

52 
	#GPIO26
 4

	)

53 
	#MMC_11
 5

	)

54 
	#MMC_10
 6

	)

55 
	#MMC_9
 7

	)

59 
	#CSN
 0

60 
	#FIFO
 1

61 

	)

66 
	#DEBUG_2
 0

67 
	#DEBUG_3
 1

68 
	#UART1_RXD
 2

69 
	#UART1_TXD
 3

70 
	#CCA
 4

71 
	#UART1_RTS
 5

72 
	#SFD
 6

73 
	#UART1_CTS
 7

74 

	)

79 
	#UART0_RXD
 0

80 
	#UART0_TXD
 1

81 
	#LED_0
 2

82 
	#LED_1
 3

83 
	#LED_2
 4

84 
	#LED_3
 5

85 
	#GPIO34
 6

	)

86 
	#FIFOP
 7

90 
	#ADC_INPUT_0
 0

	)

91 
	#ADC_INPUT_1
 1

92 
	#ADC_INPUT_2
 2

93 
	#ADC_INPUT_3
 3

94 
	#ADC_INPUT_4
 4

95 
	#ADC_INPUT_5
 5

96 
	#ADC_INPUT_6
 6

97 
	#ADC_INPUT_7
 7

98 

	)

115 
	#ƒk_gpio_øw_£t
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à|
	`BM
(_pö); } 0);}

	)

117 
	#ƒk_gpio_øw_˛r
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à&~
	`BM
(_pö); } 0);}

	)

119 
	#ƒk_gpio_øw_gë
–
_pö_p‹t
, 
_pö
 ) (_pö_p‹à& 
	`BM
(_pö))

	)

121 
	#ƒk_gpio_øw_toggÀ
–
_pö_p‹t
, 
_p‹t
, 
_pö
 ) { \

	)

122 i‡((
	g_pö_p‹t
 & 
BM
(
_pö
))Ëdo{ 
	g_p‹t
 &= ~BM(_pin); } 0); \

123 dÿ{ 
	g_p‹t
 |
BM
(
_pö
); }0); \

126 
	#ƒk_gpio_øw_dúe˘i⁄
–
_dúe˘i⁄_p‹t_«me
, 
_pö
, 
_pö_dúe˘i⁄
 ) { \

	)

127 i‡(
	g_pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) { \

128 
_dúe˘i⁄_p‹t_«me
 &~
BM
–
_pö
 ); \

130 
	g_dúe˘i⁄_p‹t_«me
 |
BM
–
_pö
 ); \

140 
	#NRK_INVALID_PIN_VAL
 0xFF

	)

144 
	#NRK_PORTA
 0

	)

145 
	#NRK_PORTB
 1

	)

146 
	#NRK_PORTC
 2

	)

147 
	#NRK_PORTD
 3

	)

148 
	#NRK_PORTE
 4

	)

149 
	#NRK_PORTF
 5

	)

152 
	#NRK_PIN_INPUT
 0

	)

153 
	#NRK_PIN_OUTPUT
 1

	)

163 
	#DECLARE_NRK_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«me;

	)

164 
	#NRK_PIN
–
_pö_«me
, 
_pö
 , 
_p‹t
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê(_pö << 3Ë+ (_p‹à& 0x07);

	)

165 
	#NRK_INVALID_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê
NRK_INVALID_PIN_VAL
;

	)

169 
	$DECLARE_NRK_PIN
–
DEBUG_0
 )

170 
	$DECLARE_NRK_PIN
–
DEBUG_1
 )

171 
	$DECLARE_NRK_PIN
–
DEBUG_2
 )

172 
	$DECLARE_NRK_PIN
–
DEBUG_3
 )

173 
	$DECLARE_NRK_PIN
–
DEBUG_1
 )

174 
	$DECLARE_NRK_PIN
–
BUTTON
 )

176 
	$DECLARE_NRK_PIN
–
SPI_SS
 )

177 
	$DECLARE_NRK_PIN
–
SCK
 )

178 
	$DECLARE_NRK_PIN
–
MOSI
 )

179 
	$DECLARE_NRK_PIN
–
MISO
 )

181 
	$DECLARE_NRK_PIN
–
MMC_9
)

182 
	$DECLARE_NRK_PIN
–
MMC_10
)

183 
	$DECLARE_NRK_PIN
–
MMC_11
)

184 
	$DECLARE_NRK_PIN
–
GPIO26
 )

187 
	$DECLARE_NRK_PIN
–
UART1_RXD
 )

188 
	$DECLARE_NRK_PIN
–
UART1_TXD
 )

189 
	$DECLARE_NRK_PIN
–
SFD
 )

190 
	$DECLARE_NRK_PIN
–
CCA
 )

192 
	$DECLARE_NRK_PIN
–
UART0_RXD
 )

193 
	$DECLARE_NRK_PIN
–
UART0_TXD
 )

194 
	$DECLARE_NRK_PIN
–
FIFOP
 )

195 
	$DECLARE_NRK_PIN
–
LED_0
 )

196 
	$DECLARE_NRK_PIN
–
LED_1
 )

197 
	$DECLARE_NRK_PIN
–
LED_2
 )

198 
	$DECLARE_NRK_PIN
–
LED_3
 )

200 
	$DECLARE_NRK_PIN
–
GPIO34
 )

202 
	$DECLARE_NRK_PIN
–
ADC_INPUT_0
 )

203 
	$DECLARE_NRK_PIN
–
ADC_INPUT_1
 )

204 
	$DECLARE_NRK_PIN
–
ADC_INPUT_2
 )

205 
	$DECLARE_NRK_PIN
–
ADC_INPUT_3
 )

206 
	$DECLARE_NRK_PIN
–
ADC_INPUT_4
 )

207 
	$DECLARE_NRK_PIN
–
ADC_INPUT_5
 )

208 
	$DECLARE_NRK_PIN
–
JTAG_TCK
 )

209 
	$DECLARE_NRK_PIN
–
JTAG_TMS
 )

210 
	$DECLARE_NRK_PIN
–
JTAG_TDO
 )

211 
	$DECLARE_NRK_PIN
–
JTAG_TDI
 )

213 
	$DECLARE_NRK_PIN
–
ADC_INPUT_6
 )

214 
	$DECLARE_NRK_PIN
–
ADC_INPUT_7
 )

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/nrk_platform_time.h

28 #i‚de‡
NRK_PLATFORM_TIME_H


29 
	#NRK_PLATFORM_TIME_H


	)

35 
	#NANOS_PER_TICK
 976563

	)

36 
	#US_PER_TICK
 977

	)

37 
	#TICKS_PER_SEC
 1024

	)

40 #i‚de‡
NRK_SLEEP_WAKEUP_TIME


41 
	#NRK_SLEEP_WAKEUP_TIME
 10

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/source/hal_wait.c

27 
	~<ö˛ude.h
>

40 
	$hÆWaô
(
uöt16_t
 
timeout
) {

44 
	`NOP
();

45 
	`NOP
();

46 
	`NOP
();

47 
	`NOP
();

48 } --
timeout
);

50 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/source/nrk_eeprom.c

1 
	~<ƒk_ì¥om.h
>

2 
	~<avr/ì¥om.h
>

3 
	~<ƒk_îr‹.h
>

5 
uöt8_t
 
	$ƒk_ì¥om_ªad_byã
–
uöt16_t
 
addr
 )

7 
uöt8_t
 
v
;

8 
v
=
	`ì¥om_ªad_byã
((
uöt8_t
*)
addr
);

9  
v
;

10 
	}
}

12 
öt8_t
 
	$ƒk_ì¥om_wrôe_byã
–
uöt16_t
 
addr
, 
uöt8_t
 
vÆue
 )

14 
	`ì¥om_wrôe_byã
–(
uöt8_t
*)
addr
, 
vÆue
 );

15 
	}
}

17 
öt8_t
 
	$ªad_ì¥om_mac_addªss
(
uöt32_t
 *
mac_addr
)

19 
uöt8_t
 
checksum
,
˘
;

20 
uöt8_t
 *
buf
;

21 
buf
=(
uöt8_t
 *)
mac_addr
;

22 
checksum
=
buf
[0]+buf[1]+buf[2]+buf[3];

23 
buf
[3]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)
EE_MAC_ADDR_0
);

24 
buf
[2]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)
EE_MAC_ADDR_1
);

25 
buf
[1]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)
EE_MAC_ADDR_2
);

26 
buf
[0]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)
EE_MAC_ADDR_3
);

27 
checksum
=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)
EE_MAC_ADDR_CHKSUM
);

28 
˘
=
buf
[0];

29 
˘
+=
buf
[1];

30 
˘
+=
buf
[2];

31 
˘
+=
buf
[3];

32 if(
checksum
==
˘
Ë 
NRK_OK
;

34  
NRK_ERROR
;

35 
	}
}

37 
öt8_t
 
	$ªad_ì¥om_ch™√l
(
uöt8_t
 *
ch™√l
)

39 *
ch™√l
=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)
EE_CHANNEL
);

40  
NRK_OK
;

41 
	}
}

43 
öt8_t
 
	$wrôe_ì¥om_lﬂd_img_∑ges
(
uöt8_t
 *
lﬂd_∑ges
)

45 
	`ì¥om_wrôe_byã
 ((
uöt8_t
*)
EE_LOAD_IMG_PAGES
, *
lﬂd_∑ges
);

46  
NRK_OK
;

47 
	}
}

49 
öt8_t
 
	$ªad_ì¥om_lﬂd_img_∑ges
(
uöt8_t
 *
lﬂd_∑ges
)

51 *
lﬂd_∑ges
=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)
EE_LOAD_IMG_PAGES
);

52  
NRK_OK
;

53 
	}
}

55 
öt8_t
 
	$ªad_ì¥om_´s_key
(
uöt8_t
 *
´s_key
)

57 
uöt8_t
 
i
;

58 
i
=0; i<16; i++ )

59 
´s_key
[
i
]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)(
EE_AES_KEY
+i));

60  
NRK_OK
;

61 
	}
}

63 
öt8_t
 
	$wrôe_ì¥om_´s_key
(
uöt8_t
 *
´s_key
)

65 
uöt8_t
 
i
;

66 
i
=0; i<16; i++ )

67 
	`ì¥om_wrôe_byã
 ((
uöt8_t
*)(
EE_AES_KEY
+
i
),
´s_key
[i]);

68  
NRK_OK
;

69 
	}
}

71 
öt8_t
 
	$ªad_ì¥om_cuºít_image_checksum
(
uöt8_t
 *
image_checksum
)

73 *
image_checksum
=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)
EE_CURRENT_IMAGE_CHECKSUM
);

74  
NRK_OK
;

75 
	}
}

77 
öt8_t
 
	$wrôe_ì¥om_cuºít_image_checksum
(
uöt8_t
 *
image_checksum
)

79 
	`ì¥om_wrôe_byã
 ((
uöt8_t
*)
EE_CURRENT_IMAGE_CHECKSUM
, *
image_checksum
);

80  
NRK_OK
;

81 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/source/ulib.c

28 
	~<ö˛ude.h
>

29 
	~<ulib.h
>

30 
	~<°dio.h
>

31 
	~<hÆ.h
>

32 
	~<hÆ_fúeÊy2_2.h
>

33 
	~<avr/öãºu±.h
>

34 
	~<ƒk_pö_deföe.h
>

35 
	~<ƒk_îr‹.h
>

36 
	~<ƒk_evíts.h
>

38 #ifde‡
NANORK


39 
	~<ƒk_cfg.h
>

42 #ifde‡
NRK_UART_BUF


43 
	~<ƒk_evíts.h
>

45 #i‚de‡
MAX_RX_UART_BUF


46 
	#MAX_RX_UART_BUF
 16

	)

50 
uöt8_t
 
	gu¨t_rx_buf_°¨t
,
	gu¨t_rx_buf_íd
;

51 
	gu¨t_rx_buf
[
MAX_RX_UART_BUF
];

52 
ƒk_sig_t
 
	gu¨t_rx_sig«l
;

54 
	$SIGNAL
(
USART1_RX_ve˘
)

56 
c
;

57 
uöt8_t
 
sig
;

59 
	`DISABLE_UART1_RX_INT
();

60 
	`UART1_WAIT_AND_RECEIVE
(
c
);

61 
u¨t_rx_buf
[
u¨t_rx_buf_íd
]=
c
;

63 
u¨t_rx_buf_íd
++;

64 if(
u¨t_rx_buf_íd
==
MAX_RX_UART_BUF
) uart_rx_buf_end=0;

65 
	`ƒk_evít_sig«l
(
u¨t_rx_sig«l
);

66 
	`CLEAR_UART1_RX_INT
();

67 
	`ENABLE_UART1_RX_INT
();

69 
	}
}

71 
	$gëc1
()

73 
tmp
;

75 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)

77 
tmp
=
u¨t_rx_buf
[
u¨t_rx_buf_°¨t
];

78 
u¨t_rx_buf_°¨t
++;

79 if(
u¨t_rx_buf_°¨t
==
MAX_RX_UART_BUF
) uart_rx_buf_start=0;

80 (
tmp
);

83 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

84  
tmp
;

85 
	}
}

87 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

89 if(
u¨t_num
==0)

91 if–
UCSR0A
 & 
	`BM
(
RXC0
) )  1;

93 if(
u¨t_num
==1)

95 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)  1;

98 
	}
}

100 
ƒk_sig_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

102 if(
u¨t_rx_sig«l
==
NRK_ERROR
Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

103  
u¨t_rx_sig«l
;

104 
	}
}

108 
ƒk_sig_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

110  
NRK_ERROR
;

111 
	}
}

114 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

116 if(
u¨t_num
==1)

118 if–
UCSR1A
 & 
	`BM
(
RXC1
) )  1;

120 if(
u¨t_num
==0)

122 if–
UCSR0A
 & 
	`BM
(
RXC0
) )  1;

125 
	}
}

127 
	$gëc1
(){

128 
tmp
;

129 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

130  
tmp
;

131 
	}
}

135 
	$ƒk_k¥ötf
–c⁄° *
addr
)

137 
c
;

138 (
c
=
	`pgm_ªad_byã
(
addr
++)))

139 
	`putch¨
(
c
);

140 
	}
}

142 
	$ƒk_£tup_p‹ts
()

144 
	`PORT_INIT
();

145 
	`SPI_INIT
();

146 
	}
}

158 
	$NRK_PIN
–
DEBUG_0
,DEBUG_0, 
NRK_PORTA
 )

159 
	$NRK_PIN
–
DEBUG_1
,DEBUG_1, 
NRK_PORTA
 )

160 
	$NRK_PIN
–
BUTTON
,BUTTON, 
NRK_PORTA
 )

163 
	$NRK_PIN
–
SPI_SS
,SPI_SS, 
NRK_PORTB
 )

164 
	$NRK_PIN
–
SCK
,SCK, 
NRK_PORTB
 )

165 
	$NRK_PIN
–
MOSI
,MOSI, 
NRK_PORTB
 )

166 
	$NRK_PIN
–
MISO
,MISO, 
NRK_PORTB
 )

167 
	$NRK_PIN
–
GPIO26
,4, 
NRK_PORTB
 )

168 
	$NRK_PIN
–
MMC_11
,5, 
NRK_PORTB
 )

169 
	$NRK_PIN
–
MMC_10
,6, 
NRK_PORTB
 )

170 
	$NRK_PIN
–
MMC_9
,7, 
NRK_PORTB
 )

174 
	$NRK_PIN
–
DEBUG_2
,DEBUG_2, 
NRK_PORTD
 )

175 
	$NRK_PIN
–
DEBUG_3
,DEBUG_3, 
NRK_PORTD
 )

176 
	$NRK_PIN
–
UART1_RXD
,UART1_RXD, 
NRK_PORTD
 )

177 
	$NRK_PIN
–
UART1_TXD
,UART1_TXD, 
NRK_PORTD
 )

178 
	$NRK_PIN
–
CCA
,CCA, 
NRK_PORTD
 )

179 
	$NRK_PIN
–
SFD
,SFD, 
NRK_PORTD
 )

183 
	$NRK_PIN
–
UART0_RXD
,UART0_RXD, 
NRK_PORTE
 )

184 
	$NRK_PIN
–
UART0_TXD
,UART0_TXD, 
NRK_PORTE
 )

185 
	$NRK_PIN
–
LED_0
,LED_0, 
NRK_PORTE
 )

186 
	$NRK_PIN
–
LED_1
,LED_1, 
NRK_PORTE
 )

187 
	$NRK_PIN
–
LED_2
,LED_2, 
NRK_PORTE
 )

188 
	$NRK_PIN
–
LED_3
,LED_3, 
NRK_PORTE
 )

189 
	$NRK_PIN
–
GPIO34
,GPIO34, 
NRK_PORTE
 )

190 
	$NRK_PIN
–
FIFOP
, FIFOP, 
NRK_PORTE
 )

195 
	$NRK_PIN
–
ADC_INPUT_0
, ADC_INPUT_0, 
NRK_PORTF
 )

196 
	$NRK_PIN
–
ADC_INPUT_1
, ADC_INPUT_1, 
NRK_PORTF
 )

197 
	$NRK_PIN
–
ADC_INPUT_2
, ADC_INPUT_2, 
NRK_PORTF
 )

198 
	$NRK_PIN
–
ADC_INPUT_3
, ADC_INPUT_3, 
NRK_PORTF
 )

199 
	$NRK_PIN
–
ADC_INPUT_4
, ADC_INPUT_4, 
NRK_PORTF
 )

200 
	$NRK_PIN
–
ADC_INPUT_5
, ADC_INPUT_5, 
NRK_PORTF
 )

201 
	$NRK_PIN
–
ADC_INPUT_6
, ADC_INPUT_6, 
NRK_PORTF
 )

202 
	$NRK_PIN
–
ADC_INPUT_7
, ADC_INPUT_7, 
NRK_PORTF
 )

204 
	$PORT_INIT
()

206 
MCUCR
 |
	`BM
(
PUD
);

207 
DDRB
 = 
	`BM
(
MOSI
Ë| BM(
SCK
);

208 
PORTB
 = 
	`BM
(
MOSI
Ë| BM(
SCK
Ë| BM(
SPI_SS
);

209 
DDRC
 = 
	`BM
(
CSN
);

210 
PORTC
 = 
	`BM
(
CSN
);

211 
DDRE
 = 
	`BM
(
LED_0
Ë| BM(
LED_1
Ë| BM(
LED_2
Ë| BM(
LED_3
);

212 
DDRD
 = 
	`BM
(
UART1_TXD
Ë| BM(
DEBUG_2
Ë| BM(
DEBUG_3
);

213 
PORTE
 = 
	`BM
(
UART0_TXD
Ë| BM(
LED_0
Ë| BM(
LED_1
Ë| BM(
LED_2
Ë| BM(
LED_3
);

214 
DDRA
 = 
	`BM
(
VREG_EN
Ë| BM(
RESET_N
Ë| BM(
DEBUG_0
Ë| BM(
DEBUG_1
);

215 
PORTA
 = 
	`BM
(
RESET_N
);

216 
	}
}

223 
öt8_t
 
	$ƒk_gpio_£t
(
uöt8_t
 
pö
)

225 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

226 
pö
 & 0x07) {

227 
NRK_PORTA
:

228 dÿ{ 
PORTA
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

229 
NRK_PORTB
:

230 dÿ{ 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

231 
NRK_PORTC
:

232 dÿ{ 
PORTC
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

233 
NRK_PORTD
:

234 dÿ{ 
PORTD
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

235 
NRK_PORTE
:

236 dÿ{ 
PORTE
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

237 
NRK_PORTF
:

238 dÿ{ 
PORTF
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

242 
	}
}

244 
öt8_t
 
	$ƒk_gpio_˛r
(
uöt8_t
 
pö
)

246 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

247 
pö
 & 0x07) {

248 
NRK_PORTA
:

249 dÿ{ 
PORTA
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

250 
NRK_PORTB
:

251 dÿ{ 
PORTB
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

252 
NRK_PORTC
:

253 dÿ{ 
PORTC
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

254 
NRK_PORTD
:

255 dÿ{ 
PORTD
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

256 
NRK_PORTE
:

257 dÿ{ 
PORTE
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

258 
NRK_PORTF
:

259 dÿ{ 
PORTF
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

263 
	}
}

265 
öt8_t
 
	$ƒk_gpio_gë
(
uöt8_t
 
pö
)

267 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

268 
pö
 & 0x07) {

269 
NRK_PORTA
:

270  !!(
PINA
 & 
	`BM
((
pö
 & 0xF8) >> 3));

271 
NRK_PORTB
:

272  !!(
PINB
 & 
	`BM
((
pö
 & 0xF8) >> 3));

273 
NRK_PORTC
:

274  !!(
PINC
 & 
	`BM
((
pö
 & 0xF8) >> 3));

275 
NRK_PORTD
:

276  !!(
PIND
 & 
	`BM
((
pö
 & 0xF8) >> 3));

277 
NRK_PORTE
:

278  !!(
PINE
 & 
	`BM
((
pö
 & 0xF8) >> 3));

279 
NRK_PORTF
:

280  !!(
PINF
 & 
	`BM
((
pö
 & 0xF8) >> 3));

284 
	}
}

286 
öt8_t
 
	$ƒk_gpio_toggÀ
(
uöt8_t
 
pö
)

288 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

289 
pö
 & 0x07) {

290 
NRK_PORTA
:

291 i‡((
PINA
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

292 dÿ{ 
PORTA
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

294 dÿ{ 
PORTA
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

297 
NRK_PORTB
:

298 i‡((
PINB
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

299 dÿ{ 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

301 dÿ{ 
PORTB
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

304 
NRK_PORTC
:

305 i‡((
PINC
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

306 dÿ{ 
PORTC
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

308 dÿ{ 
PORTC
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

311 
NRK_PORTD
:

312 i‡((
PIND
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

313 dÿ{ 
PORTD
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

315 dÿ{ 
PORTD
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

318 
NRK_PORTE
:

319 i‡((
PINE
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

320 dÿ{ 
PORTE
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

322 dÿ{ 
PORTE
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

325 
NRK_PORTF
:

326 i‡((
PINF
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

327 dÿ{ 
PORTF
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

329 dÿ{ 
PORTF
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

335 
	}
}

337 
öt8_t
 
	$ƒk_gpio_dúe˘i⁄
(
uöt8_t
 
pö
, uöt8_à
pö_dúe˘i⁄
)

339 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

340 i‡(
pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) {

341 
pö
 & 0x07) {

342 
NRK_PORTA
:

343 
DDRA
 &~
	`BM
((
pö
 & 0xF8) >> 3);

344 
PORTA
 |
	`BM
((
pö
 & 0xF8) >> 3);

346 
NRK_PORTB
:

347 
DDRB
 &~
	`BM
((
pö
 & 0xF8) >> 3);

348 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

350 
NRK_PORTC
:

351 
DDRC
 &~
	`BM
((
pö
 & 0xF8) >> 3);

352 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

354 
NRK_PORTD
:

355 
DDRD
 &~
	`BM
((
pö
 & 0xF8) >> 3);

356 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

358 
NRK_PORTE
:

359 
DDRE
 &~
	`BM
((
pö
 & 0xF8) >> 3);

360 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

362 
NRK_PORTF
:

363 
DDRF
 &~
	`BM
((
pö
 & 0xF8) >> 3);

364 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

369 
pö
 & 0x07) {

370 
NRK_PORTA
:

371 
DDRA
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

372 
NRK_PORTB
:

373 
DDRB
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

374 
NRK_PORTC
:

375 
DDRC
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

376 
NRK_PORTD
:

377 
DDRD
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

378 
NRK_PORTE
:

379 
DDRE
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

380 
NRK_PORTF
:

381 
DDRF
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

386 
	}
}

388 
öt8_t
 
	$ƒk_gë_buâ⁄
(
uöt8_t
 
b
)

390 if(
b
==0) {

391 –!(
PINA
 & 
	`BM
(
BUTTON
)));

394 
	}
}

396 
öt8_t
 
	$ƒk_Àd_toggÀ
–
Àd
 )

398 if(
Àd
==0Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_0
);  1; }

399 if(
Àd
==1Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_1
);  1; }

400 if(
Àd
==2Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_2
);  1; }

401 if(
Àd
==3Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_3
);  1; }

403 
	}
}

405 
öt8_t
 
	$ƒk_Àd_˛r
–
Àd
 )

407 if(
Àd
==0Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_0
);  1; }

408 if(
Àd
==1Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_1
);  1; }

409 if(
Àd
==2Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_2
);  1; }

410 if(
Àd
==3Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_3
);  1; }

412 
	}
}

414 
öt8_t
 
	$ƒk_Àd_£t
–
Àd
 )

416 if(
Àd
==0Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_0
);  1; }

417 if(
Àd
==1Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_1
);  1; }

418 if(
Àd
==2Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_2
);  1; }

419 if(
Àd
==3Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_3
);  1; }

421 
	}
}

423 
öt8_t
 
	$ƒk_gpio_puŒups
(
uöt8_t
 
íabÀ
)

425 if(
íabÀ
Ë
MCUCR
 &~
	`BM
(
PUD
);

426 
MCUCR
 |
	`BM
(
PUD
);

427  
NRK_OK
;

428 
	}
}

453 
	$putc0
(
x
)

455 
	`UART0_WAIT_AND_SEND
(
x
);

456 
	}
}

458 
	$putc1
(
x
)

460 
	`UART1_WAIT_AND_SEND
(
x
);

461 
	}
}

463 
	$£tup_u¨t0
(
uöt16_t
 
baudøã
)

466 
	`INIT_UART0
–
baudøã
, (
UART_OPT_NO_PARITY
|
UART_OPT_8_BITS_PER_CHAR
|
UART_OPT_ONE_STOP_BIT
));

467 
	`ENABLE_UART0
();

468 
	}
}

470 
	$£tup_u¨t1
(
uöt16_t
 
baudøã
)

473 
	`INIT_UART1
–
baudøã
, (
UART_OPT_NO_PARITY
|
UART_OPT_8_BITS_PER_CHAR
|
UART_OPT_ONE_STOP_BIT
));

474 
	`ENABLE_UART1
();

475 
	}
}

488 
	$ƒk_£tup_u¨t
(
uöt16_t
 
baudøã
)

491 
	`£tup_u¨t1
(
baudøã
);

494 
°dout
 = 
	`fdev›í
–(*)
putc1
, (*)
gëc1
);

495 
°dö
 = 
	`fdev›í
–(*)
putc1
, (*)
gëc1
);

497 #ifde‡
NRK_UART_BUF


498 
u¨t_rx_sig«l
=
	`ƒk_sig«l_¸óã
();

499 if(
u¨t_rx_sig«l
==
NRK_ERROR
Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

500 
u¨t_rx_buf_°¨t
=0;

501 
u¨t_rx_buf_íd
=0;

502 
	`ENABLE_UART1_RX_INT
();

505 
	}
}

510 
	$gëc0
(){

511 
tmp
;

512 
	`UART0_WAIT_AND_RECEIVE
(
tmp
);

513  
tmp
;

514 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/hal.h

14 #i‚de‡
HAL_H


15 
	#HAL_H


	)

17 
uöt16_t
 
	tNRK_STK
;

21 
	#SPI_INIT
(Ë\

	)

28 
	#SPI_WAITFOREOTx
(Ë(
U1TCTL
 & 
TXEPT
) == 0)

29 
	#SPI_WAITFOREORx
(Ë(
IFG2
 & 
URXIFG1
) == 0)

30 

	)

31 
	#FASTSPI_TX
(
x
)\

	)

33 
U1TXBUF
 = 
x
;\

34 
	`SPI_WAITFOREOTx
();\

35 
	}
} 0)

37 
	#FASTSPI_RX
(
x
)\

	)

39 
U1TXBUF
 = 0;\

40 
	`SPI_WAITFOREORx
();\

41 
x
 = 
U1RXBUF
;\

42 
	}
} 0)

44 
	#FASTSPI_RX_GARBAGE
()\

	)

46 
U1TXBUF
 = 0;\

47 
	`SPI_WAITFOREORx
();\

48 
U1RXBUF
;\

49 
	}
} 0)

51 
	#FASTSPI_TX_MANY
(
p
,
c
)\

	)

53 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) {\

54 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]);\

56 
	}
} 0)

58 
	#FASTSPI_RX_WORD
(
x
)\

	)

60 
U1TXBUF
 = 0;\

61 
	`SPI_WAITFOREORx
();\

62 
x
 = 
U1RXBUF
 << 8;\

63 
U1TXBUF
 = 0;\

64 
	`SPI_WAITFOREORx
();\

65 
x
 |
U1RXBUF
;\

66 
	}
} 0)

68 
	#FASTSPI_TX_ADDR
(
a
)\

	)

70 
U1TXBUF
 = 
a
;\

71 
	`SPI_WAITFOREOTx
();\

72 
	}
} 0)

74 
	#FASTSPI_RX_ADDR
(
a
)\

	)

76 
U1TXBUF
 = (
a
) | 0x40;\

77 
	`SPI_WAITFOREOTx
();\

78 
	}
} 0)

80 
	`hÆWaô
(
uöt16_t
 
timeout
);

82 
	#ENABLE_GLOBAL_INT
(Ëdÿ{ 
	`eöt
(); 
	}
} 0)

	)

83 
	#DISABLE_GLOBAL_INT
(Ëdÿ{ 
	`döt
(); } 0)

	)

86 
	#ENABLE_UART1_INT
(Ëdÿ{ 
IE2
 |(
	`BM
(
UTXIE1
Ë| BM(
URXIE1
)); } 0)

	)

87 
	#DISABLE_UART1_INT
(Ëdÿ{ 
IE2
 &~(
	`BM
(
UTXIE1
Ë| BM(
URXIE1
)); } 0)

	)

89 
	#ENABLE_UART1_TX_INT
(Ëdÿ{ 
IE2
 |
	`BM
(
UTXIE1
); } 0)

	)

90 
	#DISABLE_UART1_TX_INT
(Ëdÿ{ 
IE2
 &~
	`BM
(
UTXIE1
); } 0)

	)

91 
	#CLEAR_UART1_TX_INT
(Ëdÿ{ 
IFG2
 &~
	`BM
(
UTXIFG1
); } 0)

	)

92 
	#SET_UART1_TX_INT
(Ëdÿ{ 
IFG2
 |
	`BM
(
UTXIFG1
); } 0)

	)

94 
	#ENABLE_UART1_RX_INT
(Ëdÿ{ 
IE2
 |
	`BM
(
URXIE1
); } 0)

	)

95 
	#DISABLE_UART1_RX_INT
(Ëdÿ{ 
IE2
 &~
	`BM
(
URXIE1
); } 0)

	)

96 
	#CLEAR_UART1_RX_INT
(Ëdÿ{ 
IFG2
 &~
	`BM
(
URXIFG1
); } 0)

	)

98 
	#ENABLE_UART0_TX_INT
(Ëdÿ{ 
IE1
 |
	`BM
(
UTXIE0
); } 0)

	)

99 
	#DISABLE_UART0_TX_INT
(Ëdÿ{ 
IE1
 &~
	`BM
(
UTXIE0
); } 0)

	)

100 
	#CLEAR_UART0_TX_INT
(Ëdÿ{ 
IFG1
 &~
	`BM
(
UTXIFG0
); } 0)

	)

101 
	#SET_UART0_TX_INT
(Ëdÿ{ 
IFG1
 |
	`BM
(
UTXIFG0
); } 0)

	)

103 
	#ENABLE_UART0_RX_INT
(Ëdÿ{ 
IE1
 |
	`BM
(
URXIE0
); } 0)

	)

104 
	#DISABLE_UART0_RX_INT
(Ëdÿ{ 
IE1
 &~
	`BM
(
URXIE0
); } 0)

	)

105 
	#CLEAR_UART0_RX_INT
(Ëdÿ{ 
IFG1
 &~
	`BM
(
URXIFG0
); } 0)

	)

108 
	#PWM0_INIT
(
≥riod
Ë\

	)

114 
	#PWM0_SET_PERIOD
(
≥riod
Ëdÿ{ 
	}
} 0)

	)

117 
	#TIMER_CLK_STOP
 0x00

	)

118 
	#TIMER_CLK_DIV1
 0x01

	)

119 
	#TIMER_CLK_DIV8
 0x02

	)

120 
	#TIMER_CLK_DIV64
 0x03

	)

121 
	#TIMER_CLK_DIV256
 0x04

	)

122 
	#TIMER_CLK_DIV1024
 0x05

	)

123 
	#TIMER_CLK_T_FALL
 0x06

	)

124 
	#TIMER_CLK_T_RISE
 0x07

	)

128 
	#PWM0_SET_DUTY_CYCLE
(
dutyCy˛e
Ëdÿ{ } 0)

	)

136 
	#ENABLE_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

137 
	#DISABLE_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

138 
	#CLEAR_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

142 
	#ENABLE_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

143 
	#DISABLE_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

144 
	#CLEAR_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

167 
	#INIT_UART1
(
baudR©e
,
›ti⁄s
Ë\

	)

172 
	#INIT_UART0
(
baudR©e
,
›ti⁄s
Ë\

	)

174 
	}
} 0)

180 
	#UART_BAUDRATE_2K4
 3333

	)

181 
	#UART_BAUDRATE_4K8
 1667

	)

182 
	#UART_BAUDRATE_9K6
 833

	)

183 
	#UART_BAUDRATE_14K4
 556

	)

184 
	#UART_BAUDRATE_19K2
 417

	)

185 
	#UART_BAUDRATE_28K8
 278

	)

186 
	#UART_BAUDRATE_38K4
 208

	)

187 
	#UART_BAUDRATE_57K6
 139

	)

188 
	#UART_BAUDRATE_115K2
 69

	)

189 
	#UART_BAUDRATE_230K4
 35

	)

190 
	#UART_BAUDRATE_250K
 32

	)

191 
	#UART_BAUDRATE_500K
 16

	)

192 
	#UART_BAUDRATE_1M
 8

	)

198 
	#UART_OPT_ONE_STOP_BIT
 0

	)

199 
	#UART_OPT_TWO_STOP_BITS
 0x08

	)

200 
	#UART_OPT_NO_PARITY
 0

	)

201 
	#UART_OPT_EVEN_PARITY
 0x20

	)

202 
	#UART_OPT_ODD_PARITY
 0x30

	)

203 
	#UART_OPT_5_BITS_PER_CHAR
 0

	)

204 
	#UART_OPT_6_BITS_PER_CHAR
 0x02

	)

205 
	#UART_OPT_7_BITS_PER_CHAR
 0x04

	)

206 
	#UART_OPT_8_BITS_PER_CHAR
 0x06

	)

207 
	#UART_OPT_9_BITS_PER_CHAR
 0x0406

	)

214 
	#ENABLE_UART0
(Ë()

	)

215 
	#DISABLE_UART0
(Ë()

	)

216 
	#ENABLE_UART1
(Ë()

	)

217 
	#DISABLE_UART1
(Ë()

	)

224 
	#UART1_WAIT
(Ëdÿ{ 
	}
} 0)

	)

226 
	#UART1_WAIT_RX
(Ëdÿ{ } 0)

	)

228 
	#UART1_SEND
(
x
Ëdÿ{ } 0)

	)

230 
	#UART1_WAIT_AND_SEND
(
x
)\

	)

232 !(
	gIFG2
 & 
	gUTXIFG1
));\

233 
	gTXBUF1
 = ()(
x
);\

236 
	#UART1_RECEIVE
(
x
Ëdÿ{ 
	}
} 0)

	)

238 
	#UART1_WAIT_AND_RECEIVE
(
x
Ëdÿ{ } 0)

	)

241 
	#UART0_WAIT
(Ëdÿ{ } 0)

	)

243 
	#UART0_WAIT_RX
(Ëdÿ{ } 0)

	)

245 
	#UART0_SEND
(
x
Ëdÿ{ } 0)

	)

247 
	#UART0_WAIT_AND_SEND
(
x
Ëdÿ{ } 0)

	)

249 
	#UART0_RECEIVE
(
x
Ëdÿ{ } 0)

	)

251 
	#UART0_WAIT_AND_RECEIVE
(
x
Ëdÿ{ } 0)

	)

257 
	#TIMER0_OFF
 0

	)

258 
	#TIMER0_PRESCALE_1
 1

	)

259 
	#TIMER0_PRESCALE_8
 2

	)

260 
	#TIMER0_PRESCALE_32
 3

	)

261 
	#TIMER0_PRESCALE_64
 4

	)

262 
	#TIMER0_PRESCALE_128
 5

	)

263 
	#TIMER0_PRESCALE_256
 6

	)

264 
	#TIMER0_PRESCALE_1024
 7

	)

266 
	#TIMER0_WGM_0
 0x00

	)

267 
	#TIMER0_WGM_1
 0x40

	)

268 
	#TIMER0_WGM_2
 0x08

	)

269 
	#TIMER0_WGM_3
 0x48

	)

271 
	#TIMER0_COM_0
 0x00

	)

272 
	#TIMER0_COM_1
 0x08

	)

273 
	#TIMER0_COM_2
 0x10

	)

274 
	#TIMER0_COM_3
 0x18

	)

275 
	#TIMER0_COM_4
 0x20

	)

276 
	#TIMER0_COM_5
 0x28

	)

277 
	#TIMER0_COM_6
 0x30

	)

278 
	#TIMER0_COM_7
 0x38

	)

281 
	#TIMER0_SET_CONTROL
(
x
Ëdÿ{ } 0)

	)

283 
	#TIMER0_SET_VALUE
(
x
Ëdÿ{ } 0)

	)

284 
	#TIMER0_READ_VALUE
(
x
Ëdÿ{ } 0)

	)

286 
	#TIMER0_SET_COMPARE_VALUE
(
x
Ëdÿ{ } 0)

	)

287 
	#TIMER0_READ_COMPARE_VALUE
(
x
Ëdÿ{ } 0)

	)

293 
	#NOP
(Ë
asm
 vﬁ©ûê("n›\n\t" ::)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/hal_imec.h

30 #i‚de‡
HAL_IMEC_H


31 
	#HAL_IMEC_H


	)

33 
	#IMEC_PLATFORM


	)

35 
	#RED_LED
 0

	)

36 
	#GREEN_LED
 1

	)

37 
	#BLUE_LED
 2

	)

38 
	#ORANGE_LED
 3

	)

40 
PORT_INIT
();

42 
	#SPI_ENABLE
(Ë–
P5OUT
 &~
	`BM
(
CSN
) )

43 
	#SPI_DISABLE
(Ë–
P5OUT
 |
	`BM
(
CSN
) )

44 

	)

46 
	#FIFOP_INT_INIT
(Ëdÿ{ 
P2IES
 &~
	`BM
(
FIFO_P
); 
	`CLEAR_FIFOP_INT
(); } 0)

	)

49 
	#ENABLE_FIFOP_INT
(Ëdÿ{ 
P2IE
 |
	`BM
(
FIFO_P
); } 0)

	)

50 
	#DISABLE_FIFOP_INT
(Ëdÿ{ 
P2IE
 &~
	`BM
(
FIFO_P
); } 0)

	)

51 
	#CLEAR_FIFOP_INT
(Ëdÿ{ 
P2IFG
 &~
	`BM
(
FIFO_P
); } 0)

	)

54 
	#ENABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TICIE1
); } 0)

	)

55 
	#DISABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TICIE1
); } 0)

	)

56 
	#CLEAR_SFD_CAPTURE_INT
(Ëdÿ{ 
TIFR
 = 
	`BM
(
ICF1
); } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/include.h

1 #i‚de‡
INCLUDE_H


2 
	#INCLUDE_H


	)

8 
	#PSTR
(
x
Ë
	)
x

31 #i‚de‡
FALSE


32 
	#FALSE
 0

	)

34 #i‚de‡
TRUE


35 
	#TRUE
 1

	)

37 #i‚de‡
NULL


38 
	#NULL
 0

	)

42 
	#BM
(
n
Ë(1 << (n))

	)

43 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

44 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

45 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

46 
	#ABS
(
n
Ë(“ < 0Ë? -“Ë: (n))

	)

49 (*
	tVFPTR
)();

60 
	~<io.h
>

61 
	~<sig«l.h
>

62 
	~<m•430x16x.h
>

63 
	~<°rög.h
>

67 
	#RAMEND
 0x09ff

	)

70 #ifde‡
STK501


74 #ifde‡
CC2420DB


79 
	~<hÆ.h
>

80 
	~<hÆ_imec.h
>

82 
	~<basic_rf.h
>

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/nrk_eeprom.h

1 #i‚de‡
_NRK_EEPROM_H_


2 
	#_NRK_EEPROM_H_


	)

3 
	~<°döt.h
>

5 
öt8_t
 
ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
);

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/nrk_pin_define.h

8 #i‚de‡
NRK_PIN_DEFINE_H


9 
	#NRK_PIN_DEFINE_H


	)

17 
	#ƒk_gpio_øw_£t
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à|
	`BM
(_pö); } 0);}

	)

19 
	#ƒk_gpio_øw_˛r
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à&~
	`BM
(_pö); } 0);}

	)

21 
	#ƒk_gpio_øw_gë
–
_pö_p‹t
, 
_pö
 ) (_pö_p‹à& 
	`BM
(_pö))

	)

23 
	#ƒk_gpio_øw_toggÀ
–
_pö_p‹t
, 
_p‹t
, 
_pö
 ) { \

	)

24 i‡((
	g_pö_p‹t
 & 
BM
(
_pö
))Ëdo{ 
	g_p‹t
 &= ~BM(_pin); } 0); \

25 dÿ{ 
	g_p‹t
 |
BM
(
_pö
); }0); \

29 
	#ƒk_gpio_øw_dúe˘i⁄
–
_dúe˘i⁄_p‹t_«me
, 
_pö
, 
_pö_dúe˘i⁄
 ) {\

	)

30 i‡(
	g_pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) { \

31 
_dúe˘i⁄_p‹t_«me
 &~
BM
–
_pö
 ); \

33 
	g_dúe˘i⁄_p‹t_«me
 |
BM
–
_pö
 ); \

42 
	#DECLARE_NRK_PIN
–
_pö_«me
 )\

	)

43 c⁄° 
uöt8_t
 
NRK_
 ## 
_pö_«me
;

44 
	#NRK_PIN
–
_pö_«me
, 
_pö
 , 
_p‹t
 )\

	)

45 c⁄° 
uöt8_t
 
	gNRK_
 ## 
	g_pö_«me
 = (
_pö
 << 3Ë+ (
_p‹t
 & 0x07);

46 
	#NRK_INVALID_PIN
–
_pö_«me
 )\

	)

47 c⁄° 
uöt8_t
 
	gNRK_
 ## 
	g_pö_«me
 = 
NRK_INVALID_PIN_VAL
;

55 
	#NRK_INVALID_PIN_VAL
 0xFF

	)

60 
	#NRK_PIN_INPUT
 0

	)

61 
	#NRK_PIN_OUTPUT
 1

	)

67 
	#NRK_PORTA
 1

	)

68 
	#NRK_PORTB
 2

	)

69 
	#NRK_PORTC
 3

	)

70 
	#NRK_PORTD
 4

	)

71 
	#NRK_PORTE
 5

	)

72 
	#NRK_PORTF
 6

	)

77 
	#IMP_CS
 0

78 
	#IMP_WR
 1

79 
	#UP_A0_ECG
 4

80 
	#UP_A1_ECG
 5

81 
	#UP_A2_ECG
 6

82 
	#ASIC_CLK
 7

83 

	)

84 
	#ENABLE1
 0

85 
	#START_UP
 1

86 
	#OLD_IMP_STIM_NO_LONGER_USED
 2

87 
	#UP_RESET
 3

88 
	#UP_A0_EEG
 4

89 
	#UP_A1_EEG
 5

90 
	#UP_A2_EEG
 6

91 
	#DR1_RF
 7

92 

	)

93 
	#LED
 0

94 
	#DATA_RF
 1

95 
	#CLK1_RF
 3

96 
	#TXD
 6

97 
	#RXD
 7

98 

	)

99 
	#CS_RF
 1

100 
	#DOUT2_RF
 2

101 
	#CLK2_RF
 3

102 
	#DR2_RF
 4

103 
	#CE_RF
 5

104 
	#PWR_UP_RF
 6

105 

	)

106 
	#MUXA0
 0

107 
	#MUXA1
 1

108 
	#MUXA2
 2

109 
	#MUXA3
 3

110 
	#MUXA4
 4

111 
	#IMP_STIM
 5

112 

	)

113 
	#ASIC_OUT
 0

114 
	#IMP_OUT
 2

115 
	#MISC1
 3

116 
	#MISC2
 4

117 
	#MISC3
 5

118 
	#MISC4
 6

119 

	)

124 
	$DECLARE_NRK_PIN
(
IMP_CS
)

125 
	$DECLARE_NRK_PIN
(
IMP_WR
)

126 
	$DECLARE_NRK_PIN
(
UP_A0_ECG
)

127 
	$DECLARE_NRK_PIN
(
UP_A1_ECG
)

128 
	$DECLARE_NRK_PIN
(
UP_A2_ECG
)

129 
	$DECLARE_NRK_PIN
(
ASIC_CLK
)

130 
	$DECLARE_NRK_PIN
(
ENABLE1
)

131 
	$DECLARE_NRK_PIN
(
START_UP
)

132 
	$DECLARE_NRK_PIN
(
OLD_IMP_STIM_NO_LONGER_USED
)

133 
	$DECLARE_NRK_PIN
(
UP_RESET
)

134 
	$DECLARE_NRK_PIN
(
UP_A0_EEG
)

135 
	$DECLARE_NRK_PIN
(
UP_A1_EEG
)

136 
	$DECLARE_NRK_PIN
(
UP_A2_EEG
)

137 
	$DECLARE_NRK_PIN
(
DR1_RF
)

138 
	$DECLARE_NRK_PIN
(
LED
)

139 
	$DECLARE_NRK_PIN
(
DATA_RF
)

140 
	$DECLARE_NRK_PIN
(
CLK1_RF
)

141 
	$DECLARE_NRK_PIN
(
TXD
)

142 
	$DECLARE_NRK_PIN
(
RXD
)

143 
	$DECLARE_NRK_PIN
(
CS_RF
)

144 
	$DECLARE_NRK_PIN
(
DOUT2_RF
)

145 
	$DECLARE_NRK_PIN
(
CLK2_RF
)

146 
	$DECLARE_NRK_PIN
(
DR2_RF
)

147 
	$DECLARE_NRK_PIN
(
CE_RF
)

148 
	$DECLARE_NRK_PIN
(
PWR_UP_RF
)

149 
	$DECLARE_NRK_PIN
(
MUXA0
)

150 
	$DECLARE_NRK_PIN
(
MUXA0
)

151 
	$DECLARE_NRK_PIN
(
MUXA0
)

152 
	$DECLARE_NRK_PIN
(
MUXA0
)

153 
	$DECLARE_NRK_PIN
(
MUXA0
)

154 
	$DECLARE_NRK_PIN
(
IMP_STIM
)

155 
	$DECLARE_NRK_PIN
(
ASIC_OUT
)

156 
	$DECLARE_NRK_PIN
(
IMP_OUT
)

157 
	$DECLARE_NRK_PIN
(
MISC1
)

158 
	$DECLARE_NRK_PIN
(
MISC2
)

159 
	$DECLARE_NRK_PIN
(
MISC3
)

160 
	$DECLARE_NRK_PIN
(
MISC4
)

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/nrk_platform_time.h

1 #i‚de‡
NRK_PLATFORM_TIME_H


2 
	#NRK_PLATFORM_TIME_H


	)

8 
	#NANOS_PER_TICK
 976563

	)

9 
	#US_PER_TICK
 977

	)

10 
	#TICKS_PER_SEC
 1024

	)

13 #i‚de‡
NRK_SLEEP_WAKEUP_TIME


14 
	#NRK_SLEEP_WAKEUP_TIME
 10

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec/source/hal_wait.c

50 
	~<ö˛ude.h
>

63 
	$hÆWaô
(
uöt16_t
 
timeout
) {

67 
	`NOP
();

68 
	`NOP
();

69 
	`NOP
();

70 
	`NOP
();

71 } --
timeout
);

73 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec/source/nrk_eeprom.c

1 
	~<ƒk_ì¥om.h
>

2 
	~<ƒk_îr‹.h
>

5 
öt8_t
 
	$ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
)

7  
NRK_ERROR
;

8 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec/source/ulib.c

1 
	~<ö˛ude.h
>

2 
	~<ulib.h
>

3 
	~<°dio.h
>

4 
	~<hÆ.h
>

5 
	~<hÆ_imec.h
>

6 
	~<ƒk_pö_deföe.h
>

7 
	~<ƒk_îr‹.h
>

9 #ifde‡
NANORK


10 
	~<ƒk_cfg.h
>

13 #ifde‡
NRK_UART_BUF


14 
	~<ƒk_evíts.h
>

16 #i‚de‡
MAX_RX_UART_BUF


17 
	#MAX_RX_UART_BUF
 16

	)

20 
uöt8_t
 
	gu¨t_rx_buf_°¨t
,
	gu¨t_rx_buf_íd
;

21 
	gu¨t_rx_buf
[
MAX_RX_UART_BUF
];

22 
öt8_t
 
	gu¨t_rx_sig«l
;

24 
	$SIGNAL
(
USART1_RX_ve˘
)

26 
c
;

27 
uöt8_t
 
sig
;

28 
	`DISABLE_UART1_RX_INT
();

29 
	`UART1_WAIT_AND_RECEIVE
(
c
);

30 
u¨t_rx_buf
[
u¨t_rx_buf_íd
]=
c
;

32 
u¨t_rx_buf_íd
++;

33 if(
u¨t_rx_buf_íd
==
MAX_RX_UART_BUF
) uart_rx_buf_end=0;

34 
	`ƒk_evít_sig«l
(
u¨t_rx_sig«l
);

35 
	`CLEAR_UART1_RX_INT
();

36 
	`ENABLE_UART1_RX_INT
();

37 
	}
}

39 
	$gëc1
()

41 
tmp
;

43 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)

45 
tmp
=
u¨t_rx_buf
[
u¨t_rx_buf_°¨t
];

46 
u¨t_rx_buf_°¨t
++;

47 if(
u¨t_rx_buf_°¨t
==
MAX_RX_UART_BUF
) uart_rx_buf_start=0;

48 (
tmp
);

51 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

52  
tmp
;

53 
	}
}

55 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

57 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)  1;

59 
	}
}

61 
öt8_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

63 if(
u¨t_rx_sig«l
==0Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

64  
u¨t_rx_sig«l
;

65 
	}
}

69 
öt8_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

72 
	}
}

74 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

76 if(
u¨t_num
==1)

79 if–
IFG2
 & 
	`BM
(
URXIFG1
) )  1;

82 
	}
}

84 
	$gëc1
(){

85 
tmp
;

86 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

87  
tmp
;

88 
	}
}

92 
	$ƒk_k¥ötf
–c⁄° *
addr
)

94 * 
c
 = 
addr
;

95 *
c
) {

96 
	`putch¨
(*
c
);

97 
c
++;

99 
	}
}

101 
	$ƒk_£tup_p‹ts
()

105 
P3DIR
 |= 0x01;

108 
	`ƒk_gpio_øw_dúe˘i⁄
(
P6DIR
,
MISC1
,
NRK_PIN_OUTPUT
);

109 
	`ƒk_gpio_øw_dúe˘i⁄
(
P6DIR
,
MISC2
,
NRK_PIN_OUTPUT
);

110 
	`ƒk_gpio_øw_dúe˘i⁄
(
P6DIR
,
MISC3
,
NRK_PIN_OUTPUT
);

111 
	`ƒk_gpio_øw_dúe˘i⁄
(
P6DIR
,
MISC4
,
NRK_PIN_OUTPUT
);

114 
	`ƒk_gpio_øw_dúe˘i⁄
(
P1DIR
,
ASIC_CLK
,
NRK_PIN_OUTPUT
);

115 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
UP_RESET
,
NRK_PIN_OUTPUT
);

116 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
ENABLE1
,
NRK_PIN_INPUT
);

118 
	`ƒk_gpio_øw_dúe˘i⁄
(
P1DIR
,
UP_A0_ECG
,
NRK_PIN_OUTPUT
);

119 
	`ƒk_gpio_øw_dúe˘i⁄
(
P1DIR
,
UP_A1_ECG
,
NRK_PIN_OUTPUT
);

120 
	`ƒk_gpio_øw_dúe˘i⁄
(
P1DIR
,
UP_A2_ECG
,
NRK_PIN_OUTPUT
);

122 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
UP_A0_EEG
,
NRK_PIN_OUTPUT
);

123 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
UP_A1_EEG
,
NRK_PIN_OUTPUT
);

124 
	`ƒk_gpio_øw_dúe˘i⁄
(
P2DIR
,
UP_A2_EEG
,
NRK_PIN_OUTPUT
);

125 
	}
}

127 
	$ƒk_öô_h¨dw¨e
() {

129 
BCSCTL1
 &~
XT2OFF
;

133 
IFG1
 &~
OFIFG
;

135 (
IFG1
 & 
OFIFG
) != 0);

136 
BCSCTL2
 = 
SELM1
|
SELS
;

138 
	}
}

147 
	$NRK_PIN
(
IMP_CS
,IMP_CS,
NRK_PORTA
)

148 
	$NRK_PIN
(
IMP_WR
,IMP_WR,
NRK_PORTA
)

149 
	$NRK_PIN
(
UP_A0_ECG
,UP_A0_ECG,
NRK_PORTA
)

150 
	$NRK_PIN
(
UP_A1_ECG
,UP_A1_ECG,
NRK_PORTA
)

151 
	$NRK_PIN
(
UP_A2_ECG
,UP_A2_ECG,
NRK_PORTA
)

152 
	$NRK_PIN
(
ASIC_CLK
,ASIC_CLK,
NRK_PORTA
)

154 
	$NRK_PIN
(
ENABLE1
,ENABLE1,
NRK_PORTB
)

155 
	$NRK_PIN
(
START_UP
,START_UP,
NRK_PORTB
)

156 
	$NRK_PIN
(
OLD_IMP_STIM_NO_LONGER_USED
,OLD_IMP_STIM_NO_LONGER_USED,
NRK_PORTB
)

157 
	$NRK_PIN
(
UP_RESET
,UP_RESET,
NRK_PORTB
)

158 
	$NRK_PIN
(
UP_A0_EEG
,UP_A0_EEG,
NRK_PORTB
)

159 
	$NRK_PIN
(
UP_A1_EEG
,UP_A1_EEG,
NRK_PORTB
)

160 
	$NRK_PIN
(
UP_A2_EEG
,UP_A2_EEG,
NRK_PORTB
)

161 
	$NRK_PIN
(
DR1_RF
,DR1_RF,
NRK_PORTB
)

163 
	$NRK_PIN
(
LED
,LED,
NRK_PORTC
)

164 
	$NRK_PIN
(
DATA_RF
,DATA_RF,
NRK_PORTC
)

165 
	$NRK_PIN
(
CLK1_RF
,CLK1_RF,
NRK_PORTC
)

166 
	$NRK_PIN
(
TXD
,TXD,
NRK_PORTC
)

167 
	$NRK_PIN
(
RXD
,RXD,
NRK_PORTC
)

169 
	$NRK_PIN
(
CS_RF
,CS_RF,
NRK_PORTD
)

170 
	$NRK_PIN
(
DOUT2_RF
,DOUT2_RF,
NRK_PORTD
)

171 
	$NRK_PIN
(
CLK2_RF
,CLK2_RF,
NRK_PORTD
)

172 
	$NRK_PIN
(
DR2_RF
,DR2_RF,
NRK_PORTD
)

173 
	$NRK_PIN
(
CE_RF
,CE_RF,
NRK_PORTD
)

174 
	$NRK_PIN
(
PWR_UP_RF
,PWR_UP_RF,
NRK_PORTD
)

176 
	$NRK_PIN
(
MUXA0
,MUXA0,
NRK_PORTE
)

177 
	$NRK_PIN
(
MUXA1
,MUXA1,
NRK_PORTE
)

178 
	$NRK_PIN
(
MUXA2
,MUXA2,
NRK_PORTE
)

179 
	$NRK_PIN
(
MUXA3
,MUXA3,
NRK_PORTE
)

180 
	$NRK_PIN
(
MUXA4
,MUXA4,
NRK_PORTE
)

181 
	$NRK_PIN
(
IMP_STIM
,IMP_STIM,
NRK_PORTE
)

183 
	$NRK_PIN
(
ASIC_OUT
,ASIC_OUT,
NRK_PORTF
)

184 
	$NRK_PIN
(
IMP_OUT
,IMP_OUT,
NRK_PORTF
)

185 
	$NRK_PIN
(
MISC1
,MISC1,
NRK_PORTF
)

186 
	$NRK_PIN
(
MISC2
,MISC2,
NRK_PORTF
)

187 
	$NRK_PIN
(
MISC3
,MISC3,
NRK_PORTF
)

188 
	$NRK_PIN
(
MISC4
,MISC4,
NRK_PORTF
)

193 
öt8_t
 
	$ƒk_gpio_£t
(
uöt8_t
 
pö
)

195 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

196 
pö
 & 0x07) {

197 
NRK_PORTA
:

198 dÿ{ 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

199 
NRK_PORTB
:

200 dÿ{ 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

201 
NRK_PORTC
:

202 dÿ{ 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

203 
NRK_PORTD
:

204 dÿ{ 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

205 
NRK_PORTE
:

206 dÿ{ 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

207 
NRK_PORTF
:

208 dÿ{ 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

212 
	}
}

214 
öt8_t
 
	$ƒk_gpio_˛r
(
uöt8_t
 
pö
)

216 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

217 
pö
 & 0x07) {

218 
NRK_PORTA
:

219 dÿ{ 
P1OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

220 
NRK_PORTB
:

221 dÿ{ 
P2OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

222 
NRK_PORTC
:

223 dÿ{ 
P3OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

224 
NRK_PORTD
:

225 dÿ{ 
P4OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

226 
NRK_PORTE
:

227 dÿ{ 
P5OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

228 
NRK_PORTF
:

229 dÿ{ 
P6OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

233 
	}
}

235 
öt8_t
 
	$ƒk_gpio_gë
(
uöt8_t
 
pö
)

237 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

238 
pö
 & 0x07) {

239 
NRK_PORTA
:

240  (
P1IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

241 
NRK_PORTB
:

242  (
P2IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

243 
NRK_PORTC
:

244  (
P3IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

245 
NRK_PORTD
:

246  (
P4IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

247 
NRK_PORTE
:

248  (
P5IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

249 
NRK_PORTF
:

250  (
P6IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

254 
	}
}

256 
öt8_t
 
	$ƒk_gpio_toggÀ
(
uöt8_t
 
pö
)

258 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

259 
pö
 & 0x07) {

260 
NRK_PORTA
:

261 i‡((
P1IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

262 dÿ{ 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

264 dÿ{ 
P1OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

267 
NRK_PORTB
:

268 i‡((
P2IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

269 dÿ{ 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

271 dÿ{ 
P2OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

274 
NRK_PORTC
:

275 i‡((
P3IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

276 dÿ{ 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

278 dÿ{ 
P3OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

281 
NRK_PORTD
:

282 i‡((
P4IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

283 dÿ{ 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

285 dÿ{ 
P4OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

288 
NRK_PORTE
:

289 i‡((
P5IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

290 dÿ{ 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

292 dÿ{ 
P5OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

295 
NRK_PORTF
:

296 i‡((
P6IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

297 dÿ{ 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

299 dÿ{ 
P6OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

305 
	}
}

307 
öt8_t
 
	$ƒk_gpio_dúe˘i⁄
(
uöt8_t
 
pö
, uöt8_à
pö_dúe˘i⁄
)

309 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

310 i‡(
pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) {

311 
pö
 & 0x07) {

312 
NRK_PORTA
:

313 
P1DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

314 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

316 
NRK_PORTB
:

317 
P2DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

318 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

320 
NRK_PORTC
:

321 
P3DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

322 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

324 
NRK_PORTD
:

325 
P4DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

326 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

328 
NRK_PORTE
:

329 
P5DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

330 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

332 
NRK_PORTF
:

333 
P6DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

334 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

339 
pö
 & 0x07) {

340 
NRK_PORTA
:

341 
P1DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

342 
NRK_PORTB
:

343 
P2DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

344 
NRK_PORTC
:

345 
P3DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

346 
NRK_PORTD
:

347 
P4DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

348 
NRK_PORTE
:

349 
P5DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

350 
NRK_PORTF
:

351 
P6DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

356 
	}
}

358 
öt8_t
 
	$ƒk_gpio_puŒups
(
uöt8_t
 
íabÀ
)

360  
NRK_ERROR
;

361 
	}
}

363 
öt8_t
 
	$ƒk_gë_buâ⁄
(
uöt8_t
 
b
)

366  
NRK_ERROR
;

367 
	}
}

369 
öt8_t
 
	$ƒk_Àd_toggÀ
–
Àd
 )

372 if(
Àd
==0Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED
);  1; }

373  
NRK_ERROR
;

374 
	}
}

376 
öt8_t
 
	$ƒk_Àd_˛r
–
Àd
 )

378 if(
Àd
==0Ë{ 
	`ƒk_gpio_£t
(
NRK_LED
);  1; }

379  
NRK_ERROR
;

380 
	}
}

382 
öt8_t
 
	$ƒk_Àd_£t
–
Àd
 )

384 if(
Àd
==0Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED
);  1; }

385  
NRK_ERROR
;

386 
	}
}

388 
	$putc0
(
x
)

390 
	`UART0_WAIT_AND_SEND
(
x
);

391 
	}
}

393 
	$putch¨
(
x
)

395 
	`UART1_WAIT_AND_SEND
(
x
);

397 
	}
}

402 
	$£tup_u¨t0
(
uöt16_t
 
baudøã
)

404 
	}
}

410 
	$£tup_u¨t1
(
uöt16_t
 
baudøã
)

412 
UCTL1
 = 
CHAR
;

413 
UTCTL1
 = 
SSEL1
;

414 
UBR01
=
baudøã
&0xff;

415 
UBR11
=(
baudøã
>>8)&0xff;

416 
UMCTL1
=0x00;

417 
ME2
 |
UTXE1
;

419 
P3SEL
 |= (1<<6);

420 
	}
}

432 
	$ƒk_£tup_u¨t
(
uöt16_t
 
baudøã
)

434 
	`£tup_u¨t1
(
baudøã
);

438 #ifde‡
NRK_UART_BUF


439 
u¨t_rx_sig«l
=
	`ƒk_sig«l_¸óã
();

440 if(
u¨t_rx_sig«l
==0Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

441 
u¨t_rx_buf_°¨t
=0;

442 
u¨t_rx_buf_íd
=0;

443 
	`ENABLE_UART1_RX_INT
();

446 
	}
}

449 
	$gëc0
(){

450 
tmp
;

451 
	`UART0_WAIT_AND_RECEIVE
(
tmp
);

452  
tmp
;

453 
	}
}

455 
	$PORT_INIT
()

463 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/hal.h

10 #i‚de‡
HAL_H


11 
	#HAL_H


	)

16 
uöt16_t
 
	tNRK_STK
;

18 
	#SPI_INIT
(Ë\

	)

26 
	#SPI_WAITFOREOTx
(Ë(
U1TCTL
 & 
TXEPT
) == 0)

27 
	#SPI_WAITFOREORx
(Ë(
IFG2
 & 
URXIFG1
) == 0)

28 

	)

30 
	#FASTSPI_TX
(
x
)\

	)

32 
U1TXBUF
 = 
x
;\

33 
	`SPI_WAITFOREOTx
();\

34 
	}
} 0)

36 
	#FASTSPI_RX
(
x
)\

	)

38 
U1TXBUF
 = 0;\

39 
	`SPI_WAITFOREORx
();\

40 
x
 = 
U1RXBUF
;\

41 
	}
} 0)

43 
	#FASTSPI_RX_GARBAGE
()\

	)

45 
U1TXBUF
 = 0;\

46 
	`SPI_WAITFOREORx
();\

47 
U1RXBUF
;\

48 
	}
} 0)

50 
	#FASTSPI_TX_MANY
(
p
,
c
)\

	)

52 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) {\

53 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]);\

55 
	}
} 0)

58 
	#FASTSPI_RX_WORD
(
x
)\

	)

60 
U1TXBUF
 = 0;\

61 
	`SPI_WAITFOREORx
();\

62 
x
 = 
U1RXBUF
 << 8;\

63 
U1TXBUF
 = 0;\

64 
	`SPI_WAITFOREORx
();\

65 
x
 |
U1RXBUF
;\

66 
	}
} 0)

68 
	#FASTSPI_TX_ADDR
(
a
)\

	)

70 
U1TXBUF
 = 
a
;\

71 
	`SPI_WAITFOREOTx
();\

72 
	}
} 0)

74 
	#FASTSPI_RX_ADDR
(
a
)\

	)

76 
U1TXBUF
 = (
a
) | 0x40;\

77 
	`SPI_WAITFOREOTx
();\

78 
	}
} 0)

82 
	`hÆWaô
(
uöt16_t
 
timeout
);

84 
	#ENABLE_GLOBAL_INT
(Ëdÿ{ 
	`eöt
(); 
	}
} 0)

	)

85 
	#DISABLE_GLOBAL_INT
(Ëdÿ{ 
	`döt
(); } 0)

	)

90 
	#ENABLE_UART1_INT
(Ëdÿ{ 
IE2
 |(
	`BM
(
UTXIE1
Ë| BM(
URXIE1
)); } 0)

	)

91 
	#DISABLE_UART1_INT
(Ëdÿ{ 
IE2
 &~(
	`BM
(
UTXIE1
Ë| BM(
URXIE1
)); } 0)

	)

97 
	#ENABLE_UART1_TX_INT
(Ëdÿ{ 
IE2
 |
	`BM
(
UTXIE1
); } 0)

	)

98 
	#DISABLE_UART1_TX_INT
(Ëdÿ{ 
IE2
 &~
	`BM
(
UTXIE1
); } 0)

	)

99 
	#CLEAR_UART1_TX_INT
(Ëdÿ{ 
IFG2
 &~
	`BM
(
UTXIFG1
); } 0)

	)

100 
	#SET_UART1_TX_INT
(Ëdÿ{ 
IFG2
 |
	`BM
(
UTXIFG1
); } 0)

	)

108 
	#ENABLE_UART1_RX_INT
(Ëdÿ{ 
IE2
 |
	`BM
(
URXIE1
); } 0)

	)

109 
	#DISABLE_UART1_RX_INT
(Ëdÿ{ 
IE2
 &~
	`BM
(
URXIE1
); } 0)

	)

110 
	#CLEAR_UART1_RX_INT
(Ëdÿ{ 
IFG2
 &~
	`BM
(
URXIFG1
); } 0)

	)

117 
	#ENABLE_UART0_TX_INT
(Ëdÿ{ 
IE1
 |
	`BM
(
UTXIE0
); } 0)

	)

118 
	#DISABLE_UART0_TX_INT
(Ëdÿ{ 
IE1
 &~
	`BM
(
UTXIE0
); } 0)

	)

119 
	#CLEAR_UART0_TX_INT
(Ëdÿ{ 
IFG1
 &~
	`BM
(
UTXIFG0
); } 0)

	)

120 
	#SET_UART0_TX_INT
(Ëdÿ{ 
IFG1
 |
	`BM
(
UTXIFG0
); } 0)

	)

128 
	#ENABLE_UART0_RX_INT
(Ëdÿ{ 
IE1
 |
	`BM
(
URXIE0
); } 0)

	)

129 
	#DISABLE_UART0_RX_INT
(Ëdÿ{ 
IE1
 &~
	`BM
(
URXIE0
); } 0)

	)

130 
	#CLEAR_UART0_RX_INT
(Ëdÿ{ 
IFG1
 &~
	`BM
(
URXIFG0
); } 0)

	)

138 
	#PWM0_INIT
(
≥riod
Ë\

	)

152 
	#PWM0_SET_PERIOD
(
≥riod
Ëdÿ{ 
	}
} 0)

	)

158 
	#TIMER_CLK_STOP
 0x00

	)

159 
	#TIMER_CLK_DIV1
 0x01

	)

160 
	#TIMER_CLK_DIV8
 0x02

	)

161 
	#TIMER_CLK_DIV64
 0x03

	)

162 
	#TIMER_CLK_DIV256
 0x04

	)

163 
	#TIMER_CLK_DIV1024
 0x05

	)

164 
	#TIMER_CLK_T_FALL
 0x06

	)

165 
	#TIMER_CLK_T_RISE
 0x07

	)

169 
	#PWM0_SET_DUTY_CYCLE
(
dutyCy˛e
Ëdÿ{ } 0)

	)

181 
	#ENABLE_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

182 
	#DISABLE_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

183 
	#CLEAR_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

191 
	#ENABLE_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

192 
	#DISABLE_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

193 
	#CLEAR_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

227 
	#INIT_UART1
(
baudR©e
,
›ti⁄s
Ë\

	)

247 
	#INIT_UART0
(
baudR©e
,
›ti⁄s
Ë\

	)

249 
	}
} 0)

267 
	#UART_BAUDRATE_2K4
 416

	)

268 
	#UART_BAUDRATE_4K8
 207

	)

269 
	#UART_BAUDRATE_9K6
 103

	)

270 
	#UART_BAUDRATE_14K4
 68

	)

271 
	#UART_BAUDRATE_19K2
 51

	)

272 
	#UART_BAUDRATE_28K8
 34

	)

273 
	#UART_BAUDRATE_38K4
 25

	)

274 
	#UART_BAUDRATE_57K6
 16

	)

275 
	#UART_BAUDRATE_115K2
 8

	)

276 
	#UART_BAUDRATE_230K4
 3

	)

277 
	#UART_BAUDRATE_250K
 3

	)

282 
	#UART_OPT_ONE_STOP_BIT
 0

	)

283 
	#UART_OPT_TWO_STOP_BITS
 0x08

	)

284 
	#UART_OPT_NO_PARITY
 0

	)

285 
	#UART_OPT_EVEN_PARITY
 0x20

	)

286 
	#UART_OPT_ODD_PARITY
 0x30

	)

287 
	#UART_OPT_5_BITS_PER_CHAR
 0

	)

288 
	#UART_OPT_6_BITS_PER_CHAR
 0x02

	)

289 
	#UART_OPT_7_BITS_PER_CHAR
 0x04

	)

290 
	#UART_OPT_8_BITS_PER_CHAR
 0x06

	)

291 
	#UART_OPT_9_BITS_PER_CHAR
 0x0406

	)

300 
	#ENABLE_UART0
(Ë()

	)

301 
	#DISABLE_UART0
(Ë()

	)

302 
	#ENABLE_UART1
(Ë()

	)

303 
	#DISABLE_UART1
(Ë()

	)

323 
	#UART1_WAIT
(Ëdÿ{ 
	}
} 0)

	)

325 
	#UART1_WAIT_RX
(Ëdÿ{ } 0)

	)

327 
	#UART1_SEND
(
x
Ëdÿ{ } 0)

	)

329 
	#UART1_WAIT_AND_SEND
(
x
Ëdÿ{ } 0)

	)

331 
	#UART1_RECEIVE
(
x
Ëdÿ{ } 0)

	)

333 
	#UART1_WAIT_AND_RECEIVE
(
x
Ëdÿ{ } 0)

	)

336 
	#UART0_WAIT
(Ëdÿ{ } 0)

	)

338 
	#UART0_WAIT_RX
(Ëdÿ{ } 0)

	)

340 
	#UART0_SEND
(
x
Ëdÿ{ } 0)

	)

342 
	#UART0_WAIT_AND_SEND
(
x
Ëdÿ{ } 0)

	)

344 
	#UART0_RECEIVE
(
x
Ëdÿ{ } 0)

	)

346 
	#UART0_WAIT_AND_RECEIVE
(
x
Ëdÿ{ } 0)

	)

384 
	#TIMER0_OFF
 0

	)

385 
	#TIMER0_PRESCALE_1
 1

	)

386 
	#TIMER0_PRESCALE_8
 2

	)

387 
	#TIMER0_PRESCALE_32
 3

	)

388 
	#TIMER0_PRESCALE_64
 4

	)

389 
	#TIMER0_PRESCALE_128
 5

	)

390 
	#TIMER0_PRESCALE_256
 6

	)

391 
	#TIMER0_PRESCALE_1024
 7

	)

393 
	#TIMER0_WGM_0
 0x00

	)

394 
	#TIMER0_WGM_1
 0x40

	)

395 
	#TIMER0_WGM_2
 0x08

	)

396 
	#TIMER0_WGM_3
 0x48

	)

398 
	#TIMER0_COM_0
 0x00

	)

399 
	#TIMER0_COM_1
 0x08

	)

400 
	#TIMER0_COM_2
 0x10

	)

401 
	#TIMER0_COM_3
 0x18

	)

402 
	#TIMER0_COM_4
 0x20

	)

403 
	#TIMER0_COM_5
 0x28

	)

404 
	#TIMER0_COM_6
 0x30

	)

405 
	#TIMER0_COM_7
 0x38

	)

408 
	#TIMER0_SET_CONTROL
(
x
Ëdÿ{ } 0)

	)

410 
	#TIMER0_SET_VALUE
(
x
Ëdÿ{ } 0)

	)

411 
	#TIMER0_READ_VALUE
(
x
Ëdÿ{ } 0)

	)

413 
	#TIMER0_SET_COMPARE_VALUE
(
x
Ëdÿ{ } 0)

	)

414 
	#TIMER0_READ_COMPARE_VALUE
(
x
Ëdÿ{ } 0)

	)

435 
	#NOP
(Ë
asm
 vﬁ©ûê("n›\n\t" ::)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/hal_imec_gateway.h

30 #i‚de‡
HAL_IMEC_GATEWAY_H


31 
	#HAL_IMEC_GATEWAY_H


	)

33 
	#IMEC_GATEWAY_PLATFORM


	)

35 
	#RED_LED
 0

	)

36 
	#GREEN_LED
 1

	)

37 
	#BLUE_LED
 2

	)

38 
	#ORANGE_LED
 3

	)

40 
PORT_INIT
();

42 
	#SPI_ENABLE
(Ë–
P5OUT
 &~
	`BM
(
CSN
) )

43 
	#SPI_DISABLE
(Ë–
P5OUT
 |
	`BM
(
CSN
) )

44 

	)

46 
	#FIFOP_INT_INIT
(Ëdÿ{ 
P2IES
 &~
	`BM
(
FIFO_P
); 
	`CLEAR_FIFOP_INT
(); } 0)

	)

49 
	#ENABLE_FIFOP_INT
(Ëdÿ{ 
P2IE
 |
	`BM
(
FIFO_P
); } 0)

	)

50 
	#DISABLE_FIFOP_INT
(Ëdÿ{ 
P2IE
 &~
	`BM
(
FIFO_P
); } 0)

	)

51 
	#CLEAR_FIFOP_INT
(Ëdÿ{ 
P2IFG
 &~
	`BM
(
FIFO_P
); } 0)

	)

54 
	#ENABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TICIE1
); } 0)

	)

55 
	#DISABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TICIE1
); } 0)

	)

56 
	#CLEAR_SFD_CAPTURE_INT
(Ëdÿ{ 
TIFR
 = 
	`BM
(
ICF1
); } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/include.h

1 #i‚de‡
INCLUDE_H


2 
	#INCLUDE_H


	)

8 
	#PSTR
(
x
Ë
	)
x

31 #i‚de‡
FALSE


32 
	#FALSE
 0

	)

34 #i‚de‡
TRUE


35 
	#TRUE
 1

	)

37 #i‚de‡
NULL


38 
	#NULL
 0

	)

42 
	#BM
(
n
Ë(1 << (n))

	)

43 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

44 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

45 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

46 
	#ABS
(
n
Ë(“ < 0Ë? -“Ë: (n))

	)

49 (*
	tVFPTR
)();

60 
	~<io.h
>

61 
	~<sig«l.h
>

62 
	~<m•430x16x.h
>

63 
	~<°rög.h
>

67 
	#RAMEND
 0x09ff

	)

70 #ifde‡
STK501


74 #ifde‡
CC2420DB


79 
	~<hÆ.h
>

80 
	~<hÆ_tmŸe.h
>

82 
	~<hÆ_cc2420.h
>

84 
	~<basic_rf.h
>

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/nrk_eeprom.h

1 #i‚de‡
_NRK_EEPROM_H_


2 
	#_NRK_EEPROM_H_


	)

3 
	~<°döt.h
>

5 
öt8_t
 
ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
);

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/nrk_pin_define.h

1 #i‚de‡
NRK_PIN_DEFINE_H


2 
	#NRK_PIN_DEFINE_H


	)

10 
	#CSN
 2

11 
	#FIFO
 3

12 
	#VREG_EN
 5

13 
	#RESET_N
 6

14 
	#BUTTON
 7

15 
	#SCK
 3

16 
	#MOSI
 1

17 
	#MISO
 2

18 
	#UART1_RXD
 7

19 
	#UART1_TXD
 6

20 
	#SFD
 1

21 
	#CCA
 4

22 
	#LED_0
 4

23 
	#LED_1
 5

24 
	#LED_2
 6

25 
	#LED_3
 5

26 
	#UART0_RXD
 5

27 
	#UART0_TXD
 4

29 
	#FIFOP
 0

30 
	#ADC_INPUT_0
 0

31 
	#ADC_INPUT_1
 1

32 
	#ADC_INPUT_2
 2

33 
	#ADC_INPUT_3
 3

34 
	#ADC_INPUT_4
 4

35 
	#ADC_INPUT_5
 5

36 
	#ADC_INPUT_6
 6

37 
	#ADC_INPUT_7
 7

38 

	)

41 
	#DEBUG_0
 3

	)

42 
	#DEBUG_1
 4

	)

43 
	#DEBUG_2
 4

	)

44 
	#DEBUG_3
 4

	)

45 
	#GPIO26
 4

	)

46 
	#GPIO28
 5

	)

47 
	#UART1_RTS
 5

48 
	#UART1_CTS
 7

49 
	#GPIO34
 6

	)

129 
	#ƒk_gpio_øw_£t
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à|
	`BM
(_pö); } 0);}

	)

131 
	#ƒk_gpio_øw_˛r
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à&~
	`BM
(_pö); } 0);}

	)

133 
	#ƒk_gpio_øw_gë
–
_pö_p‹t
, 
_pö
 ) (_pö_p‹à& 
	`BM
(_pö))

	)

135 
	#ƒk_gpio_øw_toggÀ
–
_pö_p‹t
, 
_p‹t
, 
_pö
 ) { \

	)

136 i‡((
	g_pö_p‹t
 & 
BM
(
_pö
))Ëdo{ 
	g_p‹t
 &= ~BM(_pin); } 0); \

137 dÿ{ 
	g_p‹t
 |
BM
(
_pö
); }0); \

140 
	#ƒk_gpio_øw_dúe˘i⁄
–
_dúe˘i⁄_p‹t_«me
, 
_pö
, 
_pö_dúe˘i⁄
 ) { \

	)

141 i‡(
	g_pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) { \

142 
_dúe˘i⁄_p‹t_«me
 &~
BM
–
_pö
 ); \

144 
	g_dúe˘i⁄_p‹t_«me
 |
BM
–
_pö
 ); \

154 
	#NRK_INVALID_PIN_VAL
 0xFF

	)

158 
	#NRK_PORTA
 0

	)

159 
	#NRK_PORTB
 1

	)

160 
	#NRK_PORTC
 2

	)

161 
	#NRK_PORTD
 3

	)

162 
	#NRK_PORTE
 4

	)

163 
	#NRK_PORTF
 5

	)

166 
	#NRK_PIN_INPUT
 0

	)

167 
	#NRK_PIN_OUTPUT
 1

	)

177 
	#DECLARE_NRK_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«me;

	)

178 
	#NRK_PIN
–
_pö_«me
, 
_pö
 , 
_p‹t
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê(_pö << 3Ë+ (_p‹à& 0x07);

	)

179 
	#NRK_INVALID_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê
NRK_INVALID_PIN_VAL
;

	)

183 
	$DECLARE_NRK_PIN
–
DEBUG_0
 )

184 
	$DECLARE_NRK_PIN
–
DEBUG_1
 )

185 
	$DECLARE_NRK_PIN
–
DEBUG_2
 )

186 
	$DECLARE_NRK_PIN
–
DEBUG_3
 )

187 
	$DECLARE_NRK_PIN
–
BUTTON
 )

189 
	$DECLARE_NRK_PIN
–
SPI_SS
 )

190 
	$DECLARE_NRK_PIN
–
SCK
 )

191 
	$DECLARE_NRK_PIN
–
MOSI
 )

192 
	$DECLARE_NRK_PIN
–
MISO
 )

194 
	$DECLARE_NRK_PIN
–
GPIO28
 )

195 
	$DECLARE_NRK_PIN
–
GPIO26
 )

198 
	$DECLARE_NRK_PIN
–
UART1_RXD
 )

199 
	$DECLARE_NRK_PIN
–
UART1_TXD
 )

200 
	$DECLARE_NRK_PIN
–
SFD
 )

201 
	$DECLARE_NRK_PIN
–
CCA
 )

203 
	$DECLARE_NRK_PIN
–
UART0_RXD
 )

204 
	$DECLARE_NRK_PIN
–
UART0_TXD
 )

205 
	$DECLARE_NRK_PIN
–
FIFOP
 )

206 
	$DECLARE_NRK_PIN
–
LED_0
 )

207 
	$DECLARE_NRK_PIN
–
LED_1
 )

208 
	$DECLARE_NRK_PIN
–
LED_2
 )

209 
	$DECLARE_NRK_PIN
–
LED_3
 )

211 
	$DECLARE_NRK_PIN
–
GPIO34
 )

213 
	$DECLARE_NRK_PIN
–
ADC_INPUT_0
 )

214 
	$DECLARE_NRK_PIN
–
ADC_INPUT_1
 )

215 
	$DECLARE_NRK_PIN
–
ADC_INPUT_2
 )

216 
	$DECLARE_NRK_PIN
–
ADC_INPUT_3
 )

217 
	$DECLARE_NRK_PIN
–
ADC_INPUT_4
 )

218 
	$DECLARE_NRK_PIN
–
ADC_INPUT_5
 )

219 
	$DECLARE_NRK_PIN
–
JTAG_TCK
 )

220 
	$DECLARE_NRK_PIN
–
JTAG_TMS
 )

221 
	$DECLARE_NRK_PIN
–
JTAG_TDO
 )

222 
	$DECLARE_NRK_PIN
–
JTAG_TDI
 )

224 
	$DECLARE_NRK_PIN
–
ADC_INPUT_6
 )

225 
	$DECLARE_NRK_PIN
–
ADC_INPUT_7
 )

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/nrk_platform_time.h

1 #i‚de‡
NRK_PLATFORM_TIME_H


2 
	#NRK_PLATFORM_TIME_H


	)

8 
	#NANOS_PER_TICK
 976563

	)

9 
	#US_PER_TICK
 977

	)

10 
	#TICKS_PER_SEC
 1024

	)

13 #i‚de‡
NRK_SLEEP_WAKEUP_TIME


14 
	#NRK_SLEEP_WAKEUP_TIME
 10

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/source/hal_wait.c

50 
	~<ö˛ude.h
>

63 
	$hÆWaô
(
uöt16_t
 
timeout
) {

67 
	`NOP
();

68 
	`NOP
();

69 
	`NOP
();

70 
	`NOP
();

71 } --
timeout
);

73 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/source/nrk_eeprom.c

1 
	~<ƒk_ì¥om.h
>

2 
	~<ƒk_îr‹.h
>

5 
öt8_t
 
	$ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
)

7  
NRK_ERROR
;

8 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/source/ulib.c

1 
	~<ö˛ude.h
>

2 
	~<ulib.h
>

3 
	~<°dio.h
>

4 
	~<hÆ.h
>

5 
	~<hÆ_tmŸe.h
>

7 
	~<ƒk_pö_deföe.h
>

8 
	~<ƒk_îr‹.h
>

11 #ifde‡
NANORK


12 
	~<ƒk_cfg.h
>

15 #ifde‡
NRK_UART_BUF


16 
	~<ƒk_evíts.h
>

18 #i‚de‡
MAX_RX_UART_BUF


19 
	#MAX_RX_UART_BUF
 16

	)

22 
uöt8_t
 
	gu¨t_rx_buf_°¨t
,
	gu¨t_rx_buf_íd
;

23 
	gu¨t_rx_buf
[
MAX_RX_UART_BUF
];

24 
öt8_t
 
	gu¨t_rx_sig«l
;

26 
	$SIGNAL
(
USART1_RX_ve˘
)

28 
c
;

29 
uöt8_t
 
sig
;

30 
	`DISABLE_UART1_RX_INT
();

31 
	`UART1_WAIT_AND_RECEIVE
(
c
);

32 
u¨t_rx_buf
[
u¨t_rx_buf_íd
]=
c
;

34 
u¨t_rx_buf_íd
++;

35 if(
u¨t_rx_buf_íd
==
MAX_RX_UART_BUF
) uart_rx_buf_end=0;

36 
	`ƒk_evít_sig«l
(
u¨t_rx_sig«l
);

37 
	`CLEAR_UART1_RX_INT
();

38 
	`ENABLE_UART1_RX_INT
();

39 
	}
}

41 
	$gëc1
()

43 
tmp
;

45 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)

47 
tmp
=
u¨t_rx_buf
[
u¨t_rx_buf_°¨t
];

48 
u¨t_rx_buf_°¨t
++;

49 if(
u¨t_rx_buf_°¨t
==
MAX_RX_UART_BUF
) uart_rx_buf_start=0;

50 (
tmp
);

53 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

54  
tmp
;

55 
	}
}

57 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

59 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)  1;

61 
	}
}

63 
öt8_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

65 if(
u¨t_rx_sig«l
==0Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

66  
u¨t_rx_sig«l
;

67 
	}
}

71 
öt8_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

74 
	}
}

76 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

78 if(
u¨t_num
==1)

80 if–
IFG2
 & 
	`BM
(
URXIFG1
) )  1;

83 
	}
}

95 
	$gëc1
(){

96 
tmp
;

97 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

98  
tmp
;

99 
	}
}

104 
	$ƒk_k¥ötf
–c⁄° *
addr
)

106 
c
;

109 
	}
}

112 
	$ƒk_£tup_p‹ts
()

114 
	`ƒk_gpio_dúe˘i⁄
(
NRK_LED_0
, 
NRK_PIN_OUTPUT
);

115 
	`ƒk_gpio_dúe˘i⁄
(
NRK_LED_1
, 
NRK_PIN_OUTPUT
);

116 
	`ƒk_gpio_dúe˘i⁄
(
NRK_LED_2
, 
NRK_PIN_OUTPUT
);

119 
	}
}

132 
	$NRK_PIN
–
DEBUG_0
,DEBUG_0, 
NRK_PORTA
 )

133 
	$NRK_PIN
–
DEBUG_1
,DEBUG_1, 
NRK_PORTA
 )

134 
	$NRK_INVALID_PIN
–
DEBUG_2
 )

135 
	$NRK_INVALID_PIN
–
DEBUG_3
 )

136 
	$NRK_PIN
–
BUTTON
,BUTTON, 
NRK_PORTA
 )

140 
	$NRK_PIN
–
SCK
,SCK, 
NRK_PORTB
 )

141 
	$NRK_PIN
–
MOSI
,MOSI, 
NRK_PORTB
 )

142 
	$NRK_PIN
–
MISO
,MISO, 
NRK_PORTB
 )

143 
	$NRK_PIN
–
GPIO26
,4, 
NRK_PORTB
 )

144 
	$NRK_PIN
–
GPIO28
,5, 
NRK_PORTB
 )

148 
	$NRK_PIN
–
UART1_RXD
,UART1_RXD, 
NRK_PORTD
 )

149 
	$NRK_PIN
–
UART1_TXD
,UART1_TXD, 
NRK_PORTD
 )

150 
	$NRK_PIN
–
CCA
,CCA, 
NRK_PORTD
 )

151 
	$NRK_PIN
–
SFD
,SFD, 
NRK_PORTD
 )

155 
	$NRK_PIN
–
UART0_RXD
,UART0_RXD, 
NRK_PORTE
 )

156 
	$NRK_PIN
–
UART0_TXD
,UART0_TXD, 
NRK_PORTE
 )

157 
	$NRK_PIN
–
LED_0
,LED_0, 
NRK_PORTE
 )

158 
	$NRK_PIN
–
LED_1
,LED_1, 
NRK_PORTE
 )

159 
	$NRK_PIN
–
LED_2
,LED_2, 
NRK_PORTE
 )

160 
	$NRK_INVALID_PIN
–
LED_3
 )

161 
	$NRK_PIN
–
GPIO34
,GPIO34, 
NRK_PORTE
 )

162 
	$NRK_PIN
–
FIFOP
, FIFOP, 
NRK_PORTE
 )

167 
	$NRK_PIN
–
ADC_INPUT_0
, ADC_INPUT_0, 
NRK_PORTF
 )

168 
	$NRK_PIN
–
ADC_INPUT_1
, ADC_INPUT_1, 
NRK_PORTF
 )

169 
	$NRK_PIN
–
ADC_INPUT_2
, ADC_INPUT_2, 
NRK_PORTF
 )

170 
	$NRK_PIN
–
ADC_INPUT_3
, ADC_INPUT_3, 
NRK_PORTF
 )

171 
	$NRK_PIN
–
ADC_INPUT_4
, ADC_INPUT_4, 
NRK_PORTF
 )

172 
	$NRK_PIN
–
ADC_INPUT_5
, ADC_INPUT_5, 
NRK_PORTF
 )

173 
	$NRK_PIN
–
ADC_INPUT_6
, ADC_INPUT_6, 
NRK_PORTF
 )

174 
	$NRK_PIN
–
ADC_INPUT_7
, ADC_INPUT_7, 
NRK_PORTF
 )

179 
öt8_t
 
	$ƒk_gpio_£t
(
uöt8_t
 
pö
)

181 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

182 
pö
 & 0x07) {

183 
NRK_PORTA
:

184 dÿ{ 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

185 
NRK_PORTB
:

186 dÿ{ 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

187 
NRK_PORTC
:

188 dÿ{ 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

189 
NRK_PORTD
:

190 dÿ{ 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

191 
NRK_PORTE
:

192 dÿ{ 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

193 
NRK_PORTF
:

194 dÿ{ 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

198 
	}
}

200 
öt8_t
 
	$ƒk_gpio_˛r
(
uöt8_t
 
pö
)

202 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

203 
pö
 & 0x07) {

204 
NRK_PORTA
:

205 dÿ{ 
P1OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

206 
NRK_PORTB
:

207 dÿ{ 
P2OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

208 
NRK_PORTC
:

209 dÿ{ 
P3OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

210 
NRK_PORTD
:

211 dÿ{ 
P4OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

212 
NRK_PORTE
:

213 dÿ{ 
P5OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

214 
NRK_PORTF
:

215 dÿ{ 
P6OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

219 
	}
}

221 
öt8_t
 
	$ƒk_gpio_gë
(
uöt8_t
 
pö
)

223 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

224 
pö
 & 0x07) {

225 
NRK_PORTA
:

226  (
P1IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

227 
NRK_PORTB
:

228  (
P2IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

229 
NRK_PORTC
:

230  (
P3IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

231 
NRK_PORTD
:

232  (
P4IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

233 
NRK_PORTE
:

234  (
P5IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

235 
NRK_PORTF
:

236  (
P6IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

240 
	}
}

242 
öt8_t
 
	$ƒk_gpio_toggÀ
(
uöt8_t
 
pö
)

244 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

245 
pö
 & 0x07) {

246 
NRK_PORTA
:

247 i‡((
P1IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

248 dÿ{ 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

250 dÿ{ 
P1OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

253 
NRK_PORTB
:

254 i‡((
P2IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

255 dÿ{ 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

257 dÿ{ 
P2OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

260 
NRK_PORTC
:

261 i‡((
P3IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

262 dÿ{ 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

264 dÿ{ 
P3OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

267 
NRK_PORTD
:

268 i‡((
P4IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

269 dÿ{ 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

271 dÿ{ 
P4OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

274 
NRK_PORTE
:

275 i‡((
P5IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

276 dÿ{ 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

278 dÿ{ 
P5OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

281 
NRK_PORTF
:

282 i‡((
P6IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

283 dÿ{ 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

285 dÿ{ 
P6OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

291 
	}
}

293 
öt8_t
 
	$ƒk_gpio_dúe˘i⁄
(
uöt8_t
 
pö
, uöt8_à
pö_dúe˘i⁄
)

295 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

296 i‡(
pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) {

297 
pö
 & 0x07) {

298 
NRK_PORTA
:

299 
P1DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

300 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

302 
NRK_PORTB
:

303 
P2DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

304 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

306 
NRK_PORTC
:

307 
P3DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

308 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

310 
NRK_PORTD
:

311 
P4DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

312 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

314 
NRK_PORTE
:

315 
P5DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

316 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

318 
NRK_PORTF
:

319 
P6DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

320 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

325 
pö
 & 0x07) {

326 
NRK_PORTA
:

327 
P1DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

328 
NRK_PORTB
:

329 
P2DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

330 
NRK_PORTC
:

331 
P3DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

332 
NRK_PORTD
:

333 
P4DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

334 
NRK_PORTE
:

335 
P5DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

336 
NRK_PORTF
:

337 
P6DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

342 
	}
}

344 
öt8_t
 
	$ƒk_gpio_puŒups
(
uöt8_t
 
íabÀ
)

346  
NRK_ERROR
;

347 
	}
}

349 
öt8_t
 
	$ƒk_gë_buâ⁄
(
uöt8_t
 
b
)

351 if(
b
==0) {

352 –!(
P2IN
 & 
	`BM
(
BUTTON
)));

355 
	}
}

366 
öt8_t
 
	$ƒk_Àd_toggÀ
–
Àd
 )

368 if(
Àd
==0Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_0
);  1; }

369 if(
Àd
==1Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_1
);  1; }

370 if(
Àd
==2Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_2
);  1; }

373 
	}
}

375 
öt8_t
 
	$ƒk_Àd_˛r
–
Àd
 )

377 if(
Àd
==0Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_0
);  1; }

378 if(
Àd
==1Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_1
);  1; }

379 if(
Àd
==2Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_2
);  1; }

382 
	}
}

384 
öt8_t
 
	$ƒk_Àd_£t
–
Àd
 )

386 if(
Àd
==0Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_0
);  1; }

387 if(
Àd
==1Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_1
);  1; }

388 if(
Àd
==2Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_2
);  1; }

391 
	}
}

394 
	$IO_SET_E
(
uöt8_t
 
pö
)

396 
P5OUT
 |
	`BM
(
pö
);

397 
	}
}

399 
	$IO_CLR_E
(
uöt8_t
 
pö
)

401 
P5OUT
 &~
	`BM
(
pö
);

402 
	}
}

404 
	$IO_SET_F
(
uöt8_t
 
pö
)

406 
P6OUT
 |
	`BM
(
pö
);

407 
	}
}

409 
	$IO_CLR_F
(
uöt8_t
 
pö
)

411 
P6OUT
 &~
	`BM
(
pö
);

412 
	}
}

414 
	$putc0
(
x
)

416 
	`UART0_WAIT_AND_SEND
(
x
);

417 
	}
}

420 
	$putch¨
(
x
)

422 
	`UART1_WAIT_AND_SEND
(
x
);

424 
	}
}

427 
	$£tup_u¨t0
(
uöt16_t
 
baudøã
)

432 
	}
}

435 
	$£tup_u¨t1
(
uöt16_t
 
baudøã
)

440 
	}
}

452 
	$ƒk_£tup_u¨t
(
uöt16_t
 
baudøã
)

455 
	`£tup_u¨t1
(
baudøã
);

460 #ifde‡
NRK_UART_BUF


461 
u¨t_rx_sig«l
=
	`ƒk_sig«l_¸óã
();

462 if(
u¨t_rx_sig«l
==0Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

463 
u¨t_rx_buf_°¨t
=0;

464 
u¨t_rx_buf_íd
=0;

465 
	`ENABLE_UART1_RX_INT
();

468 
	}
}

473 
	$gëc0
(){

474 
tmp
;

475 
	`UART0_WAIT_AND_RECEIVE
(
tmp
);

476  
tmp
;

477 
	}
}

479 
	$PORT_INIT
()

487 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/include/ulib.h

28 #i‚de‡
ULIB_H


29 
	#ULIB_H


	)

31 
	~<ƒk_pö_deföe.h
>

32 
	~<ƒk_evíts.h
>

34 
gëc0
();

35 
gëc1
();

37 
putc1
();

39 
uöt8_t
 
ƒk_u¨t_d©a_ªady
(uöt8_à
u¨t_num
);

42 
öt8_t
 
ƒk_u¨t_rx_sig«l_gë
();

44 
ƒk_k¥ötf
(c⁄° *
addr
);

45 
ƒk_£tup_p‹ts
();

46 
ƒk_öô_h¨dw¨e
();

47 
ƒk_£tup_u¨t
(
uöt16_t
 
baudøã
);

52 
öt8_t
 
ƒk_Àd_£t
(
Àd
);

53 
öt8_t
 
ƒk_Àd_˛r
(
Àd
);

54 
öt8_t
 
ƒk_Àd_toggÀ
(
Àd
);

58 
öt8_t
 
ƒk_gë_buâ⁄
(
uöt8_t
 
b
);

65 
öt8_t
 
ƒk_gpio_£t
–
uöt8_t
 
pö
 );

66 
öt8_t
 
ƒk_gpio_˛r
–
uöt8_t
 
pö
 );

67 
öt8_t
 
ƒk_gpio_gë
–
uöt8_t
 
pö
 );

68 
öt8_t
 
ƒk_gpio_toggÀ
–
uöt8_t
 
pö
 );

69 
öt8_t
 
ƒk_gpio_dúe˘i⁄
(
uöt8_t
 
pö
, uöt8_à
pö_dúe˘i⁄
);

70 
öt8_t
 
ƒk_gpio_puŒups
–
uöt8_t
 
íabÀ
 );

	@/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/hal.h

28 #i‚de‡
HAL_H


29 
	#HAL_H


	)

32 
uöt8_t
 
	tNRK_STK
;

46 
	#SPI_INIT
() \

48 
SPCR
 = 
	`BM
(
SPE
Ë| BM(
MSTR
); \

49 
SPSR
 = 
	`BM
(
SPI2X
); \

50 } 0)

	)

62 
	#FASTSPI_WAIT
() \

64 !(
SPSR
 & 
	`BM
(
SPIF
))); \

65 } 0)

	)

67 
	#FASTSPI_TX
(
x
) \

69 
SPDR
 = 
x
; \

70 
	`FASTSPI_WAIT
(); \

71 } 0)

	)

73 
	#FASTSPI_RX
(
x
) \

75 
SPDR
 = 0; \

76 
	`FASTSPI_WAIT
(); \

77 
x
 = 
SPDR
; \

78 } 0)

	)

80 
	#FASTSPI_RX_GARBAGE
() \

82 
SPDR
 = 0; \

83 
	`FASTSPI_WAIT
(); \

84 } 0)

	)

86 
	#FASTSPI_TX_WORD_LE
(
x
) \

88 
	`FASTSPI_TX
(
x
); \

89 
	`FASTSPI_TX
((
x
) >> 8); \

90 } 0)

	)

92 
	#FASTSPI_TX_WORD
(
x
) \

94 
	`FASTSPI_TX
(((
uöt16_t
)(
x
)) >> 8); \

95 
	`FASTSPI_TX
((
uöt8_t
)(
x
)); \

96 } 0)

	)

98 
	#FASTSPI_TX_MANY
(
p
,
c
) \

100 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

101 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

103 } 0)

	)

105 
	#FASTSPI_RX_WORD_LE
(
x
) \

107 
SPDR
 = 0; \

108 
	`FASTSPI_WAIT
(); \

109 
x
 = 
SPDR
; \

110 
SPDR
 = 0; \

111 
	`FASTSPI_WAIT
(); \

112 
x
 |
SPDR
 << 8; \

113 } 0)

	)

115 
	#FASTSPI_RX_WORD
(
x
) \

117 
SPDR
 = 0; \

118 
	`FASTSPI_WAIT
(); \

119 
x
 = 
SPDR
 << 8; \

120 
SPDR
 = 0; \

121 
	`FASTSPI_WAIT
(); \

122 
x
 |
SPDR
; \

123 } 0)

	)

125 
	#FASTSPI_RX_MANY
(
p
,
c
) \

127 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

128 
	`FASTSPI_RX
((
p
)[
•iC¡
]); \

130 } 0)

	)

133 
	#FASTSPI_TX_ADDR
(
a
) \

135 
SPDR
 = 
a
; \

136 
	`FASTSPI_WAIT
(); \

137 } 0)

	)

140 
	#FASTSPI_RX_ADDR
(
a
) \

142 
SPDR
 = (
a
) | 0x40; \

143 
	`FASTSPI_WAIT
(); \

144 } 0)

	)

154 
	#FASTSPI_STROBE
(
s
) \

156 
	`SPI_ENABLE
(); \

157 
	`FASTSPI_TX_ADDR
(
s
); \

158 
	`SPI_DISABLE
(); \

159 } 0)

	)

161 
	#FASTSPI_SETREG
(
a
,
v
) \

163 
	`SPI_ENABLE
(); \

164 
	`FASTSPI_TX_ADDR
(
a
); \

165 
	`FASTSPI_TX
((
uöt8_t
Ë((
v
) >> 8)); \

166 
	`FASTSPI_TX
((
uöt8_t
Ë(
v
)); \

167 
	`SPI_DISABLE
(); \

168 } 0)

	)

170 
	#FASTSPI_GETREG
(
a
,
v
) \

172 
	`SPI_ENABLE
(); \

173 
	`FASTSPI_RX_ADDR
(
a
); \

174 
	`FASTSPI_RX_WORD
(
v
); \

175 
	`SPI_DISABLE
(); \

176 } 0)

	)

179 
	#FASTSPI_UPD_STATUS
(
s
) \

181 
	`SPI_ENABLE
(); \

182 
	`FASTSPI_TX_ADDR
(
CC2420_SNOP
); \

183 
s
 = 
SPDR
; \

184 
	`SPI_DISABLE
(); \

185 } 0)

	)

195 
	#FASTSPI_WRITE_FIFO
(
p
,
c
) \

197 
	`SPI_ENABLE
(); \

198 
	`FASTSPI_TX_ADDR
(
CC2420_TXFIFO
); \

199 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

200 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

202 
	`SPI_DISABLE
(); \

203 } 0)

	)

205 
	#FASTSPI_READ_FIFO
(
p
,
c
) \

207 
	`SPI_ENABLE
(); \

208 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

209 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

210 !
FIFO_IS_1
); \

211 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

213 
	`SPI_DISABLE
(); \

214 } 0)

	)

216 
	#FASTSPI_READ_FIFO_BYTE
(
b
) \

218 
	`SPI_ENABLE
(); \

219 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

220 
	`FASTSPI_RX
(
b
); \

221 
	`SPI_DISABLE
(); \

222 } 0)

	)

224 
	#FASTSPI_READ_FIFO_NO_WAIT
(
p
,
c
) \

226 
	`SPI_ENABLE
(); \

227 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

228 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

229 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

231 
	`SPI_DISABLE
(); \

232 } 0)

	)

234 
	#FASTSPI_READ_FIFO_GARBAGE
(
c
) \

236 
	`SPI_ENABLE
(); \

237 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

238 
uöt8_t
 
•iC¡
 = 0; ((•iC¡ < (
c
)Ë&& (
FIFO_IS_1
)); spiCnt++) { \

239 
	`FASTSPI_RX_GARBAGE
(); \

241 
	`SPI_DISABLE
(); \

242 } 0)

	)

258 
	#FASTSPI_WRITE_RAM_LE
(
p
,
a
,
c
,
n
) \

260 
	`SPI_ENABLE
(); \

261 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

262 
	`FASTSPI_TX
((
a
 >> 1) & 0xC0); \

263 
n
 = 0;Ç < (
c
);Ç++) { \

264 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
n
]); \

266 
	`SPI_DISABLE
(); \

267 } 0)

	)

269 
	#FASTSPI_READ_RAM_LE
(
p
,
a
,
c
,
n
) \

271 
	`SPI_ENABLE
(); \

272 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

273 
	`FASTSPI_TX
(((
a
 >> 1) & 0xC0) | 0x20); \

274 
n
 = 0;Ç < (
c
);Ç++) { \

275 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
n
]); \

277 
	`SPI_DISABLE
(); \

278 } 0)

	)

280 
	#FASTSPI_WRITE_RAM
(
p
,
a
,
c
,
n
) \

282 
	`SPI_ENABLE
(); \

283 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

284 
	`FASTSPI_TX
((
a
 >> 1) & 0xC0); \

285 
n
 = 
c
; \

287 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[--
n
]); \

288 } 
n
); \

289 
	`SPI_DISABLE
(); \

290 } 0)

	)

292 
	#FASTSPI_READ_RAM
(
p
,
a
,
c
,
n
) \

294 
	`SPI_ENABLE
(); \

295 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

296 
	`FASTSPI_TX
(((
a
 >> 1) & 0xC0) | 0x20); \

297 
n
 = 
c
; \

299 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[--
n
]); \

300 } 
n
); \

301 
	`SPI_DISABLE
(); \

302 } 0)

	)

308 
	#FASTSPI_RESET_CC2420
() \

310 
	`FASTSPI_SETREG
(
CC2420_MAIN
, 0x0000); \

311 
	`FASTSPI_SETREG
(
CC2420_MAIN
, 0xF800); \

312 } 0)

	)

327 
	#ENABLE_GLOBAL_INT
(Ëdÿ{ 
	`asm
 ("£i\n\t" ::); } 0)

	)

328 
	#DISABLE_GLOBAL_INT
(Ëdÿ{ 
	`asm
 ("˛i\n\t" ::); } 0)

	)

334 
	#ENABLE_UART1_INT
(Ëdÿ{ 
UCSR1B
 |(
	`BM
(
UDRIE1
Ë| BM(
RXCIE1
)); } 0)

	)

335 
	#DISABLE_UART1_INT
(Ëdÿ{ 
UCSR1B
 &~(
	`BM
(
UDRIE1
Ë| BM(
RXCIE1
)); } 0)

	)

337 
	#ENABLE_UART1_TX_INT
(Ëdÿ{ 
UCSR1B
 |
	`BM
(
UDRIE1
); } 0)

	)

338 
	#DISABLE_UART1_TX_INT
(Ëdÿ{ 
UCSR1B
 &~
	`BM
(
UDRIE1
); } 0)

	)

339 
	#CLEAR_UART1_TX_INT
(Ëdÿ{ 
UCSR1A
 &~
	`BM
(
UDRE1
); } 0)

	)

340 
	#SET_UART1_TX_INT
(Ëdÿ{ 
UCSR1A
 |
	`BM
(
UDRE1
); } 0)

	)

342 
	#ENABLE_UART1_RX_INT
(Ëdÿ{ 
UCSR1B
 |
	`BM
(
RXCIE1
); } 0)

	)

343 
	#DISABLE_UART1_RX_INT
(Ëdÿ{ 
UCSR1B
 &~
	`BM
(
RXCIE1
); } 0)

	)

344 
	#CLEAR_UART1_RX_INT
(Ëdÿ{ 
UCSR1A
 &~
	`BM
(
RXC1
); } 0)

	)

352 
	#ENABLE_UART0_TX_INT
(Ëdÿ{ 
UCSR0B
 |
	`BM
(
UDRIE0
); } 0)

	)

353 
	#DISABLE_UART0_TX_INT
(Ëdÿ{ 
UCSR0B
 &~
	`BM
(
UDRIE0
); } 0)

	)

354 
	#CLEAR_UART0_TX_INT
(Ëdÿ{ 
UCSR0A
 &~
	`BM
(
UDRE0
); } 0)

	)

355 
	#SET_UART0_TX_INT
(Ëdÿ{ 
UCSR0A
 |
	`BM
(
UDRE0
); } 0)

	)

357 
	#ENABLE_UART0_RX_INT
(Ëdÿ{ 
UCSR0B
 |
	`BM
(
RXCIE0
); } 0)

	)

358 
	#DISABLE_UART0_RX_INT
(Ëdÿ{ 
UCSR0B
 &~
	`BM
(
RXCIE0
); } 0)

	)

359 
	#CLEAR_UART0_RX_INT
(Ëdÿ{ 
UCSR0A
 &~
	`BM
(
RXC0
); } 0)

	)

389 
	#PWM0_INIT
(
≥riod
) \

391 
OCR0
 = 0; \

392 
TCCR0
 = 
	`BM
(
WGM00
Ë| BM(
COM01
Ë| BM(
COM00
); \

393 
	`PWM0_SET_PERIOD
(
≥riod
); \

394 } 0)

	)

397 
	#PWM0_SET_PERIOD
(
≥riod
Ëdÿ{ 
TCCR0
 = ((TCCR0 & ~0x07Ë| (≥riod)); } 0)

	)

400 
	#TIMER_CLK_STOP
 0x00

	)

401 
	#TIMER_CLK_DIV1
 0x01

	)

402 
	#TIMER_CLK_DIV8
 0x02

	)

403 
	#TIMER_CLK_DIV64
 0x03

	)

404 
	#TIMER_CLK_DIV256
 0x04

	)

405 
	#TIMER_CLK_DIV1024
 0x05

	)

406 
	#TIMER_CLK_T_FALL
 0x06

	)

407 
	#TIMER_CLK_T_RISE
 0x07

	)

410 
	#PWM0_SET_DUTY_CYCLE
(
dutyCy˛e
Ëdÿ{ 
OCR0
 = (dutyCy˛e); } 0)

	)

418 
	#ENABLE_T0_COMPARE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
OCIE0
); } 0)

	)

419 
	#DISABLE_T0_COMPARE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
OCIE0
); } 0)

	)

420 
	#CLEAR_T0_COMPARE_INT
(Ëdÿ{ 
TIFR
 &~
	`BM
(
TOV0
); } 0)

	)

422 
	#ENABLE_T0_OVERFLOW_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TOIE1
); } 0)

	)

423 
	#DISABLE_T0_OVERFLOW_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TOIE1
); } 0)

	)

424 
	#CLEAR_T0_OVERFLOW_INT
(Ëdÿ{ 
TIFR
 &~
	`BM
(
OCF0
)); } 0)

	)

452 
	#INIT_UART1
(
baudR©e
,
›ti⁄s
) \

454 
UBRR1H
 = (
baudR©e
) >> 8; \

455 
UBRR1L
 = (
baudR©e
); \

456 
UCSR1C
 = (
uöt8_t
Ë
›ti⁄s
; \

457 i‡(
›ti⁄s
 > 0xFF) { \

458 
UCSR1B
 |= 0x04; \

460 
UCSR1B
 &= ~0x04; \

462 
UCSR1A
 |
	`BM
(
U2X1
); \

463 } 0)

	)

465 
	#INIT_UART0
(
baudR©e
,
›ti⁄s
) \

467 
UBRR0H
 = (
baudR©e
) >> 8; \

468 
UBRR0L
 = (
baudR©e
); \

469 
UCSR0C
 = (
uöt8_t
Ë
›ti⁄s
; \

470 i‡(
›ti⁄s
 > 0xFF) { \

471 
UCSR0B
 |= 0x04; \

473 
UCSR0B
 &= ~0x04; \

475 
UCSR0A
 |
	`BM
(
U2X0
); \

476 } 0)

	)

480 
	#UART_BAUDRATE_2K4
 383

	)

481 
	#UART_BAUDRATE_4K8
 191

	)

482 
	#UART_BAUDRATE_9K6
 95

	)

483 
	#UART_BAUDRATE_14K4
 63

	)

484 
	#UART_BAUDRATE_19K2
 47

	)

485 
	#UART_BAUDRATE_28K8
 31

	)

486 
	#UART_BAUDRATE_38K4
 23

	)

487 
	#UART_BAUDRATE_57K6
 15

	)

488 
	#UART_BAUDRATE_115K2
 7

	)

489 
	#UART_BAUDRATE_230K4
 3

	)

490 
	#UART_BAUDRATE_250K
 3

	)

495 
	#UART_OPT_ONE_STOP_BIT
 0

	)

496 
	#UART_OPT_TWO_STOP_BITS
 0x08

	)

497 
	#UART_OPT_NO_PARITY
 0

	)

498 
	#UART_OPT_EVEN_PARITY
 0x20

	)

499 
	#UART_OPT_ODD_PARITY
 0x30

	)

500 
	#UART_OPT_5_BITS_PER_CHAR
 0

	)

501 
	#UART_OPT_6_BITS_PER_CHAR
 0x02

	)

502 
	#UART_OPT_7_BITS_PER_CHAR
 0x04

	)

503 
	#UART_OPT_8_BITS_PER_CHAR
 0x06

	)

504 
	#UART_OPT_9_BITS_PER_CHAR
 0x0406

	)

512 
	#ENABLE_UART0
(Ë(
UCSR0B
 |(
	`BM
(
RXEN0
Ë| BM(
TXEN0
)))

	)

513 
	#DISABLE_UART0
(Ë(
UCSR0B
 &~(
	`BM
(
RXEN0
Ë| BM(
TXEN0
)))

	)

514 
	#ENABLE_UART1
(Ë(
UCSR1B
 |(
	`BM
(
RXEN1
Ë| BM(
TXEN1
)))

	)

515 
	#DISABLE_UART1
(Ë(
UCSR1B
 &~(
	`BM
(
RXEN1
Ë| BM(
TXEN1
)))

	)

528 
	#UART1_WAIT
(Ëdÿ{ !(
UCSR1A
 & 
	`BM
(
UDRE1
))); 
	`CLEAR_UART1_TX_INT
(); } 0)

	)

530 
	#UART1_WAIT_RX
(Ëdÿ{ !(
UCSR1A
 & 
	`BM
(
RXC1
))); 
	`CLEAR_UART1_RX_INT
(); } 0)

	)

532 
	#UART1_SEND
(
x
Ëdÿ{ 
UDR1
 = (x); } 0)

	)

534 
	#UART1_WAIT_AND_SEND
(
x
Ëdÿ{ 
	`UART1_WAIT
(); 
	`UART1_SEND
(x); } 0)

	)

536 
	#UART1_RECEIVE
(
x
Ëdÿ{ (xË
UDR1
; } 0)

	)

538 
	#UART1_WAIT_AND_RECEIVE
(
x
Ëdÿ{ 
	`UART1_WAIT_RX
(); 
	`UART1_RECEIVE
(x); } 0)

	)

541 
	#UART0_WAIT
(Ëdÿ{ !(
UCSR0A
 & 
	`BM
(
UDRE0
))); 
	`CLEAR_UART0_TX_INT
(); } 0)

	)

543 
	#UART0_WAIT_RX
(Ëdÿ{ !(
UCSR0A
 & 
	`BM
(
RXC0
))); 
	`CLEAR_UART0_RX_INT
(); } 0)

	)

545 
	#UART0_SEND
(
x
Ëdÿ{ 
UDR0
 = (x); } 0)

	)

547 
	#UART0_WAIT_AND_SEND
(
x
Ëdÿ{ 
	`UART0_WAIT
(); 
	`UART0_SEND
(x); } 0)

	)

549 
	#UART0_RECEIVE
(
x
Ëdÿ{ (xË
UDR0
; } 0)

	)

551 
	#UART0_WAIT_AND_RECEIVE
(
x
Ëdÿ{ 
	`UART0_WAIT_RX
(); 
	`UART0_RECEIVE
(x); } 0)

	)

561 
	#TIMER0_OFF
 0

	)

562 
	#TIMER0_PRESCALE_1
 1

	)

563 
	#TIMER0_PRESCALE_8
 2

	)

564 
	#TIMER0_PRESCALE_32
 3

	)

565 
	#TIMER0_PRESCALE_64
 4

	)

566 
	#TIMER0_PRESCALE_128
 5

	)

567 
	#TIMER0_PRESCALE_256
 6

	)

568 
	#TIMER0_PRESCALE_1024
 7

	)

570 
	#TIMER0_WGM_0
 0x00

	)

571 
	#TIMER0_WGM_1
 0x40

	)

572 
	#TIMER0_WGM_2
 0x08

	)

573 
	#TIMER0_WGM_3
 0x48

	)

575 
	#TIMER0_COM_0
 0x00

	)

576 
	#TIMER0_COM_1
 0x08

	)

577 
	#TIMER0_COM_2
 0x10

	)

578 
	#TIMER0_COM_3
 0x18

	)

579 
	#TIMER0_COM_4
 0x20

	)

580 
	#TIMER0_COM_5
 0x28

	)

581 
	#TIMER0_COM_6
 0x30

	)

582 
	#TIMER0_COM_7
 0x38

	)

584 
	#TIMER0_SET_CONTROL
(
x
Ëdÿ{
TCCR0
 = (x); } 0)

	)

586 
	#TIMER0_SET_VALUE
(
x
Ëdÿ{
TCNT0
 = (x); } 0)

	)

587 
	#TIMER0_READ_VALUE
(
x
Ëdÿ{(xË
TCNT0
; } 0)

	)

589 
	#TIMER0_SET_COMPARE_VALUE
(
x
Ëdÿ{
OCR0
 = (x); } 0)

	)

590 
	#TIMER0_READ_COMPARE_VALUE
(
x
Ëdÿ{(xË
OCR0
; } 0)

	)

601 
	#NOP
(Ë
asm
 vﬁ©ûê("n›\n\t" ::)

	)

614 
hÆWaô
(
uöt16_t
 
timeout
);

	@/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/hal_micaZ.h

28 #i‚de‡
HAL_MICAZ_H


29 
	#HAL_MICAZ_H


	)

31 
	#MICAZ_PLATFORM


	)

33 
	#NRK_DEFAULT_UART
 0

	)

35 
	#RED_LED
 2

	)

36 
	#GREEN_LED
 1

	)

37 
	#ORANGE_LED
 0

	)

38 
	#YELLOW_LED
 0

	)

41 
	#BLUE_LED
 255

	)

48 
	#PORT_INIT
() \

50 
SFIOR
 |
	`BM
(
PUD
); \

51 
DDRB
 = 
	`BM
(
MOSI
Ë| BM(
SCK
Ë| BM(
CSN
); \

52 
PORTB
 = 
	`BM
(
MOSI
Ë| BM(
SCK
Ë| BM(
CSN
); \

53 
DDRE
 = 
	`BM
(
UART0_TXD
); \

54 
DDRA
 = 
	`BM
(
LED_0
Ë| BM(
LED_1
Ë| BM(
LED_2
Ë| BM(
VREG_EN
Ë| BM(
RESET_N
); \

55 
PORTA
 = 
	`BM
(
RESET_N
); \

56 } 0)

	)

63 
	#SPI_ENABLE
(Ë(
PORTB
 &~
	`BM
(
CSN
))

	)

64 
	#SPI_DISABLE
(Ë(
PORTB
 |
	`BM
(
CSN
))

	)

81 
	#FIFO_IS_1
 (!!(
PINB
 & 
	`BM
(
FIFO
)))

	)

82 
	#CCA_IS_1
 (!!(
PIND
 & 
	`BM
(
CCA
)))

	)

83 
	#RESET_IS_1
 (!!(
PINA
 & 
	`BM
(
RESET_N
)))

	)

84 
	#VREG_IS_1
 (!!(
PINA
 & 
	`BM
(
VREG_EN
)))

	)

85 
	#FIFOP_IS_1
 (!!(
PINE
 & 
	`BM
(
FIFOP
)))

	)

86 
	#SFD_IS_1
 (!!(
PIND
 & 
	`BM
(
SFD
)))

	)

89 
	#SET_RESET_ACTIVE
(Ë
PORTA
 &~
	`BM
(
RESET_N
)

	)

90 
	#SET_RESET_INACTIVE
(Ë
PORTA
 |
	`BM
(
RESET_N
)

	)

93 
	#SET_VREG_ACTIVE
(Ë
PORTA
 |
	`BM
(
VREG_EN
)

	)

94 
	#SET_VREG_INACTIVE
(Ë
PORTA
 &~
	`BM
(
VREG_EN
)

	)

109 
	#FIFOP_INT_INIT
(Ëdÿ{ 
EICRA
 |0x03; 
	`CLEAR_FIFOP_INT
(); } 0)

	)

112 
	#ENABLE_FIFOP_INT
(Ëdÿ{ 
EIMSK
 |0x01; } 0)

	)

113 
	#DISABLE_FIFOP_INT
(Ëdÿ{ 
EIMSK
 &~0x01; } 0)

	)

114 
	#CLEAR_FIFOP_INT
(Ëdÿ{ 
EIFR
 = 0x01; } 0)

	)

120 
	#ENABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TICIE1
); } 0)

	)

121 
	#DISABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TICIE1
); } 0)

	)

122 
	#CLEAR_SFD_CAPTURE_INT
(Ëdÿ{ 
TIFR
 = 
	`BM
(
ICF1
); } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/include.h

27 #i‚de‡
INCLUDE_H


28 
	#INCLUDE_H


	)

51 #i‚de‡
FALSE


52 
	#FALSE
 0

	)

54 #i‚de‡
TRUE


55 
	#TRUE
 1

	)

57 #i‚de‡
NULL


58 
	#NULL
 0

	)

62 
	#BM
(
n
Ë(1 << (n))

	)

63 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

64 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

65 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

66 
	#ABS
(
n
Ë(“ < 0Ë? -“Ë: (n))

	)

69 (*
	tVFPTR
)();

75 
	~<avr/io.h
>

76 
	~<avr/pgm•a˚.h
>

77 
	~<avr/sig«l.h
>

78 
	~<°rög.h
>

82 
	~<hÆ.h
>

83 
	~<hÆ_miˇZ.h
>

84 
	~<hÆ_cc2420.h
>

86 
	~<basic_rf.h
>

	@/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/nrk_eeprom.h

1 #i‚de‡
_NRK_EEPROM_H_


2 
	#_NRK_EEPROM_H_


	)

3 
	~<°döt.h
>

5 
öt8_t
 
ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
);

	@/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/nrk_pin_define.h

28 #i‚de‡
NRK_PIN_DEFINE_H


29 
	#NRK_PIN_DEFINE_H


	)

39 
	#LED_0
 0

40 
	#LED_1
 1

41 
	#LED_2
 2

42 
	#VREG_EN
 5

43 
	#RESET_N
 6

44 

	)

47 
	#CSN
 0

48 
	#SCK
 1

49 
	#MOSI
 2

50 
	#MISO
 3

51 
	#FIFO
 7

53 

	)

56 
	#DEBUG_0
 1

	)

57 
	#DEBUG_1
 2

	)

58 
	#DEBUG_2
 0

59 
	#DEBUG_3
 0

60 

	)

62 
	#CLR_LED_0
(Ë(
PORTA
 |
	`BM
(
YLED
))

	)

63 
	#CLR_LED_1
(Ë(
PORTA
 |
	`BM
(
GLED
))

	)

64 
	#CLR_LED_2
(Ë(
PORTA
 |
	`BM
(
RLED
))

	)

67 
	#SET_LED_0
(Ë(
PORTA
 &~
	`BM
(
YLED
))

	)

68 
	#SET_LED_1
(Ë(
PORTA
 &~
	`BM
(
GLED
))

	)

69 
	#SET_LED_2
(Ë(
PORTA
 &~
	`BM
(
RLED
))

	)

72 
	#UART1_RXD
 2

73 
	#UART1_TXD
 3

74 
	#SFD
 4

75 
	#UART1_RTS
 5

76 
	#CCA
 6

77 
	#UART1_CTS
 7

78 

	)

84 
	#UART0_RXD
 0

85 
	#UART0_TXD
 1

86 
	#BUTTON
 5

87 
	#FIFOP
 6

89 

	)

94 
	#ADC_INPUT_0
 0

	)

95 
	#ADC_INPUT_1
 1

96 
	#ADC_INPUT_2
 2

97 
	#ADC_INPUT_3
 3

98 
	#ADC_INPUT_4
 4

99 
	#ADC_INPUT_5
 5

100 
	#ADC_INPUT_6
 6

101 
	#ADC_INPUT_7
 7

102 

	)

136 
	#ƒk_gpio_øw_£t
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à|
	`BM
(_pö); } 0);}

	)

138 
	#ƒk_gpio_øw_˛r
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à&~
	`BM
(_pö); } 0);}

	)

140 
	#ƒk_gpio_øw_gë
–
_pö_p‹t
, 
_pö
 ) (_pö_p‹à& 
	`BM
(_pö))

	)

142 
	#ƒk_gpio_øw_toggÀ
–
_pö_p‹t
, 
_p‹t
, 
_pö
 ) { \

	)

143 i‡((
	g_pö_p‹t
 & 
BM
(
_pö
))Ëdo{ 
	g_p‹t
 &= ~BM(_pin); } 0); \

144 dÿ{ 
	g_p‹t
 |
BM
(
_pö
); }0); \

147 
	#ƒk_gpio_øw_dúe˘i⁄
–
_dúe˘i⁄_p‹t_«me
, 
_pö
, 
_pö_dúe˘i⁄
 ) { \

	)

148 i‡(
	g_pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) { \

149 
_dúe˘i⁄_p‹t_«me
 &~
BM
–
_pö
 ); \

151 
	g_dúe˘i⁄_p‹t_«me
 |
BM
–
_pö
 ); \

161 
	#NRK_INVALID_PIN_VAL
 0xFF

	)

165 
	#NRK_PORTA
 0

	)

166 
	#NRK_PORTB
 1

	)

167 
	#NRK_PORTC
 2

	)

168 
	#NRK_PORTD
 3

	)

169 
	#NRK_PORTE
 4

	)

170 
	#NRK_PORTF
 5

	)

173 
	#NRK_PIN_INPUT
 0

	)

174 
	#NRK_PIN_OUTPUT
 1

	)

184 
	#DECLARE_NRK_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«me;

	)

185 
	#NRK_PIN
–
_pö_«me
, 
_pö
 , 
_p‹t
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê(_pö << 3Ë+ (_p‹à& 0x07);

	)

186 
	#NRK_INVALID_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê
NRK_INVALID_PIN_VAL
;

	)

190 
	$DECLARE_NRK_PIN
–
VREG_EN
 )

191 
	$DECLARE_NRK_PIN
–
RESET_N
 )

192 
	$DECLARE_NRK_PIN
–
DEBUG_0
 )

193 
	$DECLARE_NRK_PIN
–
DEBUG_1
 )

194 
	$DECLARE_NRK_PIN
–
DEBUG_2
 )

195 
	$DECLARE_NRK_PIN
–
DEBUG_3
 )

196 
	$DECLARE_NRK_PIN
–
BUTTON
 )

198 
	$DECLARE_NRK_PIN
–
SPI_SS
 )

199 
	$DECLARE_NRK_PIN
–
SCK
 )

200 
	$DECLARE_NRK_PIN
–
MOSI
 )

201 
	$DECLARE_NRK_PIN
–
MISO
 )

203 
	$DECLARE_NRK_PIN
–
GPIO28
 )

204 
	$DECLARE_NRK_PIN
–
GPIO26
 )

206 
	$DECLARE_NRK_PIN
–
CSN
 )

207 
	$DECLARE_NRK_PIN
–
FIFO
 )

209 
	$DECLARE_NRK_PIN
–
UART1_RXD
 )

210 
	$DECLARE_NRK_PIN
–
UART1_TXD
 )

211 
	$DECLARE_NRK_PIN
–
SFD
 )

212 
	$DECLARE_NRK_PIN
–
UART1_RTS
 )

213 
	$DECLARE_NRK_PIN
–
CCA
 )

214 
	$DECLARE_NRK_PIN
–
UART1_CTS
 )

216 
	$DECLARE_NRK_PIN
–
UART0_RXD
 )

217 
	$DECLARE_NRK_PIN
–
UART0_TXD
 )

218 
	$DECLARE_NRK_PIN
–
FIFOP
 )

219 
	$DECLARE_NRK_PIN
–
LED_0
 )

220 
	$DECLARE_NRK_PIN
–
LED_1
 )

221 
	$DECLARE_NRK_PIN
–
LED_2
 )

222 
	$DECLARE_NRK_PIN
–
LED_3
 )

224 
	$DECLARE_NRK_PIN
–
GPIO34
 )

226 
	$DECLARE_NRK_PIN
–
ADC_INPUT_0
)

227 
	$DECLARE_NRK_PIN
–
ADC_INPUT_1
 )

228 
	$DECLARE_NRK_PIN
–
ADC_INPUT_2
 )

229 
	$DECLARE_NRK_PIN
–
ADC_INPUT_3
)

231 
	$DECLARE_NRK_PIN
–
ADC_INPUT_6
 )

232 
	$DECLARE_NRK_PIN
–
ADC_INPUT_7
 )

	@/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/nrk_platform_time.h

26 #i‚de‡
NRK_PLATFORM_TIME_H


27 
	#NRK_PLATFORM_TIME_H


	)

33 
	#NANOS_PER_TICK
 976563

	)

34 
	#US_PER_TICK
 977

	)

35 
	#TICKS_PER_SEC
 1024

	)

38 #i‚de‡
NRK_SLEEP_WAKEUP_TIME


39 
	#NRK_SLEEP_WAKEUP_TIME
 20

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/source/hal_wait.c

26 
	~<ö˛ude.h
>

39 
	$hÆWaô
(
uöt16_t
 
timeout
) {

43 
	`NOP
();

44 
	`NOP
();

45 
	`NOP
();

46 
	`NOP
();

47 } --
timeout
);

49 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/source/nrk_eeprom.c

1 
	~<ƒk_ì¥om.h
>

2 
	~<avr/ì¥om.h
>

3 
	~<ƒk_îr‹.h
>

6 
öt8_t
 
	$ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
)

8 
uöt8_t
 
checksum
,
˘
;

9 
uöt8_t
 *
buf
;

10 
buf
=
addªss
;

11 
checksum
=
buf
[0]+buf[1]+buf[2]+buf[3];

12 
buf
[3]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)0);

13 
buf
[2]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)1);

14 
buf
[1]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)2);

15 
buf
[0]=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)3);

16 
checksum
=
	`ì¥om_ªad_byã
 ((
uöt8_t
*)4);

17 
˘
=
buf
[0];

18 
˘
+=
buf
[1];

19 
˘
+=
buf
[2];

20 
˘
+=
buf
[3];

21 if(
checksum
==
˘
Ë 
NRK_OK
;

23  
NRK_ERROR
;

24 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/source/ulib.c

29 
	~<ö˛ude.h
>

30 
	~<ulib.h
>

31 
	~<°dio.h
>

32 
	~<hÆ.h
>

33 
	~<hÆ_miˇZ.h
>

34 
	~<avr/öãºu±.h
>

35 
	~<ƒk_pö_deföe.h
>

36 
	~<ƒk_îr‹.h
>

37 
	~<ƒk_evíts.h
>

39 #ifde‡
NANORK


40 
	~<ƒk_cfg.h
>

43 #ifde‡
NRK_UART_BUF


44 
	~<ƒk_evíts.h
>

46 #i‚de‡
MAX_RX_UART_BUF


47 
	#MAX_RX_UART_BUF
 16

	)

51 
uöt8_t
 
	gu¨t_rx_buf_°¨t
,
	gu¨t_rx_buf_íd
;

52 
	gu¨t_rx_buf
[
MAX_RX_UART_BUF
];

53 
ƒk_sig_t
 
	gu¨t_rx_sig«l
;

55 
	$SIGNAL
(
USART0_RX_ve˘
)

57 
c
;

58 
uöt8_t
 
sig
;

59 
	`DISABLE_UART0_RX_INT
();

60 
	`UART0_WAIT_AND_RECEIVE
(
c
);

61 
u¨t_rx_buf
[
u¨t_rx_buf_íd
]=
c
;

63 
u¨t_rx_buf_íd
++;

64 if(
u¨t_rx_buf_íd
==
MAX_RX_UART_BUF
) uart_rx_buf_end=0;

65 
	`ƒk_evít_sig«l
(
u¨t_rx_sig«l
);

66 
	`CLEAR_UART0_RX_INT
();

67 
	`ENABLE_UART0_RX_INT
();

68 
	}
}

70 
	$gëc0
()

72 
tmp
;

74 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)

76 
tmp
=
u¨t_rx_buf
[
u¨t_rx_buf_°¨t
];

77 
u¨t_rx_buf_°¨t
++;

78 if(
u¨t_rx_buf_°¨t
==
MAX_RX_UART_BUF
) uart_rx_buf_start=0;

79 (
tmp
);

82 
	`UART0_WAIT_AND_RECEIVE
(
tmp
);

83  
tmp
;

84 
	}
}

86 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

88 if(
u¨t_num
==0)

90 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)  1;

92 if(
u¨t_num
==1)

94 if–
UCSR1A
 & 
	`BM
(
RXC1
) )  1;

97 
	}
}

99 
ƒk_sig_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

101 if(
u¨t_rx_sig«l
==
NRK_ERROR
Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

102  
u¨t_rx_sig«l
;

103 
	}
}

107 
ƒk_sig_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

109  
NRK_ERROR
;

110 
	}
}

113 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

115 if(
u¨t_num
==0)

117 if–
UCSR0A
 & 
	`BM
(
RXC0
) )  1;

119 if(
u¨t_num
==1)

121 if–
UCSR1A
 & 
	`BM
(
RXC1
) )  1;

124 
	}
}

126 
	$gëc0
(){

127 
tmp
;

128 
	`UART0_WAIT_AND_RECEIVE
(
tmp
);

129  
tmp
;

130 
	}
}

134 
	$ƒk_k¥ötf
–c⁄° *
addr
)

136 
c
;

137 (
c
=
	`pgm_ªad_byã
(
addr
++)))

138 
	`putch¨
(
c
);

139 
	}
}

142 
	$ƒk_£tup_p‹ts
()

144 
	`PORT_INIT
();

145 
	`SPI_INIT
();

146 
	}
}

160 
	$NRK_PIN
–
LED_0
, LED_0, 
NRK_PORTA
 )

161 
	$NRK_PIN
–
LED_1
, LED_1, 
NRK_PORTA
 )

162 
	$NRK_PIN
–
LED_2
, LED_2, 
NRK_PORTA
 )

163 
	$NRK_PIN
–
VREG_EN
, VREG_EN, 
NRK_PORTA
 )

164 
	$NRK_PIN
–
RESET_N
, RESET_N, 
NRK_PORTA
 )

168 
	$NRK_PIN
–
CSN
, CSN, 
NRK_PORTB
 )

169 
	$NRK_PIN
–
SCK
, SCK, 
NRK_PORTB
 )

170 
	$NRK_PIN
–
MOSI
, MOSI, 
NRK_PORTB
 )

171 
	$NRK_PIN
–
MISO
, MISO, 
NRK_PORTB
 )

172 
	$NRK_PIN
–
FIFO
, FIFO, 
NRK_PORTB
 )

176 
	$NRK_PIN
–
UART1_RXD
, UART1_RXD, 
NRK_PORTD
 )

177 
	$NRK_PIN
–
UART1_TXD
, UART1_TXD, 
NRK_PORTD
 )

178 
	$NRK_PIN
–
SFD
, SFD, 
NRK_PORTD
 )

179 
	$NRK_PIN
–
UART1_RTS
, UART1_RTS, 
NRK_PORTD
 )

180 
	$NRK_PIN
–
CCA
, CCA, 
NRK_PORTD
 )

181 
	$NRK_PIN
–
UART1_CTS
, UART1_CTS, 
NRK_PORTD
 )

184 
	$NRK_PIN
–
UART0_RXD
, UART0_RXD, 
NRK_PORTE
 )

185 
	$NRK_PIN
–
UART0_TXD
, UART0_TXD, 
NRK_PORTE
 )

186 
	$NRK_PIN
–
FIFOP
, FIFOP, 
NRK_PORTE
 )

190 
	$NRK_PIN
–
ADC_INPUT_0
, ADC_INPUT_0, 
NRK_PORTF
 )

191 
	$NRK_PIN
–
ADC_INPUT_1
, ADC_INPUT_1, 
NRK_PORTF
 )

192 
	$NRK_PIN
–
ADC_INPUT_2
, ADC_INPUT_2, 
NRK_PORTF
 )

193 
	$NRK_PIN
–
ADC_INPUT_3
, ADC_INPUT_3, 
NRK_PORTF
 )

195 
	$NRK_PIN
–
ADC_INPUT_6
, 6, 
NRK_PORTF
 )

196 
	$NRK_PIN
–
ADC_INPUT_7
, 7, 
NRK_PORTF
 )

198 
	$NRK_PIN
–
DEBUG_0
, DEBUG_0, 
NRK_PORTC
 )

199 
	$NRK_PIN
–
DEBUG_1
, DEBUG_1, 
NRK_PORTC
 )

201 
	$NRK_INVALID_PIN
–
DEBUG_2
 )

202 
	$NRK_INVALID_PIN
–
DEBUG_3
 )

207 
	$NRK_INVALID_PIN
–
LED_3
 )

208 
	$NRK_INVALID_PIN
–
BLED
 )

209 
	$NRK_INVALID_PIN
–
SPI_SS
 )

210 
	$NRK_INVALID_PIN
–
GPIO26
 )

211 
	$NRK_INVALID_PIN
–
GPIO28
 )

212 
	$NRK_INVALID_PIN
–
GPIO34
 )

216 
öt8_t
 
	$ƒk_gpio_£t
(
uöt8_t
 
pö
)

218 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

219 
pö
 & 0x07) {

220 
NRK_PORTA
:

221 dÿ{ 
PORTA
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

222 
NRK_PORTB
:

223 dÿ{ 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

224 
NRK_PORTC
:

225 dÿ{ 
PORTC
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

226 
NRK_PORTD
:

227 dÿ{ 
PORTD
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

228 
NRK_PORTE
:

229 dÿ{ 
PORTE
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

230 
NRK_PORTF
:

231 dÿ{ 
PORTF
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

235 
	}
}

237 
öt8_t
 
	$ƒk_gpio_˛r
(
uöt8_t
 
pö
)

239 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

240 
pö
 & 0x07) {

241 
NRK_PORTA
:

242 dÿ{ 
PORTA
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

243 
NRK_PORTB
:

244 dÿ{ 
PORTB
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

245 
NRK_PORTC
:

246 dÿ{ 
PORTC
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

247 
NRK_PORTD
:

248 dÿ{ 
PORTD
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

249 
NRK_PORTE
:

250 dÿ{ 
PORTE
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

251 
NRK_PORTF
:

252 dÿ{ 
PORTF
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

256 
	}
}

258 
öt8_t
 
	$ƒk_gpio_gë
(
uöt8_t
 
pö
)

260 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

261 
pö
 & 0x07) {

262 
NRK_PORTA
:

263  !!(
PINA
 & 
	`BM
((
pö
 & 0xF8) >> 3));

264 
NRK_PORTB
:

265  !!(
PINB
 & 
	`BM
((
pö
 & 0xF8) >> 3));

266 
NRK_PORTC
:

267  !!(
PINC
 & 
	`BM
((
pö
 & 0xF8) >> 3));

268 
NRK_PORTD
:

269  !!(
PIND
 & 
	`BM
((
pö
 & 0xF8) >> 3));

270 
NRK_PORTE
:

271  !!(
PINE
 & 
	`BM
((
pö
 & 0xF8) >> 3));

272 
NRK_PORTF
:

273  !!(
PINF
 & 
	`BM
((
pö
 & 0xF8) >> 3));

277 
	}
}

279 
öt8_t
 
	$ƒk_gpio_puŒups
(
uöt8_t
 
íabÀ
)

281 if(
íabÀ
Ë
SFIOR
 &~
	`BM
(
PUD
);

282 
SFIOR
 |
	`BM
(
PUD
);

283  
NRK_OK
;

284 
	}
}

286 
öt8_t
 
	$ƒk_gpio_toggÀ
(
uöt8_t
 
pö
)

288 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

289 
pö
 & 0x07) {

290 
NRK_PORTA
:

291 i‡((
PINA
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

292 dÿ{ 
PORTA
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

294 dÿ{ 
PORTA
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

297 
NRK_PORTB
:

298 i‡((
PINB
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

299 dÿ{ 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

301 dÿ{ 
PORTB
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

304 
NRK_PORTC
:

305 i‡((
PINC
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

306 dÿ{ 
PORTC
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

308 dÿ{ 
PORTC
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

311 
NRK_PORTD
:

312 i‡((
PIND
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

313 dÿ{ 
PORTD
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

315 dÿ{ 
PORTD
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

318 
NRK_PORTE
:

319 i‡((
PINE
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

320 dÿ{ 
PORTE
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

322 dÿ{ 
PORTE
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

325 
NRK_PORTF
:

326 i‡((
PINF
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

327 dÿ{ 
PORTF
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

329 dÿ{ 
PORTF
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

335 
	}
}

337 
öt8_t
 
	$ƒk_gpio_dúe˘i⁄
(
uöt8_t
 
pö
, uöt8_à
pö_dúe˘i⁄
)

339 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

340 i‡(
pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) {

341 
pö
 & 0x07) {

342 
NRK_PORTA
:

343 
DDRA
 &~
	`BM
((
pö
 & 0xF8) >> 3);

344 
PORTA
 |
	`BM
((
pö
 & 0xF8) >> 3);

346 
NRK_PORTB
:

347 
DDRB
 &~
	`BM
((
pö
 & 0xF8) >> 3);

348 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

350 
NRK_PORTC
:

351 
DDRC
 &~
	`BM
((
pö
 & 0xF8) >> 3);

352 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

354 
NRK_PORTD
:

355 
DDRD
 &~
	`BM
((
pö
 & 0xF8) >> 3);

356 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

358 
NRK_PORTE
:

359 
DDRE
 &~
	`BM
((
pö
 & 0xF8) >> 3);

360 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

362 
NRK_PORTF
:

363 
DDRF
 &~
	`BM
((
pö
 & 0xF8) >> 3);

364 
PORTB
 |
	`BM
((
pö
 & 0xF8) >> 3);

369 
pö
 & 0x07) {

370 
NRK_PORTA
:

371 
DDRA
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

372 
NRK_PORTB
:

373 
DDRB
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

374 
NRK_PORTC
:

375 
DDRC
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

376 
NRK_PORTD
:

377 
DDRD
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

378 
NRK_PORTE
:

379 
DDRE
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

380 
NRK_PORTF
:

381 
DDRF
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

386 
	}
}

389 
öt8_t
 
	$ƒk_gë_buâ⁄
(
uöt8_t
 
b
)

391  
NRK_ERROR
;

392 
	}
}

396 
öt8_t
 
	$ƒk_Àd_toggÀ
–
Àd
 )

398 if(
Àd
==0Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_0
);  1; }

399 if(
Àd
==1Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_1
);  1; }

400 if(
Àd
==2Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_2
);  1; }

402 
	}
}

404 
öt8_t
 
	$ƒk_Àd_˛r
–
Àd
 )

406 if(
Àd
==0Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_0
);  1; }

407 if(
Àd
==1Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_1
);  1; }

408 if(
Àd
==2Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_2
);  1; }

410 
	}
}

412 
öt8_t
 
	$ƒk_Àd_£t
–
Àd
 )

414 if(
Àd
==0Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_0
);  1; }

415 if(
Àd
==1Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_1
);  1; }

416 if(
Àd
==2Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_2
);  1; }

418 
	}
}

441 
	$putc0
(
x
)

443 
	`UART0_WAIT_AND_SEND
(
x
);

444 
	}
}

446 
	$putc1
(
x
)

448 
	`UART1_WAIT_AND_SEND
(
x
);

449 
	}
}

471 
	$£tup_u¨t0
(
uöt16_t
 
baudøã
)

474 
	`INIT_UART0
–
baudøã
, (
UART_OPT_NO_PARITY
|
UART_OPT_8_BITS_PER_CHAR
|
UART_OPT_ONE_STOP_BIT
));

475 
	`ENABLE_UART0
();

476 
	}
}

488 
	$ƒk_£tup_u¨t
(
uöt16_t
 
baudøã
)

492 
	`£tup_u¨t0
(
baudøã
);

494 
°dout
 = 
	`fdev›í
–
putc0
, 
gëc0
);

495 
°dö
 = 
	`fdev›í
–
putc0
, 
gëc0
);

497 #ifde‡
NRK_UART_BUF


498 
u¨t_rx_sig«l
=
	`ƒk_sig«l_¸óã
();

499 if(
u¨t_rx_sig«l
==
NRK_ERROR
Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

500 
u¨t_rx_buf_°¨t
=0;

501 
u¨t_rx_buf_íd
=0;

502 
	`ENABLE_UART0_RX_INT
();

507 
	}
}

509 
	$£tup_u¨t1
(
uöt16_t
 
baudøã
)

512 
	`INIT_UART1
–
baudøã
, (
UART_OPT_NO_PARITY
|
UART_OPT_8_BITS_PER_CHAR
|
UART_OPT_ONE_STOP_BIT
));

513 
	`ENABLE_UART1
();

514 
	}
}

518 
	$gëc1
(){

519 
tmp
;

520 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

521  
tmp
;

522 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/hal.h

10 #i‚de‡
HAL_H


11 
	#HAL_H


	)

16 
uöt16_t
 
	tNRK_STK
;

18 
	#SPI_INIT
(Ë\

	)

26 
	#SPI_WAITFOREOTx
(Ë(
U1TCTL
 & 
TXEPT
) == 0)

27 
	#SPI_WAITFOREORx
(Ë(
IFG2
 & 
URXIFG1
) == 0)

28 

	)

30 
	#FASTSPI_TX
(
x
)\

	)

32 
U1TXBUF
 = 
x
;\

33 
	`SPI_WAITFOREOTx
();\

34 
	}
} 0)

36 
	#FASTSPI_RX
(
x
)\

	)

38 
U1TXBUF
 = 0;\

39 
	`SPI_WAITFOREORx
();\

40 
x
 = 
U1RXBUF
;\

41 
	}
} 0)

43 
	#FASTSPI_RX_GARBAGE
()\

	)

45 
U1TXBUF
 = 0;\

46 
	`SPI_WAITFOREORx
();\

47 
U1RXBUF
;\

48 
	}
} 0)

50 
	#FASTSPI_TX_MANY
(
p
,
c
)\

	)

52 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) {\

53 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]);\

55 
	}
} 0)

58 
	#FASTSPI_RX_WORD
(
x
)\

	)

60 
U1TXBUF
 = 0;\

61 
	`SPI_WAITFOREORx
();\

62 
x
 = 
U1RXBUF
 << 8;\

63 
U1TXBUF
 = 0;\

64 
	`SPI_WAITFOREORx
();\

65 
x
 |
U1RXBUF
;\

66 
	}
} 0)

68 
	#FASTSPI_TX_ADDR
(
a
)\

	)

70 
U1TXBUF
 = 
a
;\

71 
	`SPI_WAITFOREOTx
();\

72 
	}
} 0)

74 
	#FASTSPI_RX_ADDR
(
a
)\

	)

76 
U1TXBUF
 = (
a
) | 0x40;\

77 
	`SPI_WAITFOREOTx
();\

78 
	}
} 0)

82 
	`hÆWaô
(
uöt16_t
 
timeout
);

84 
	#ENABLE_GLOBAL_INT
(Ëdÿ{ 
	`eöt
(); 
	}
} 0)

	)

85 
	#DISABLE_GLOBAL_INT
(Ëdÿ{ 
	`döt
(); } 0)

	)

88 
	#ENABLE_UART1_INT
(Ëdÿ{ 
IE2
 |(
	`BM
(
UTXIE1
Ë| BM(
URXIE1
)); } 0)

	)

89 
	#DISABLE_UART1_INT
(Ëdÿ{ 
IE2
 &~(
	`BM
(
UTXIE1
Ë| BM(
URXIE1
)); } 0)

	)

95 
	#ENABLE_UART1_TX_INT
(Ëdÿ{ 
IE2
 |
	`BM
(
UTXIE1
); } 0)

	)

96 
	#DISABLE_UART1_TX_INT
(Ëdÿ{ 
IE2
 &~
	`BM
(
UTXIE1
); } 0)

	)

97 
	#CLEAR_UART1_TX_INT
(Ëdÿ{ 
IFG2
 &~
	`BM
(
UTXIFG1
); } 0)

	)

98 
	#SET_UART1_TX_INT
(Ëdÿ{ 
IFG2
 |
	`BM
(
UTXIFG1
); } 0)

	)

106 
	#ENABLE_UART1_RX_INT
(Ëdÿ{ 
IE2
 |
	`BM
(
URXIE1
); } 0)

	)

107 
	#DISABLE_UART1_RX_INT
(Ëdÿ{ 
IE2
 &~
	`BM
(
URXIE1
); } 0)

	)

108 
	#CLEAR_UART1_RX_INT
(Ëdÿ{ 
IFG2
 &~
	`BM
(
URXIFG1
); } 0)

	)

115 
	#ENABLE_UART0_TX_INT
(Ëdÿ{ 
IE1
 |
	`BM
(
UTXIE0
); } 0)

	)

116 
	#DISABLE_UART0_TX_INT
(Ëdÿ{ 
IE1
 &~
	`BM
(
UTXIE0
); } 0)

	)

117 
	#CLEAR_UART0_TX_INT
(Ëdÿ{ 
IFG1
 &~
	`BM
(
UTXIFG0
); } 0)

	)

118 
	#SET_UART0_TX_INT
(Ëdÿ{ 
IFG1
 |
	`BM
(
UTXIFG0
); } 0)

	)

126 
	#ENABLE_UART0_RX_INT
(Ëdÿ{ 
IE1
 |
	`BM
(
URXIE0
); } 0)

	)

127 
	#DISABLE_UART0_RX_INT
(Ëdÿ{ 
IE1
 &~
	`BM
(
URXIE0
); } 0)

	)

128 
	#CLEAR_UART0_RX_INT
(Ëdÿ{ 
IFG1
 &~
	`BM
(
URXIFG0
); } 0)

	)

136 
	#PWM0_INIT
(
≥riod
Ë\

	)

150 
	#PWM0_SET_PERIOD
(
≥riod
Ëdÿ{ 
	}
} 0)

	)

156 
	#TIMER_CLK_STOP
 0x00

	)

157 
	#TIMER_CLK_DIV1
 0x01

	)

158 
	#TIMER_CLK_DIV8
 0x02

	)

159 
	#TIMER_CLK_DIV64
 0x03

	)

160 
	#TIMER_CLK_DIV256
 0x04

	)

161 
	#TIMER_CLK_DIV1024
 0x05

	)

162 
	#TIMER_CLK_T_FALL
 0x06

	)

163 
	#TIMER_CLK_T_RISE
 0x07

	)

167 
	#PWM0_SET_DUTY_CYCLE
(
dutyCy˛e
Ëdÿ{ } 0)

	)

179 
	#ENABLE_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

180 
	#DISABLE_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

181 
	#CLEAR_T0_COMPARE_INT
(Ëdÿ{ } 0)

	)

189 
	#ENABLE_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

190 
	#DISABLE_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

191 
	#CLEAR_T0_OVERFLOW_INT
(Ëdÿ{ } 0)

	)

225 
	#INIT_UART1
(
baudR©e
,
›ti⁄s
Ë\

	)

227 
_BIS_SR
(
OSCOFF
);\

228 
	gBCSCTL2
|=
DIVM1
;\

229 
	gDCOCTL
=
DCO2
|
DCO0
|
MOD4
|
MOD2
;\

230 
	gBCSCTL1
=
XT2OFF
|
RSEL2
|
RSEL1
|
RSEL0
;\

231 
	gBCSCTL2
=
DIVS1
;\

232 
	gP3SEL
 = 1<<6;\

233 
	gUCTL1
 = 
SWRST
;\

234 
	gUCTL1
 |
CHAR
;\

235 
	gU1RCTL
 &~
URXEIE
;\

236 
	gUCTL1
 = 
SWRST
;\

237 
	gUCTL1
 |
CHAR
;\

238 
	gU1TCTL
 &~(
SSEL_0
 | 
SSEL_1
 | 
SSEL_2
 | 
SSEL_3
);\

239 
	gU1TCTL
 |
SSEL_SMCLK
;\

240 
	gU1BR0
 = 0x09;\

241 
	gU1BR1
 = 0x00;\

242 
	gU1MCTL
 = 0x10;\

243 
	gME2
 &~
USPIE1
;\

244 
	gME2
 |(
UTXE1
 | 
URXE1
);\

245 
	gU1CTL
 &~
SWRST
;\

246 
	gIFG2
 &~(
UTXIFG1
 | 
URXIFG1
);\

247 
	gIE2
 &~(
UTXIE1
 | 
URXIE1
);\

266 
	#INIT_UART0
(
baudR©e
,
›ti⁄s
Ë\

	)

268 
	}
} 0)

286 
	#UART_BAUDRATE_2K4
 416

	)

287 
	#UART_BAUDRATE_4K8
 207

	)

288 
	#UART_BAUDRATE_9K6
 103

	)

289 
	#UART_BAUDRATE_14K4
 68

	)

290 
	#UART_BAUDRATE_19K2
 51

	)

291 
	#UART_BAUDRATE_28K8
 34

	)

292 
	#UART_BAUDRATE_38K4
 25

	)

293 
	#UART_BAUDRATE_57K6
 16

	)

294 
	#UART_BAUDRATE_115K2
 8

	)

295 
	#UART_BAUDRATE_230K4
 3

	)

296 
	#UART_BAUDRATE_250K
 3

	)

301 
	#UART_OPT_ONE_STOP_BIT
 0

	)

302 
	#UART_OPT_TWO_STOP_BITS
 0x08

	)

303 
	#UART_OPT_NO_PARITY
 0

	)

304 
	#UART_OPT_EVEN_PARITY
 0x20

	)

305 
	#UART_OPT_ODD_PARITY
 0x30

	)

306 
	#UART_OPT_5_BITS_PER_CHAR
 0

	)

307 
	#UART_OPT_6_BITS_PER_CHAR
 0x02

	)

308 
	#UART_OPT_7_BITS_PER_CHAR
 0x04

	)

309 
	#UART_OPT_8_BITS_PER_CHAR
 0x06

	)

310 
	#UART_OPT_9_BITS_PER_CHAR
 0x0406

	)

319 
	#ENABLE_UART0
(Ë()

	)

320 
	#DISABLE_UART0
(Ë()

	)

321 
	#ENABLE_UART1
(Ë()

	)

322 
	#DISABLE_UART1
(Ë()

	)

342 
	#UART1_WAIT
()\

	)

344  !(
U1TCTL
 & 
TXEPT
) ) \

346 
	}
} 0)

348 
	#UART1_WAIT_RX
(Ëdÿ{ 
	}
} 0)

	)

350 
	#UART1_SEND
(
x
)\

	)

352 
	gU1TXBUF
 = 
x
;\

355 
	#UART1_WAIT_AND_SEND
(
x
Ëdÿ{
	`UART1_SEND
(x);
	`UART1_WAIT
(); 
	}
} 0)

	)

357 
	#UART1_RECEIVE
(
x
Ëdÿ{ } 0)

	)

359 
	#UART1_WAIT_AND_RECEIVE
(
x
Ëdÿ{ } 0)

	)

362 
	#UART0_WAIT
(Ëdÿ{ } 0)

	)

364 
	#UART0_WAIT_RX
(Ëdÿ{ } 0)

	)

366 
	#UART0_SEND
(
x
Ëdÿ{ } 0)

	)

368 
	#UART0_WAIT_AND_SEND
(
x
Ëdÿ{ } 0)

	)

370 
	#UART0_RECEIVE
(
x
Ëdÿ{ } 0)

	)

372 
	#UART0_WAIT_AND_RECEIVE
(
x
Ëdÿ{ } 0)

	)

410 
	#TIMER0_OFF
 0

	)

411 
	#TIMER0_PRESCALE_1
 1

	)

412 
	#TIMER0_PRESCALE_8
 2

	)

413 
	#TIMER0_PRESCALE_32
 3

	)

414 
	#TIMER0_PRESCALE_64
 4

	)

415 
	#TIMER0_PRESCALE_128
 5

	)

416 
	#TIMER0_PRESCALE_256
 6

	)

417 
	#TIMER0_PRESCALE_1024
 7

	)

419 
	#TIMER0_WGM_0
 0x00

	)

420 
	#TIMER0_WGM_1
 0x40

	)

421 
	#TIMER0_WGM_2
 0x08

	)

422 
	#TIMER0_WGM_3
 0x48

	)

424 
	#TIMER0_COM_0
 0x00

	)

425 
	#TIMER0_COM_1
 0x08

	)

426 
	#TIMER0_COM_2
 0x10

	)

427 
	#TIMER0_COM_3
 0x18

	)

428 
	#TIMER0_COM_4
 0x20

	)

429 
	#TIMER0_COM_5
 0x28

	)

430 
	#TIMER0_COM_6
 0x30

	)

431 
	#TIMER0_COM_7
 0x38

	)

434 
	#TIMER0_SET_CONTROL
(
x
Ëdÿ{ } 0)

	)

436 
	#TIMER0_SET_VALUE
(
x
Ëdÿ{ } 0)

	)

437 
	#TIMER0_READ_VALUE
(
x
Ëdÿ{ } 0)

	)

439 
	#TIMER0_SET_COMPARE_VALUE
(
x
Ëdÿ{ } 0)

	)

440 
	#TIMER0_READ_COMPARE_VALUE
(
x
Ëdÿ{ } 0)

	)

461 
	#NOP
(Ë
asm
 vﬁ©ûê("n›\n\t" ::)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/hal_tmote.h

30 #i‚de‡
HAL_TMOTE_H


31 
	#HAL_TMOTE_H


	)

33 
	#TMOTE_PLATFORM


	)

35 
	#RED_LED
 0

	)

36 
	#GREEN_LED
 1

	)

37 
	#BLUE_LED
 2

	)

38 
	#ORANGE_LED
 3

	)

40 
PORT_INIT
();

42 
	#SPI_ENABLE
(Ë–
P5OUT
 &~
	`BM
(
CSN
) )

43 
	#SPI_DISABLE
(Ë–
P5OUT
 |
	`BM
(
CSN
) )

44 

	)

46 
	#FIFOP_INT_INIT
(Ëdÿ{ 
P2IES
 &~
	`BM
(
FIFO_P
); 
	`CLEAR_FIFOP_INT
(); } 0)

	)

49 
	#ENABLE_FIFOP_INT
(Ëdÿ{ 
P2IE
 |
	`BM
(
FIFO_P
); } 0)

	)

50 
	#DISABLE_FIFOP_INT
(Ëdÿ{ 
P2IE
 &~
	`BM
(
FIFO_P
); } 0)

	)

51 
	#CLEAR_FIFOP_INT
(Ëdÿ{ 
P2IFG
 &~
	`BM
(
FIFO_P
); } 0)

	)

54 
	#ENABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 |
	`BM
(
TICIE1
); } 0)

	)

55 
	#DISABLE_SFD_CAPTURE_INT
(Ëdÿ{ 
TIMSK
 &~
	`BM
(
TICIE1
); } 0)

	)

56 
	#CLEAR_SFD_CAPTURE_INT
(Ëdÿ{ 
TIFR
 = 
	`BM
(
ICF1
); } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/include.h

1 #i‚de‡
INCLUDE_H


2 
	#INCLUDE_H


	)

8 
	#PSTR
(
x
Ë
	)
x

31 #i‚de‡
FALSE


32 
	#FALSE
 0

	)

34 #i‚de‡
TRUE


35 
	#TRUE
 1

	)

37 #i‚de‡
NULL


38 
	#NULL
 0

	)

42 
	#BM
(
n
Ë(1 << (n))

	)

43 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

44 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

45 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

46 
	#ABS
(
n
Ë(“ < 0Ë? -“Ë: (n))

	)

49 (*
	tVFPTR
)();

60 
	~<io.h
>

61 
	~<sig«l.h
>

62 
	~<m•430x16x.h
>

63 
	~<°rög.h
>

67 
	#RAMEND
 0x38„

	)

70 #ifde‡
STK501


74 #ifde‡
CC2420DB


79 
	~<hÆ.h
>

80 
	~<hÆ_tmŸe.h
>

82 
	~<hÆ_cc2420.h
>

84 
	~<basic_rf.h
>

	@/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/nrk_eeprom.h

1 #i‚de‡
_NRK_EEPROM_H_


2 
	#_NRK_EEPROM_H_


	)

3 
	~<°döt.h
>

5 
öt8_t
 
ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
);

	@/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/nrk_pin_define.h

1 #i‚de‡
NRK_PIN_DEFINE_H


2 
	#NRK_PIN_DEFINE_H


	)

10 
	#CSN
 2

11 
	#FIFO
 3

12 
	#VREG_EN
 5

13 
	#RESET_N
 6

14 
	#BUTTON
 7

15 
	#SCK
 3

16 
	#MOSI
 1

17 
	#MISO
 2

18 
	#UART1_RXD
 7

19 
	#UART1_TXD
 6

20 
	#SFD
 1

21 
	#CCA
 4

22 
	#LED_0
 4

23 
	#LED_1
 5

24 
	#LED_2
 6

25 
	#LED_3
 5

26 
	#UART0_RXD
 5

27 
	#UART0_TXD
 4

29 
	#FIFOP
 0

30 
	#ADC_INPUT_0
 0

31 
	#ADC_INPUT_1
 1

32 
	#ADC_INPUT_2
 2

33 
	#ADC_INPUT_3
 3

34 
	#ADC_INPUT_4
 4

35 
	#ADC_INPUT_5
 5

36 
	#ADC_INPUT_6
 6

37 
	#ADC_INPUT_7
 7

38 

	)

41 
	#DEBUG_0
 3

	)

42 
	#DEBUG_1
 4

	)

43 
	#DEBUG_2
 4

	)

44 
	#DEBUG_3
 4

	)

45 
	#GPIO26
 4

	)

46 
	#GPIO28
 5

	)

47 
	#UART1_RTS
 5

48 
	#UART1_CTS
 7

49 
	#GPIO34
 6

	)

129 
	#ƒk_gpio_øw_£t
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à|
	`BM
(_pö); } 0);}

	)

131 
	#ƒk_gpio_øw_˛r
–
_p‹t
, 
_pö
 ) {dÿ{ _p‹à&~
	`BM
(_pö); } 0);}

	)

133 
	#ƒk_gpio_øw_gë
–
_pö_p‹t
, 
_pö
 ) (_pö_p‹à& 
	`BM
(_pö))

	)

135 
	#ƒk_gpio_øw_toggÀ
–
_pö_p‹t
, 
_p‹t
, 
_pö
 ) { \

	)

136 i‡((
	g_pö_p‹t
 & 
BM
(
_pö
))Ëdo{ 
	g_p‹t
 &= ~BM(_pin); } 0); \

137 dÿ{ 
	g_p‹t
 |
BM
(
_pö
); }0); \

140 
	#ƒk_gpio_øw_dúe˘i⁄
–
_dúe˘i⁄_p‹t_«me
, 
_pö
, 
_pö_dúe˘i⁄
 ) { \

	)

141 i‡(
	g_pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) { \

142 
_dúe˘i⁄_p‹t_«me
 &~
BM
–
_pö
 ); \

144 
	g_dúe˘i⁄_p‹t_«me
 |
BM
–
_pö
 ); \

154 
	#NRK_INVALID_PIN_VAL
 0xFF

	)

158 
	#NRK_PORTA
 0

	)

159 
	#NRK_PORTB
 1

	)

160 
	#NRK_PORTC
 2

	)

161 
	#NRK_PORTD
 3

	)

162 
	#NRK_PORTE
 4

	)

163 
	#NRK_PORTF
 5

	)

166 
	#NRK_PIN_INPUT
 0

	)

167 
	#NRK_PIN_OUTPUT
 1

	)

177 
	#DECLARE_NRK_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«me;

	)

178 
	#NRK_PIN
–
_pö_«me
, 
_pö
 , 
_p‹t
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê(_pö << 3Ë+ (_p‹à& 0x07);

	)

179 
	#NRK_INVALID_PIN
–
_pö_«me
 ) c⁄° 
uöt8_t
 
NRK_
 ## _pö_«mê
NRK_INVALID_PIN_VAL
;

	)

183 
	$DECLARE_NRK_PIN
–
DEBUG_0
 )

184 
	$DECLARE_NRK_PIN
–
DEBUG_1
 )

185 
	$DECLARE_NRK_PIN
–
DEBUG_2
 )

186 
	$DECLARE_NRK_PIN
–
DEBUG_3
 )

187 
	$DECLARE_NRK_PIN
–
BUTTON
 )

189 
	$DECLARE_NRK_PIN
–
SPI_SS
 )

190 
	$DECLARE_NRK_PIN
–
SCK
 )

191 
	$DECLARE_NRK_PIN
–
MOSI
 )

192 
	$DECLARE_NRK_PIN
–
MISO
 )

194 
	$DECLARE_NRK_PIN
–
GPIO28
 )

195 
	$DECLARE_NRK_PIN
–
GPIO26
 )

198 
	$DECLARE_NRK_PIN
–
UART1_RXD
 )

199 
	$DECLARE_NRK_PIN
–
UART1_TXD
 )

200 
	$DECLARE_NRK_PIN
–
SFD
 )

201 
	$DECLARE_NRK_PIN
–
CCA
 )

203 
	$DECLARE_NRK_PIN
–
UART0_RXD
 )

204 
	$DECLARE_NRK_PIN
–
UART0_TXD
 )

205 
	$DECLARE_NRK_PIN
–
FIFOP
 )

206 
	$DECLARE_NRK_PIN
–
LED_0
 )

207 
	$DECLARE_NRK_PIN
–
LED_1
 )

208 
	$DECLARE_NRK_PIN
–
LED_2
 )

209 
	$DECLARE_NRK_PIN
–
LED_3
 )

211 
	$DECLARE_NRK_PIN
–
GPIO34
 )

213 
	$DECLARE_NRK_PIN
–
ADC_INPUT_0
 )

214 
	$DECLARE_NRK_PIN
–
ADC_INPUT_1
 )

215 
	$DECLARE_NRK_PIN
–
ADC_INPUT_2
 )

216 
	$DECLARE_NRK_PIN
–
ADC_INPUT_3
 )

217 
	$DECLARE_NRK_PIN
–
ADC_INPUT_4
 )

218 
	$DECLARE_NRK_PIN
–
ADC_INPUT_5
 )

219 
	$DECLARE_NRK_PIN
–
JTAG_TCK
 )

220 
	$DECLARE_NRK_PIN
–
JTAG_TMS
 )

221 
	$DECLARE_NRK_PIN
–
JTAG_TDO
 )

222 
	$DECLARE_NRK_PIN
–
JTAG_TDI
 )

224 
	$DECLARE_NRK_PIN
–
ADC_INPUT_6
 )

225 
	$DECLARE_NRK_PIN
–
ADC_INPUT_7
 )

	@/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/nrk_platform_time.h

1 #i‚de‡
NRK_PLATFORM_TIME_H


2 
	#NRK_PLATFORM_TIME_H


	)

8 
	#NANOS_PER_TICK
 976563

	)

9 
	#US_PER_TICK
 977

	)

10 
	#TICKS_PER_SEC
 1024

	)

12 #i‚de‡
NRK_SLEEP_WAKEUP_TIME


13 
	#NRK_SLEEP_WAKEUP_TIME
 10

	)

	@/home/gopikannan/Downloads/nano-RK/src/platform/tmote/source/hal_wait.c

50 
	~<ö˛ude.h
>

63 
	$hÆWaô
(
uöt16_t
 
timeout
) {

67 
	`NOP
();

68 
	`NOP
();

69 
	`NOP
();

70 
	`NOP
();

71 } --
timeout
);

73 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/tmote/source/nrk_eeprom.c

1 
	~<ƒk_ì¥om.h
>

2 
	~<ƒk_îr‹.h
>

5 
öt8_t
 
	$ªad_ì¥om_mac_addªss
(
uöt32_t
 *
addªss
)

7  
NRK_ERROR
;

8 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/platform/tmote/source/ulib.c

1 
	~<ö˛ude.h
>

2 
	~<ulib.h
>

3 
	~<°dio.h
>

4 
	~<hÆ.h
>

5 
	~<hÆ_tmŸe.h
>

7 
	~<ƒk_pö_deföe.h
>

8 
	~<ƒk_îr‹.h
>

11 #ifde‡
NANORK


12 
	~<ƒk_cfg.h
>

15 #ifde‡
NRK_UART_BUF


16 
	~<ƒk_evíts.h
>

18 #i‚de‡
MAX_RX_UART_BUF


19 
	#MAX_RX_UART_BUF
 16

	)

22 
uöt8_t
 
	gu¨t_rx_buf_°¨t
,
	gu¨t_rx_buf_íd
;

23 
	gu¨t_rx_buf
[
MAX_RX_UART_BUF
];

24 
öt8_t
 
	gu¨t_rx_sig«l
;

27 
	$öãºu±
(
USART1RX_VECTOR
Ë
	$timî
 () {

29 
c
;

30 
uöt8_t
 
sig
;

31 
	`DISABLE_UART1_RX_INT
();

32 
	`UART1_WAIT_AND_RECEIVE
(
c
);

33 
u¨t_rx_buf
[
u¨t_rx_buf_íd
]=
c
;

35 
u¨t_rx_buf_íd
++;

36 if(
u¨t_rx_buf_íd
==
MAX_RX_UART_BUF
) uart_rx_buf_end=0;

37 
	`ƒk_evít_sig«l
(
u¨t_rx_sig«l
);

38 
	`CLEAR_UART1_RX_INT
();

39 
	`ENABLE_UART1_RX_INT
();

40 
	}
}

42 
	$gëc1
()

44 
tmp
;

46 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)

48 
tmp
=
u¨t_rx_buf
[
u¨t_rx_buf_°¨t
];

49 
u¨t_rx_buf_°¨t
++;

50 if(
u¨t_rx_buf_°¨t
==
MAX_RX_UART_BUF
) uart_rx_buf_start=0;

51 (
tmp
);

54 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

55  
tmp
;

56 
	}
}

58 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

60 if(
u¨t_rx_buf_°¨t
!=
u¨t_rx_buf_íd
)  1;

62 
	}
}

64 
öt8_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

66 if(
u¨t_rx_sig«l
==0Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

67  
u¨t_rx_sig«l
;

68 
	}
}

72 
öt8_t
 
	$ƒk_u¨t_rx_sig«l_gë
()

75 
	}
}

77 
uöt8_t
 
	$ƒk_u¨t_d©a_ªady
(
uöt8_t
 
u¨t_num
)

79 if(
u¨t_num
==1)

81 if–
IFG2
 & 
	`BM
(
URXIFG1
) )  1;

84 
	}
}

96 
	$gëc1
(){

97 
tmp
;

98 
	`UART1_WAIT_AND_RECEIVE
(
tmp
);

99  
tmp
;

100 
	}
}

104 
	$putch¨
(
x
)

107 
	`UART1_WAIT_AND_SEND
(
x
);

110 
	}
}

113 
	$ƒk_k¥ötf
–c⁄° *
addr
)

115 
c
;

118 
	}
}

122 
	$ƒk_£tup_p‹ts
()

124 
	`ƒk_gpio_dúe˘i⁄
(
NRK_LED_0
, 
NRK_PIN_OUTPUT
);

125 
	`ƒk_gpio_dúe˘i⁄
(
NRK_LED_1
, 
NRK_PIN_OUTPUT
);

126 
	`ƒk_gpio_dúe˘i⁄
(
NRK_LED_2
, 
NRK_PIN_OUTPUT
);

129 
	}
}

142 
	$NRK_PIN
–
DEBUG_0
,DEBUG_0, 
NRK_PORTA
 )

143 
	$NRK_PIN
–
DEBUG_1
,DEBUG_1, 
NRK_PORTA
 )

144 
	$NRK_INVALID_PIN
–
DEBUG_2
 )

145 
	$NRK_INVALID_PIN
–
DEBUG_3
 )

146 
	$NRK_PIN
–
BUTTON
,BUTTON, 
NRK_PORTA
 )

150 
	$NRK_PIN
–
SCK
,SCK, 
NRK_PORTB
 )

151 
	$NRK_PIN
–
MOSI
,MOSI, 
NRK_PORTB
 )

152 
	$NRK_PIN
–
MISO
,MISO, 
NRK_PORTB
 )

153 
	$NRK_PIN
–
GPIO26
,4, 
NRK_PORTB
 )

154 
	$NRK_PIN
–
GPIO28
,5, 
NRK_PORTB
 )

158 
	$NRK_PIN
–
UART1_RXD
,UART1_RXD, 
NRK_PORTD
 )

159 
	$NRK_PIN
–
UART1_TXD
,UART1_TXD, 
NRK_PORTD
 )

160 
	$NRK_PIN
–
CCA
,CCA, 
NRK_PORTD
 )

161 
	$NRK_PIN
–
SFD
,SFD, 
NRK_PORTD
 )

165 
	$NRK_PIN
–
UART0_RXD
,UART0_RXD, 
NRK_PORTE
 )

166 
	$NRK_PIN
–
UART0_TXD
,UART0_TXD, 
NRK_PORTE
 )

167 
	$NRK_PIN
–
LED_0
,LED_0, 
NRK_PORTE
 )

168 
	$NRK_PIN
–
LED_1
,LED_1, 
NRK_PORTE
 )

169 
	$NRK_PIN
–
LED_2
,LED_2, 
NRK_PORTE
 )

170 
	$NRK_INVALID_PIN
–
LED_3
 )

171 
	$NRK_PIN
–
GPIO34
,GPIO34, 
NRK_PORTE
 )

172 
	$NRK_PIN
–
FIFOP
, FIFOP, 
NRK_PORTE
 )

177 
	$NRK_PIN
–
ADC_INPUT_0
, ADC_INPUT_0, 
NRK_PORTF
 )

178 
	$NRK_PIN
–
ADC_INPUT_1
, ADC_INPUT_1, 
NRK_PORTF
 )

179 
	$NRK_PIN
–
ADC_INPUT_2
, ADC_INPUT_2, 
NRK_PORTF
 )

180 
	$NRK_PIN
–
ADC_INPUT_3
, ADC_INPUT_3, 
NRK_PORTF
 )

181 
	$NRK_PIN
–
ADC_INPUT_4
, ADC_INPUT_4, 
NRK_PORTF
 )

182 
	$NRK_PIN
–
ADC_INPUT_5
, ADC_INPUT_5, 
NRK_PORTF
 )

183 
	$NRK_PIN
–
ADC_INPUT_6
, ADC_INPUT_6, 
NRK_PORTF
 )

184 
	$NRK_PIN
–
ADC_INPUT_7
, ADC_INPUT_7, 
NRK_PORTF
 )

189 
öt8_t
 
	$ƒk_gpio_£t
(
uöt8_t
 
pö
)

191 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

192 
pö
 & 0x07) {

193 
NRK_PORTA
:

194 dÿ{ 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

195 
NRK_PORTB
:

196 dÿ{ 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

197 
NRK_PORTC
:

198 dÿ{ 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

199 
NRK_PORTD
:

200 dÿ{ 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

201 
NRK_PORTE
:

202 dÿ{ 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

203 
NRK_PORTF
:

204 dÿ{ 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

208 
	}
}

210 
öt8_t
 
	$ƒk_gpio_˛r
(
uöt8_t
 
pö
)

212 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

213 
pö
 & 0x07) {

214 
NRK_PORTA
:

215 dÿ{ 
P1OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

216 
NRK_PORTB
:

217 dÿ{ 
P2OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

218 
NRK_PORTC
:

219 dÿ{ 
P3OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

220 
NRK_PORTD
:

221 dÿ{ 
P4OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

222 
NRK_PORTE
:

223 dÿ{ 
P5OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

224 
NRK_PORTF
:

225 dÿ{ 
P6OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0); ;

229 
	}
}

231 
öt8_t
 
	$ƒk_gpio_gë
(
uöt8_t
 
pö
)

233 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

234 
pö
 & 0x07) {

235 
NRK_PORTA
:

236  (
P1IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

237 
NRK_PORTB
:

238  (
P2IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

239 
NRK_PORTC
:

240  (
P3IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

241 
NRK_PORTD
:

242  (
P4IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

243 
NRK_PORTE
:

244  (
P5IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

245 
NRK_PORTF
:

246  (
P6IN
 & 
	`BM
((
pö
 & 0xF8) >> 3));

250 
	}
}

252 
öt8_t
 
	$ƒk_gpio_toggÀ
(
uöt8_t
 
pö
)

254 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

255 
pö
 & 0x07) {

256 
NRK_PORTA
:

257 i‡((
P1IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

258 dÿ{ 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

260 dÿ{ 
P1OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

263 
NRK_PORTB
:

264 i‡((
P2IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

265 dÿ{ 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

267 dÿ{ 
P2OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

270 
NRK_PORTC
:

271 i‡((
P3IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

272 dÿ{ 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

274 dÿ{ 
P3OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

277 
NRK_PORTD
:

278 i‡((
P4IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

279 dÿ{ 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

281 dÿ{ 
P4OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

284 
NRK_PORTE
:

285 i‡((
P5IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

286 dÿ{ 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

288 dÿ{ 
P5OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

291 
NRK_PORTF
:

292 i‡((
P6IN
 & 
	`BM
((
pö
 & 0xF8) >> 3)) == 0) {

293 dÿ{ 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3); } 0);

295 dÿ{ 
P6OUT
 &~
	`BM
((
pö
 & 0xF8) >> 3); } 0);

301 
	}
}

303 
öt8_t
 
	$ƒk_gpio_dúe˘i⁄
(
uöt8_t
 
pö
, uöt8_à
pö_dúe˘i⁄
)

305 i‡(
pö
 =
NRK_INVALID_PIN_VAL
)  -1;

306 i‡(
pö_dúe˘i⁄
 =
NRK_PIN_INPUT
) {

307 
pö
 & 0x07) {

308 
NRK_PORTA
:

309 
P1DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

310 
P1OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

312 
NRK_PORTB
:

313 
P2DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

314 
P2OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

316 
NRK_PORTC
:

317 
P3DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

318 
P3OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

320 
NRK_PORTD
:

321 
P4DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

322 
P4OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

324 
NRK_PORTE
:

325 
P5DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

326 
P5OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

328 
NRK_PORTF
:

329 
P6DIR
 &~
	`BM
((
pö
 & 0xF8) >> 3);

330 
P6OUT
 |
	`BM
((
pö
 & 0xF8) >> 3);

335 
pö
 & 0x07) {

336 
NRK_PORTA
:

337 
P1DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

338 
NRK_PORTB
:

339 
P2DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

340 
NRK_PORTC
:

341 
P3DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

342 
NRK_PORTD
:

343 
P4DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

344 
NRK_PORTE
:

345 
P5DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

346 
NRK_PORTF
:

347 
P6DIR
 |
	`BM
((
pö
 & 0xF8) >> 3); ;

352 
	}
}

354 
öt8_t
 
	$ƒk_gpio_puŒups
(
uöt8_t
 
íabÀ
)

356  
NRK_ERROR
;

357 
	}
}

359 
öt8_t
 
	$ƒk_gë_buâ⁄
(
uöt8_t
 
b
)

361 if(
b
==0) {

362 –!(
P2IN
 & 
	`BM
(
BUTTON
)));

365 
	}
}

376 
öt8_t
 
	$ƒk_Àd_toggÀ
–
Àd
 )

378 if(
Àd
==0Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_0
);  1; }

379 if(
Àd
==1Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_1
);  1; }

380 if(
Àd
==2Ë{ 
	`ƒk_gpio_toggÀ
(
NRK_LED_2
);  1; }

382 
	}
}

384 
öt8_t
 
	$ƒk_Àd_˛r
–
Àd
 )

386 if(
Àd
==0Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_0
);  1; }

387 if(
Àd
==1Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_1
);  1; }

388 if(
Àd
==2Ë{ 
	`ƒk_gpio_£t
(
NRK_LED_2
);  1; }

390 
	}
}

392 
öt8_t
 
	$ƒk_Àd_£t
–
Àd
 )

394 if(
Àd
==0Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_0
);  1; }

395 if(
Àd
==1Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_1
);  1; }

396 if(
Àd
==2Ë{ 
	`ƒk_gpio_˛r
(
NRK_LED_2
);  1; }

398 
	}
}

401 
	$IO_SET_E
(
uöt8_t
 
pö
)

403 
P5OUT
 |
	`BM
(
pö
);

404 
	}
}

406 
	$IO_CLR_E
(
uöt8_t
 
pö
)

408 
P5OUT
 &~
	`BM
(
pö
);

409 
	}
}

411 
	$IO_SET_F
(
uöt8_t
 
pö
)

413 
P6OUT
 |
	`BM
(
pö
);

414 
	}
}

416 
	$IO_CLR_F
(
uöt8_t
 
pö
)

418 
P6OUT
 &~
	`BM
(
pö
);

419 
	}
}

421 
	$putc0
(
x
)

423 
	`UART0_WAIT_AND_SEND
(
x
);

424 
	}
}

436 
	$£tup_u¨t0
(
uöt16_t
 
baudøã
)

438 
	`INIT_UART1
–
UART_BAUDRATE_115K2
, (
UART_OPT_NO_PARITY
|
UART_OPT_8_BITS_PER_CHAR
|
UART_OPT_ONE_STOP_BIT
));

441 
	}
}

444 
	$£tup_u¨t1
(
uöt16_t
 
baudøã
)

446 
	`INIT_UART1
–
UART_BAUDRATE_115K2
, (
UART_OPT_NO_PARITY
|
UART_OPT_8_BITS_PER_CHAR
|
UART_OPT_ONE_STOP_BIT
));

449 
	}
}

461 
	$ƒk_£tup_u¨t
(
uöt16_t
 
baudøã
)

464 
	`£tup_u¨t1
(
baudøã
);

469 #ifde‡
NRK_UART_BUF


470 
u¨t_rx_sig«l
=
	`ƒk_sig«l_¸óã
();

471 if(
u¨t_rx_sig«l
==0Ë
	`ƒk_îr‹_add
(
NRK_SIGNAL_CREATE_ERROR
);

472 
u¨t_rx_buf_°¨t
=0;

473 
u¨t_rx_buf_íd
=0;

474 
	`ENABLE_UART1_RX_INT
();

477 
	}
}

482 
	$gëc0
(){

483 
tmp
;

484 
	`UART0_WAIT_AND_RECEIVE
(
tmp
);

485  
tmp
;

486 
	}
}

488 
	$PORT_INIT
()

496 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/atmega128/cc2420_mcu_hal.h

28 #i‚de‡
_CC2420_MCU_HAL_H_


29 
	#_CC2420_MCU_HAL_H_


	)

40 
	#FASTSPI_STROBE
(
s
) \

42 
	`SPI_ENABLE
(); \

43 
	`FASTSPI_TX_ADDR
(
s
); \

44 
	`SPI_DISABLE
(); \

45 } 0)

	)

47 
	#FASTSPI_SETREG
(
a
,
v
) \

49 
	`SPI_ENABLE
(); \

50 
	`FASTSPI_TX_ADDR
(
a
); \

51 
	`FASTSPI_TX
((
uöt8_t
Ë((
v
) >> 8)); \

52 
	`FASTSPI_TX
((
uöt8_t
Ë(
v
)); \

53 
	`SPI_DISABLE
(); \

54 } 0)

	)

56 
	#FASTSPI_GETREG
(
a
,
v
) \

58 
	`SPI_ENABLE
(); \

59 
	`FASTSPI_RX_ADDR
(
a
); \

60 
	`FASTSPI_RX_WORD
(
v
); \

61 
	`SPI_DISABLE
(); \

62 } 0)

	)

65 
	#FASTSPI_UPD_STATUS
(
s
) \

67 
	`SPI_ENABLE
(); \

68 
	`FASTSPI_TX_ADDR
(
CC2420_SNOP
); \

69 
s
 = 
SPDR
; \

70 
	`SPI_DISABLE
(); \

71 } 0)

	)

80 
	#FASTSPI_WRITE_FIFO
(
p
,
c
) \

82 
	`SPI_ENABLE
(); \

83 
	`FASTSPI_TX_ADDR
(
CC2420_TXFIFO
); \

84 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

85 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

87 
	`SPI_DISABLE
(); \

88 } 0)

	)

90 
	#FASTSPI_READ_FIFO
(
p
,
c
) \

92 
	`SPI_ENABLE
(); \

93 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

94 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

95 !
FIFO_IS_1
); \

96 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

98 
	`SPI_DISABLE
(); \

99 } 0)

	)

101 
	#FASTSPI_READ_FIFO_BYTE
(
b
) \

103 
	`SPI_ENABLE
(); \

104 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

105 
	`FASTSPI_RX
(
b
); \

106 
	`SPI_DISABLE
(); \

107 } 0)

	)

109 
	#FASTSPI_READ_FIFO_NO_WAIT
(
p
,
c
) \

111 
	`SPI_ENABLE
(); \

112 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

113 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

114 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

116 
	`SPI_DISABLE
(); \

117 } 0)

	)

119 
	#FASTSPI_READ_FIFO_GARBAGE
(
c
) \

121 
	`SPI_ENABLE
(); \

122 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

123 
uöt8_t
 
•iC¡
 = 0; ((•iC¡ < (
c
)Ë&& (
FIFO_IS_1
)); spiCnt++) { \

124 
	`FASTSPI_RX_GARBAGE
(); \

126 
	`SPI_DISABLE
(); \

127 } 0)

	)

143 
	#FASTSPI_WRITE_RAM_LE
(
p
,
a
,
c
,
n
) \

145 
	`SPI_ENABLE
(); \

146 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

147 
	`FASTSPI_TX
((
a
 >> 1) & 0xC0); \

148 
n
 = 0;Ç < (
c
);Ç++) { \

149 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
n
]); \

151 
	`SPI_DISABLE
(); \

152 } 0)

	)

154 
	#FASTSPI_READ_RAM_LE
(
p
,
a
,
c
,
n
) \

156 
	`SPI_ENABLE
(); \

157 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

158 
	`FASTSPI_TX
(((
a
 >> 1) & 0xC0) | 0x20); \

159 
n
 = 0;Ç < (
c
);Ç++) { \

160 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
n
]); \

162 
	`SPI_DISABLE
(); \

163 } 0)

	)

164 
	#FASTSPI_WRITE_RAM
(
p
,
a
,
c
,
n
) \

166 
	`SPI_ENABLE
(); \

167 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

168 
	`FASTSPI_TX
((
a
 >> 1) & 0xC0); \

169 
n
 = 
c
; \

171 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[--
n
]); \

172 } 
n
); \

173 
	`SPI_DISABLE
(); \

174 } 0)

	)

176 
	#FASTSPI_READ_RAM
(
p
,
a
,
c
,
n
) \

178 
	`SPI_ENABLE
(); \

179 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

180 
	`FASTSPI_TX
(((
a
 >> 1) & 0xC0) | 0x20); \

181 
n
 = 
c
; \

183 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[--
n
]); \

184 } 
n
); \

185 
	`SPI_DISABLE
(); \

186 } 0)

	)

192 
	#FASTSPI_RESET_CC2420
() \

194 
	`FASTSPI_SETREG
(
CC2420_MAIN
, 0x0000); \

195 
	`FASTSPI_SETREG
(
CC2420_MAIN
, 0xF800); \

196 } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/atmega1281/cc2420_mcu_hal.h

28 #i‚de‡
_CC2420_MCU_HAL_H_


29 
	#_CC2420_MCU_HAL_H_


	)

40 
	#FASTSPI_STROBE
(
s
) \

42 
	`SPI_ENABLE
(); \

43 
	`FASTSPI_TX_ADDR
(
s
); \

44 
	`SPI_DISABLE
(); \

45 } 0)

	)

47 
	#FASTSPI_SETREG
(
a
,
v
) \

49 
	`SPI_ENABLE
(); \

50 
	`FASTSPI_TX_ADDR
(
a
); \

51 
	`FASTSPI_TX
((
uöt8_t
Ë((
v
) >> 8)); \

52 
	`FASTSPI_TX
((
uöt8_t
Ë(
v
)); \

53 
	`SPI_DISABLE
(); \

54 } 0)

	)

56 
	#FASTSPI_GETREG
(
a
,
v
) \

58 
	`SPI_ENABLE
(); \

59 
	`FASTSPI_RX_ADDR
(
a
); \

60 
	`FASTSPI_RX_WORD
(
v
); \

61 
	`SPI_DISABLE
(); \

62 } 0)

	)

65 
	#FASTSPI_UPD_STATUS
(
s
) \

67 
	`SPI_ENABLE
(); \

68 
	`FASTSPI_TX_ADDR
(
CC2420_SNOP
); \

69 
s
 = 
SPDR
; \

70 
	`SPI_DISABLE
(); \

71 } 0)

	)

80 
	#FASTSPI_WRITE_FIFO
(
p
,
c
) \

82 
	`SPI_ENABLE
(); \

83 
	`FASTSPI_TX_ADDR
(
CC2420_TXFIFO
); \

84 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

85 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

87 
	`SPI_DISABLE
(); \

88 } 0)

	)

90 
	#FASTSPI_READ_FIFO
(
p
,
c
) \

92 
	`SPI_ENABLE
(); \

93 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

94 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

95 !
FIFO_IS_1
); \

96 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

98 
	`SPI_DISABLE
(); \

99 } 0)

	)

101 
	#FASTSPI_READ_FIFO_BYTE
(
b
) \

103 
	`SPI_ENABLE
(); \

104 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

105 
	`FASTSPI_RX
(
b
); \

106 
	`SPI_DISABLE
(); \

107 } 0)

	)

109 
	#FASTSPI_READ_FIFO_NO_WAIT
(
p
,
c
) \

111 
	`SPI_ENABLE
(); \

112 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

113 
uöt8_t
 
•iC¡
 = 0; spiC¡ < (
c
); spiCnt++) { \

114 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
•iC¡
]); \

116 
	`SPI_DISABLE
(); \

117 } 0)

	)

119 
	#FASTSPI_READ_FIFO_GARBAGE
(
c
) \

121 
	`SPI_ENABLE
(); \

122 
	`FASTSPI_RX_ADDR
(
CC2420_RXFIFO
); \

123 
uöt8_t
 
•iC¡
 = 0; ((•iC¡ < (
c
)Ë&& (
FIFO_IS_1
)); spiCnt++) { \

124 
	`FASTSPI_RX_GARBAGE
(); \

126 
	`SPI_DISABLE
(); \

127 } 0)

	)

143 
	#FASTSPI_WRITE_RAM_LE
(
p
,
a
,
c
,
n
) \

145 
	`SPI_ENABLE
(); \

146 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

147 
	`FASTSPI_TX
((
a
 >> 1) & 0xC0); \

148 
n
 = 0;Ç < (
c
);Ç++) { \

149 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[
n
]); \

151 
	`SPI_DISABLE
(); \

152 } 0)

	)

154 
	#FASTSPI_READ_RAM_LE
(
p
,
a
,
c
,
n
) \

156 
	`SPI_ENABLE
(); \

157 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

158 
	`FASTSPI_TX
(((
a
 >> 1) & 0xC0) | 0x20); \

159 
n
 = 0;Ç < (
c
);Ç++) { \

160 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[
n
]); \

162 
	`SPI_DISABLE
(); \

163 } 0)

	)

165 
	#FASTSPI_WRITE_RAM
(
p
,
a
,
c
,
n
) \

167 
	`SPI_ENABLE
(); \

168 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

169 
	`FASTSPI_TX
((
a
 >> 1) & 0xC0); \

170 
n
 = 
c
; \

172 
	`FASTSPI_TX
(((
uöt8_t
*)(
p
))[--
n
]); \

173 } 
n
); \

174 
	`SPI_DISABLE
(); \

175 } 0)

	)

177 
	#FASTSPI_READ_RAM
(
p
,
a
,
c
,
n
) \

179 
	`SPI_ENABLE
(); \

180 
	`FASTSPI_TX
(0x80 | (
a
 & 0x7F)); \

181 
	`FASTSPI_TX
(((
a
 >> 1) & 0xC0) | 0x20); \

182 
n
 = 
c
; \

184 
	`FASTSPI_RX
(((
uöt8_t
*)(
p
))[--
n
]); \

185 } 
n
); \

186 
	`SPI_DISABLE
(); \

187 } 0)

	)

193 
	#FASTSPI_RESET_CC2420
() \

195 
	`FASTSPI_SETREG
(
CC2420_MAIN
, 0x0000); \

196 
	`FASTSPI_SETREG
(
CC2420_MAIN
, 0xF800); \

197 } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/msp430x149/cc2420_mcu_hal.h

28 #i‚de‡
_CC2420_MCU_HAL_H_


29 
	#_CC2420_MCU_HAL_H_


	)

40 
	#FASTSPI_STROBE
(
s
) \

42 } 0)

	)

44 
	#FASTSPI_SETREG
(
a
,
v
) \

46 } 0)

	)

48 
	#FASTSPI_GETREG
(
a
,
v
) \

50 } 0)

	)

53 
	#FASTSPI_UPD_STATUS
(
s
) \

55 } 0)

	)

64 
	#FASTSPI_WRITE_FIFO
(
p
,
c
) \

66 } 0)

	)

68 
	#FASTSPI_READ_FIFO
(
p
,
c
) \

70 } 0)

	)

72 
	#FASTSPI_READ_FIFO_BYTE
(
b
) \

74 } 0)

	)

76 
	#FASTSPI_READ_FIFO_NO_WAIT
(
p
,
c
) \

78 } 0)

	)

80 
	#FASTSPI_READ_FIFO_GARBAGE
(
c
) \

82 } 0)

	)

98 
	#FASTSPI_WRITE_RAM_LE
(
p
,
a
,
c
,
n
) \

100 } 0)

	)

102 
	#FASTSPI_READ_RAM_LE
(
p
,
a
,
c
,
n
) \

104 } 0)

	)

105 
	#FASTSPI_WRITE_RAM
(
p
,
a
,
c
,
n
) \

107 } 0)

	)

109 
	#FASTSPI_READ_RAM
(
p
,
a
,
c
,
n
) \

111 } 0)

	)

117 
	#FASTSPI_RESET_CC2420
() \

119 } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/msp430x1611/cc2420_mcu_hal.h

28 #i‚de‡
_CC2420_MCU_HAL_H_


29 
	#_CC2420_MCU_HAL_H_


	)

40 
	#FASTSPI_STROBE
(
s
) \

42 } 0)

	)

44 
	#FASTSPI_SETREG
(
a
,
v
) \

46 } 0)

	)

48 
	#FASTSPI_GETREG
(
a
,
v
) \

50 } 0)

	)

53 
	#FASTSPI_UPD_STATUS
(
s
) \

55 } 0)

	)

64 
	#FASTSPI_WRITE_FIFO
(
p
,
c
) \

66 } 0)

	)

68 
	#FASTSPI_READ_FIFO
(
p
,
c
) \

70 } 0)

	)

72 
	#FASTSPI_READ_FIFO_BYTE
(
b
) \

74 } 0)

	)

76 
	#FASTSPI_READ_FIFO_NO_WAIT
(
p
,
c
) \

78 } 0)

	)

80 
	#FASTSPI_READ_FIFO_GARBAGE
(
c
) \

82 } 0)

	)

98 
	#FASTSPI_WRITE_RAM_LE
(
p
,
a
,
c
,
n
) \

100 } 0)

	)

102 
	#FASTSPI_READ_RAM_LE
(
p
,
a
,
c
,
n
) \

104 } 0)

	)

105 
	#FASTSPI_WRITE_RAM
(
p
,
a
,
c
,
n
) \

107 } 0)

	)

109 
	#FASTSPI_READ_RAM
(
p
,
a
,
c
,
n
) \

111 } 0)

	)

117 
	#FASTSPI_RESET_CC2420
() \

119 } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/msp430xG4618/cc2420_mcu_hal.h

28 #i‚de‡
_CC2420_MCU_HAL_H_


29 
	#_CC2420_MCU_HAL_H_


	)

40 
	#FASTSPI_STROBE
(
s
) \

42 } 0)

	)

44 
	#FASTSPI_SETREG
(
a
,
v
) \

46 } 0)

	)

48 
	#FASTSPI_GETREG
(
a
,
v
) \

50 } 0)

	)

53 
	#FASTSPI_UPD_STATUS
(
s
) \

55 } 0)

	)

64 
	#FASTSPI_WRITE_FIFO
(
p
,
c
) \

66 } 0)

	)

68 
	#FASTSPI_READ_FIFO
(
p
,
c
) \

70 } 0)

	)

72 
	#FASTSPI_READ_FIFO_BYTE
(
b
) \

74 } 0)

	)

76 
	#FASTSPI_READ_FIFO_NO_WAIT
(
p
,
c
) \

78 } 0)

	)

80 
	#FASTSPI_READ_FIFO_GARBAGE
(
c
) \

82 } 0)

	)

98 
	#FASTSPI_WRITE_RAM_LE
(
p
,
a
,
c
,
n
) \

100 } 0)

	)

102 
	#FASTSPI_READ_RAM_LE
(
p
,
a
,
c
,
n
) \

104 } 0)

	)

105 
	#FASTSPI_WRITE_RAM
(
p
,
a
,
c
,
n
) \

107 } 0)

	)

109 
	#FASTSPI_READ_RAM
(
p
,
a
,
c
,
n
) \

111 } 0)

	)

117 
	#FASTSPI_RESET_CC2420
() \

119 } 0)

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/include/basic_rf.h

64 #i‚de‡
BASIC_RF_H


65 
	#BASIC_RF_H


	)

67 
	#CHECKSUM_OVERHEAD
 1

	)

69 
	~<°dboﬁ.h
>

70 
	~<ƒk_evíts.h
>

73 
hÆRfWaôF‹Cry°ÆOscûœt‹
();

74 
hÆRfSëCh™√l
(
uöt8_t
 
ch™√l
);

76 
uöt8_t
 
rf_£curôy_œ°_pkt_°©us
();

77 
rf_£curôy_£t_key
(
uöt8_t
 *
key
);

78 
rf_£curôy_£t_˘r_cou¡î
(
uöt8_t
 *
cou¡î
);

79 
rf_£curôy_íabÀ
();

80 
rf_£curôy_dißbÀ
();

82 
rf_auto_ack_íabÀ
();

83 
rf_auto_ack_dißbÀ
();

84 
rf_addr_decode_£t_my_mac
(
uöt16_t
 
my_mac
);

85 
rf_addr_decode_íabÀ
();

86 
rf_addr_decode_dißbÀ
();

89 
ƒk_£m_t
* 
rf_gë_£m
();

102 
	#RF_PACKET_OVERHEAD_SIZE
 ((2 + 1 + 2 + 2 + 2Ë+ (2))

	)

103 
	#RF_MAX_PAYLOAD_SIZE
 (127 - 
RF_PACKET_OVERHEAD_SIZE
)

	)

104 
	#RF_ACK_PACKET_SIZE
 5

	)

108 
	#RF_ACK_DURATION
 (0.5 * 32 * 2 * ((4 + 1Ë+ (1Ë+ (2 + 1Ë+ (2)))

	)

109 
	#RF_SYMBOL_DURATION
 (32 * 0.5)

	)

112 
	#RF_LENGTH_MASK
 0x7F

	)

116 
	#RF_FCF_NOACK
 0x8841

	)

117 
	#RF_FCF_ACK
 0x8861

	)

119 
	#RF_SEC_BM
 0x0008

	)

120 
	#RF_ACK_BM
 0x0020

	)

121 
	#RF_FCF_ACK_BM
 0x0020

	)

122 
	#RF_FCF_BM
 (~
RF_FCF_ACK_BM
)

	)

123 
	#RF_ACK_FCF
 0x0002

	)

126 
	#RF_CRC_OK_BM
 0x80

	)

143 
uöt16_t
 
	mde°Addr
;

144 
öt8_t
 
	mÀngth
;

145 
uöt8_t
 *
	mpPaylﬂd
;

146 
boﬁ
 
	mcˇ
;

147 
boﬁ
 
	mackReque°
;

148 } 
	tRF_TX_INFO
;

151 
rf_ã°_mode
();

152 
rf_d©a_mode
();

153 
rf_Êush_rx_fifo
();

154 
rf_ˇºõr_⁄
();

155 
rf_ˇºõr_off
();

156 
rf_£t_cˇ_thªsh
(
öt8_t
 
t
);

179 
uöt8_t
 
rf_tx_∑ckë
(
RF_TX_INFO
 *
pRTI
);

180 
uöt8_t
 
rf_tx_tdma_∑ckë
(
RF_TX_INFO
 *
pRTI
, 
uöt16_t
 
¶Ÿ_°¨t_time
, uöt16_à
tx_gu¨d_time
);

181 
rf_£t_ch™√l
(
uöt8_t
 
ch™√l
);

199 
rf_tx_powî
(
uöt8_t
 
pwr
);

213 
uöt8_t
 
	m£qNumbî
;

214 
uöt16_t
 
	m§cAddr
;

216 
öt8_t
 
	mÀngth
;

217 
öt8_t
 
	mmax_Àngth
;

218 
uöt8_t
 *
	mpPaylﬂd
;

219 
boﬁ
 
	mackReque°
;

220 
öt8_t
 
	mrssi
;

221 } 
	tRF_RX_INFO
;

224 
uöt8_t
 
rf_rx_check_sfd
();

225 
uöt8_t
 
rf_rx_check_fif›
();

227 
öt8_t
 
rf_pﬁlög_rx_∑ckë
();

235 
rf_rx_⁄
();

236 
rf_pﬁlög_rx_⁄
();

245 
rf_rx_off
();

280 
RF_RX_INFO
* 
rf_rx_ˇŒback
(RF_RX_INFO *
pRRI
);

295 
RF_RX_INFO
 *
	mpRxInfo
;

296 
uöt8_t
 
	mtxSeqNumbî
;

297 vﬁ©ûê
boﬁ
 
	mackRe˚ived
;

298 
uöt16_t
 
	m∑nId
;

299 
uöt16_t
 
	mmyAddr
;

300 
boﬁ
 
	mª˚iveOn
;

301 } 
	tRF_SETTINGS
;

302 vﬁ©ûê
RF_SETTINGS
 
rfSëtögs
;

328 
rf_öô
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
, 
uöt16_t
 
∑nId
, uöt16_à
myAddr
);

329 
rf_£t_rx
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
);

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/include/hal_cc2420.h

26 #i‚de‡
HAL_CC2420_H


27 
	#HAL_CC2420_H


	)

29 
	~<cc2420_mcu_hÆ.h
>

30 
	~<cc2420_∂©f‹m_hÆ.h
>

34 
	#CC2420_SNOP
 0x00

	)

35 
	#CC2420_SXOSCON
 0x01

	)

36 
	#CC2420_STXCAL
 0x02

	)

37 
	#CC2420_SRXON
 0x03

	)

38 
	#CC2420_STXON
 0x04

	)

39 
	#CC2420_STXONCCA
 0x05

	)

40 
	#CC2420_SRFOFF
 0x06

	)

41 
	#CC2420_SXOSCOFF
 0x07

	)

42 
	#CC2420_SFLUSHRX
 0x08

	)

43 
	#CC2420_SFLUSHTX
 0x09

	)

44 
	#CC2420_SACK
 0x0A

	)

45 
	#CC2420_SACKPEND
 0x0B

	)

46 
	#CC2420_SRXDEC
 0x0C

	)

47 
	#CC2420_STXENC
 0x0D

	)

48 
	#CC2420_SAES
 0x0E

	)

50 
	#CC2420_MAIN
 0x10

	)

51 
	#CC2420_MDMCTRL0
 0x11

	)

52 
	#CC2420_MDMCTRL1
 0x12

	)

53 
	#CC2420_RSSI
 0x13

	)

54 
	#CC2420_SYNCWORD
 0x14

	)

55 
	#CC2420_TXCTRL
 0x15

	)

56 
	#CC2420_RXCTRL0
 0x16

	)

57 
	#CC2420_RXCTRL1
 0x17

	)

58 
	#CC2420_FSCTRL
 0x18

	)

59 
	#CC2420_SECCTRL0
 0x19

	)

60 
	#CC2420_SECCTRL1
 0x1A

	)

61 
	#CC2420_BATTMON
 0x1B

	)

62 
	#CC2420_IOCFG0
 0x1C

	)

63 
	#CC2420_IOCFG1
 0x1D

	)

64 
	#CC2420_MANFIDL
 0x1E

	)

65 
	#CC2420_MANFIDH
 0x1F

	)

66 
	#CC2420_FSMTC
 0x20

	)

67 
	#CC2420_MANAND
 0x21

	)

68 
	#CC2420_MANOR
 0x22

	)

69 
	#CC2420_AGCCTRL
 0x23

	)

70 
	#CC2420_AGCTST0
 0x24

	)

71 
	#CC2420_AGCTST1
 0x25

	)

72 
	#CC2420_AGCTST2
 0x26

	)

73 
	#CC2420_FSTST0
 0x27

	)

74 
	#CC2420_FSTST1
 0x28

	)

75 
	#CC2420_FSTST2
 0x29

	)

76 
	#CC2420_FSTST3
 0x2A

	)

77 
	#CC2420_RXBPFTST
 0x2B

	)

78 
	#CC2420_FSMSTATE
 0x2C

	)

79 
	#CC2420_ADCTST
 0x2D

	)

80 
	#CC2420_DACTST
 0x2E

	)

81 
	#CC2420_TOPTST
 0x2F

	)

82 
	#CC2420_RESERVED
 0x30

	)

84 
	#CC2420_TXFIFO
 0x3E

	)

85 
	#CC2420_RXFIFO
 0x3F

	)

93 
	#CC2420_RAM_SIZE
 368

	)

94 
	#CC2420_FIFO_SIZE
 128

	)

97 
	#CC2420RAM_TXFIFO
 0x000

	)

98 
	#CC2420RAM_RXFIFO
 0x080

	)

99 
	#CC2420RAM_KEY0
 0x100

	)

100 
	#CC2420RAM_RXNONCE
 0x110

	)

101 
	#CC2420RAM_SABUF
 0x120

	)

102 
	#CC2420RAM_KEY1
 0x130

	)

103 
	#CC2420RAM_TXNONCE
 0x140

	)

104 
	#CC2420RAM_CBCSTATE
 0x150

	)

105 
	#CC2420RAM_IEEEADDR
 0x160

	)

106 
	#CC2420RAM_PANID
 0x168

	)

107 
	#CC2420RAM_SHORTADDR
 0x16A

	)

113 
	#CC2420_XOSC16M_STABLE
 6

	)

114 
	#CC2420_TX_UNDERFLOW
 5

	)

115 
	#CC2420_ENC_BUSY
 4

	)

116 
	#CC2420_TX_ACTIVE
 3

	)

117 
	#CC2420_LOCK
 2

	)

118 
	#CC2420_RSSI_VALID
 1

	)

123 
	#CC2420_SECCTRL0_NO_SECURITY
 0x0000

	)

124 
	#CC2420_SECCTRL0_CBC_MAC
 0x0001

	)

125 
	#CC2420_SECCTRL0_CTR
 0x0002

	)

126 
	#CC2420_SECCTRL0_CCM
 0x0003

	)

128 
	#CC2420_SECCTRL0_SEC_M_IDX
 2

	)

130 
	#CC2420_SECCTRL0_RXKEYSEL0
 0x0000

	)

131 
	#CC2420_SECCTRL0_RXKEYSEL1
 0x0020

	)

133 
	#CC2420_SECCTRL0_TXKEYSEL0
 0x0000

	)

134 
	#CC2420_SECCTRL0_TXKEYSEL1
 0x0040

	)

136 
	#CC2420_SECCTRL0_SEC_CBC_HEAD
 0x0100

	)

137 
	#CC2420_SECCTRL0_RXFIFO_PROTECTION
 0x0200

	)

143 
	#RSSI_OFFSET
 -38

	)

144 
	#RSSI_2_ED
(
rssi
Ë(‘ssiË< 
RSSI_OFFSET
 ? 0 : (‘ssiË- (RSSI_OFFSET)))

	)

145 
	#ED_2_LQI
(
ed
Ë((”dË> 63 ? 255 : (”dË<< 2)))

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/platform/firefly2_1/cc2420_platform_hal.h

26 #i‚de‡
_CC2420_PLATFORM_HAL_H_


27 
	#_CC2420_PLATFORM_HAL_H_


	)

33 
	#FIFO_IS_1
 (!!(
PINC
 & 
	`BM
(
FIFO
)))

	)

34 
	#CCA_IS_1
 (!!(
PIND
 & 
	`BM
(
CCA
)))

	)

35 
	#RESET_IS_1
 (!!(
PINA
 & 
	`BM
(
RESET_N
)))

	)

36 
	#VREG_IS_1
 (!!(
PINA
 & 
	`BM
(
VREG_EN
)))

	)

37 
	#FIFOP_IS_1
 (!!(
PINE
 & 
	`BM
(
FIFOP
)))

	)

38 
	#SFD_IS_1
 (!!(
PIND
 & 
	`BM
(
SFD
)))

	)

41 
	#SET_RESET_ACTIVE
(Ë
PORTA
 &~
	`BM
(
RESET_N
)

	)

42 
	#SET_RESET_INACTIVE
(Ë
PORTA
 |
	`BM
(
RESET_N
)

	)

45 
	#SET_VREG_ACTIVE
(Ë
PORTA
 |
	`BM
(
VREG_EN
)

	)

46 
	#SET_VREG_INACTIVE
(Ë
PORTA
 &~
	`BM
(
VREG_EN
)

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/platform/firefly2_2/cc2420_platform_hal.h

26 #i‚de‡
_CC2420_PLATFORM_HAL_H_


27 
	#_CC2420_PLATFORM_HAL_H_


	)

33 
	#FIFO_IS_1
 (!!(
PINC
 & 
	`BM
(
FIFO
)))

	)

34 
	#CCA_IS_1
 (!!(
PIND
 & 
	`BM
(
CCA
)))

	)

35 
	#RESET_IS_1
 (!!(
PINA
 & 
	`BM
(
RESET_N
)))

	)

36 
	#VREG_IS_1
 (!!(
PINA
 & 
	`BM
(
VREG_EN
)))

	)

37 
	#FIFOP_IS_1
 (!!(
PINE
 & 
	`BM
(
FIFOP
)))

	)

38 
	#SFD_IS_1
 (!!(
PIND
 & 
	`BM
(
SFD
)))

	)

41 
	#SET_RESET_ACTIVE
(Ë
PORTA
 &~
	`BM
(
RESET_N
)

	)

42 
	#SET_RESET_INACTIVE
(Ë
PORTA
 |
	`BM
(
RESET_N
)

	)

45 
	#SET_VREG_ACTIVE
(Ë
PORTA
 |
	`BM
(
VREG_EN
)

	)

46 
	#SET_VREG_INACTIVE
(Ë
PORTA
 &~
	`BM
(
VREG_EN
)

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/platform/micaZ/cc2420_platform_hal.h

26 #i‚de‡
_CC2420_PLATFORM_HAL_H_


27 
	#_CC2420_PLATFORM_HAL_H_


	)

33 
	#FIFO_IS_1
 (!!(
PINB
 & 
	`BM
(
FIFO
)))

	)

34 
	#CCA_IS_1
 (!!(
PIND
 & 
	`BM
(
CCA
)))

	)

35 
	#RESET_IS_1
 (!!(
PINA
 & 
	`BM
(
RESET_N
)))

	)

36 
	#VREG_IS_1
 (!!(
PINA
 & 
	`BM
(
VREG_EN
)))

	)

37 
	#FIFOP_IS_1
 (!!(
PINE
 & 
	`BM
(
FIFOP
)))

	)

38 
	#SFD_IS_1
 (!!(
PIND
 & 
	`BM
(
SFD
)))

	)

41 
	#SET_RESET_ACTIVE
(Ë
PORTA
 &~
	`BM
(
RESET_N
)

	)

42 
	#SET_RESET_INACTIVE
(Ë
PORTA
 |
	`BM
(
RESET_N
)

	)

45 
	#SET_VREG_ACTIVE
(Ë
PORTA
 |
	`BM
(
VREG_EN
)

	)

46 
	#SET_VREG_INACTIVE
(Ë
PORTA
 &~
	`BM
(
VREG_EN
)

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/platform/tmote/cc2420_platform_hal.h

26 #i‚de‡
_CC2420_PLATFORM_HAL_H_


27 
	#_CC2420_PLATFORM_HAL_H_


	)

33 
	#FIFO_IS_1
 (!!(
PINC
 & 
	`BM
(
FIFO
)))

	)

34 
	#CCA_IS_1
 (!!(
PIND
 & 
	`BM
(
CCA
)))

	)

35 
	#RESET_IS_1
 (!!(
PINA
 & 
	`BM
(
RESET_N
)))

	)

36 
	#VREG_IS_1
 (!!(
PINA
 & 
	`BM
(
VREG_EN
)))

	)

37 
	#FIFOP_IS_1
 (!!(
PINE
 & 
	`BM
(
FIFOP
)))

	)

38 
	#SFD_IS_1
 (!!(
PIND
 & 
	`BM
(
SFD
)))

	)

41 
	#SET_RESET_ACTIVE
(Ë
PORTA
 &~
	`BM
(
RESET_N
)

	)

42 
	#SET_RESET_INACTIVE
(Ë
PORTA
 |
	`BM
(
RESET_N
)

	)

45 
	#SET_VREG_ACTIVE
(Ë
PORTA
 |
	`BM
(
VREG_EN
)

	)

46 
	#SET_VREG_INACTIVE
(Ë
PORTA
 &~
	`BM
(
VREG_EN
)

	)

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/source/basic_rf.c

29 
	~<ö˛ude.h
>

30 
	~<basic_rf.h
>

31 
	~<ulib.h
>

32 
	~<ƒk.h
>

33 
	~<ƒk_evíts.h
>

34 
	~<ƒk_îr‹.h
>

35 
	~<ƒk_timî.h
>

36 
	~<ƒk_˝u.h
>

43 
ƒk_£m_t
 *
	gødio_£m
;

44 
uöt8_t
 
	gauto_ack_íabÀ
;

45 
uöt8_t
 
	g£curôy_íabÀ
;

46 
uöt8_t
 
	gœ°_pkt_í¸y±ed
;

47 
uöt16_t
 
	gmdm˘æ0
;

48 
uöt8_t
 
	gtx_˘r
[4];

49 
uöt8_t
 
	grx_˘r
[4];

52 
uöt8_t
 
	$rf_£curôy_œ°_pkt_°©us
()

54  
œ°_pkt_í¸y±ed
;

55 
	}
}

58 
	$rf_£curôy_£t_˘r_cou¡î
(
uöt8_t
 *
cou¡î
)

60 
uöt8_t
 
n
;

62 
	`FASTSPI_WRITE_RAM
(&
cou¡î
[0],(
CC2420RAM_TXNONCE
+9),2,
n
);

63 
	`FASTSPI_WRITE_RAM
(&
cou¡î
[2],(
CC2420RAM_TXNONCE
+11),2,
n
);

64 
tx_˘r
[0]=
cou¡î
[0];

65 
tx_˘r
[1]=
cou¡î
[1];

66 
tx_˘r
[2]=
cou¡î
[2];

67 
tx_˘r
[3]=
cou¡î
[3];

68 
	}
}

71 
	$rf_£curôy_£t_key
(
uöt8_t
 *
key
)

73 
uöt8_t
 
n
,
i
;

74 
uöt16_t
 
key_buf
;

77 
	`ƒk_•ö_waô_us
(100);

78 
i
=0; i<8; i++ )

80 
key_buf
=(
key
[
i
]<<8)|key[i+1];

81 
	`ƒk_•ö_waô_us
(100);

82 
	`FASTSPI_WRITE_RAM_LE
(&
key_buf
,(
CC2420RAM_KEY0
+(
i
*2)),2,
n
);

86 
	`ƒk_•ö_waô_us
(100);

87 
i
=0; i<7; i++ )

89 
key_buf
=0;

90 
	`FASTSPI_WRITE_RAM_LE
(&
key_buf
,(
CC2420RAM_TXNONCE
+(
i
*2)),2,
n
);

91 
	`FASTSPI_WRITE_RAM_LE
(&
key_buf
,(
CC2420RAM_RXNONCE
+(
i
*2)),2,
n
);

94 
key_buf
=1;

95 
	`FASTSPI_WRITE_RAM_LE
(&
key_buf
,(
CC2420RAM_TXNONCE
+14),2,
n
);

96 
	`FASTSPI_WRITE_RAM_LE
(&
key_buf
,(
CC2420RAM_RXNONCE
+14),2,
n
);

97 
	}
}

99 
	$rf_£curôy_íabÀ
(
uöt8_t
 *
key
)

101 
	`FASTSPI_SETREG
(
CC2420_SECCTRL0
, 0x0306);

102 
	`FASTSPI_SETREG
(
CC2420_SECCTRL1
, 0x0e0e);

104 
£curôy_íabÀ
=1;

105 
	}
}

109 
	$rf_£curôy_dißbÀ
()

111 
	`FASTSPI_SETREG
(
CC2420_SECCTRL0
, 0x01C4);

112 
£curôy_íabÀ
=0;

113 
	}
}

117 vﬁ©ûê
RF_SETTINGS
 
	grfSëtögs
;

118 vﬁ©ûê
uöt8_t
 
	grx_ªady
;

120 
ƒk_£m_t
* 
	$rf_gë_£m
()

122  
ødio_£m
;

123 
	}
}

125 
	$rf_tx_powî
(
uöt8_t
 
pwr
)

127 
uöt16_t
 
tmp
;

129 #ifde‡
RADIO_PRIORITY_CEILING


130 
	`ƒk_£m_≥nd
 (
ødio_£m
);

132 
tmp
=0xA0E0;

133 
tmp
Òm∞| (
pwr
&0x1F);

134 
	`FASTSPI_SETREG
(
CC2420_TXCTRL
, 
tmp
);

135 #ifde‡
RADIO_PRIORITY_CEILING


136 
	`ƒk_£m_po°
(
ødio_£m
);

138 
	}
}

139 
	$rf_£t_ch™√l
–
uöt8_t
 
ch™√l
 )

141 #ifde‡
RADIO_PRIORITY_CEILING


142 
	`ƒk_£m_≥nd
 (
ødio_£m
);

144 
	`hÆRfSëCh™√l
(
ch™√l
);

145 #ifde‡
RADIO_PRIORITY_CEILING


146 
	`ƒk_£m_po°
(
ødio_£m
);

148 
	}
}

151 
	$rf_addr_decode_íabÀ
()

153 
mdm˘æ0
 |= 0x0800;

154 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL0
, 
mdm˘æ0
);

155 
	}
}

157 
	$rf_addr_decode_dißbÀ
()

159 
mdm˘æ0
 &= (~0x0800);

160 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL0
, 
mdm˘æ0
);

161 
	}
}

164 
	$rf_auto_ack_íabÀ
()

166 
auto_ack_íabÀ
=1;

167 
mdm˘æ0
 |= 0x0010;

168 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL0
, 
mdm˘æ0
);

169 
	}
}

171 
	$rf_auto_ack_dißbÀ
()

173 
auto_ack_íabÀ
=0;

174 
mdm˘æ0
 &= (~0x0010);

175 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL0
, 
mdm˘æ0
);

176 
	}
}

179 
	$rf_addr_decode_£t_my_mac
(
uöt16_t
 
my_mac
)

181 
uöt8_t
 
n
;

182 
rfSëtögs
.
myAddr
 = 
my_mac
;

183 
	`ƒk_•ö_waô_us
(500);

184 
	`FASTSPI_WRITE_RAM_LE
(&
my_mac
, 
CC2420RAM_SHORTADDR
, 2, 
n
);

185 
	`ƒk_•ö_waô_us
(500);

186 
	}
}

190 
	$rf_£t_rx
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
 )

193 #ifde‡
RADIO_PRIORITY_CEILING


194 
	`ƒk_£m_≥nd
 (
ødio_£m
);

197 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

198 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

199 
	`hÆRfSëCh™√l
(
ch™√l
);

200 
rfSëtögs
.
pRxInfo
 = 
pRRI
;

202 #ifde‡
RADIO_PRIORITY_CEILING


203 
	`ƒk_£m_po°
(
ødio_£m
);

205 
	}
}

228 
	$rf_öô
(
RF_RX_INFO
 *
pRRI
, 
uöt8_t
 
ch™√l
, 
uöt16_t
 
∑nId
, uöt16_à
myAddr
) {

229 
uöt8_t
 
n
;

231 #ifde‡
RADIO_PRIORITY_CEILING


232 
öt8_t
 
v
;

233 
ødio_£m
 = 
	`ƒk_£m_¸óã
(1,
RADIO_PRIORITY_CEILING
);

234 i‡(
ødio_£m
 =
NULL
)

235 
	`ƒk_kî√l_îr‹_add
 (
NRK_SEMAPHORE_CREATE_ERROR
, 
	`ƒk_gë_pid
 ());

237 
v
 = 
	`ƒk_£m_≥nd
 (
ødio_£m
);

238 i‡(
v
 =
NRK_ERROR
) {

239 
	`ƒk_k¥ötf
 (
	`PSTR
 ("CC2420 ERROR: AccessÅo semaphore failed\r\n"));

244 
	`SET_VREG_ACTIVE
();

245 
	`hÆWaô
(1000);

246 
	`SET_RESET_ACTIVE
();

247 
	`hÆWaô
(1);

248 
	`SET_RESET_INACTIVE
();

249 
	`hÆWaô
(100);

256 
	`DISABLE_GLOBAL_INT
();

259 
	`FASTSPI_STROBE
(
CC2420_SXOSCON
);

260 
mdm˘æ0
=0x02E2;

261 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL0
, 
mdm˘æ0
);

264 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL1
, 0x0500);

265 
	`FASTSPI_SETREG
(
CC2420_IOCFG0
, 0x007F);

266 
	`FASTSPI_SETREG
(
CC2420_SECCTRL0
, 0x01C4);

267 
	`FASTSPI_SETREG
(
CC2420_RXCTRL1
, 0x1A56);

287 
	`ƒk_•ö_waô_us
(500);

288 
	`FASTSPI_WRITE_RAM_LE
(&
∑nId
, 
CC2420RAM_PANID
, 2, 
n
);

289 
	`ƒk_•ö_waô_us
(500);

291 
	`ENABLE_GLOBAL_INT
();

294 
	`hÆRfSëCh™√l
(
ch™√l
);

297 
	`ENABLE_GLOBAL_INT
();

300 
rfSëtögs
.
pRxInfo
 = 
pRRI
;

301 
rfSëtögs
.
∑nId
 =ÖanId;

302 
rfSëtögs
.
myAddr
 = myAddr;

303 
rfSëtögs
.
txSeqNumbî
 = 0;

304 
rfSëtögs
.
ª˚iveOn
 = 
FALSE
;

307 
	`hÆRfWaôF‹Cry°ÆOscûœt‹
();

315 #ifde‡
RADIO_PRIORITY_CEILING


316 
v
 = 
	`ƒk_£m_po°
 (
ødio_£m
);

317 i‡(
v
 =
NRK_ERROR
) {

318 
	`ƒk_k¥ötf
 (
	`PSTR
 ("CC2420 ERROR: Release of semaphore failed\r\n"));

319 
	`_ƒk_î∫o_£t
 (2);

323 
auto_ack_íabÀ
=0;

324 
£curôy_íabÀ
=0;

325 
œ°_pkt_í¸y±ed
=0;

326 
	}
}

336 
	$rf_rx_⁄
() {

337 #ifde‡
RADIO_PRIORITY_CEILING


338 
	`ƒk_£m_≥nd
 (
ødio_£m
);

340 
rfSëtögs
.
ª˚iveOn
 = 
TRUE
;

341 
	`FASTSPI_STROBE
(
CC2420_SRXON
);

342 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

343 
rx_ªady
=0;

344 #ifde‡
RADIO_PRIORITY_CEILING


345 
	`ƒk_£m_po°
(
ødio_£m
);

348 
	}
}

350 
	$rf_pﬁlög_rx_⁄
() {

351 #ifde‡
RADIO_PRIORITY_CEILING


352 
	`ƒk_£m_≥nd
 (
ødio_£m
);

354 
rfSëtögs
.
ª˚iveOn
 = 
TRUE
;

355 
	`FASTSPI_STROBE
(
CC2420_SRXON
);

356 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

357 
rx_ªady
=0;

358 #ifde‡
RADIO_PRIORITY_CEILING


359 
	`ƒk_£m_po°
(
ødio_£m
);

361 
	}
}

383 
	$rf_rx_off
() {

384 #ifde‡
RADIO_PRIORITY_CEILING


385 
	`ƒk_£m_≥nd
 (
ødio_£m
);

389 
rfSëtögs
.
ª˚iveOn
 = 
FALSE
;

390 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

391 
rx_ªady
=0;

392 #ifde‡
RADIO_PRIORITY_CEILING


393 
	`ƒk_£m_po°
(
ødio_£m
);

396 
	}
}

404 
uöt8_t
 
	$rf_tx_tdma_∑ckë
(
RF_TX_INFO
 *
pRTI
, 
uöt16_t
 
¶Ÿ_°¨t_time
, uöt16_à
tx_gu¨d_time
) {

405 
uöt16_t
 
‰ameC⁄åﬁFõld
;

406 
uöt8_t
 
∑ckëLígth
;

407 
uöt8_t
 
suc˚ss
;

408 
uöt8_t
 
•iSètusByã
;

409 
uöt8_t
 
checksum
,
i
;

410 
uöt8_t
 
time°amp
;

412 #ifde‡
RADIO_PRIORITY_CEILING


413 
	`ƒk_£m_≥nd
 (
ødio_£m
);

415 
time°amp
=
	`_ƒk_os_timî_gë
();

417 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

418 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

420 
FIFOP_IS_1
 || 
SFD_IS_1
);

422 
	`DISABLE_GLOBAL_INT
();

424 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

425 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

427 
checksum
=0;

428 
i
=0; i<
pRTI
->
Àngth
; i++ )

431 
checksum
+=
pRTI
->
pPaylﬂd
[
i
];

433 
∑ckëLígth
 = 
pRTI
->
Àngth
 + 
RF_PACKET_OVERHEAD_SIZE
 + 
CHECKSUM_OVERHEAD
;

441 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*)&
∑ckëLígth
, 1);

442 
‰ameC⁄åﬁFõld
 = 
pRTI
->
ackReque°
 ? 
RF_FCF_ACK
 : 
RF_FCF_NOACK
;

443 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
‰ameC⁄åﬁFõld
, 2);

444 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
rfSëtögs
.
txSeqNumbî
, 1);

445 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
rfSëtögs
.
∑nId
, 2);

446 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
pRTI
->
de°Addr
, 2);

447 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
rfSëtögs
.
myAddr
, 2);

449 
	`ƒk_high_•ìd_timî_waô
(
¶Ÿ_°¨t_time
,
tx_gu¨d_time
);

487 i‡(
pRTI
->
cˇ
 =
TRUE
)

489 
uöt8_t
 
˙t
;

490 i‡(!
rfSëtögs
.
ª˚iveOn
)

492 
	`FASTSPI_STROBE
 (
CC2420_SRXON
);

498 
	`FASTSPI_UPD_STATUS
 (
•iSètusByã
);

500 !(
•iSètusByã
 & 
	`BM
 (
CC2420_RSSI_VALID
)));

503 
˙t
 = 0;

506 
	`FASTSPI_STROBE
 (
CC2420_STXONCCA
);

507 
	`FASTSPI_UPD_STATUS
 (
•iSètusByã
);

508 
˙t
++;

509 i‡(
˙t
 > 100)

511 
	`ENABLE_GLOBAL_INT
 ();

512 
	`ƒk_£m_po°
(
ødio_£m
);

513  
FALSE
;

515 
	`hÆWaô
 (100);

517 !(
•iSètusByã
 & 
	`BM
 (
CC2420_TX_ACTIVE
)));

520 
	`FASTSPI_STROBE
 (
CC2420_STXON
);

525 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë
pRTI
->
pPaylﬂd
,ÖRTI->
Àngth
);

526 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
checksum
, 1);

534 !
SFD_IS_1
);

535 
suc˚ss
 = 
TRUE
;

556 
	`DISABLE_GLOBAL_INT
();

560 
SFD_IS_1
);

562 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

563 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

564 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

565 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

567 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

568 
	`ENABLE_GLOBAL_INT
();

572 
rfSëtögs
.
txSeqNumbî
++;

574 #ifde‡
RADIO_PRIORITY_CEILING


575 
	`ƒk_£m_po°
(
ødio_£m
);

578  
suc˚ss
;

580 
	}
}

601 
uöt8_t
 
	$rf_tx_∑ckë
(
RF_TX_INFO
 *
pRTI
) {

602 
uöt16_t
 
‰ameC⁄åﬁFõld
;

603 
uöt8_t
 
∑ckëLígth
, 
Àngth
;

604 
uöt8_t
 
suc˚ss
;

605 
uöt8_t
 
•iSètusByã
;

606 
uöt8_t
 
checksum
,
i
;

608 #ifde‡
RADIO_PRIORITY_CEILING


609 
	`ƒk_£m_≥nd
(
ødio_£m
);

612 if(
£curôy_íabÀ
)

613 
	`FASTSPI_STROBE
(
CC2420_STXENC
);

615 
checksum
=0;

616 
i
=0; i<
pRTI
->
Àngth
; i++ )

619 
checksum
+=
pRTI
->
pPaylﬂd
[
i
];

625 
∑ckëLígth
 = 
pRTI
->
Àngth
 + 
RF_PACKET_OVERHEAD_SIZE
 + 
CHECKSUM_OVERHEAD
;

626 if(
£curôy_íabÀ
Ë
∑ckëLígth
+=4;

633 
FIFOP_IS_1
 || 
SFD_IS_1
);

635 
	`DISABLE_GLOBAL_INT
();

637 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

638 
	`FASTSPI_STROBE
(
CC2420_SFLUSHTX
);

659 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*)&
∑ckëLígth
, 1);

660 
‰ameC⁄åﬁFõld
 = 
RF_FCF_NOACK
;

661 if(
auto_ack_íabÀ
Ë
‰ameC⁄åﬁFõld
 |
RF_ACK_BM
;

662 if(
£curôy_íabÀ
Ë
‰ameC⁄åﬁFõld
 |
RF_SEC_BM
;

663 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
‰ameC⁄åﬁFõld
, 2);

664 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
rfSëtögs
.
txSeqNumbî
, 1);

665 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
rfSëtögs
.
∑nId
, 2);

666 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
pRTI
->
de°Addr
, 2);

667 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
rfSëtögs
.
myAddr
, 2);

668 if(
£curôy_íabÀ
)

669 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
tx_˘r
, 4);

671 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë
pRTI
->
pPaylﬂd
,ÖRTI->
Àngth
);

672 
	`FASTSPI_WRITE_FIFO
((
uöt8_t
*Ë&
checksum
, 1);

674 i‡(
pRTI
->
cˇ
 =
TRUE
)

676 
uöt8_t
 
˙t
;

677 i‡(!
rfSëtögs
.
ª˚iveOn
)

679 
	`FASTSPI_STROBE
 (
CC2420_SRXON
);

685 
	`FASTSPI_UPD_STATUS
 (
•iSètusByã
);

687 !(
•iSètusByã
 & 
	`BM
 (
CC2420_RSSI_VALID
)));

689 
˙t
 = 0;

692 
	`FASTSPI_STROBE
 (
CC2420_STXONCCA
);

693 
	`FASTSPI_UPD_STATUS
 (
•iSètusByã
);

694 
˙t
++;

695 i‡(
˙t
 > 100)

697 
	`ENABLE_GLOBAL_INT
 ();

698 
	`ƒk_£m_po°
(
ødio_£m
);

699  
FALSE
;

701 
	`hÆWaô
 (100);

703 !(
•iSètusByã
 & 
	`BM
 (
CC2420_TX_ACTIVE
)));

706 
	`FASTSPI_STROBE
 (
CC2420_STXON
);

709 
	`ENABLE_GLOBAL_INT
();

712 !
SFD_IS_1
);

713 
suc˚ss
 = 
TRUE
;

718 
SFD_IS_1
);

721 i‡(
auto_ack_íabÀ
) {

730 
	`hÆWaô
((12 * 
RF_SYMBOL_DURATION
Ë+ (
RF_ACK_DURATION
) + (2 * RF_SYMBOL_DURATION) + 100);

732 if(
FIFO_IS_1
)

734 
	`FASTSPI_READ_FIFO_BYTE
(
Àngth
);

735 
Àngth
 &
RF_LENGTH_MASK
;

736 
suc˚ss
 = 
TRUE
;

740 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

741 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

742 
suc˚ss
 = 
FALSE
;

750 
	`DISABLE_GLOBAL_INT
();

756 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

757 
	`ENABLE_GLOBAL_INT
();

763 
rfSëtögs
.
txSeqNumbî
++;

765 #ifde‡
RADIO_PRIORITY_CEILING


766 
	`ƒk_£m_po°
(
ødio_£m
);

768  
suc˚ss
;

770 
	}
}

772 
uöt8_t
 
	$rf_busy
()

774  
SFD_IS_1
;

775 
	}
}

777 
uöt8_t
 
	$rf_rx_check_fif›
()

779  
FIFOP_IS_1
;

780 
	}
}

783 
uöt8_t
 
	$rf_rx_check_sfd
()

785  
SFD_IS_1
;

786 
	}
}

787 
uöt16_t
 
	gtmp_bœh
;

789 
öt8_t
 
	$rf_pﬁlög_rx_∑ckë
()

791 
uöt8_t
 
tmp
;

793 #ifde‡
RADIO_PRIORITY_CEILING


794 
	`ƒk_£m_≥nd
(
ødio_£m
);

797 if(
FIFOP_IS_1
 )

799 
uöt16_t
 
‰ameC⁄åﬁFõld
;

800 
öt8_t
 
Àngth
;

801 
uöt8_t
 
pFoŸî
[2];

802 
uöt8_t
 
checksum
,
rx_checksum
,
i
;

804 
œ°_pkt_í¸y±ed
=0;

813 if((
FIFOP_IS_1
Ë&& (!(
FIFO_IS_1
))) {

815 
	`FASTSPI_READ_FIFO_BYTE
(
tmp
);

816 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

817 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

818 #ifde‡
RADIO_PRIORITY_CEILING


819 
	`ƒk_£m_po°
(
ødio_£m
);

825 
	`FASTSPI_READ_FIFO_BYTE
(
Àngth
);

826 
Àngth
 &
RF_LENGTH_MASK
;

828 if(
Àngth
==0){

830 
	`FASTSPI_READ_FIFO_BYTE
(
tmp
);

831 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

832 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

833 #ifde‡
RADIO_PRIORITY_CEILING


834 
	`ƒk_£m_po°
(
ødio_£m
);

838 i‡(
Àngth
 < 
RF_ACK_PACKET_SIZE
 || (Àngth-
RF_PACKET_OVERHEAD_SIZE
)> 
rfSëtögs
.
pRxInfo
->
max_Àngth
) {

839 
	`FASTSPI_READ_FIFO_GARBAGE
(
Àngth
);

840 
	`FASTSPI_READ_FIFO_BYTE
(
tmp
);

841 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

842 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

843 #ifde‡
RADIO_PRIORITY_CEILING


844 
	`ƒk_£m_po°
(
ødio_£m
);

851 
rfSëtögs
.
pRxInfo
->
Àngth
 =Üígth - 
RF_PACKET_OVERHEAD_SIZE
 - 
CHECKSUM_OVERHEAD
;

853 
	`FASTSPI_READ_FIFO_NO_WAIT
((
uöt8_t
*Ë&
‰ameC⁄åﬁFõld
, 2);

854 
rfSëtögs
.
pRxInfo
->
ackReque°
 = !!(
‰ameC⁄åﬁFõld
 & 
RF_FCF_ACK_BM
);

855 
	`FASTSPI_READ_FIFO_BYTE
(
rfSëtögs
.
pRxInfo
->
£qNumbî
);

875 
	`FASTSPI_READ_FIFO_GARBAGE
(4);

878 
	`FASTSPI_READ_FIFO_NO_WAIT
((
uöt8_t
*Ë&
rfSëtögs
.
pRxInfo
->
§cAddr
, 2);

880 if(
‰ameC⁄åﬁFõld
 & 
RF_SEC_BM
)

882 
uöt8_t
 
n
;

884 
	`FASTSPI_READ_FIFO_NO_WAIT
((
uöt8_t
*Ë&
rx_˘r
, 4);

885 
	`FASTSPI_WRITE_RAM
(&
rx_˘r
[0],(
CC2420RAM_RXNONCE
+9),2,
n
);

886 
	`FASTSPI_WRITE_RAM
(&
rx_˘r
[2],(
CC2420RAM_RXNONCE
+11),2,
n
);

887 
	`FASTSPI_STROBE
(
CC2420_SRXDEC
);

888 
œ°_pkt_í¸y±ed
=1;

889 
rfSëtögs
.
pRxInfo
->
Àngth
 -= 4;

893 
	`FASTSPI_READ_FIFO_NO_WAIT
(
rfSëtögs
.
pRxInfo
->
pPaylﬂd
,ÑfSëtögs.pRxInfo->
Àngth
);

894 
	`FASTSPI_READ_FIFO_NO_WAIT
(&
rx_checksum
, 1 );

897 
	`FASTSPI_READ_FIFO_NO_WAIT
((
uöt8_t
*Ë
pFoŸî
, 2);

898 
rfSëtögs
.
pRxInfo
->
rssi
 = 
pFoŸî
[0];

899 
checksum
=0;

900 
i
=0; i<
rfSëtögs
.
pRxInfo
->
Àngth
; i++ )

902 
checksum
+=
rfSëtögs
.
pRxInfo
->
pPaylﬂd
[
i
];

906 if(
checksum
!=
rx_checksum
) {

909 
	`FASTSPI_READ_FIFO_BYTE
(
tmp
);

910 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

911 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

912 #ifde‡
RADIO_PRIORITY_CEILING


913 
	`ƒk_£m_po°
(
ødio_£m
);

917 i‡(
pFoŸî
[1] & 
RF_CRC_OK_BM
) {

919 
rx_ªady
++;

920 #ifde‡
RADIO_PRIORITY_CEILING


921 
	`ƒk_£m_po°
(
ødio_£m
);

927 
	`FASTSPI_READ_FIFO_BYTE
(
tmp
);

928 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

929 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

930 #ifde‡
RADIO_PRIORITY_CEILING


931 
	`ƒk_£m_po°
(
ødio_£m
);

941 #ifde‡
RADIO_PRIORITY_CEILING


942 
	`ƒk_£m_po°
(
ødio_£m
);

945 
	}
}

947 
öt8_t
 
	$rf_rx_∑ckë
()

949 
öt8_t
 
tmp
;

950 if(
rx_ªady
>0Ë{ 
tmp
=rx_ready;Ñx_ready=0; Åmp;}

952 
	}
}

955 
ölöe
 
	$rf_Êush_rx_fifo
()

957 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

958 
	`FASTSPI_STROBE
(
CC2420_SFLUSHRX
);

959 
	}
}

961 
	$rf_£t_cˇ_thªsh
(
öt8_t
 
t
)

965 
uöt16_t
 
vÆ
;

966 #ifde‡
RADIO_PRIORITY_CEILING


967 
	`ƒk_£m_≥nd
(
ødio_£m
);

970 
vÆ
=(
t
<<8) | 0x80;

971 
	`FASTSPI_SETREG
(
CC2420_RSSI
, 
vÆ
);

973 #ifde‡
RADIO_PRIORITY_CEILING


974 
	`ƒk_£m_po°
(
ødio_£m
);

976 
	}
}

978 
	$rf_ã°_mode
()

981 #ifde‡
RADIO_PRIORITY_CEILING


982 
	`ƒk_£m_≥nd
(
ødio_£m
);

984 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

992 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL1
, 0x0508);

993 
	`FASTSPI_SETREG
(
CC2420_DACTST
, 0x1800);

994 
	`rf_Êush_rx_fifo
();

996 #ifde‡
RADIO_PRIORITY_CEILING


997 
	`ƒk_£m_po°
(
ødio_£m
);

999 
	}
}

1004 
	$rf_d©a_mode
() {

1005 #ifde‡
RADIO_PRIORITY_CEILING


1006 
	`ƒk_£m_≥nd
(
ødio_£m
);

1008 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

1009 
	`FASTSPI_SETREG
(
CC2420_MDMCTRL1
, 0x0500);

1010 
	`FASTSPI_SETREG
(
CC2420_DACTST
, 0);

1011 
	`rf_Êush_rx_fifo
();

1012 #ifde‡
RADIO_PRIORITY_CEILING


1013 
	`ƒk_£m_po°
(
ødio_£m
);

1015 
	}
}

1021 
	$rf_ˇºõr_⁄
()

1023 #ifde‡
RADIO_PRIORITY_CEILING


1024 
	`ƒk_£m_≥nd
(
ødio_£m
);

1026 
	`FASTSPI_STROBE
(
CC2420_STXON
);

1027 #ifde‡
RADIO_PRIORITY_CEILING


1028 
	`ƒk_£m_po°
(
ødio_£m
);

1030 
	}
}

1035 
	$rf_ˇºõr_off
()

1037 #ifde‡
RADIO_PRIORITY_CEILING


1038 
	`ƒk_£m_≥nd
(
ødio_£m
);

1040 
	`FASTSPI_STROBE
(
CC2420_SRFOFF
);

1041 #ifde‡
RADIO_PRIORITY_CEILING


1042 
	`ƒk_£m_po°
(
ødio_£m
);

1044 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/source/hal_rf_set_channel.c

27 
	~<ö˛ude.h
>

28 
	~<ulib.h
>

43 
	$hÆRfSëCh™√l
(
uöt8_t
 
ch™√l
) {

44 
uöt16_t
 
f
;

47 
f
 = (
uöt16_t
Ë(
ch™√l
 - 11);

48 
f
 = f + (f << 2);

49 
f
 = f + 357 + 0x4000;

52 
	`DISABLE_GLOBAL_INT
();

53 
	`FASTSPI_SETREG
(
CC2420_FSCTRL
, 
f
);

54 
	`ENABLE_GLOBAL_INT
();

56 
	}
}

	@/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/source/hal_rf_wait_for_crystal_oscillator.c

26 
	~<ö˛ude.h
>

27 
	~<ulib.h
>

39 
	$hÆRfWaôF‹Cry°ÆOscûœt‹
() {

40 
uöt8_t
 
•iSètusByã
;

44 
	`DISABLE_GLOBAL_INT
();

45 
	`FASTSPI_UPD_STATUS
(
•iSètusByã
);

46 
	`ENABLE_GLOBAL_INT
();

47 } !(
•iSètusByã
 & (
	`BM
(
CC2420_XOSC16M_STABLE
))));

49 
	}
}

	@
1
.
0
241
18193
/home/gopikannan/Downloads/nano-RK/src/drivers/include/nrk_driver_list.h
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_1/include/audio.h
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_1/include/dev_adc.h
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_1/source/adc_dev_manager.c
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_1/source/audio.c
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_2/include/adc_driver.h
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_2/include/ff_basic_sensor.h
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_2/source/adc_driver.c
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/firefly2_2/source/ff_basic_sensor.c
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/imec/include/adc_driver.h
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/imec/include/eeg_driver.h
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/imec/source/adc_driver.c
/home/gopikannan/Downloads/nano-RK/src/drivers/platform/imec/source/eeg_driver.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_cpu.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_ext_int.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_status.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_timer.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega128/nrk_watchdog.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_cpu.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_ext_int.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_status.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_timer.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega1281/nrk_watchdog.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega32/nrk_status.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/atmega32/nrk_timer.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_cpu.h
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_ext_int.h
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_status.h
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_timer.h
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/include/nrk_watchdog.h
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_cpu.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_ext_int.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_status.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_timer.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x149/nrk_watchdog.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_cpu.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_ext_int.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_status.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_timer.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430x1611/nrk_watchdog.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_cpu.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_ext_int.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_status.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_timer.c
/home/gopikannan/Downloads/nano-RK/src/kernel/hal/msp430xG4618/nrk_watchdog.c
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_defs.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_driver.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_error.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_events.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_idle_task.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_includes.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_reserve.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_scheduler.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_stack_check.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_stats.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_task.h
/home/gopikannan/Downloads/nano-RK/src/kernel/include/nrk_time.h
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_driver.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_error.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_events.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_idle_task.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_reserve.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_scheduler.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_stack_check.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_stats.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_task.c
/home/gopikannan/Downloads/nano-RK/src/kernel/source/nrk_time.c
/home/gopikannan/Downloads/nano-RK/src/net/bmac/bmac.c
/home/gopikannan/Downloads/nano-RK/src/net/bmac/bmac.h
/home/gopikannan/Downloads/nano-RK/src/net/dsr/dsr.c
/home/gopikannan/Downloads/nano-RK/src/net/dsr/dsr.h
/home/gopikannan/Downloads/nano-RK/src/net/neighbor_list/neighbor_list.c
/home/gopikannan/Downloads/nano-RK/src/net/neighbor_list/neighbor_list.h
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/BufferManager.c
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/BufferManager.h
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Debug.c
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Debug.h
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NWErrorCodes.h
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NWStackConfig.c
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NWStackConfig.h
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NetworkLayer.c
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/NetworkLayer.h
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Pack.c
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Pack.h
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Serial.c
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/Serial.h
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/TransportLayerUDP.c
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/TransportLayerUDP.h
/home/gopikannan/Downloads/nano-RK/src/net/networkstack/nrk_cfg.h
/home/gopikannan/Downloads/nano-RK/src/net/route_table/route_table.c
/home/gopikannan/Downloads/nano-RK/src/net/route_table/route_table.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/BufferManager.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/BufferManager.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Debug.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Debug.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NWErrorCodes.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NWStackConfig.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NWStackConfig.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NetworkLayer.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/NetworkLayer.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Pack.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Pack.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Serial.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/Serial.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/TransportLayerUDP.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/TransportLayerUDP.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/new_network_stack/NetworkLayer.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/new_network_stack/NetworkLayer.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/new_network_stack/TransportLayerUDP.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/nrk_cfg.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/BufferManager.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/BufferManager.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Debug.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Debug.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NWErrorCodes.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NWStackConfig.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NWStackConfig.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NetworkLayer.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/NetworkLayer.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Pack.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Pack.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Serial.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/Serial.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/TransportLayerUDP.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/TransportLayerUDP.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_chain/standard_network_stack/nrk_cfg.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_link/platform/expboard__/rtl_defs.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_link/platform/firefly2_2/rtl_defs.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_link/platform/micaZ/rtl_defs.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rt_link.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rt_link.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rtl_debug.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rtl_debug.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rtl_scheduler.c
/home/gopikannan/Downloads/nano-RK/src/net/rt_link/rtl_scheduler.h
/home/gopikannan/Downloads/nano-RK/src/net/rt_net/rt_packet.h
/home/gopikannan/Downloads/nano-RK/src/net/slip/slip.c
/home/gopikannan/Downloads/nano-RK/src/net/slip/slip.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/firefly2/widom_gpio.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/firefly2/widom_timer.c
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/firefly2/widom_timer.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/micaZ/widom_gpio.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/micaZ/widom_timer.c
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/platform/micaZ/widom_timer.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/radio/cc2420/widom_linx_rf.c
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/radio/cc2420/widom_linx_rf.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/radio/cc2420/widom_rf.c
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/radio/cc2420/widom_rf.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/widom.c
/home/gopikannan/Downloads/nano-RK/src/net/widom/experimental-versions/widom.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/hal/atmega128/wd_timer.c
/home/gopikannan/Downloads/nano-RK/src/net/widom/hal/atmega128/wd_timer.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/hal/atmega1281/wd_timer.c
/home/gopikannan/Downloads/nano-RK/src/net/widom/hal/atmega1281/wd_timer.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/platform/firefly2/wd_timer_cpu_clk.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/platform/firefly2_2/wd_timer_cpu_clk.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/platform/micaZ/wd_timer_cpu_clk.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/radio/cc2420/wd_rf.c
/home/gopikannan/Downloads/nano-RK/src/net/widom/radio/cc2420/wd_rf.h
/home/gopikannan/Downloads/nano-RK/src/net/widom/widom.c
/home/gopikannan/Downloads/nano-RK/src/net/widom/widom.h
/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/hal.h
/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/hal_expboard.h
/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/include.h
/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/nrk_eeprom.h
/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/nrk_pin_define.h
/home/gopikannan/Downloads/nano-RK/src/platform/expboard/include/nrk_platform_time.h
/home/gopikannan/Downloads/nano-RK/src/platform/expboard/source/hal_wait.c
/home/gopikannan/Downloads/nano-RK/src/platform/expboard/source/nrk_eeprom.c
/home/gopikannan/Downloads/nano-RK/src/platform/expboard/source/ulib.c
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/hal.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/hal_firefly2.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/include.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/nrk_eeprom.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/nrk_pin_define.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/include/nrk_platform_time.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/source/hal_wait.c
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/source/nrk_eeprom.c
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_1/source/ulib.c
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/hal.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/hal_firefly2_2.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/include.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/nrk_eeprom.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/nrk_pin_define.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/include/nrk_platform_time.h
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/source/hal_wait.c
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/source/nrk_eeprom.c
/home/gopikannan/Downloads/nano-RK/src/platform/firefly2_2/source/ulib.c
/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/hal.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/hal_imec.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/include.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/nrk_eeprom.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/nrk_pin_define.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec/include/nrk_platform_time.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec/source/hal_wait.c
/home/gopikannan/Downloads/nano-RK/src/platform/imec/source/nrk_eeprom.c
/home/gopikannan/Downloads/nano-RK/src/platform/imec/source/ulib.c
/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/hal.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/hal_imec_gateway.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/include.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/nrk_eeprom.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/nrk_pin_define.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/include/nrk_platform_time.h
/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/source/hal_wait.c
/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/source/nrk_eeprom.c
/home/gopikannan/Downloads/nano-RK/src/platform/imec_gateway/source/ulib.c
/home/gopikannan/Downloads/nano-RK/src/platform/include/ulib.h
/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/hal.h
/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/hal_micaZ.h
/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/include.h
/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/nrk_eeprom.h
/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/nrk_pin_define.h
/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/include/nrk_platform_time.h
/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/source/hal_wait.c
/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/source/nrk_eeprom.c
/home/gopikannan/Downloads/nano-RK/src/platform/micaZ/source/ulib.c
/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/hal.h
/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/hal_tmote.h
/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/include.h
/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/nrk_eeprom.h
/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/nrk_pin_define.h
/home/gopikannan/Downloads/nano-RK/src/platform/tmote/include/nrk_platform_time.h
/home/gopikannan/Downloads/nano-RK/src/platform/tmote/source/hal_wait.c
/home/gopikannan/Downloads/nano-RK/src/platform/tmote/source/nrk_eeprom.c
/home/gopikannan/Downloads/nano-RK/src/platform/tmote/source/ulib.c
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/atmega128/cc2420_mcu_hal.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/atmega1281/cc2420_mcu_hal.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/msp430x149/cc2420_mcu_hal.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/msp430x1611/cc2420_mcu_hal.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/hal/msp430xG4618/cc2420_mcu_hal.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/include/basic_rf.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/include/hal_cc2420.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/platform/firefly2_1/cc2420_platform_hal.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/platform/firefly2_2/cc2420_platform_hal.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/platform/micaZ/cc2420_platform_hal.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/platform/tmote/cc2420_platform_hal.h
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/source/basic_rf.c
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/source/hal_rf_set_channel.c
/home/gopikannan/Downloads/nano-RK/src/radio/cc2420/source/hal_rf_wait_for_crystal_oscillator.c
