<tr>
        <td class="micropost">
                <span ><%= link_to feed_item.user.name, feed_item.user %></span>
                <span class="content"><%= feed_item.content %></span>
                <span class="timestamp">Posted <%= time_ago_in_words(feed_item.created_at) %> ago. </span>
                <span class="timestamp"><%= pluralize(Micropost.find(feed_item.id).votes.count, 'Vote') %></span>
         </td>
</tr>

<script src="raphael.js"></script>
<script src="drawmap.js"></script>
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
<link rel="stylesheet" href="jquery.jgrowl.css" type="text/css"/>
		<style type="text/css">

			div.jGrowl-notification {
                                bottom: 0px;

				margin-left: 	6px;
			}

		</style>
<script type="text/javascript" src="jquery.ui.all.js"></script>
<script type="text/javascript" src="jquery.jgrowl.js"></script>
<script type ="text/javascript">
		
	
	var geocoder;
	var address;
	var country;
	var linetimer;
	var maptimer;


	 var data;
        var view = 0;

  	if (navigator.geolocation) {
    		navigator.geolocation.getCurrentPosition(successFunction, errorFunction);
	}	 
//Get latitude and longitude;
	function successFunction(position) {
    		var lat = position.coords.latitude;
    		var lng = position.coords.longitude;
    		getAddress(lat, lng)
	}
	function errorFunction(){
	
	}

	function initialize() {
    		geocoder = new google.maps.Geocoder();
  	}

	function getAddress(lat, lng) {

    		var latlng = new google.maps.LatLng(lat, lng);
    		geocoder.geocode({'latLng': latlng}, function(results, status) {
      		if (status == google.maps.GeocoderStatus.OK) {
        		if (results[1]) {
				address = results[0].formatted_address;
             			for (var i=0; i<results[0].address_components.length; i++) {
            				for (var j=0;j<results[0].address_components[i].types.length;j++) {
                				if (results[0].address_components[i].types[j] == "country") {
                    					country= results[0].address_components[i].short_name;
							break;
                				}
            				}
        			}
			} else {
 			         alert("No results found");
        		  }
      		} else {
        		alert("Geocoder failed due to: " + status);
      		}
    	        });
  	}

        var lastpointX = 0;
        var lastpointY;
        var segmentY;
        var segmentX;
        var zero;
        var prev_line_drawn = 1;

        function drawSlowline(startX,endX,segmentX,startY,endY,segmentY,dir){
                if( dir == 1 && endY >= startY)
                        return;
                if(dir == -1 && endY <=startY)
                        return;
                if(!dir && startX >= endX)
                        return;

                var endpX = startX + segmentX;
                var endpY = startY + segmentY;
                if(startX >=0 && startY >=0){
                        var tetronimo = canvas.path("M"+" "+ startX+" "+startY+" L "+endpX+" "+endpY);  
                        tetronimo.attr({fill: 'green', stroke: 'green', 'stroke-width': 2});  
                }
                startX=endpX;
                startY=endpY;
                setTimeout(function(){drawSlowline(startX,endX,segmentX,startY,endY,segmentY)},1);				
        }

        function updateCanvas(valY){
                var delay = 100;
                var endX = lastpointX + segmentX;
                var endY = zero - (valY*segmentY);
                var segY =(endY - lastpointY)/delay;
                var segX = segmentX/delay;
                var dir = 0;

                if(endY < lastpointY )
                        dir = 1;
                else if(endY > lastpointY)
                        dir = -1;
                if(prev_line_drawn){
                        prev_line_drawn =0;
                        //drawSlowline(lastpointX,endX,segX,lastpointY,endY,segY,dir);
                        var tetronimo = canvas.path("M"+" "+ lastpointX+" "+lastpointY+" L "+endX+" "+endY);  
                        tetronimo.attr({fill: 'green', stroke: 'green', 'stroke-width': 1});  

                        prev_line_drawn =1;	
                }	

                lastpointX=endX;
                lastpointY=endY;	
        }

        function update() {
                $.ajax({
                        type: 'POST',
                        url: 'polls/update',
                        dataType: 'json',
                        data: {poll_id: <%= @poll.id %>},
                        success: function(json, status, xhr){
                        updateCanvas(json.message);
                        }
                        });
        }

        function changeview(){
                if(view){
                        document.getElementById("canvas_container").innerHTML="";
                        clearInterval(maptimer);
                        getline();
                        view = !view;   
                }
                else{
                        document.getElementById("canvas_container").innerHTML="";
                        clearInterval(linetimer);
                        getmap();
                        view=!view;
                }
        }

$(document).ready(function () {

                window.onload = function () {
			initialize();
			   $("#change_view").click(function(event){
                               //getmap(); // this line should not appear anymore there at the top
                                changeview();
                                event.preventDefault();

                                });
                           getline();
                           }
                });


                function getline() {

                        canvas= new Raphael(document.getElementById('canvas_container'), window.innerWidth, window.innerHeight - 230);

                        $.ajax({
                                type: 'POST',
                                url: 'polls/blob',
                                dataType: 'json',
                                data: {poll_id: <%= @poll.id %>},
                                success: function(json, status, xhr){
        
                                var splitted = json.message.split(","); 

                                var maxY =150;
                                var minY = -150;
                                var numvaluesY = splitted.length;			


                                rangeY = Math.abs(maxY)+Math.abs(minY);
                                segmentY = canvas.height/rangeY;
                                zero = canvas.height/2;	

                                var timeline = 3*3600;
                                var interval = 10 ;  // in seconds
                                var numpointsX = timeline/interval;
                                 segmentX = canvas.width/numpointsX;


                                var prevpoint=zero;
                                var prevX=0;
                                var prevY = zero;
                                var endY =0;
                                

                                for (var i=0;i<numvaluesY;i++){	
                                        var valY = splitted[i];	
                                        endY = zero - (valY * segmentY);
                                        endX = prevX+segmentX
                                         var tetronimo = canvas.path("M"+" "+ prevX+" "+prevY+" L "+endX+" "+endY);  
                                        tetronimo.attr({fill: 'green', stroke: 'green', 'stroke-width': 1});  
                                        prevX = endX;
                                        prevY=endY;
                                }
                                lastpointX = prevX;
                                lastpointY = endY;
                                }
                        });
	                linetimer = setInterval(function(){update()},10000);

                        }
                

			function onSubmit(opt){
				$.ajax({
                        		type: 'POST',
                        		url: 'clicks',
                        		data: {poll_id: <%= @poll.id %>,
					       option:opt,
					       loc:address,
					       country:country },
					success:function(data, textStatus) {
						//document.getElementById("messages").innerHTML="<p style='color:red'>Thanks Buddy !! </p>";
                                                $.jGrowl("Thanks Buddy !!!");
    					},
    					error:function(request, textStatus, errorThrown) {
						//document.getElementById("messages").innerHTML="<p style='color:red'>Chill Buddy !!  Get some fresh air </p>";
					}
                        	});

			}

		        function getmap(){	
				$.ajax({
                        		type: 'GET',
                        		url: 'clicks/getcountryclicks.js',
                        		data: {poll_id: <%= @poll.id %>},
					success:function(data, textStatus) {
						var cclick = JSON.parse(data);
						drawmap(cclick);
					},
    					error:function(request, textStatus, errorThrown) {
						document.getElementById("messages").innerHTML="<p style='color:red'>Chill Buddy !!  Get some fresh air </p>";
					}
                        	});

				//clearInterval(linetimer);
				maptimer = setInterval(function(){updatemap()},60000);

			}
		        
			function updatemap(){	
				$.ajax({
                        		type: 'GET',
                        		url: 'clicks/getcountryclickupdates.js',
                        		data: {poll_id: <%= @poll.id %>},
					success:function(data, textStatus) {
						var cclick = JSON.parse(data);
						if(cclick.length > 0)
							drawmap(cclick);
					},
    					error:function(request, textStatus, errorThrown) {
						document.getElementById("messages").innerHTML="<p style='color:red'>Chill Buddy !!  Get some fresh air </p>";
					}
                        	});
				
			}
		
			var countryclicks_max = 50;
			var countryclicks_min = 1;
			var color_inc =Math.round( 200 /(countryclicks_max-countryclicks_min));			
	
			function drawmap(countryclickdata){
				for(var i=0;i<countryclickdata.length;i++){
					visitedCountries[countryclickdata[i].country] = countryclickdata[i].clicks;
				}	
				 var paper = Raphael('canvas_container', window.innerWidth, window.innerHeight - 230);
    				  var map = getPaths(paper, {
      								fill: "#333",
        							stroke: "#000",
							        "stroke-width": .5,
							        "stroke-linejoin": "round"
						    });

  				  for (var countryCode in map) {

        				(function(countryPath, countryCode) {
            					if (visitedCountries[countryCode] > 0 ) {
							var gbvalue = 200 - (visitedCountries[countryCode]*color_inc )	;
                					countryPath.attr({
                    						fill: 'rgb('+gbvalue+',255,'+gbvalue+')'
               						 });
					         }
            					else if (visitedCountries[countryCode] < 0 ) {
							var gbvalue = 200 - (Math.abs(visitedCountries[countryCode])*color_inc )	;
                					countryPath.attr({
                    						fill: 'rgb('+gbvalue+','+gbvalue+',255)'
                    						
               						 });
					         }
          					  else {
               						 countryPath.attr({
                   						 opacity: 0.6
               						 });
               						 countryPath.color = Raphael.getColor();

               						 countryPath[0].onmouseover = function() {
				
								 countryPath.animate({
                        						fill: 'yellow',
                        						stroke: countryPath.color
                    						}, 300);
                   					 paper.safari();
                					};
               						 countryPath[0].onmouseout = function() {
                 						 countryPath.animate({
                       							 fill: "#333",
                       							 stroke: "#000"
                    						}, 300);
                  					  	paper.safari();
                					};
            					}
        				})(map[countryCode], countryCode);
    				}
			}				 
			
                </script>
<div class = "question" > <%= @poll.question %> </div>
<div id = "canvas_container" ></div>
<div id = "mapHolder" ></div>
<div id = 'data_set'></div>
<div class="option"> 
<input type="button" value = "<%= @poll.option2 %>" id ="option2" onclick="onSubmit(2)">
<input type="button" value = "<%= @poll.option1 %>" id ="option1" onclick="onSubmit(1)">
</div>
